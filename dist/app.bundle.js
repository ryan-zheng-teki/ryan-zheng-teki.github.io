!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=122)}([function(e,t,r){"use strict";e.exports=r(55)},function(e,t,r){"use strict";r.d(t,"c",(function(){return i})),r.d(t,"a",(function(){return o})),r.d(t,"e",(function(){return a})),r.d(t,"b",(function(){return s})),r.d(t,"d",(function(){return u})),r.d(t,"f",(function(){return l}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])})(e,t)};function i(e,t){function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}var o=function(){return(o=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var i in t=arguments[r])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var r={};for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(e);i<n.length;i++)t.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(e,n[i])&&(r[n[i]]=e[n[i]])}return r}function s(e,t,r,n){return new(r||(r=Promise))((function(i,o){function a(e){try{u(n.next(e))}catch(e){o(e)}}function s(e){try{u(n.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}u((n=n.apply(e,t||[])).next())}))}function u(e,t){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=a.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function l(){for(var e=0,t=0,r=arguments.length;t<r;t++)e+=arguments[t].length;var n=Array(e),i=0;for(t=0;t<r;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)n[i]=o[a];return n}},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return B})),r.d(t,"b",(function(){return d})),r.d(t,"c",(function(){return T})),r.d(t,"d",(function(){return V})),r.d(t,"e",(function(){return K})),r.d(t,"f",(function(){return G})),r.d(t,"g",(function(){return P})),r.d(t,"h",(function(){return I})),r.d(t,"i",(function(){return w})),r.d(t,"j",(function(){return R})),r.d(t,"k",(function(){return S})),r.d(t,"l",(function(){return D})),r.d(t,"m",(function(){return C})),r.d(t,"n",(function(){return N})),r.d(t,"o",(function(){return A})),r.d(t,"p",(function(){return p})),r.d(t,"q",(function(){return X})),r.d(t,"r",(function(){return x})),r.d(t,"s",(function(){return E})),r.d(t,"t",(function(){return m})),r.d(t,"u",(function(){return v})),r.d(t,"v",(function(){return y})),r.d(t,"w",(function(){return g})),r.d(t,"x",(function(){return W})),r.d(t,"y",(function(){return $})),r.d(t,"z",(function(){return Z})),r.d(t,"A",(function(){return te})),r.d(t,"B",(function(){return re})),r.d(t,"C",(function(){return z})),r.d(t,"D",(function(){return Q})),r.d(t,"E",(function(){return h})),r.d(t,"F",(function(){return _})),r.d(t,"G",(function(){return c})),r.d(t,"H",(function(){return b})),r.d(t,"I",(function(){return J}));var n=r(5),i=r(3),o=r(1),a=r(51),s=r.n(a);r(6);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t,r,n){if(function(e){return"IntValue"===e.kind}(r)||function(e){return"FloatValue"===e.kind}(r))e[t.value]=Number(r.value);else if(function(e){return"BooleanValue"===e.kind}(r)||function(e){return"StringValue"===e.kind}(r))e[t.value]=r.value;else if(function(e){return"ObjectValue"===e.kind}(r)){var o={};r.fields.map((function(e){return l(o,e.name,e.value,n)})),e[t.value]=o}else if(function(e){return"Variable"===e.kind}(r)){var a=(n||{})[r.name.value];e[t.value]=a}else if(function(e){return"ListValue"===e.kind}(r))e[t.value]=r.values.map((function(e){var r={};return l(r,t,e,n),r[t.value]}));else if(function(e){return"EnumValue"===e.kind}(r))e[t.value]=r.value;else{if(!function(e){return"NullValue"===e.kind}(r))throw new i.a(17);e[t.value]=null}}function c(e,t){var r=null;e.directives&&(r={},e.directives.forEach((function(e){r[e.name.value]={},e.arguments&&e.arguments.forEach((function(n){var i=n.name,o=n.value;return l(r[e.name.value],i,o,t)}))})));var n=null;return e.arguments&&e.arguments.length&&(n={},e.arguments.forEach((function(e){var r=e.name,i=e.value;return l(n,r,i,t)}))),p(e.name.value,n,r)}var f=["connection","include","skip","client","rest","export"];function p(e,t,r){if(r&&r.connection&&r.connection.key){if(r.connection.filter&&r.connection.filter.length>0){var n=r.connection.filter?r.connection.filter:[];n.sort();var i=t,o={};return n.forEach((function(e){o[e]=i[e]})),r.connection.key+"("+JSON.stringify(o)+")"}return r.connection.key}var a=e;if(t){var u=s()(t);a+="("+u+")"}return r&&Object.keys(r).forEach((function(e){-1===f.indexOf(e)&&(r[e]&&Object.keys(r[e]).length?a+="@"+e+"("+JSON.stringify(r[e])+")":a+="@"+e)})),a}function d(e,t){if(e.arguments&&e.arguments.length){var r={};return e.arguments.forEach((function(e){var n=e.name,i=e.value;return l(r,n,i,t)})),r}return null}function h(e){return e.alias?e.alias.value:e.name.value}function m(e){return"Field"===e.kind}function y(e){return"InlineFragment"===e.kind}function v(e){return e&&"id"===e.type&&"boolean"==typeof e.generated}function b(e,t){return void 0===t&&(t=!1),Object(o.a)({type:"id",generated:t},"string"==typeof e?{id:e,typename:void 0}:e)}function g(e){return null!=e&&"object"===u(e)&&"json"===e.type}function w(e,t){if(e.directives&&e.directives.length){var r={};return e.directives.forEach((function(e){r[e.name.value]=d(e,t)})),r}return null}function _(e,t){return void 0===t&&(t={}),(r=e.directives,r?r.filter(k).map((function(e){var t=e.arguments;e.name.value,Object(i.b)(t&&1===t.length,2);var r=t[0];Object(i.b)(r.name&&"if"===r.name.value,3);var n=r.value;return Object(i.b)(n&&("Variable"===n.kind||"BooleanValue"===n.kind),4),{directive:e,ifArgument:r}})):[]).every((function(e){var r=e.directive,n=e.ifArgument,o=!1;return"Variable"===n.value.kind?(o=t[n.value.name.value],Object(i.b)(void 0!==o,1)):o=n.value.value,"skip"===r.name.value?!o:o}));var r}function E(e,t){return function(e){var t=[];return Object(n.visit)(e,{Directive:function(e){t.push(e.name.value)}}),t}(t).some((function(t){return e.indexOf(t)>-1}))}function x(e){return e&&E(["client"],e)&&E(["export"],e)}function k(e){var t=e.name.value;return"skip"===t||"include"===t}function S(e,t){var r=t,n=[];return e.definitions.forEach((function(e){if("OperationDefinition"===e.kind)throw new i.a(5);"FragmentDefinition"===e.kind&&n.push(e)})),void 0===r&&(Object(i.b)(1===n.length,6),r=n[0].name.value),Object(o.a)(Object(o.a)({},e),{definitions:Object(o.f)([{kind:"OperationDefinition",operation:"query",selectionSet:{kind:"SelectionSet",selections:[{kind:"FragmentSpread",name:{kind:"Name",value:r}}]}}],e.definitions)})}function T(e){for(var t=[],r=1;r<arguments.length;r++)t[r-1]=arguments[r];return t.forEach((function(t){null!=t&&Object.keys(t).forEach((function(r){e[r]=t[r]}))})),e}function O(e){Object(i.b)(e&&"Document"===e.kind,8);var t=e.definitions.filter((function(e){return"FragmentDefinition"!==e.kind})).map((function(e){if("OperationDefinition"!==e.kind)throw new i.a(9);return e}));return Object(i.b)(t.length<=1,10),e}function C(e){return O(e),e.definitions.filter((function(e){return"OperationDefinition"===e.kind}))[0]}function N(e){return e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&e.name})).map((function(e){return e.name.value}))[0]||null}function R(e){return e.definitions.filter((function(e){return"FragmentDefinition"===e.kind}))}function A(e){var t=C(e);return Object(i.b)(t&&"query"===t.operation,12),t}function D(e){var t;O(e);for(var r=0,n=e.definitions;r<n.length;r++){var o=n[r];if("OperationDefinition"===o.kind){var a=o.operation;if("query"===a||"mutation"===a||"subscription"===a)return o}"FragmentDefinition"!==o.kind||t||(t=o)}if(t)return t;throw new i.a(16)}function P(e){void 0===e&&(e=[]);var t={};return e.forEach((function(e){t[e.name.value]=e})),t}function I(e){if(e&&e.variableDefinitions&&e.variableDefinitions.length){var t=e.variableDefinitions.filter((function(e){return e.defaultValue})).map((function(e){var t=e.variable,r=e.defaultValue,n={};return l(n,t.name,r),n}));return T.apply(void 0,Object(o.f)([{}],t))}return{}}function j(e,t,r){var n=0;return e.forEach((function(r,i){t.call(this,r,i,e)&&(e[n++]=r)}),r),e.length=n,e}var q={kind:"Field",name:{kind:"Name",value:"__typename"}};function L(e){return function e(t,r){return t.selectionSet.selections.every((function(t){return"FragmentSpread"===t.kind&&e(r[t.name.value],r)}))}(C(e)||function(e){Object(i.b)("Document"===e.kind,13),Object(i.b)(e.definitions.length<=1,14);var t=e.definitions[0];return Object(i.b)("FragmentDefinition"===t.kind,15),t}(e),P(R(e)))?null:e}function M(e){return function(t){return e.some((function(e){return e.name&&e.name===t.name.value||e.test&&e.test(t)}))}}function F(e,t){var r=Object.create(null),i=[],a=Object.create(null),s=[],u=L(Object(n.visit)(t,{Variable:{enter:function(e,t,n){"VariableDefinition"!==n.kind&&(r[e.name.value]=!0)}},Field:{enter:function(t){if(e&&t.directives&&(e.some((function(e){return e.remove}))&&t.directives&&t.directives.some(M(e))))return t.arguments&&t.arguments.forEach((function(e){"Variable"===e.value.kind&&i.push({name:e.value.name.value})})),t.selectionSet&&function e(t){var r=[];return t.selections.forEach((function(t){(m(t)||y(t))&&t.selectionSet?e(t.selectionSet).forEach((function(e){return r.push(e)})):"FragmentSpread"===t.kind&&r.push(t)})),r}(t.selectionSet).forEach((function(e){s.push({name:e.name.value})})),null}},FragmentSpread:{enter:function(e){a[e.name.value]=!0}},Directive:{enter:function(t){if(M(e)(t))return null}}}));return u&&j(i,(function(e){return!r[e.name]})).length&&(u=function(e,t){var r=function(e){return function(t){return e.some((function(e){return t.value&&"Variable"===t.value.kind&&t.value.name&&(e.name===t.value.name.value||e.test&&e.test(t))}))}}(e);return L(Object(n.visit)(t,{OperationDefinition:{enter:function(t){return Object(o.a)(Object(o.a)({},t),{variableDefinitions:t.variableDefinitions.filter((function(t){return!e.some((function(e){return e.name===t.variable.name.value}))}))})}},Field:{enter:function(t){if(e.some((function(e){return e.remove}))){var n=0;if(t.arguments.forEach((function(e){r(e)&&(n+=1)})),1===n)return null}}},Argument:{enter:function(e){if(r(e))return null}}}))}(i,u)),u&&j(s,(function(e){return!a[e.name]})).length&&(u=function(e,t){function r(t){if(e.some((function(e){return e.name===t.name.value})))return null}return L(Object(n.visit)(t,{FragmentSpread:{enter:r},FragmentDefinition:{enter:r}}))}(s,u)),u}function B(e){return Object(n.visit)(O(e),{SelectionSet:{enter:function(e,t,r){if(!r||"OperationDefinition"!==r.kind){var n=e.selections;if(n)if(!n.some((function(e){return m(e)&&("__typename"===e.name.value||0===e.name.value.lastIndexOf("__",0))}))){var i=r;if(!(m(i)&&i.directives&&i.directives.some((function(e){return"export"===e.name.value}))))return Object(o.a)(Object(o.a)({},e),{selections:Object(o.f)(n,[q])})}}}}})}var U={test:function(e){var t="connection"===e.name.value;return t&&(!e.arguments||e.arguments.some((function(e){return"key"===e.name.value}))),t}};function Q(e){return F([U],O(e))}function V(e){return"query"===D(e).operation?e:Object(n.visit)(e,{OperationDefinition:{enter:function(e){return Object(o.a)(Object(o.a)({},e),{operation:"query"})}}})}function z(e){O(e);var t=F([{test:function(e){return"client"===e.name.value},remove:!0}],e);return t&&(t=Object(n.visit)(t,{FragmentDefinition:{enter:function(e){if(e.selectionSet&&e.selectionSet.selections.every((function(e){return m(e)&&"__typename"===e.name.value})))return null}}})),t}var K="function"==typeof WeakMap&&!("object"===("undefined"==typeof navigator?"undefined":u(navigator))&&"ReactNative"===navigator.product),H=Object.prototype.toString;function G(e){return function e(t,r){switch(H.call(t)){case"[object Array]":if(r.has(t))return r.get(t);var n=t.slice(0);return r.set(t,n),n.forEach((function(t,i){n[i]=e(t,r)})),n;case"[object Object]":if(r.has(t))return r.get(t);var i=Object.create(Object.getPrototypeOf(t));return r.set(t,i),Object.keys(t).forEach((function(n){i[n]=e(t[n],r)})),i;default:return t}}(e,new Map)}function Y(t){return(void 0!==e?"production":"development")===t}function W(){return!0===Y("production")}function $(){return!0===Y("test")}function J(e){try{return e()}catch(e){console.error&&console.error(e)}}function X(e){return e.errors&&e.errors.length}function Z(e){if((!0===Y("development")||$())&&!("function"==typeof Symbol&&"string"==typeof Symbol("")))return function e(t){return Object.freeze(t),Object.getOwnPropertyNames(t).forEach((function(r){null===t[r]||"object"!==u(t[r])&&"function"!=typeof t[r]||Object.isFrozen(t[r])||e(t[r])})),t}(e);return e}var ee=Object.prototype.hasOwnProperty;function te(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return re(e)}function re(e){var t=e[0]||{},r=e.length;if(r>1){var n=[];t=oe(t,n);for(var i=1;i<r;++i)t=ie(t,e[i],n)}return t}function ne(e){return null!==e&&"object"===u(e)}function ie(e,t,r){return ne(t)&&ne(e)?(Object.isExtensible&&!Object.isExtensible(e)&&(e=oe(e,r)),Object.keys(t).forEach((function(n){var i=t[n];if(ee.call(e,n)){var o=e[n];i!==o&&(e[n]=ie(oe(o,r),i,r))}else e[n]=i})),e):t}function oe(e,t){return null!==e&&"object"===u(e)&&t.indexOf(e)<0&&(e=Array.isArray(e)?e.slice(0):Object(o.a)({__proto__:Object.getPrototypeOf(e)},e),t.push(e)),e}Object.create({})}).call(this,r(9))},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return u}));var n=r(1);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var o=Object.setPrototypeOf,a=void 0===o?function(e,t){return e.__proto__=t,e}:o,s=function(e){function t(r){void 0===r&&(r="Invariant Violation");var n=e.call(this,"number"==typeof r?"Invariant Violation: "+r+" (see https://github.com/apollographql/invariant-packages)":r)||this;return n.framesToPop=1,n.name="Invariant Violation",a(n,t.prototype),n}return Object(n.c)(t,e),t}(Error);function u(e,t){if(!e)throw new s(t)}function l(e){return function(){return console[e].apply(console,arguments)}}!function(e){e.warn=l("warn"),e.error=l("error")}(u||(u={}));var c={env:{}};if("object"===(void 0===e?"undefined":i(e)))c=e;else try{Function("stub","process = stub")(c)}catch(e){}}).call(this,r(9))},function(e,t,r){e.exports=r(63)()},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.visit=function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a,n=void 0,l=Array.isArray(e),c=[e],f=-1,p=[],d=void 0,h=void 0,m=void 0,y=[],v=[],b=e;do{var g=++f===c.length,w=g&&0!==p.length;if(g){if(h=0===v.length?void 0:y[y.length-1],d=m,m=v.pop(),w){if(l)d=d.slice();else{for(var _={},E=0,x=Object.keys(d);E<x.length;E++){var k=x[E];_[k]=d[k]}d=_}for(var S=0,T=0;T<p.length;T++){var O=p[T][0],C=p[T][1];l&&(O-=S),l&&null===C?(d.splice(O,1),S++):d[O]=C}}f=n.index,c=n.keys,p=n.edits,l=n.inArray,n=n.prev}else{if(h=m?l?f:c[f]:void 0,null==(d=m?m[h]:b))continue;m&&y.push(h)}var N,R=void 0;if(!Array.isArray(d)){if(!(0,o.isNode)(d))throw new Error("Invalid AST Node: ".concat((0,i.default)(d),"."));var A=u(t,d.kind,g);if(A){if((R=A.call(t,d,h,m,y,v))===s)break;if(!1===R){if(!g){y.pop();continue}}else if(void 0!==R&&(p.push([h,R]),!g)){if(!(0,o.isNode)(R)){y.pop();continue}d=R}}}if(void 0===R&&w&&p.push([h,d]),g)y.pop();else n={inArray:l,index:f,keys:c,edits:p,prev:n},l=Array.isArray(d),c=l?d:null!==(N=r[d.kind])&&void 0!==N?N:[],f=-1,p=[],m&&v.push(m),m=d}while(void 0!==n);0!==p.length&&(b=p[p.length-1][1]);return b},t.visitInParallel=function(e){var t=new Array(e.length);return{enter:function(r){for(var n=0;n<e.length;n++)if(null==t[n]){var i=u(e[n],r.kind,!1);if(i){var o=i.apply(e[n],arguments);if(!1===o)t[n]=r;else if(o===s)t[n]=s;else if(void 0!==o)return o}}},leave:function(r){for(var n=0;n<e.length;n++)if(null==t[n]){var i=u(e[n],r.kind,!0);if(i){var o=i.apply(e[n],arguments);if(o===s)t[n]=s;else if(void 0!==o&&!1!==o)return o}}else t[n]===r&&(t[n]=null)}}},t.getVisitFn=u,t.BREAK=t.QueryDocumentKeys=void 0;var n,i=(n=r(22))&&n.__esModule?n:{default:n},o=r(16);var a={Name:[],Document:["definitions"],OperationDefinition:["name","variableDefinitions","directives","selectionSet"],VariableDefinition:["variable","type","defaultValue","directives"],Variable:["name"],SelectionSet:["selections"],Field:["alias","name","arguments","directives","selectionSet"],Argument:["name","value"],FragmentSpread:["name","directives"],InlineFragment:["typeCondition","directives","selectionSet"],FragmentDefinition:["name","variableDefinitions","typeCondition","directives","selectionSet"],IntValue:[],FloatValue:[],StringValue:[],BooleanValue:[],NullValue:[],EnumValue:[],ListValue:["values"],ObjectValue:["fields"],ObjectField:["name","value"],Directive:["name","arguments"],NamedType:["name"],ListType:["type"],NonNullType:["type"],SchemaDefinition:["description","directives","operationTypes"],OperationTypeDefinition:["type"],ScalarTypeDefinition:["description","name","directives"],ObjectTypeDefinition:["description","name","interfaces","directives","fields"],FieldDefinition:["description","name","arguments","type","directives"],InputValueDefinition:["description","name","type","defaultValue","directives"],InterfaceTypeDefinition:["description","name","interfaces","directives","fields"],UnionTypeDefinition:["description","name","directives","types"],EnumTypeDefinition:["description","name","directives","values"],EnumValueDefinition:["description","name","directives"],InputObjectTypeDefinition:["description","name","directives","fields"],DirectiveDefinition:["description","name","arguments","locations"],SchemaExtension:["directives","operationTypes"],ScalarTypeExtension:["name","directives"],ObjectTypeExtension:["name","interfaces","directives","fields"],InterfaceTypeExtension:["name","interfaces","directives","fields"],UnionTypeExtension:["name","directives","types"],EnumTypeExtension:["name","directives","values"],InputObjectTypeExtension:["name","directives","fields"]};t.QueryDocumentKeys=a;var s=Object.freeze({});function u(e,t,r){var n=e[t];if(n){if(!r&&"function"==typeof n)return n;var i=r?n.leave:n.enter;if("function"==typeof i)return i}else{var o=r?e.leave:e.enter;if(o){if("function"==typeof o)return o;var a=o[t];if("function"==typeof a)return a}}}t.BREAK=s},function(e,t,r){"use strict";r.d(t,"a",(function(){return s}));var n=Object.prototype,i=n.toString,o=n.hasOwnProperty,a=new Map;function s(e,t){try{return function e(t,r){if(t===r)return!0;var n=i.call(t),a=i.call(r);if(n!==a)return!1;switch(n){case"[object Array]":if(t.length!==r.length)return!1;case"[object Object]":if(u(t,r))return!0;var s=Object.keys(t),l=Object.keys(r),c=s.length;if(c!==l.length)return!1;for(var f=0;f<c;++f)if(!o.call(r,s[f]))return!1;for(f=0;f<c;++f){var p=s[f];if(!e(t[p],r[p]))return!1}return!0;case"[object Error]":return t.name===r.name&&t.message===r.message;case"[object Number]":if(t!=t)return r!=r;case"[object Boolean]":case"[object Date]":return+t==+r;case"[object RegExp]":case"[object String]":return t==""+r;case"[object Map]":case"[object Set]":if(t.size!==r.size)return!1;if(u(t,r))return!0;for(var d=t.entries(),h="[object Map]"===n;;){var m=d.next();if(m.done)break;var y=m.value,v=y[0],b=y[1];if(!r.has(v))return!1;if(h&&!e(b,r.get(v)))return!1}return!0}return!1}(e,t)}finally{a.clear()}}function u(e,t){var r=a.get(e);if(r){if(r.has(t))return!0}else a.set(e,r=new Set);return r.add(t),!1}},function(e,t,r){var n=r(31),i=r(33);function o(t,r){return delete e.exports[t],e.exports[t]=r,r}e.exports={Parser:n,Tokenizer:r(32),ElementType:r(8),DomHandler:i,get FeedHandler(){return o("FeedHandler",r(89))},get Stream(){return o("Stream",r(103))},get WritableStream(){return o("WritableStream",r(40))},get ProxyHandler(){return o("ProxyHandler",r(110))},get DomUtils(){return o("DomUtils",r(35))},get CollectingHandler(){return o("CollectingHandler",r(111))},DefaultHandler:i,get RssHandler(){return o("RssHandler",this.FeedHandler)},parseDOM:function(e,t){var r=new i(t);return new n(r,t).end(e),r.dom},parseFeed:function(t,r){var i=new e.exports.FeedHandler(r);return new n(i,r).end(t),i.dom},createDomStream:function(e,t,r){var o=new i(e,t,r);return new n(o,t)},EVENTS:{attribute:2,cdatastart:0,cdataend:0,text:1,processinginstruction:2,comment:1,commentend:0,closetag:1,opentag:2,opentagname:1,error:1,end:0}}},function(e,t){e.exports={Text:"text",Directive:"directive",Comment:"comment",Script:"script",Style:"style",Tag:"tag",CDATA:"cdata",Doctype:"doctype",isTag:function(e){return"tag"===e.type||"script"===e.type||"style"===e.type}}},function(e,t){var r,n,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(r===setTimeout)return setTimeout(e,0);if((r===o||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:o}catch(e){r=o}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var u,l=[],c=!1,f=-1;function p(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&d())}function d(){if(!c){var e=s(p);c=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,c=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];l.push(new h(e,t)),1!==l.length||c||s(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=m,i.addListener=m,i.once=m,i.off=m,i.removeListener=m,i.removeAllListeners=m,i.emit=m,i.prependListener=m,i.prependOnceListener=m,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},function(e,t,r){var n=r(67).parse;function i(e){return e.replace(/[\s,]+/g," ").trim()}var o={},a={};var s=!0;var u=!1;function l(e){var t=i(e);if(o[t])return o[t];var r=n(e,{experimentalFragmentVariables:u});if(!r||"Document"!==r.kind)throw new Error("Not a valid GraphQL document.");return r=function e(t,r){var n=Object.prototype.toString.call(t);if("[object Array]"===n)return t.map((function(t){return e(t,r)}));if("[object Object]"!==n)throw new Error("Unexpected input.");r&&t.loc&&delete t.loc,t.loc&&(delete t.loc.startToken,delete t.loc.endToken);var i,o,a,s=Object.keys(t);for(i in s)s.hasOwnProperty(i)&&(o=t[s[i]],"[object Object]"!==(a=Object.prototype.toString.call(o))&&"[object Array]"!==a||(t[s[i]]=e(o,!0)));return t}(r=function(e){for(var t,r={},n=[],o=0;o<e.definitions.length;o++){var u=e.definitions[o];if("FragmentDefinition"===u.kind){var l=u.name.value,c=i((t=u.loc).source.body.substring(t.start,t.end));a.hasOwnProperty(l)&&!a[l][c]?(s&&console.warn("Warning: fragment with name "+l+" already exists.\ngraphql-tag enforces all fragment names across your application to be unique; read more about\nthis in the docs: http://dev.apollodata.com/core/fragments.html#unique-names"),a[l][c]=!0):a.hasOwnProperty(l)||(a[l]={},a[l][c]=!0),r[c]||(r[c]=!0,n.push(u))}else n.push(u)}return e.definitions=n,e}(r),!1),o[t]=r,r}function c(){for(var e=Array.prototype.slice.call(arguments),t=e[0],r="string"==typeof t?t:t[0],n=1;n<e.length;n++)e[n]&&e[n].kind&&"Document"===e[n].kind?r+=e[n].loc.source.body:r+=e[n],r+=t[n];return l(r)}c.default=c,c.resetCaches=function(){o={},a={}},c.disableFragmentWarnings=function(){s=!1},c.enableExperimentalFragmentVariables=function(){u=!0},c.disableExperimentalFragmentVariables=function(){u=!1},e.exports=c},,function(e,t,r){"use strict";var n,i=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},o=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),a=[];function s(e){for(var t=-1,r=0;r<a.length;r++)if(a[r].identifier===e){t=r;break}return t}function u(e,t){for(var r={},n=[],i=0;i<e.length;i++){var o=e[i],u=t.base?o[0]+t.base:o[0],l=r[u]||0,c="".concat(u," ").concat(l);r[u]=l+1;var f=s(c),p={css:o[1],media:o[2],sourceMap:o[3]};-1!==f?(a[f].references++,a[f].updater(p)):a.push({identifier:c,updater:y(p,t),references:1}),n.push(c)}return n}function l(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var i=r.nc;i&&(n.nonce=i)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var a=o(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var c,f=(c=[],function(e,t){return c[e]=t,c.filter(Boolean).join("\n")});function p(e,t,r,n){var i=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=f(t,i);else{var o=document.createTextNode(i),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(o,a[t]):e.appendChild(o)}}function d(e,t,r){var n=r.css,i=r.media,o=r.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),o&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,m=0;function y(e,t){var r,n,i;if(t.singleton){var o=m++;r=h||(h=l(t)),n=p.bind(null,r,o,!1),i=p.bind(null,r,o,!0)}else r=l(t),n=d.bind(null,r,t),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else i()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=i());var r=u(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var i=s(r[n]);a[i].references--}for(var o=u(e,t),l=0;l<r.length;l++){var c=s(r[l]);0===a[c].references&&(a[c].updater(),a.splice(c,1))}r=o}}}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var i=(a=n,s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(u," */")),o=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(o).concat([i]).join("\n")}var a,s,u;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(n)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(i[a]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);n&&i[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),t.push(u))}},t}},function(e,t){function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"===("undefined"==typeof window?"undefined":r(window))&&(n=window)}e.exports=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNode=function(e){return null!=e&&"string"==typeof e.kind},t.Token=t.Location=void 0;var n,i=(n=r(75))&&n.__esModule?n:{default:n};var o=function(e,t,r){this.start=e.start,this.end=t.end,this.startToken=e,this.endToken=t,this.source=r};t.Location=o,(0,i.default)(o,(function(){return{start:this.start,end:this.end}}));var a=function(e,t,r,n,i,o,a){this.kind=e,this.start=t,this.end=r,this.line=n,this.column=i,this.value=a,this.prev=o,this.next=null};t.Token=a,(0,i.default)(a,(function(){return{kind:this.kind,value:this.value,line:this.line,column:this.column}}))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e.filter((function(e){return!(0,n.default)(e)})).map((function(e,r){var n=void 0;return"function"!=typeof t||null!==(n=t(e,r))&&!n?(0,i.default)(e,r,t):n}))};var n=o(r(80)),i=o(r(30));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,r){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(65);e.exports=h,e.exports.parse=a,e.exports.compile=function(e,t){return u(a(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function a(e,t){for(var r,n=[],i=0,a=0,s="",u=t&&t.delimiter||"/";null!=(r=o.exec(e));){var f=r[0],p=r[1],d=r.index;if(s+=e.slice(a,d),a=d+f.length,p)s+=p[1];else{var h=e[a],m=r[2],y=r[3],v=r[4],b=r[5],g=r[6],w=r[7];s&&(n.push(s),s="");var _=null!=m&&null!=h&&h!==m,E="+"===g||"*"===g,x="?"===g||"*"===g,k=r[2]||u,S=v||b;n.push({name:y||i++,prefix:m||"",delimiter:k,optional:x,repeat:E,partial:_,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(k)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&n.push(s),n}function s(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var r=new Array(e.length),o=0;o<e.length;o++)"object"===n(e[o])&&(r[o]=new RegExp("^(?:"+e[o].pattern+")$",p(t)));return function(t,n){for(var o="",a=t||{},u=(n||{}).pretty?s:encodeURIComponent,l=0;l<e.length;l++){var c=e[l];if("string"!=typeof c){var f,p=a[c.name];if(null==p){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(i(p)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(p)+"`");if(0===p.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var d=0;d<p.length;d++){if(f=u(p[d]),!r[l].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===d?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(p).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(p),!r[l].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');o+=c.prefix+f}}else o+=c}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function f(e,t){return e.keys=t,e}function p(e){return e&&e.sensitive?"":"i"}function d(e,t,r){i(t)||(r=t||r,t=[]);for(var n=(r=r||{}).strict,o=!1!==r.end,a="",s=0;s<e.length;s++){var u=e[s];if("string"==typeof u)a+=l(u);else{var c=l(u.prefix),d="(?:"+u.pattern+")";t.push(u),u.repeat&&(d+="(?:"+c+d+")*"),a+=d=u.optional?u.partial?c+"("+d+")?":"(?:"+c+"("+d+"))?":c+"("+d+")"}}var h=l(r.delimiter||"/"),m=a.slice(-h.length)===h;return n||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=o?"$":n&&m?"":"(?="+h+"|$)",f(new RegExp("^"+a,p(r)),t)}function h(e,t,r){return i(t)||(r=t||r,t=[]),r=r||{},e instanceof RegExp?function(e,t){var r=e.source.match(/\((?!\?)/g);if(r)for(var n=0;n<r.length;n++)t.push({name:n,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return f(e,t)}(e,t):i(e)?function(e,t,r){for(var n=[],i=0;i<e.length;i++)n.push(h(e[i],t,r).source);return f(new RegExp("(?:"+n.join("|")+")",p(r)),t)}(e,t,r):function(e,t,r){return d(a(e,r),t,r)}(e,t,r)}},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,s,u=a(e),l=1;l<arguments.length;l++){for(var c in r=Object(arguments[l]))i.call(r,c)&&(u[c]=r[c]);if(n){s=n(r);for(var f=0;f<s.length;f++)o.call(r,s[f])&&(u[s[f]]=r[s[f]])}}return u}},function(e,t,r){"use strict";e.exports=r(66)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return a(e,[])};var n,i=(n=r(23))&&n.__esModule?n:{default:n};function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){switch(o(e)){case"string":return JSON.stringify(e);case"function":return e.name?"[function ".concat(e.name,"]"):"[function]";case"object":return null===e?"null":function(e,t){if(-1!==t.indexOf(e))return"[Circular]";var r=[].concat(t,[e]),n=function(e){var t=e[String(i.default)];if("function"==typeof t)return t;if("function"==typeof e.inspect)return e.inspect}(e);if(void 0!==n){var o=n.call(e);if(o!==e)return"string"==typeof o?o:a(o,r)}else if(Array.isArray(e))return function(e,t){if(0===e.length)return"[]";if(t.length>2)return"[Array]";for(var r=Math.min(10,e.length),n=e.length-r,i=[],o=0;o<r;++o)i.push(a(e[o],t));1===n?i.push("... 1 more item"):n>1&&i.push("... ".concat(n," more items"));return"["+i.join(", ")+"]"}(e,r);return function(e,t){var r=Object.keys(e);if(0===r.length)return"{}";if(t.length>2)return"["+function(e){var t=Object.prototype.toString.call(e).replace(/^\[object /,"").replace(/]$/,"");if("Object"===t&&"function"==typeof e.constructor){var r=e.constructor.name;if("string"==typeof r&&""!==r)return r}return t}(e)+"]";return"{ "+r.map((function(r){return r+": "+a(e[r],t)})).join(", ")+" }"}(e,r)}(e,t);default:return String(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var n="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):void 0;t.default=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!Boolean(e))throw new Error(t)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.syntaxError=function(e,t,r){return new n.GraphQLError("Syntax Error: ".concat(r),void 0,e,[t])};var n=r(68)},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SYMBOL_TO_STRING_TAG=t.SYMBOL_ASYNC_ITERATOR=t.SYMBOL_ITERATOR=void 0;var n="function"==typeof Symbol?Symbol.iterator:"@@iterator";t.SYMBOL_ITERATOR=n;var i="function"==typeof Symbol?Symbol.asyncIterator:"@@asyncIterator";t.SYMBOL_ASYNC_ITERATOR=i;var o="function"==typeof Symbol?Symbol.toStringTag:"@@toStringTag";t.SYMBOL_TO_STRING_TAG=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getLocation=function(e,t){var r,n=/\r\n|[\n\r]/g,i=1,o=t+1;for(;(r=n.exec(e.body))&&r.index<t;)i+=1,o=t+1-(r.index+r[0].length);return{line:i,column:o}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.TokenKind=void 0;var n=Object.freeze({SOF:"<SOF>",EOF:"<EOF>",BANG:"!",DOLLAR:"$",AMP:"&",PAREN_L:"(",PAREN_R:")",SPREAD:"...",COLON:":",EQUALS:"=",AT:"@",BRACKET_L:"[",BRACKET_R:"]",BRACE_L:"{",PIPE:"|",BRACE_R:"}",NAME:"Name",INT:"Int",FLOAT:"Float",STRING:"String",BLOCK_STRING:"BlockString",COMMENT:"Comment"});t.TokenKind=n},function(e,t,r){"use strict";function n(e){for(var t=null,r=1;r<e.length;r++){var n=e[r],o=i(n);if(o!==n.length&&((null===t||o<t)&&0===(t=o)))break}return null===t?0:t}function i(e){for(var t=0;t<e.length&&(" "===e[t]||"\t"===e[t]);)t++;return t}function o(e){return i(e)===e.length}Object.defineProperty(t,"__esModule",{value:!0}),t.dedentBlockStringValue=function(e){var t=e.split(/\r\n|[\n\r]/g),r=n(t);if(0!==r)for(var i=1;i<t.length;i++)t[i]=t[i].slice(r);for(;t.length>0&&o(t[0]);)t.shift();for(;t.length>0&&o(t[t.length-1]);)t.pop();return t.join("\n")},t.getBlockStringIndentation=n,t.printBlockString=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2&&void 0!==arguments[2]&&arguments[2],n=-1===e.indexOf("\n"),i=" "===e[0]||"\t"===e[0],o='"'===e[e.length-1],a=!n||o||r,s="";!a||n&&i||(s+="\n"+t);s+=t?e.replace(/\n/g,"\n"+t):e,a&&(s+="\n");return'"""'+s.replace(/"""/g,'\\"""')+'"""'}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){return o.default[e.type](e,t,r)};var n,i=r(81),o=(n=i)&&n.__esModule?n:{default:n}},function(e,t,r){var n=r(32),i={input:!0,option:!0,optgroup:!0,select:!0,button:!0,datalist:!0,textarea:!0},o={tr:{tr:!0,th:!0,td:!0},th:{th:!0},td:{thead:!0,th:!0,td:!0},body:{head:!0,link:!0,script:!0},li:{li:!0},p:{p:!0},h1:{p:!0},h2:{p:!0},h3:{p:!0},h4:{p:!0},h5:{p:!0},h6:{p:!0},select:i,input:i,output:i,button:i,datalist:i,textarea:i,option:{option:!0},optgroup:{optgroup:!0}},a={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},s={__proto__:null,math:!0,svg:!0},u={__proto__:null,mi:!0,mo:!0,mn:!0,ms:!0,mtext:!0,"annotation-xml":!0,foreignObject:!0,desc:!0,title:!0},l=/\s|\//;function c(e,t){this._options=t||{},this._cbs=e||{},this._tagname="",this._attribname="",this._attribvalue="",this._attribs=null,this._stack=[],this._foreignContext=[],this.startIndex=0,this.endIndex=null,this._lowerCaseTagNames="lowerCaseTags"in this._options?!!this._options.lowerCaseTags:!this._options.xmlMode,this._lowerCaseAttributeNames="lowerCaseAttributeNames"in this._options?!!this._options.lowerCaseAttributeNames:!this._options.xmlMode,this._options.Tokenizer&&(n=this._options.Tokenizer),this._tokenizer=new n(this._options,this),this._cbs.onparserinit&&this._cbs.onparserinit(this)}r(10)(c,r(87).EventEmitter),c.prototype._updatePosition=function(e){null===this.endIndex?this._tokenizer._sectionStart<=e?this.startIndex=0:this.startIndex=this._tokenizer._sectionStart-e:this.startIndex=this.endIndex+1,this.endIndex=this._tokenizer.getAbsoluteIndex()},c.prototype.ontext=function(e){this._updatePosition(1),this.endIndex--,this._cbs.ontext&&this._cbs.ontext(e)},c.prototype.onopentagname=function(e){if(this._lowerCaseTagNames&&(e=e.toLowerCase()),this._tagname=e,!this._options.xmlMode&&e in o)for(var t;(t=this._stack[this._stack.length-1])in o[e];this.onclosetag(t));!this._options.xmlMode&&e in a||(this._stack.push(e),e in s?this._foreignContext.push(!0):e in u&&this._foreignContext.push(!1)),this._cbs.onopentagname&&this._cbs.onopentagname(e),this._cbs.onopentag&&(this._attribs={})},c.prototype.onopentagend=function(){this._updatePosition(1),this._attribs&&(this._cbs.onopentag&&this._cbs.onopentag(this._tagname,this._attribs),this._attribs=null),!this._options.xmlMode&&this._cbs.onclosetag&&this._tagname in a&&this._cbs.onclosetag(this._tagname),this._tagname=""},c.prototype.onclosetag=function(e){if(this._updatePosition(1),this._lowerCaseTagNames&&(e=e.toLowerCase()),(e in s||e in u)&&this._foreignContext.pop(),!this._stack.length||e in a&&!this._options.xmlMode)this._options.xmlMode||"br"!==e&&"p"!==e||(this.onopentagname(e),this._closeCurrentTag());else{var t=this._stack.lastIndexOf(e);if(-1!==t)if(this._cbs.onclosetag)for(t=this._stack.length-t;t--;)this._cbs.onclosetag(this._stack.pop());else this._stack.length=t;else"p"!==e||this._options.xmlMode||(this.onopentagname(e),this._closeCurrentTag())}},c.prototype.onselfclosingtag=function(){this._options.xmlMode||this._options.recognizeSelfClosing||this._foreignContext[this._foreignContext.length-1]?this._closeCurrentTag():this.onopentagend()},c.prototype._closeCurrentTag=function(){var e=this._tagname;this.onopentagend(),this._stack[this._stack.length-1]===e&&(this._cbs.onclosetag&&this._cbs.onclosetag(e),this._stack.pop())},c.prototype.onattribname=function(e){this._lowerCaseAttributeNames&&(e=e.toLowerCase()),this._attribname=e},c.prototype.onattribdata=function(e){this._attribvalue+=e},c.prototype.onattribend=function(){this._cbs.onattribute&&this._cbs.onattribute(this._attribname,this._attribvalue),this._attribs&&!Object.prototype.hasOwnProperty.call(this._attribs,this._attribname)&&(this._attribs[this._attribname]=this._attribvalue),this._attribname="",this._attribvalue=""},c.prototype._getInstructionName=function(e){var t=e.search(l),r=t<0?e:e.substr(0,t);return this._lowerCaseTagNames&&(r=r.toLowerCase()),r},c.prototype.ondeclaration=function(e){if(this._cbs.onprocessinginstruction){var t=this._getInstructionName(e);this._cbs.onprocessinginstruction("!"+t,"!"+e)}},c.prototype.onprocessinginstruction=function(e){if(this._cbs.onprocessinginstruction){var t=this._getInstructionName(e);this._cbs.onprocessinginstruction("?"+t,"?"+e)}},c.prototype.oncomment=function(e){this._updatePosition(4),this._cbs.oncomment&&this._cbs.oncomment(e),this._cbs.oncommentend&&this._cbs.oncommentend()},c.prototype.oncdata=function(e){this._updatePosition(1),this._options.xmlMode||this._options.recognizeCDATA?(this._cbs.oncdatastart&&this._cbs.oncdatastart(),this._cbs.ontext&&this._cbs.ontext(e),this._cbs.oncdataend&&this._cbs.oncdataend()):this.oncomment("[CDATA["+e+"]]")},c.prototype.onerror=function(e){this._cbs.onerror&&this._cbs.onerror(e)},c.prototype.onend=function(){if(this._cbs.onclosetag)for(var e=this._stack.length;e>0;this._cbs.onclosetag(this._stack[--e]));this._cbs.onend&&this._cbs.onend()},c.prototype.reset=function(){this._cbs.onreset&&this._cbs.onreset(),this._tokenizer.reset(),this._tagname="",this._attribname="",this._attribs=null,this._stack=[],this._cbs.onparserinit&&this._cbs.onparserinit(this)},c.prototype.parseComplete=function(e){this.reset(),this.end(e)},c.prototype.write=function(e){this._tokenizer.write(e)},c.prototype.end=function(e){this._tokenizer.end(e)},c.prototype.pause=function(){this._tokenizer.pause()},c.prototype.resume=function(){this._tokenizer.resume()},c.prototype.parseChunk=c.prototype.write,c.prototype.done=c.prototype.end,e.exports=c},function(e,t,r){e.exports=ye;var n=r(82),i=r(84),o=r(85),a=r(86),s=0,u=s++,l=s++,c=s++,f=s++,p=s++,d=s++,h=s++,m=s++,y=s++,v=s++,b=s++,g=s++,w=s++,_=s++,E=s++,x=s++,k=s++,S=s++,T=s++,O=s++,C=s++,N=s++,R=s++,A=s++,D=s++,P=s++,I=s++,j=s++,q=s++,L=s++,M=s++,F=s++,B=s++,U=s++,Q=s++,V=s++,z=s++,K=s++,H=s++,G=s++,Y=s++,W=s++,$=s++,J=s++,X=s++,Z=s++,ee=s++,te=s++,re=s++,ne=s++,ie=s++,oe=s++,ae=s++,se=s++,ue=s++,le=0,ce=le++,fe=le++,pe=le++;function de(e){return" "===e||"\n"===e||"\t"===e||"\f"===e||"\r"===e}function he(e,t,r){var n=e.toLowerCase();return e===n?function(e){e===n?this._state=t:(this._state=r,this._index--)}:function(i){i===n||i===e?this._state=t:(this._state=r,this._index--)}}function me(e,t){var r=e.toLowerCase();return function(n){n===r||n===e?this._state=t:(this._state=c,this._index--)}}function ye(e,t){this._state=u,this._buffer="",this._sectionStart=0,this._index=0,this._bufferOffset=0,this._baseState=u,this._special=ce,this._cbs=t,this._running=!0,this._ended=!1,this._xmlMode=!(!e||!e.xmlMode),this._decodeEntities=!(!e||!e.decodeEntities)}ye.prototype._stateText=function(e){"<"===e?(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._state=l,this._sectionStart=this._index):this._decodeEntities&&this._special===ce&&"&"===e&&(this._index>this._sectionStart&&this._cbs.ontext(this._getSection()),this._baseState=u,this._state=ie,this._sectionStart=this._index)},ye.prototype._stateBeforeTagName=function(e){"/"===e?this._state=p:"<"===e?(this._cbs.ontext(this._getSection()),this._sectionStart=this._index):">"===e||this._special!==ce||de(e)?this._state=u:"!"===e?(this._state=E,this._sectionStart=this._index+1):"?"===e?(this._state=k,this._sectionStart=this._index+1):(this._state=this._xmlMode||"s"!==e&&"S"!==e?c:M,this._sectionStart=this._index)},ye.prototype._stateInTagName=function(e){("/"===e||">"===e||de(e))&&(this._emitToken("onopentagname"),this._state=m,this._index--)},ye.prototype._stateBeforeCloseingTagName=function(e){de(e)||(">"===e?this._state=u:this._special!==ce?"s"===e||"S"===e?this._state=F:(this._state=u,this._index--):(this._state=d,this._sectionStart=this._index))},ye.prototype._stateInCloseingTagName=function(e){(">"===e||de(e))&&(this._emitToken("onclosetag"),this._state=h,this._index--)},ye.prototype._stateAfterCloseingTagName=function(e){">"===e&&(this._state=u,this._sectionStart=this._index+1)},ye.prototype._stateBeforeAttributeName=function(e){">"===e?(this._cbs.onopentagend(),this._state=u,this._sectionStart=this._index+1):"/"===e?this._state=f:de(e)||(this._state=y,this._sectionStart=this._index)},ye.prototype._stateInSelfClosingTag=function(e){">"===e?(this._cbs.onselfclosingtag(),this._state=u,this._sectionStart=this._index+1):de(e)||(this._state=m,this._index--)},ye.prototype._stateInAttributeName=function(e){("="===e||"/"===e||">"===e||de(e))&&(this._cbs.onattribname(this._getSection()),this._sectionStart=-1,this._state=v,this._index--)},ye.prototype._stateAfterAttributeName=function(e){"="===e?this._state=b:"/"===e||">"===e?(this._cbs.onattribend(),this._state=m,this._index--):de(e)||(this._cbs.onattribend(),this._state=y,this._sectionStart=this._index)},ye.prototype._stateBeforeAttributeValue=function(e){'"'===e?(this._state=g,this._sectionStart=this._index+1):"'"===e?(this._state=w,this._sectionStart=this._index+1):de(e)||(this._state=_,this._sectionStart=this._index,this._index--)},ye.prototype._stateInAttributeValueDoubleQuotes=function(e){'"'===e?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=m):this._decodeEntities&&"&"===e&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=ie,this._sectionStart=this._index)},ye.prototype._stateInAttributeValueSingleQuotes=function(e){"'"===e?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=m):this._decodeEntities&&"&"===e&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=ie,this._sectionStart=this._index)},ye.prototype._stateInAttributeValueNoQuotes=function(e){de(e)||">"===e?(this._emitToken("onattribdata"),this._cbs.onattribend(),this._state=m,this._index--):this._decodeEntities&&"&"===e&&(this._emitToken("onattribdata"),this._baseState=this._state,this._state=ie,this._sectionStart=this._index)},ye.prototype._stateBeforeDeclaration=function(e){this._state="["===e?N:"-"===e?S:x},ye.prototype._stateInDeclaration=function(e){">"===e&&(this._cbs.ondeclaration(this._getSection()),this._state=u,this._sectionStart=this._index+1)},ye.prototype._stateInProcessingInstruction=function(e){">"===e&&(this._cbs.onprocessinginstruction(this._getSection()),this._state=u,this._sectionStart=this._index+1)},ye.prototype._stateBeforeComment=function(e){"-"===e?(this._state=T,this._sectionStart=this._index+1):this._state=x},ye.prototype._stateInComment=function(e){"-"===e&&(this._state=O)},ye.prototype._stateAfterComment1=function(e){this._state="-"===e?C:T},ye.prototype._stateAfterComment2=function(e){">"===e?(this._cbs.oncomment(this._buffer.substring(this._sectionStart,this._index-2)),this._state=u,this._sectionStart=this._index+1):"-"!==e&&(this._state=T)},ye.prototype._stateBeforeCdata1=he("C",R,x),ye.prototype._stateBeforeCdata2=he("D",A,x),ye.prototype._stateBeforeCdata3=he("A",D,x),ye.prototype._stateBeforeCdata4=he("T",P,x),ye.prototype._stateBeforeCdata5=he("A",I,x),ye.prototype._stateBeforeCdata6=function(e){"["===e?(this._state=j,this._sectionStart=this._index+1):(this._state=x,this._index--)},ye.prototype._stateInCdata=function(e){"]"===e&&(this._state=q)},ye.prototype._stateAfterCdata1=function(e){this._state="]"===e?L:j},ye.prototype._stateAfterCdata2=function(e){">"===e?(this._cbs.oncdata(this._buffer.substring(this._sectionStart,this._index-2)),this._state=u,this._sectionStart=this._index+1):"]"!==e&&(this._state=j)},ye.prototype._stateBeforeSpecial=function(e){"c"===e||"C"===e?this._state=B:"t"===e||"T"===e?this._state=$:(this._state=c,this._index--)},ye.prototype._stateBeforeSpecialEnd=function(e){this._special!==fe||"c"!==e&&"C"!==e?this._special!==pe||"t"!==e&&"T"!==e?this._state=u:this._state=ee:this._state=K},ye.prototype._stateBeforeScript1=me("R",U),ye.prototype._stateBeforeScript2=me("I",Q),ye.prototype._stateBeforeScript3=me("P",V),ye.prototype._stateBeforeScript4=me("T",z),ye.prototype._stateBeforeScript5=function(e){("/"===e||">"===e||de(e))&&(this._special=fe),this._state=c,this._index--},ye.prototype._stateAfterScript1=he("R",H,u),ye.prototype._stateAfterScript2=he("I",G,u),ye.prototype._stateAfterScript3=he("P",Y,u),ye.prototype._stateAfterScript4=he("T",W,u),ye.prototype._stateAfterScript5=function(e){">"===e||de(e)?(this._special=ce,this._state=d,this._sectionStart=this._index-6,this._index--):this._state=u},ye.prototype._stateBeforeStyle1=me("Y",J),ye.prototype._stateBeforeStyle2=me("L",X),ye.prototype._stateBeforeStyle3=me("E",Z),ye.prototype._stateBeforeStyle4=function(e){("/"===e||">"===e||de(e))&&(this._special=pe),this._state=c,this._index--},ye.prototype._stateAfterStyle1=he("Y",te,u),ye.prototype._stateAfterStyle2=he("L",re,u),ye.prototype._stateAfterStyle3=he("E",ne,u),ye.prototype._stateAfterStyle4=function(e){">"===e||de(e)?(this._special=ce,this._state=d,this._sectionStart=this._index-5,this._index--):this._state=u},ye.prototype._stateBeforeEntity=he("#",oe,ae),ye.prototype._stateBeforeNumericEntity=he("X",ue,se),ye.prototype._parseNamedEntityStrict=function(){if(this._sectionStart+1<this._index){var e=this._buffer.substring(this._sectionStart+1,this._index),t=this._xmlMode?a:i;t.hasOwnProperty(e)&&(this._emitPartial(t[e]),this._sectionStart=this._index+1)}},ye.prototype._parseLegacyEntity=function(){var e=this._sectionStart+1,t=this._index-e;for(t>6&&(t=6);t>=2;){var r=this._buffer.substr(e,t);if(o.hasOwnProperty(r))return this._emitPartial(o[r]),void(this._sectionStart+=t+1);t--}},ye.prototype._stateInNamedEntity=function(e){";"===e?(this._parseNamedEntityStrict(),this._sectionStart+1<this._index&&!this._xmlMode&&this._parseLegacyEntity(),this._state=this._baseState):(e<"a"||e>"z")&&(e<"A"||e>"Z")&&(e<"0"||e>"9")&&(this._xmlMode||this._sectionStart+1===this._index||(this._baseState!==u?"="!==e&&this._parseNamedEntityStrict():this._parseLegacyEntity()),this._state=this._baseState,this._index--)},ye.prototype._decodeNumericEntity=function(e,t){var r=this._sectionStart+e;if(r!==this._index){var i=this._buffer.substring(r,this._index),o=parseInt(i,t);this._emitPartial(n(o)),this._sectionStart=this._index}else this._sectionStart--;this._state=this._baseState},ye.prototype._stateInNumericEntity=function(e){";"===e?(this._decodeNumericEntity(2,10),this._sectionStart++):(e<"0"||e>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(2,10),this._index--)},ye.prototype._stateInHexEntity=function(e){";"===e?(this._decodeNumericEntity(3,16),this._sectionStart++):(e<"a"||e>"f")&&(e<"A"||e>"F")&&(e<"0"||e>"9")&&(this._xmlMode?this._state=this._baseState:this._decodeNumericEntity(3,16),this._index--)},ye.prototype._cleanup=function(){this._sectionStart<0?(this._buffer="",this._bufferOffset+=this._index,this._index=0):this._running&&(this._state===u?(this._sectionStart!==this._index&&this._cbs.ontext(this._buffer.substr(this._sectionStart)),this._buffer="",this._bufferOffset+=this._index,this._index=0):this._sectionStart===this._index?(this._buffer="",this._bufferOffset+=this._index,this._index=0):(this._buffer=this._buffer.substr(this._sectionStart),this._index-=this._sectionStart,this._bufferOffset+=this._sectionStart),this._sectionStart=0)},ye.prototype.write=function(e){this._ended&&this._cbs.onerror(Error(".write() after done!")),this._buffer+=e,this._parse()},ye.prototype._parse=function(){for(;this._index<this._buffer.length&&this._running;){var e=this._buffer.charAt(this._index);this._state===u?this._stateText(e):this._state===l?this._stateBeforeTagName(e):this._state===c?this._stateInTagName(e):this._state===p?this._stateBeforeCloseingTagName(e):this._state===d?this._stateInCloseingTagName(e):this._state===h?this._stateAfterCloseingTagName(e):this._state===f?this._stateInSelfClosingTag(e):this._state===m?this._stateBeforeAttributeName(e):this._state===y?this._stateInAttributeName(e):this._state===v?this._stateAfterAttributeName(e):this._state===b?this._stateBeforeAttributeValue(e):this._state===g?this._stateInAttributeValueDoubleQuotes(e):this._state===w?this._stateInAttributeValueSingleQuotes(e):this._state===_?this._stateInAttributeValueNoQuotes(e):this._state===E?this._stateBeforeDeclaration(e):this._state===x?this._stateInDeclaration(e):this._state===k?this._stateInProcessingInstruction(e):this._state===S?this._stateBeforeComment(e):this._state===T?this._stateInComment(e):this._state===O?this._stateAfterComment1(e):this._state===C?this._stateAfterComment2(e):this._state===N?this._stateBeforeCdata1(e):this._state===R?this._stateBeforeCdata2(e):this._state===A?this._stateBeforeCdata3(e):this._state===D?this._stateBeforeCdata4(e):this._state===P?this._stateBeforeCdata5(e):this._state===I?this._stateBeforeCdata6(e):this._state===j?this._stateInCdata(e):this._state===q?this._stateAfterCdata1(e):this._state===L?this._stateAfterCdata2(e):this._state===M?this._stateBeforeSpecial(e):this._state===F?this._stateBeforeSpecialEnd(e):this._state===B?this._stateBeforeScript1(e):this._state===U?this._stateBeforeScript2(e):this._state===Q?this._stateBeforeScript3(e):this._state===V?this._stateBeforeScript4(e):this._state===z?this._stateBeforeScript5(e):this._state===K?this._stateAfterScript1(e):this._state===H?this._stateAfterScript2(e):this._state===G?this._stateAfterScript3(e):this._state===Y?this._stateAfterScript4(e):this._state===W?this._stateAfterScript5(e):this._state===$?this._stateBeforeStyle1(e):this._state===J?this._stateBeforeStyle2(e):this._state===X?this._stateBeforeStyle3(e):this._state===Z?this._stateBeforeStyle4(e):this._state===ee?this._stateAfterStyle1(e):this._state===te?this._stateAfterStyle2(e):this._state===re?this._stateAfterStyle3(e):this._state===ne?this._stateAfterStyle4(e):this._state===ie?this._stateBeforeEntity(e):this._state===oe?this._stateBeforeNumericEntity(e):this._state===ae?this._stateInNamedEntity(e):this._state===se?this._stateInNumericEntity(e):this._state===ue?this._stateInHexEntity(e):this._cbs.onerror(Error("unknown _state"),this._state),this._index++}this._cleanup()},ye.prototype.pause=function(){this._running=!1},ye.prototype.resume=function(){this._running=!0,this._index<this._buffer.length&&this._parse(),this._ended&&this._finish()},ye.prototype.end=function(e){this._ended&&this._cbs.onerror(Error(".end() after done!")),e&&this.write(e),this._ended=!0,this._running&&this._finish()},ye.prototype._finish=function(){this._sectionStart<this._index&&this._handleTrailingData(),this._cbs.onend()},ye.prototype._handleTrailingData=function(){var e=this._buffer.substr(this._sectionStart);this._state===j||this._state===q||this._state===L?this._cbs.oncdata(e):this._state===T||this._state===O||this._state===C?this._cbs.oncomment(e):this._state!==ae||this._xmlMode?this._state!==se||this._xmlMode?this._state!==ue||this._xmlMode?this._state!==c&&this._state!==m&&this._state!==b&&this._state!==v&&this._state!==y&&this._state!==w&&this._state!==g&&this._state!==_&&this._state!==d&&this._cbs.ontext(e):(this._decodeNumericEntity(3,16),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._decodeNumericEntity(2,10),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData())):(this._parseLegacyEntity(),this._sectionStart<this._index&&(this._state=this._baseState,this._handleTrailingData()))},ye.prototype.reset=function(){ye.call(this,{xmlMode:this._xmlMode,decodeEntities:this._decodeEntities},this._cbs)},ye.prototype.getAbsoluteIndex=function(){return this._bufferOffset+this._index},ye.prototype._getSection=function(){return this._buffer.substring(this._sectionStart,this._index)},ye.prototype._emitToken=function(e){this._cbs[e](this._getSection()),this._sectionStart=-1},ye.prototype._emitPartial=function(e){this._baseState!==u?this._cbs.onattribdata(e):this._cbs.ontext(e)}},function(e,t,r){function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(8),o=/\s+/g,a=r(34),s=r(88);function u(e,t,r){"object"===n(e)?(r=t,t=e,e=null):"function"==typeof t&&(r=t,t=l),this._callback=e,this._options=t||l,this._elementCB=r,this.dom=[],this._done=!1,this._tagStack=[],this._parser=this._parser||null}var l={normalizeWhitespace:!1,withStartIndices:!1,withEndIndices:!1};u.prototype.onparserinit=function(e){this._parser=e},u.prototype.onreset=function(){u.call(this,this._callback,this._options,this._elementCB)},u.prototype.onend=function(){this._done||(this._done=!0,this._parser=null,this._handleCallback(null))},u.prototype._handleCallback=u.prototype.onerror=function(e){if("function"==typeof this._callback)this._callback(e,this.dom);else if(e)throw e},u.prototype.onclosetag=function(){var e=this._tagStack.pop();this._options.withEndIndices&&e&&(e.endIndex=this._parser.endIndex),this._elementCB&&this._elementCB(e)},u.prototype._createDomElement=function(e){if(!this._options.withDomLvl1)return e;var t;for(var r in t="tag"===e.type?Object.create(s):Object.create(a),e)e.hasOwnProperty(r)&&(t[r]=e[r]);return t},u.prototype._addDomElement=function(e){var t=this._tagStack[this._tagStack.length-1],r=t?t.children:this.dom,n=r[r.length-1];e.next=null,this._options.withStartIndices&&(e.startIndex=this._parser.startIndex),this._options.withEndIndices&&(e.endIndex=this._parser.endIndex),n?(e.prev=n,n.next=e):e.prev=null,r.push(e),e.parent=t||null},u.prototype.onopentag=function(e,t){var r={type:"script"===e?i.Script:"style"===e?i.Style:i.Tag,name:e,attribs:t,children:[]},n=this._createDomElement(r);this._addDomElement(n),this._tagStack.push(n)},u.prototype.ontext=function(e){var t,r=this._options.normalizeWhitespace||this._options.ignoreWhitespace;if(!this._tagStack.length&&this.dom.length&&(t=this.dom[this.dom.length-1]).type===i.Text)r?t.data=(t.data+e).replace(o," "):t.data+=e;else if(this._tagStack.length&&(t=this._tagStack[this._tagStack.length-1])&&(t=t.children[t.children.length-1])&&t.type===i.Text)r?t.data=(t.data+e).replace(o," "):t.data+=e;else{r&&(e=e.replace(o," "));var n=this._createDomElement({data:e,type:i.Text});this._addDomElement(n)}},u.prototype.oncomment=function(e){var t=this._tagStack[this._tagStack.length-1];if(t&&t.type===i.Comment)t.data+=e;else{var r={data:e,type:i.Comment},n=this._createDomElement(r);this._addDomElement(n),this._tagStack.push(n)}},u.prototype.oncdatastart=function(){var e={children:[{data:"",type:i.Text}],type:i.CDATA},t=this._createDomElement(e);this._addDomElement(t),this._tagStack.push(t)},u.prototype.oncommentend=u.prototype.oncdataend=function(){this._tagStack.pop()},u.prototype.onprocessinginstruction=function(e,t){var r=this._createDomElement({name:e,data:t,type:i.Directive});this._addDomElement(r)},e.exports=u},function(e,t){var r=e.exports={get firstChild(){var e=this.children;return e&&e[0]||null},get lastChild(){var e=this.children;return e&&e[e.length-1]||null},get nodeType(){return i[this.type]||i.element}},n={tagName:"name",childNodes:"children",parentNode:"parent",previousSibling:"prev",nextSibling:"next",nodeValue:"data"},i={element:1,text:3,cdata:4,comment:8};Object.keys(n).forEach((function(e){var t=n[e];Object.defineProperty(r,e,{get:function(){return this[t]||null},set:function(e){return this[t]=e,e}})}))},function(e,t,r){var n=e.exports;[r(90),r(98),r(99),r(100),r(101),r(102)].forEach((function(e){Object.keys(e).forEach((function(t){n[t]=e[t].bind(n)}))}))},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(37)),o=n(r(94)),a=n(r(38)),s=n(r(95));function u(e){var t=Object.keys(e).join("|"),r=c(e),n=new RegExp("&(?:"+(t+="|#[xX][\\da-fA-F]+|#\\d+")+");","g");return function(e){return String(e).replace(n,r)}}t.decodeXML=u(a.default),t.decodeHTMLStrict=u(i.default);var l=function(e,t){return e<t?1:-1};function c(e){return function(t){return"#"===t.charAt(1)?"X"===t.charAt(2)||"x"===t.charAt(2)?s.default(parseInt(t.substr(3),16)):s.default(parseInt(t.substr(2),10)):e[t.slice(1,-1)]}}t.decodeHTML=function(){for(var e=Object.keys(o.default).sort(l),t=Object.keys(i.default).sort(l),r=0,n=0;r<t.length;r++)e[n]===t[r]?(t[r]+=";?",n++):t[r]+=";";var a=new RegExp("&(?:"+t.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),s=c(i.default);function u(e){return";"!==e.substr(-1)&&(e+=";"),s(e)}return function(e){return String(e).replace(a,u)}}()},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(e){e.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=u(n(r(38)).default),o=l(i);t.encodeXML=h(i,o);var a=u(n(r(37)).default),s=l(a);function u(e){return Object.keys(e).sort().reduce((function(t,r){return t[e[r]]="&"+r+";",t}),{})}function l(e){var t=[],r=[];return Object.keys(e).forEach((function(e){return 1===e.length?t.push("\\"+e):r.push(e)})),r.unshift("["+t.join("")+"]"),new RegExp(r.join("|"),"g")}t.encodeHTML=h(a,s);var c=/[^\0-\x7F]/g,f=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function p(e){return"&#x"+e.charCodeAt(0).toString(16).toUpperCase()+";"}function d(e,t){return"&#x"+(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)-56320+65536).toString(16).toUpperCase()+";"}function h(e,t){return function(r){return r.replace(t,(function(t){return e[t]})).replace(f,d).replace(c,p)}}var m=l(i);t.escape=function(e){return e.replace(m,p).replace(f,d).replace(c,p)}},function(e,t,r){e.exports=s;var n=r(31),i=r(104).Writable,o=r(105).StringDecoder,a=r(41).Buffer;function s(e,t){var r=this._parser=new n(e,t),a=this._decoder=new o;i.call(this,{decodeStrings:!1}),this.once("finish",(function(){r.end(a.end())}))}r(10)(s,i),s.prototype._write=function(e,t,r){e instanceof a&&(e=this._decoder.write(e)),this._parser.write(e),r()}},function(e,t,r){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(107),i=r(108),o=r(109);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return l(this,e,t,r)}function l(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,r,n):"string"==typeof t?function(e,t,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|h(t,r),i=(e=s(e,n)).write(t,r);i!==n&&(e=e.slice(0,i));return e}(e,t,r):function(e,t){if(u.isBuffer(t)){var r=0|d(t.length);return 0===(e=s(e,r)).length||t.copy(e,0,0,r),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(n=t.length)!=n?s(e,0):p(e,t);if("Buffer"===t.type&&o(t.data))return p(e,t.data)}var n;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function c(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(c(t),e=s(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function p(e,t){var r=t.length<0?0:0|d(t.length);e=s(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function d(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function h(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return U(e).length;default:if(n)return B(e).length;t=(""+t).toLowerCase(),n=!0}}function m(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return N(this,t,r);case"utf8":case"utf-8":return T(this,t,r);case"ascii":return O(this,t,r);case"latin1":case"binary":return C(this,t,r);case"base64":return S(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function y(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function v(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=u.from(t,n)),u.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,i);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,i){var o,a=1,s=e.length,u=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;a=2,s/=2,u/=2,r/=2}function l(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(i){var c=-1;for(o=r;o<s;o++)if(l(e,o)===l(t,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===u)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(r+u>s&&(r=s-u),o=r;o>=0;o--){for(var f=!0,p=0;p<u;p++)if(l(e,o+p)!==l(t,p)){f=!1;break}if(f)return o}return-1}function g(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var a=0;a<n;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[r+a]=s}return a}function w(e,t,r,n){return Q(B(t,e.length-r),e,r,n)}function _(e,t,r,n){return Q(function(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function E(e,t,r,n){return _(e,t,r,n)}function x(e,t,r,n){return Q(U(t),e,r,n)}function k(e,t,r,n){return Q(function(e,t){for(var r,n,i,o=[],a=0;a<e.length&&!((t-=2)<0);++a)r=e.charCodeAt(a),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function S(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function T(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var o,a,s,u,l=e[i],c=null,f=l>239?4:l>223?3:l>191?2:1;if(i+f<=r)switch(f){case 1:l<128&&(c=l);break;case 2:128==(192&(o=e[i+1]))&&(u=(31&l)<<6|63&o)>127&&(c=u);break;case 3:o=e[i+1],a=e[i+2],128==(192&o)&&128==(192&a)&&(u=(15&l)<<12|(63&o)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:o=e[i+1],a=e[i+2],s=e[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(u=(15&l)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,f=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=f}return function(e){var t=e.length;if(t<=4096)return String.fromCharCode.apply(String,e);var r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=4096));return r}(n)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,r){return l(null,e,t,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,r){return function(e,t,r,n){return c(t),t<=0?s(e,t):void 0!==r?"string"==typeof n?s(e,t).fill(r,n):s(e,t).fill(r):s(e,t)}(null,e,t,r)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=u.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?T(this,0,e):m.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",r=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,r).match(/.{2}/g).join(" "),this.length>r&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,r,n,i){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;for(var o=(i>>>=0)-(n>>>=0),a=(r>>>=0)-(t>>>=0),s=Math.min(o,a),l=this.slice(n,i),c=e.slice(t,r),f=0;f<s;++f)if(l[f]!==c[f]){o=l[f],a=c[f];break}return o<a?-1:a<o?1:0},u.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},u.prototype.indexOf=function(e,t,r){return v(this,e,t,r,!0)},u.prototype.lastIndexOf=function(e,t,r){return v(this,e,t,r,!1)},u.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var o=!1;;)switch(n){case"hex":return g(this,e,t,r);case"utf8":case"utf-8":return w(this,e,t,r);case"ascii":return _(this,e,t,r);case"latin1":case"binary":return E(this,e,t,r);case"base64":return x(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function C(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function N(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=t;o<r;++o)i+=F(e[o]);return i}function R(e,t,r){for(var n=e.slice(t,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function A(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function D(e,t,r,n,i,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function P(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,o=Math.min(e.length-r,2);i<o;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function I(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,o=Math.min(e.length-r,4);i<o;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function j(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function q(e,t,r,n,o){return o||j(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,o){return o||j(e,0,r,8),i.write(e,t,r,n,52,8),r+8}u.prototype.slice=function(e,t){var r,n=this.length;if((e=~~e)<0?(e+=n)<0&&(e=0):e>n&&(e=n),(t=void 0===t?n:~~t)<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=u.prototype;else{var i=t-e;r=new u(i,void 0);for(var o=0;o<i;++o)r[o]=this[o+e]}return r},u.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n},u.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},u.prototype.readUInt8=function(e,t){return t||A(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||A(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||A(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||A(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||A(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=this[e],i=1,o=0;++o<t&&(i*=256);)n+=this[e+o]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},u.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||A(e,t,this.length);for(var n=t,i=1,o=this[e+--n];n>0&&(i*=256);)o+=this[e+--n]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||A(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||A(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt16BE=function(e,t){t||A(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},u.prototype.readInt32LE=function(e,t){return t||A(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||A(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||A(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||A(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||A(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||A(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||D(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},u.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||D(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},u.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):I(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);D(this,e,t,r,i-1,-i)}var o=0,a=1,s=0;for(this[t]=255&e;++o<r&&(a*=256);)e<0&&0===s&&0!==this[t+o-1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);D(this,e,t,r,i-1,-i)}var o=r-1,a=1,s=0;for(this[t+o]=255&e;--o>=0&&(a*=256);)e<0&&0===s&&0!==this[t+o+1]&&(s=1),this[t+o]=(e/a>>0)-s&255;return t+r},u.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):P(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):P(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):I(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||D(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):I(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,r){return q(this,e,t,!0,r)},u.prototype.writeFloatBE=function(e,t,r){return q(this,e,t,!1,r)},u.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},u.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},u.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,o=n-r;if(this===e&&r<t&&t<n)for(i=o-1;i>=0;--i)e[i+t]=this[i+r];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+o),t);return o},u.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!u.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var o;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(o=t;o<r;++o)this[o]=e;else{var a=u.isBuffer(e)?e:B(new u(e,n).toString()),s=a.length;for(o=0;o<r-t;++o)this[o+t]=a[o%s]}return this};var M=/[^+\/0-9A-Za-z-_]/g;function F(e){return e<16?"0"+e.toString(16):e.toString(16)}function B(e,t){var r;t=t||1/0;for(var n=e.length,i=null,o=[],a=0;a<n;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(a+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function U(e){return n.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(M,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Q(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}}).call(this,r(15))},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};t.default=function(e,t){var r=n({},(0,i.default)(e),{key:t});"string"==typeof r.style||r.style instanceof String?r.style=(0,o.default)(r.style):delete r.style;return r};var i=a(r(114)),o=a(r(117));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){i.hasOwnProperty(e)||(i[e]=n.test(e));return i[e]};var n=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,i={}},function(e,t,r){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=r(56)},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return n}));var n=e.env.API_URI}).call(this,r(9))},function(e,t,r){"use strict";(function(t){var r="__global_unique_id__";e.exports=function(){return t[r]=(t[r]||0)+1}}).call(this,r(15))},function(e,t,r){"use strict";var n=r(21),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return n.isMemo(e)?a:s[e.$$typeof]||i}s[n.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[n.Memo]=a;var l=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,p=Object.getOwnPropertyDescriptor,d=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,r,n){if("string"!=typeof r){if(h){var i=d(r);i&&i!==h&&e(t,i,n)}var a=c(r);f&&(a=a.concat(f(r)));for(var s=u(t),m=u(r),y=0;y<a.length;++y){var v=a[y];if(!(o[v]||n&&n[v]||m&&m[v]||s&&s[v])){var b=p(r,v);try{l(t,v,b)}catch(e){}}}}return t}},function(e,t,r){"use strict";(function(e,n){var i,o=r(49);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var a=Object(o.a)(i);t.a=a}).call(this,r(15),r(78)(e))},function(e,t,r){"use strict";function n(e){var t,r=e.Symbol;return"function"==typeof r?r.observable?t=r.observable:(t=r("observable"),r.observable=t):t="@@observable",t}r.d(t,"a",(function(){return n}))},function(e,t,r){e.exports=r(79).Observable},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}e.exports=function(e,t){t||(t={}),"function"==typeof t&&(t={cmp:t});var r,i="boolean"==typeof t.cycles&&t.cycles,o=t.cmp&&(r=t.cmp,function(e){return function(t,n){var i={key:t,value:e[t]},o={key:n,value:e[n]};return r(i,o)}}),a=[];return function e(t){if(t&&t.toJSON&&"function"==typeof t.toJSON&&(t=t.toJSON()),void 0!==t){if("number"==typeof t)return isFinite(t)?""+t:"null";if("object"!==n(t))return JSON.stringify(t);var r,s;if(Array.isArray(t)){for(s="[",r=0;r<t.length;r++)r&&(s+=","),s+=e(t[r])||"null";return s+"]"}if(null===t)return"null";if(-1!==a.indexOf(t)){if(i)return JSON.stringify("__cycle__");throw new TypeError("Converting circular structure to JSON")}var u=a.push(t)-1,l=Object.keys(t).sort(o&&o(t));for(s="",r=0;r<l.length;r++){var c=l[r],f=e(t[c]);f&&(s&&(s+=","),s+=JSON.stringify(c)+":"+f)}return a.splice(u,1),"{"+s+"}"}}(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.htmlparser2=t.convertNodeToElement=t.processNodes=void 0;var n=r(17);Object.defineProperty(t,"processNodes",{enumerable:!0,get:function(){return s(n).default}});var i=r(30);Object.defineProperty(t,"convertNodeToElement",{enumerable:!0,get:function(){return s(i).default}});var o=r(7);Object.defineProperty(t,"htmlparser2",{enumerable:!0,get:function(){return s(o).default}});var a=s(r(121));function s(e){return e&&e.__esModule?e:{default:e}}t.default=a.default},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.print=function(e){return(0,n.visit)(e,{leave:o})};var n=r(5),i=r(29);var o={Name:function(e){return e.value},Variable:function(e){return"$"+e.name},Document:function(e){return s(e.definitions,"\n\n")+"\n"},OperationDefinition:function(e){var t=e.operation,r=e.name,n=l("(",s(e.variableDefinitions,", "),")"),i=s(e.directives," "),o=e.selectionSet;return r||i||n||"query"!==t?s([t,s([r,n]),i,o]," "):o},VariableDefinition:function(e){var t=e.variable,r=e.type,n=e.defaultValue,i=e.directives;return t+": "+r+l(" = ",n)+l(" ",s(i," "))},SelectionSet:function(e){return u(e.selections)},Field:function(e){var t=e.alias,r=e.name,n=e.arguments,i=e.directives,o=e.selectionSet;return s([l("",t,": ")+r+l("(",s(n,", "),")"),s(i," "),o]," ")},Argument:function(e){return e.name+": "+e.value},FragmentSpread:function(e){return"..."+e.name+l(" ",s(e.directives," "))},InlineFragment:function(e){var t=e.typeCondition,r=e.directives,n=e.selectionSet;return s(["...",l("on ",t),s(r," "),n]," ")},FragmentDefinition:function(e){var t=e.name,r=e.typeCondition,n=e.variableDefinitions,i=e.directives,o=e.selectionSet;return"fragment ".concat(t).concat(l("(",s(n,", "),")")," ")+"on ".concat(r," ").concat(l("",s(i," ")," "))+o},IntValue:function(e){return e.value},FloatValue:function(e){return e.value},StringValue:function(e,t){var r=e.value;return e.block?(0,i.printBlockString)(r,"description"===t?"":"  "):JSON.stringify(r)},BooleanValue:function(e){return e.value?"true":"false"},NullValue:function(){return"null"},EnumValue:function(e){return e.value},ListValue:function(e){return"["+s(e.values,", ")+"]"},ObjectValue:function(e){return"{"+s(e.fields,", ")+"}"},ObjectField:function(e){return e.name+": "+e.value},Directive:function(e){return"@"+e.name+l("(",s(e.arguments,", "),")")},NamedType:function(e){return e.name},ListType:function(e){return"["+e.type+"]"},NonNullType:function(e){return e.type+"!"},SchemaDefinition:a((function(e){var t=e.directives,r=e.operationTypes;return s(["schema",s(t," "),u(r)]," ")})),OperationTypeDefinition:function(e){return e.operation+": "+e.type},ScalarTypeDefinition:a((function(e){return s(["scalar",e.name,s(e.directives," ")]," ")})),ObjectTypeDefinition:a((function(e){var t=e.name,r=e.interfaces,n=e.directives,i=e.fields;return s(["type",t,l("implements ",s(r," & ")),s(n," "),u(i)]," ")})),FieldDefinition:a((function(e){var t=e.name,r=e.arguments,n=e.type,i=e.directives;return t+(p(r)?l("(\n",c(s(r,"\n")),"\n)"):l("(",s(r,", "),")"))+": "+n+l(" ",s(i," "))})),InputValueDefinition:a((function(e){var t=e.name,r=e.type,n=e.defaultValue,i=e.directives;return s([t+": "+r,l("= ",n),s(i," ")]," ")})),InterfaceTypeDefinition:a((function(e){var t=e.name,r=e.interfaces,n=e.directives,i=e.fields;return s(["interface",t,l("implements ",s(r," & ")),s(n," "),u(i)]," ")})),UnionTypeDefinition:a((function(e){var t=e.name,r=e.directives,n=e.types;return s(["union",t,s(r," "),n&&0!==n.length?"= "+s(n," | "):""]," ")})),EnumTypeDefinition:a((function(e){var t=e.name,r=e.directives,n=e.values;return s(["enum",t,s(r," "),u(n)]," ")})),EnumValueDefinition:a((function(e){return s([e.name,s(e.directives," ")]," ")})),InputObjectTypeDefinition:a((function(e){var t=e.name,r=e.directives,n=e.fields;return s(["input",t,s(r," "),u(n)]," ")})),DirectiveDefinition:a((function(e){var t=e.name,r=e.arguments,n=e.repeatable,i=e.locations;return"directive @"+t+(p(r)?l("(\n",c(s(r,"\n")),"\n)"):l("(",s(r,", "),")"))+(n?" repeatable":"")+" on "+s(i," | ")})),SchemaExtension:function(e){var t=e.directives,r=e.operationTypes;return s(["extend schema",s(t," "),u(r)]," ")},ScalarTypeExtension:function(e){return s(["extend scalar",e.name,s(e.directives," ")]," ")},ObjectTypeExtension:function(e){var t=e.name,r=e.interfaces,n=e.directives,i=e.fields;return s(["extend type",t,l("implements ",s(r," & ")),s(n," "),u(i)]," ")},InterfaceTypeExtension:function(e){var t=e.name,r=e.interfaces,n=e.directives,i=e.fields;return s(["extend interface",t,l("implements ",s(r," & ")),s(n," "),u(i)]," ")},UnionTypeExtension:function(e){var t=e.name,r=e.directives,n=e.types;return s(["extend union",t,s(r," "),n&&0!==n.length?"= "+s(n," | "):""]," ")},EnumTypeExtension:function(e){var t=e.name,r=e.directives,n=e.values;return s(["extend enum",t,s(r," "),u(n)]," ")},InputObjectTypeExtension:function(e){var t=e.name,r=e.directives,n=e.fields;return s(["extend input",t,s(r," "),u(n)]," ")}};function a(e){return function(t){return s([t.description,e(t)],"\n")}}function s(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return null!==(t=null==e?void 0:e.filter((function(e){return e})).join(r))&&void 0!==t?t:""}function u(e){return e&&0!==e.length?"{\n"+c(s(e,"\n"))+"\n}":""}function l(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return t?e+t+r:""}function c(e){return e&&"  "+e.replace(/\n/g,"\n  ")}function f(e){return-1!==e.indexOf("\n")}function p(e){return e&&e.some(f)}},function(e,t,r){"use strict";(function(e){r.d(t,"a",(function(){return n}));Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));function n(){"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}}).call(this,r(9))},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(20),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,s=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,l=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,f=o?Symbol.for("react.provider"):60109,p=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.forward_ref"):60112,h=o?Symbol.for("react.suspense"):60113,m=o?Symbol.for("react.memo"):60115,y=o?Symbol.for("react.lazy"):60116,v="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var g={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},w={};function _(e,t,r){this.props=e,this.context=t,this.refs=w,this.updater=r||g}function E(){}function x(e,t,r){this.props=e,this.context=t,this.refs=w,this.updater=r||g}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!==n(e)&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=_.prototype;var k=x.prototype=new E;k.constructor=x,i(k,_.prototype),k.isPureReactComponent=!0;var S={current:null},T=Object.prototype.hasOwnProperty,O={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var n,i={},o=null,s=null;if(null!=t)for(n in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)T.call(t,n)&&!O.hasOwnProperty(n)&&(i[n]=t[n]);var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(n in u=e.defaultProps)void 0===i[n]&&(i[n]=u[n]);return{$$typeof:a,type:e,key:o,ref:s,props:i,_owner:S.current}}function N(e){return"object"===n(e)&&null!==e&&e.$$typeof===a}var R=/\/+/g,A=[];function D(e,t,r,n){if(A.length){var i=A.pop();return i.result=e,i.keyPrefix=t,i.func=r,i.context=n,i.count=0,i}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function I(e,t,r){return null==e?0:function e(t,r,i,o){var u=n(t);"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case a:case s:l=!0}}if(l)return i(o,t,""===r?"."+j(t,0):r),1;if(l=0,r=""===r?".":r+":",Array.isArray(t))for(var c=0;c<t.length;c++){var f=r+j(u=t[c],c);l+=e(u,f,i,o)}else if(null===t||"object"!==n(t)?f=null:f="function"==typeof(f=v&&t[v]||t["@@iterator"])?f:null,"function"==typeof f)for(t=f.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,f=r+j(u,c++),i,o);else if("object"===u)throw i=""+t,Error(b(31,"[object Object]"===i?"object with keys {"+Object.keys(t).join(", ")+"}":i,""));return l}(e,"",t,r)}function j(e,t){return"object"===n(e)&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function q(e,t){e.func.call(e.context,t,e.count++)}function L(e,t,r){var n=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,n,r,(function(e){return e})):null!=e&&(N(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(R,"$&/")+"/")+r)),n.push(e))}function M(e,t,r,n,i){var o="";null!=r&&(o=(""+r).replace(R,"$&/")+"/"),I(e,L,t=D(t,o,n,i)),P(t)}var F={current:null};function B(){var e=F.current;if(null===e)throw Error(b(321));return e}var U={ReactCurrentDispatcher:F,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:i};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return M(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;I(e,q,t=D(null,null,t,r)),P(t)},count:function(e){return I(e,(function(){return null}),null)},toArray:function(e){var t=[];return M(e,t,null,(function(e){return e})),t},only:function(e){if(!N(e))throw Error(b(143));return e}},t.Component=_,t.Fragment=u,t.Profiler=c,t.PureComponent=x,t.StrictMode=l,t.Suspense=h,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,r){if(null==e)throw Error(b(267,e));var n=i({},e.props),o=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=S.current),void 0!==t.key&&(o=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)T.call(t,c)&&!O.hasOwnProperty(c)&&(n[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)n.children=r;else if(1<c){l=Array(c);for(var f=0;f<c;f++)l[f]=arguments[f+2];n.children=l}return{$$typeof:a,type:e.type,key:o,ref:s,props:n,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=N,t.lazy=function(e){return{$$typeof:y,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return B().useCallback(e,t)},t.useContext=function(e,t){return B().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return B().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return B().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return B().useLayoutEffect(e,t)},t.useMemo=function(e,t){return B().useMemo(e,t)},t.useReducer=function(e,t,r){return B().useReducer(e,t,r)},t.useRef=function(e){return B().useRef(e)},t.useState=function(e){return B().useState(e)},t.version="16.13.1"},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(0),o=r(20),a=r(57);function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(s(227));function u(e,t,r,n,i,o,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(r,l)}catch(e){this.onError(e)}}var l=!1,c=null,f=!1,p=null,d={onError:function(e){l=!0,c=e}};function h(e,t,r,n,i,o,a,s,f){l=!1,c=null,u.apply(d,arguments)}var m=null,y=null,v=null;function b(e,t,r){var n=e.type||"unknown-event";e.currentTarget=v(r),function(e,t,r,n,i,o,a,u,d){if(h.apply(this,arguments),l){if(!l)throw Error(s(198));var m=c;l=!1,c=null,f||(f=!0,p=m)}}(n,t,void 0,e),e.currentTarget=null}var g=null,w={};function _(){if(g)for(var e in w){var t=w[e],r=g.indexOf(e);if(!(-1<r))throw Error(s(96,e));if(!x[r]){if(!t.extractEvents)throw Error(s(97,e));for(var n in x[r]=t,r=t.eventTypes){var i=void 0,o=r[n],a=t,u=n;if(k.hasOwnProperty(u))throw Error(s(99,u));k[u]=o;var l=o.phasedRegistrationNames;if(l){for(i in l)l.hasOwnProperty(i)&&E(l[i],a,u);i=!0}else o.registrationName?(E(o.registrationName,a,u),i=!0):i=!1;if(!i)throw Error(s(98,n,e))}}}}function E(e,t,r){if(S[e])throw Error(s(100,e));S[e]=t,T[e]=t.eventTypes[r].dependencies}var x=[],k={},S={},T={};function O(e){var t,r=!1;for(t in e)if(e.hasOwnProperty(t)){var n=e[t];if(!w.hasOwnProperty(t)||w[t]!==n){if(w[t])throw Error(s(102,t));w[t]=n,r=!0}}r&&_()}var C=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),N=null,R=null,A=null;function D(e){if(e=y(e)){if("function"!=typeof N)throw Error(s(280));var t=e.stateNode;t&&(t=m(t),N(e.stateNode,e.type,t))}}function P(e){R?A?A.push(e):A=[e]:R=e}function I(){if(R){var e=R,t=A;if(A=R=null,D(e),t)for(e=0;e<t.length;e++)D(t[e])}}function j(e,t){return e(t)}function q(e,t,r,n,i){return e(t,r,n,i)}function L(){}var M=j,F=!1,B=!1;function U(){null===R&&null===A||(L(),I())}function Q(e,t,r){if(B)return e(t,r);B=!0;try{return M(e,t,r)}finally{B=!1,U()}}var V=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,z=Object.prototype.hasOwnProperty,K={},H={};function G(e,t,r,i){if(null==t||function(e,t,r,i){if(null!==r&&0===r.type)return!1;switch(n(t)){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==r?!r.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,r,i))return!0;if(i)return!1;if(null!==r)switch(r.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Y(e,t,r,n,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=n,this.attributeNamespace=i,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=o}var W={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){W[e]=new Y(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];W[t]=new Y(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){W[e]=new Y(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){W[e]=new Y(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){W[e]=new Y(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){W[e]=new Y(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){W[e]=new Y(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){W[e]=new Y(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){W[e]=new Y(e,5,!1,e.toLowerCase(),null,!1)}));var $=/[\-:]([a-z])/g;function J(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace($,J);W[t]=new Y(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace($,J);W[t]=new Y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace($,J);W[t]=new Y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){W[e]=new Y(e,1,!1,e.toLowerCase(),null,!1)})),W.xlinkHref=new Y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){W[e]=new Y(e,1,!1,e.toLowerCase(),null,!0)}));var X=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function Z(e,t,r,n){var i=W.hasOwnProperty(t)?W[t]:null;(null!==i?0===i.type:!n&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(G(t,r,i,n)&&(r=null),n||null===i?function(e){return!!z.call(H,e)||!z.call(K,e)&&(V.test(e)?H[e]=!0:(K[e]=!0,!1))}(t)&&(null===r?e.removeAttribute(t):e.setAttribute(t,""+r)):i.mustUseProperty?e[i.propertyName]=null===r?3!==i.type&&"":r:(t=i.attributeName,n=i.attributeNamespace,null===r?e.removeAttribute(t):(r=3===(i=i.type)||4===i&&!0===r?"":""+r,n?e.setAttributeNS(n,t,r):e.setAttribute(t,r))))}X.hasOwnProperty("ReactCurrentDispatcher")||(X.ReactCurrentDispatcher={current:null}),X.hasOwnProperty("ReactCurrentBatchConfig")||(X.ReactCurrentBatchConfig={suspense:null});var ee=/^(.*)[\\\/]/,te="function"==typeof Symbol&&Symbol.for,re=te?Symbol.for("react.element"):60103,ne=te?Symbol.for("react.portal"):60106,ie=te?Symbol.for("react.fragment"):60107,oe=te?Symbol.for("react.strict_mode"):60108,ae=te?Symbol.for("react.profiler"):60114,se=te?Symbol.for("react.provider"):60109,ue=te?Symbol.for("react.context"):60110,le=te?Symbol.for("react.concurrent_mode"):60111,ce=te?Symbol.for("react.forward_ref"):60112,fe=te?Symbol.for("react.suspense"):60113,pe=te?Symbol.for("react.suspense_list"):60120,de=te?Symbol.for("react.memo"):60115,he=te?Symbol.for("react.lazy"):60116,me=te?Symbol.for("react.block"):60121,ye="function"==typeof Symbol&&Symbol.iterator;function ve(e){return null===e||"object"!==n(e)?null:"function"==typeof(e=ye&&e[ye]||e["@@iterator"])?e:null}function be(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ie:return"Fragment";case ne:return"Portal";case ae:return"Profiler";case oe:return"StrictMode";case fe:return"Suspense";case pe:return"SuspenseList"}if("object"===n(e))switch(e.$$typeof){case ue:return"Context.Consumer";case se:return"Context.Provider";case ce:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case de:return be(e.type);case me:return be(e.render);case he:if(e=1===e._status?e._result:null)return be(e)}return null}function ge(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var r="";break e;default:var n=e._debugOwner,i=e._debugSource,o=be(e.type);r=null,n&&(r=be(n.type)),n=o,o="",i?o=" (at "+i.fileName.replace(ee,"")+":"+i.lineNumber+")":r&&(o=" (created by "+r+")"),r="\n    in "+(n||"Unknown")+o}t+=r,e=e.return}while(e);return t}function we(e){switch(n(e)){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function _e(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ee(e){e._valueTracker||(e._valueTracker=function(e){var t=_e(e)?"checked":"value",r=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),n=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==r&&"function"==typeof r.get&&"function"==typeof r.set){var i=r.get,o=r.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){n=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:r.enumerable}),{getValue:function(){return n},setValue:function(e){n=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var r=t.getValue(),n="";return e&&(n=_e(e)?e.checked?"true":"false":e.value),(e=n)!==r&&(t.setValue(e),!0)}function ke(e,t){var r=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=r?r:e._wrapperState.initialChecked})}function Se(e,t){var r=null==t.defaultValue?"":t.defaultValue,n=null!=t.checked?t.checked:t.defaultChecked;r=we(null!=t.value?t.value:r),e._wrapperState={initialChecked:n,initialValue:r,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Te(e,t){null!=(t=t.checked)&&Z(e,"checked",t,!1)}function Oe(e,t){Te(e,t);var r=we(t.value),n=t.type;if(null!=r)"number"===n?(0===r&&""===e.value||e.value!=r)&&(e.value=""+r):e.value!==""+r&&(e.value=""+r);else if("submit"===n||"reset"===n)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ne(e,t.type,r):t.hasOwnProperty("defaultValue")&&Ne(e,t.type,we(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Ce(e,t,r){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var n=t.type;if(!("submit"!==n&&"reset"!==n||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r||t===e.value||(e.value=t),e.defaultValue=t}""!==(r=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==r&&(e.name=r)}function Ne(e,t,r){"number"===t&&e.ownerDocument.activeElement===e||(null==r?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+r&&(e.defaultValue=""+r))}function Re(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return i.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Ae(e,t,r,n){if(e=e.options,t){t={};for(var i=0;i<r.length;i++)t["$"+r[i]]=!0;for(r=0;r<e.length;r++)i=t.hasOwnProperty("$"+e[r].value),e[r].selected!==i&&(e[r].selected=i),i&&n&&(e[r].defaultSelected=!0)}else{for(r=""+we(r),t=null,i=0;i<e.length;i++){if(e[i].value===r)return e[i].selected=!0,void(n&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function De(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(s(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Pe(e,t){var r=t.value;if(null==r){if(r=t.children,t=t.defaultValue,null!=r){if(null!=t)throw Error(s(92));if(Array.isArray(r)){if(!(1>=r.length))throw Error(s(93));r=r[0]}t=r}null==t&&(t=""),r=t}e._wrapperState={initialValue:we(r)}}function Ie(e,t){var r=we(t.value),n=we(t.defaultValue);null!=r&&((r=""+r)!==e.value&&(e.value=r),null==t.defaultValue&&e.defaultValue!==r&&(e.defaultValue=r)),null!=n&&(e.defaultValue=""+n)}function je(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var qe="http://www.w3.org/1999/xhtml",Le="http://www.w3.org/2000/svg";function Me(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Fe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Me(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Be,Ue=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,r,n,i){MSApp.execUnsafeLocalFunction((function(){return e(t,r)}))}:e}((function(e,t){if(e.namespaceURI!==Le||"innerHTML"in e)e.innerHTML=t;else{for((Be=Be||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=Be.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Qe(e,t){if(t){var r=e.firstChild;if(r&&r===e.lastChild&&3===r.nodeType)return void(r.nodeValue=t)}e.textContent=t}function Ve(e,t){var r={};return r[e.toLowerCase()]=t.toLowerCase(),r["Webkit"+e]="webkit"+t,r["Moz"+e]="moz"+t,r}var ze={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Ke={},He={};function Ge(e){if(Ke[e])return Ke[e];if(!ze[e])return e;var t,r=ze[e];for(t in r)if(r.hasOwnProperty(t)&&t in He)return Ke[e]=r[t];return e}C&&(He=document.createElement("div").style,"AnimationEvent"in window||(delete ze.animationend.animation,delete ze.animationiteration.animation,delete ze.animationstart.animation),"TransitionEvent"in window||delete ze.transitionend.transition);var Ye=Ge("animationend"),We=Ge("animationiteration"),$e=Ge("animationstart"),Je=Ge("transitionend"),Xe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ze=new("function"==typeof WeakMap?WeakMap:Map);function et(e){var t=Ze.get(e);return void 0===t&&(t=new Map,Ze.set(e,t)),t}function tt(e){var t=e,r=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(r=t.return),e=t.return}while(e)}return 3===t.tag?r:null}function rt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function nt(e){if(tt(e)!==e)throw Error(s(188))}function it(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(s(188));return t!==e?null:e}for(var r=e,n=t;;){var i=r.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(n=i.return)){r=n;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===r)return nt(i),e;if(o===n)return nt(i),t;o=o.sibling}throw Error(s(188))}if(r.return!==n.return)r=i,n=o;else{for(var a=!1,u=i.child;u;){if(u===r){a=!0,r=i,n=o;break}if(u===n){a=!0,n=i,r=o;break}u=u.sibling}if(!a){for(u=o.child;u;){if(u===r){a=!0,r=o,n=i;break}if(u===n){a=!0,n=o,r=i;break}u=u.sibling}if(!a)throw Error(s(189))}}if(r.alternate!==n)throw Error(s(190))}if(3!==r.tag)throw Error(s(188));return r.stateNode.current===r?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function ot(e,t){if(null==t)throw Error(s(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function at(e,t,r){Array.isArray(e)?e.forEach(t,r):e&&t.call(r,e)}var st=null;function ut(e){if(e){var t=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(t))for(var n=0;n<t.length&&!e.isPropagationStopped();n++)b(e,t[n],r[n]);else t&&b(e,t,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function lt(e){if(null!==e&&(st=ot(st,e)),e=st,st=null,e){if(at(e,ut),st)throw Error(s(95));if(f)throw e=p,f=!1,p=null,e}}function ct(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ft(e){if(!C)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var pt=[];function dt(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>pt.length&&pt.push(e)}function ht(e,t,r,n){if(pt.length){var i=pt.pop();return i.topLevelType=e,i.eventSystemFlags=n,i.nativeEvent=t,i.targetInst=r,i}return{topLevelType:e,eventSystemFlags:n,nativeEvent:t,targetInst:r,ancestors:[]}}function mt(e){var t=e.targetInst,r=t;do{if(!r){e.ancestors.push(r);break}var n=r;if(3===n.tag)n=n.stateNode.containerInfo;else{for(;n.return;)n=n.return;n=3!==n.tag?null:n.stateNode.containerInfo}if(!n)break;5!==(t=r.tag)&&6!==t||e.ancestors.push(r),r=Cr(n)}while(r);for(r=0;r<e.ancestors.length;r++){t=e.ancestors[r];var i=ct(e.nativeEvent);n=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===r&&(a|=64);for(var s=null,u=0;u<x.length;u++){var l=x[u];l&&(l=l.extractEvents(n,t,o,i,a))&&(s=ot(s,l))}lt(s)}}function yt(e,t,r){if(!r.has(e)){switch(e){case"scroll":$t(t,"scroll",!0);break;case"focus":case"blur":$t(t,"focus",!0),$t(t,"blur",!0),r.set("blur",null),r.set("focus",null);break;case"cancel":case"close":ft(e)&&$t(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Xe.indexOf(e)&&Wt(e,t)}r.set(e,null)}}var vt,bt,gt,wt=!1,_t=[],Et=null,xt=null,kt=null,St=new Map,Tt=new Map,Ot=[],Ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Nt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Rt(e,t,r,n,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|r,nativeEvent:i,container:n}}function At(e,t){switch(e){case"focus":case"blur":Et=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":kt=null;break;case"pointerover":case"pointerout":St.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Tt.delete(t.pointerId)}}function Dt(e,t,r,n,i,o){return null===e||e.nativeEvent!==o?(e=Rt(t,r,n,i,o),null!==t&&(null!==(t=Nr(t))&&bt(t)),e):(e.eventSystemFlags|=n,e)}function Pt(e){var t=Cr(e.target);if(null!==t){var r=tt(t);if(null!==r)if(13===(t=r.tag)){if(null!==(t=rt(r)))return e.blockedOn=t,void a.unstable_runWithPriority(e.priority,(function(){gt(r)}))}else if(3===t&&r.stateNode.hydrate)return void(e.blockedOn=3===r.tag?r.stateNode.containerInfo:null)}e.blockedOn=null}function It(e){if(null!==e.blockedOn)return!1;var t=er(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var r=Nr(t);return null!==r&&bt(r),e.blockedOn=t,!1}return!0}function jt(e,t,r){It(e)&&r.delete(t)}function qt(){for(wt=!1;0<_t.length;){var e=_t[0];if(null!==e.blockedOn){null!==(e=Nr(e.blockedOn))&&vt(e);break}var t=er(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:_t.shift()}null!==Et&&It(Et)&&(Et=null),null!==xt&&It(xt)&&(xt=null),null!==kt&&It(kt)&&(kt=null),St.forEach(jt),Tt.forEach(jt)}function Lt(e,t){e.blockedOn===t&&(e.blockedOn=null,wt||(wt=!0,a.unstable_scheduleCallback(a.unstable_NormalPriority,qt)))}function Mt(e){function t(t){return Lt(t,e)}if(0<_t.length){Lt(_t[0],e);for(var r=1;r<_t.length;r++){var n=_t[r];n.blockedOn===e&&(n.blockedOn=null)}}for(null!==Et&&Lt(Et,e),null!==xt&&Lt(xt,e),null!==kt&&Lt(kt,e),St.forEach(t),Tt.forEach(t),r=0;r<Ot.length;r++)(n=Ot[r]).blockedOn===e&&(n.blockedOn=null);for(;0<Ot.length&&null===(r=Ot[0]).blockedOn;)Pt(r),null===r.blockedOn&&Ot.shift()}var Ft={},Bt=new Map,Ut=new Map,Qt=["abort","abort",Ye,"animationEnd",We,"animationIteration",$e,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Je,"transitionEnd","waiting","waiting"];function Vt(e,t){for(var r=0;r<e.length;r+=2){var n=e[r],i=e[r+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[n],eventPriority:t},Ut.set(n,t),Bt.set(n,o),Ft[i]=o}}Vt("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Vt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Vt(Qt,2);for(var zt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Kt=0;Kt<zt.length;Kt++)Ut.set(zt[Kt],0);var Ht=a.unstable_UserBlockingPriority,Gt=a.unstable_runWithPriority,Yt=!0;function Wt(e,t){$t(t,e,!1)}function $t(e,t,r){var n=Ut.get(t);switch(void 0===n?2:n){case 0:n=Jt.bind(null,t,1,e);break;case 1:n=Xt.bind(null,t,1,e);break;default:n=Zt.bind(null,t,1,e)}r?e.addEventListener(t,n,!0):e.addEventListener(t,n,!1)}function Jt(e,t,r,n){F||L();var i=Zt,o=F;F=!0;try{q(i,e,t,r,n)}finally{(F=o)||U()}}function Xt(e,t,r,n){Gt(Ht,Zt.bind(null,e,t,r,n))}function Zt(e,t,r,n){if(Yt)if(0<_t.length&&-1<Ct.indexOf(e))e=Rt(null,e,t,r,n),_t.push(e);else{var i=er(e,t,r,n);if(null===i)At(e,n);else if(-1<Ct.indexOf(e))e=Rt(i,e,t,r,n),_t.push(e);else if(!function(e,t,r,n,i){switch(t){case"focus":return Et=Dt(Et,e,t,r,n,i),!0;case"dragenter":return xt=Dt(xt,e,t,r,n,i),!0;case"mouseover":return kt=Dt(kt,e,t,r,n,i),!0;case"pointerover":var o=i.pointerId;return St.set(o,Dt(St.get(o)||null,e,t,r,n,i)),!0;case"gotpointercapture":return o=i.pointerId,Tt.set(o,Dt(Tt.get(o)||null,e,t,r,n,i)),!0}return!1}(i,e,t,r,n)){At(e,n),e=ht(e,n,null,t);try{Q(mt,e)}finally{dt(e)}}}}function er(e,t,r,n){if(null!==(r=Cr(r=ct(n)))){var i=tt(r);if(null===i)r=null;else{var o=i.tag;if(13===o){if(null!==(r=rt(i)))return r;r=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;r=null}else i!==r&&(r=null)}}e=ht(e,n,r,t);try{Q(mt,e)}finally{dt(e)}return null}var tr={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},rr=["Webkit","ms","Moz","O"];function nr(e,t,r){return null==t||"boolean"==typeof t||""===t?"":r||"number"!=typeof t||0===t||tr.hasOwnProperty(e)&&tr[e]?(""+t).trim():t+"px"}function ir(e,t){for(var r in e=e.style,t)if(t.hasOwnProperty(r)){var n=0===r.indexOf("--"),i=nr(r,t[r],n);"float"===r&&(r="cssFloat"),n?e.setProperty(r,i):e[r]=i}}Object.keys(tr).forEach((function(e){rr.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),tr[t]=tr[e]}))}));var or=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ar(e,t){if(t){if(or[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(s(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(s(60));if("object"!==n(t.dangerouslySetInnerHTML)||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=t.style&&"object"!==n(t.style))throw Error(s(62,""))}}function sr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var ur=qe;function lr(e,t){var r=et(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=T[t];for(var n=0;n<t.length;n++)yt(t[n],e,r)}function cr(){}function fr(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function pr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dr(e,t){var r,n=pr(e);for(e=0;n;){if(3===n.nodeType){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=pr(n)}}function hr(){for(var e=window,t=fr();t instanceof e.HTMLIFrameElement;){try{var r="string"==typeof t.contentWindow.location.href}catch(e){r=!1}if(!r)break;t=fr((e=t.contentWindow).document)}return t}function mr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yr=null,vr=null;function br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===n(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var wr="function"==typeof setTimeout?setTimeout:void 0,_r="function"==typeof clearTimeout?clearTimeout:void 0;function Er(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function xr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var r=e.data;if("$"===r||"$!"===r||"$?"===r){if(0===t)return e;t--}else"/$"===r&&t++}e=e.previousSibling}return null}var kr=Math.random().toString(36).slice(2),Sr="__reactInternalInstance$"+kr,Tr="__reactEventHandlers$"+kr,Or="__reactContainere$"+kr;function Cr(e){var t=e[Sr];if(t)return t;for(var r=e.parentNode;r;){if(t=r[Or]||r[Sr]){if(r=t.alternate,null!==t.child||null!==r&&null!==r.child)for(e=xr(e);null!==e;){if(r=e[Sr])return r;e=xr(e)}return t}r=(e=r).parentNode}return null}function Nr(e){return!(e=e[Sr]||e[Or])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Rr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(s(33))}function Ar(e){return e[Tr]||null}function Dr(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Pr(e,t){var r=e.stateNode;if(!r)return null;var i=m(r);if(!i)return null;r=i[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!i;break e;default:e=!1}if(e)return null;if(r&&"function"!=typeof r)throw Error(s(231,t,n(r)));return r}function Ir(e,t,r){(t=Pr(e,r.dispatchConfig.phasedRegistrationNames[t]))&&(r._dispatchListeners=ot(r._dispatchListeners,t),r._dispatchInstances=ot(r._dispatchInstances,e))}function jr(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,r=[];t;)r.push(t),t=Dr(t);for(t=r.length;0<t--;)Ir(r[t],"captured",e);for(t=0;t<r.length;t++)Ir(r[t],"bubbled",e)}}function qr(e,t,r){e&&r&&r.dispatchConfig.registrationName&&(t=Pr(e,r.dispatchConfig.registrationName))&&(r._dispatchListeners=ot(r._dispatchListeners,t),r._dispatchInstances=ot(r._dispatchInstances,e))}function Lr(e){e&&e.dispatchConfig.registrationName&&qr(e._targetInst,null,e)}function Mr(e){at(e,jr)}var Fr=null,Br=null,Ur=null;function Qr(){if(Ur)return Ur;var e,t,r=Br,n=r.length,i="value"in Fr?Fr.value:Fr.textContent,o=i.length;for(e=0;e<n&&r[e]===i[e];e++);var a=n-e;for(t=1;t<=a&&r[n-t]===i[o-t];t++);return Ur=i.slice(e,1<t?1-t:void 0)}function Vr(){return!0}function zr(){return!1}function Kr(e,t,r,n){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=r,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(r):"target"===i?this.target=n:this[i]=r[i]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?Vr:zr,this.isPropagationStopped=zr,this}function Hr(e,t,r,n){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,r,n),i}return new this(e,t,r,n)}function Gr(e){if(!(e instanceof this))throw Error(s(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Yr(e){e.eventPool=[],e.getPooled=Hr,e.release=Gr}o(Kr.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vr)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vr)},persist:function(){this.isPersistent=Vr},isPersistent:zr,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=zr,this._dispatchInstances=this._dispatchListeners=null}}),Kr.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Kr.extend=function(e){function t(){}function r(){return n.apply(this,arguments)}var n=this;t.prototype=n.prototype;var i=new t;return o(i,r.prototype),r.prototype=i,r.prototype.constructor=r,r.Interface=o({},n.Interface,e),r.extend=n.extend,Yr(r),r},Yr(Kr);var Wr=Kr.extend({data:null}),$r=Kr.extend({data:null}),Jr=[9,13,27,32],Xr=C&&"CompositionEvent"in window,Zr=null;C&&"documentMode"in document&&(Zr=document.documentMode);var en=C&&"TextEvent"in window&&!Zr,tn=C&&(!Xr||Zr&&8<Zr&&11>=Zr),rn=String.fromCharCode(32),nn={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},on=!1;function an(e,t){switch(e){case"keyup":return-1!==Jr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function sn(e){return"object"===n(e=e.detail)&&"data"in e?e.data:null}var un=!1;var ln={eventTypes:nn,extractEvents:function(e,t,r,n){var i;if(Xr)e:{switch(e){case"compositionstart":var o=nn.compositionStart;break e;case"compositionend":o=nn.compositionEnd;break e;case"compositionupdate":o=nn.compositionUpdate;break e}o=void 0}else un?an(e,r)&&(o=nn.compositionEnd):"keydown"===e&&229===r.keyCode&&(o=nn.compositionStart);return o?(tn&&"ko"!==r.locale&&(un||o!==nn.compositionStart?o===nn.compositionEnd&&un&&(i=Qr()):(Br="value"in(Fr=n)?Fr.value:Fr.textContent,un=!0)),o=Wr.getPooled(o,t,r,n),i?o.data=i:null!==(i=sn(r))&&(o.data=i),Mr(o),i=o):i=null,(e=en?function(e,t){switch(e){case"compositionend":return sn(t);case"keypress":return 32!==t.which?null:(on=!0,rn);case"textInput":return(e=t.data)===rn&&on?null:e;default:return null}}(e,r):function(e,t){if(un)return"compositionend"===e||!Xr&&an(e,t)?(e=Qr(),Ur=Br=Fr=null,un=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return tn&&"ko"!==t.locale?null:t.data;default:return null}}(e,r))?((t=$r.getPooled(nn.beforeInput,t,r,n)).data=e,Mr(t)):t=null,null===i?t:null===t?i:[i,t]}},cn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function fn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!cn[e.type]:"textarea"===t}var pn={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function dn(e,t,r){return(e=Kr.getPooled(pn.change,e,t,r)).type="change",P(r),Mr(e),e}var hn=null,mn=null;function yn(e){lt(e)}function vn(e){if(xe(Rr(e)))return e}function bn(e,t){if("change"===e)return t}var gn=!1;function wn(){hn&&(hn.detachEvent("onpropertychange",_n),mn=hn=null)}function _n(e){if("value"===e.propertyName&&vn(mn))if(e=dn(mn,e,ct(e)),F)lt(e);else{F=!0;try{j(yn,e)}finally{F=!1,U()}}}function En(e,t,r){"focus"===e?(wn(),mn=r,(hn=t).attachEvent("onpropertychange",_n)):"blur"===e&&wn()}function xn(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vn(mn)}function kn(e,t){if("click"===e)return vn(t)}function Sn(e,t){if("input"===e||"change"===e)return vn(t)}C&&(gn=ft("input")&&(!document.documentMode||9<document.documentMode));var Tn={eventTypes:pn,_isInputEventSupported:gn,extractEvents:function(e,t,r,n){var i=t?Rr(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=bn;else if(fn(i))if(gn)a=Sn;else{a=xn;var s=En}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=kn);if(a&&(a=a(e,t)))return dn(a,r,n);s&&s(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Ne(i,"number",i.value)}},On=Kr.extend({view:null,detail:null}),Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Nn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Cn[e])&&!!t[e]}function Rn(){return Nn}var An=0,Dn=0,Pn=!1,In=!1,jn=On.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Rn,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=An;return An=e.screenX,Pn?"mousemove"===e.type?e.screenX-t:0:(Pn=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Dn;return Dn=e.screenY,In?"mousemove"===e.type?e.screenY-t:0:(In=!0,0)}}),qn=jn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Ln={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Mn={eventTypes:Ln,extractEvents:function(e,t,r,n,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(r.relatedTarget||r.fromElement)||!a&&!o)return null;(o=n.window===n?n:(o=n.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=r.relatedTarget||r.toElement)?Cr(t):null)&&(t!==tt(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var s=jn,u=Ln.mouseLeave,l=Ln.mouseEnter,c="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=qn,u=Ln.pointerLeave,l=Ln.pointerEnter,c="pointer");if(e=null==a?o:Rr(a),o=null==t?o:Rr(t),(u=s.getPooled(u,a,r,n)).type=c+"leave",u.target=e,u.relatedTarget=o,(r=s.getPooled(l,t,r,n)).type=c+"enter",r.target=o,r.relatedTarget=e,c=t,(n=a)&&c)e:{for(l=c,a=0,e=s=n;e;e=Dr(e))a++;for(e=0,t=l;t;t=Dr(t))e++;for(;0<a-e;)s=Dr(s),a--;for(;0<e-a;)l=Dr(l),e--;for(;a--;){if(s===l||s===l.alternate)break e;s=Dr(s),l=Dr(l)}s=null}else s=null;for(l=s,s=[];n&&n!==l&&(null===(a=n.alternate)||a!==l);)s.push(n),n=Dr(n);for(n=[];c&&c!==l&&(null===(a=c.alternate)||a!==l);)n.push(c),c=Dr(c);for(c=0;c<s.length;c++)qr(s[c],"bubbled",u);for(c=n.length;0<c--;)qr(n[c],"captured",r);return 0==(64&i)?[u]:[u,r]}};var Fn="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Bn=Object.prototype.hasOwnProperty;function Un(e,t){if(Fn(e,t))return!0;if("object"!==n(e)||null===e||"object"!==n(t)||null===t)return!1;var r=Object.keys(e),i=Object.keys(t);if(r.length!==i.length)return!1;for(i=0;i<r.length;i++)if(!Bn.call(t,r[i])||!Fn(e[r[i]],t[r[i]]))return!1;return!0}var Qn=C&&"documentMode"in document&&11>=document.documentMode,Vn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zn=null,Kn=null,Hn=null,Gn=!1;function Yn(e,t){var r=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Gn||null==zn||zn!==fr(r)?null:("selectionStart"in(r=zn)&&mr(r)?r={start:r.selectionStart,end:r.selectionEnd}:r={anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Hn&&Un(Hn,r)?null:(Hn=r,(e=Kr.getPooled(Vn.select,Kn,e,t)).type="select",e.target=zn,Mr(e),e))}var Wn={eventTypes:Vn,extractEvents:function(e,t,r,n,i,o){if(!(o=!(i=o||(n.window===n?n.document:9===n.nodeType?n:n.ownerDocument)))){e:{i=et(i),o=T.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?Rr(t):window,e){case"focus":(fn(i)||"true"===i.contentEditable)&&(zn=i,Kn=t,Hn=null);break;case"blur":Hn=Kn=zn=null;break;case"mousedown":Gn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Gn=!1,Yn(r,n);case"selectionchange":if(Qn)break;case"keydown":case"keyup":return Yn(r,n)}return null}},$n=Kr.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Jn=Kr.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Xn=On.extend({relatedTarget:null});function Zn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var ei={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},ti={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ri=On.extend({key:function(e){if(e.key){var t=ei[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Zn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?ti[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Rn,charCode:function(e){return"keypress"===e.type?Zn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Zn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ni=jn.extend({dataTransfer:null}),ii=On.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Rn}),oi=Kr.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ai=jn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),si={eventTypes:Ft,extractEvents:function(e,t,r,n){var i=Bt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Zn(r))return null;case"keydown":case"keyup":e=ri;break;case"blur":case"focus":e=Xn;break;case"click":if(2===r.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=jn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ni;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ii;break;case Ye:case We:case $e:e=$n;break;case Je:e=oi;break;case"scroll":e=On;break;case"wheel":e=ai;break;case"copy":case"cut":case"paste":e=Jn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=qn;break;default:e=Kr}return Mr(t=e.getPooled(i,t,r,n)),t}};if(g)throw Error(s(101));g=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),_(),m=Ar,y=Nr,v=Rr,O({SimpleEventPlugin:si,EnterLeaveEventPlugin:Mn,ChangeEventPlugin:Tn,SelectEventPlugin:Wn,BeforeInputEventPlugin:ln});var ui=[],li=-1;function ci(e){0>li||(e.current=ui[li],ui[li]=null,li--)}function fi(e,t){li++,ui[li]=e.current,e.current=t}var pi={},di={current:pi},hi={current:!1},mi=pi;function yi(e,t){var r=e.type.contextTypes;if(!r)return pi;var n=e.stateNode;if(n&&n.__reactInternalMemoizedUnmaskedChildContext===t)return n.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in r)o[i]=t[i];return n&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function vi(e){return null!=(e=e.childContextTypes)}function bi(){ci(hi),ci(di)}function gi(e,t,r){if(di.current!==pi)throw Error(s(168));fi(di,t),fi(hi,r)}function wi(e,t,r){var n=e.stateNode;if(e=t.childContextTypes,"function"!=typeof n.getChildContext)return r;for(var i in n=n.getChildContext())if(!(i in e))throw Error(s(108,be(t)||"Unknown",i));return o({},r,{},n)}function _i(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||pi,mi=di.current,fi(di,e),fi(hi,hi.current),!0}function Ei(e,t,r){var n=e.stateNode;if(!n)throw Error(s(169));r?(e=wi(e,t,mi),n.__reactInternalMemoizedMergedChildContext=e,ci(hi),ci(di),fi(di,e)):ci(hi),fi(hi,r)}var xi=a.unstable_runWithPriority,ki=a.unstable_scheduleCallback,Si=a.unstable_cancelCallback,Ti=a.unstable_requestPaint,Oi=a.unstable_now,Ci=a.unstable_getCurrentPriorityLevel,Ni=a.unstable_ImmediatePriority,Ri=a.unstable_UserBlockingPriority,Ai=a.unstable_NormalPriority,Di=a.unstable_LowPriority,Pi=a.unstable_IdlePriority,Ii={},ji=a.unstable_shouldYield,qi=void 0!==Ti?Ti:function(){},Li=null,Mi=null,Fi=!1,Bi=Oi(),Ui=1e4>Bi?Oi:function(){return Oi()-Bi};function Qi(){switch(Ci()){case Ni:return 99;case Ri:return 98;case Ai:return 97;case Di:return 96;case Pi:return 95;default:throw Error(s(332))}}function Vi(e){switch(e){case 99:return Ni;case 98:return Ri;case 97:return Ai;case 96:return Di;case 95:return Pi;default:throw Error(s(332))}}function zi(e,t){return e=Vi(e),xi(e,t)}function Ki(e,t,r){return e=Vi(e),ki(e,t,r)}function Hi(e){return null===Li?(Li=[e],Mi=ki(Ni,Yi)):Li.push(e),Ii}function Gi(){if(null!==Mi){var e=Mi;Mi=null,Si(e)}Yi()}function Yi(){if(!Fi&&null!==Li){Fi=!0;var e=0;try{var t=Li;zi(99,(function(){for(;e<t.length;e++){var r=t[e];do{r=r(!0)}while(null!==r)}})),Li=null}catch(t){throw null!==Li&&(Li=Li.slice(e+1)),ki(Ni,Gi),t}finally{Fi=!1}}}function Wi(e,t,r){return 1073741821-(1+((1073741821-e+t/10)/(r/=10)|0))*r}function $i(e,t){if(e&&e.defaultProps)for(var r in t=o({},t),e=e.defaultProps)void 0===t[r]&&(t[r]=e[r]);return t}var Ji={current:null},Xi=null,Zi=null,eo=null;function to(){eo=Zi=Xi=null}function ro(e){var t=Ji.current;ci(Ji),e.type._context._currentValue=t}function no(e,t){for(;null!==e;){var r=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==r&&r.childExpirationTime<t&&(r.childExpirationTime=t);else{if(!(null!==r&&r.childExpirationTime<t))break;r.childExpirationTime=t}e=e.return}}function io(e,t){Xi=e,eo=Zi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Da=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zi){if(null===Xi)throw Error(s(308));Zi=t,Xi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Zi=Zi.next=t;return e._currentValue}var ao=!1;function so(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function uo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function lo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function co(e,t){if(null!==(e=e.updateQueue)){var r=(e=e.shared).pending;null===r?t.next=t:(t.next=r.next,r.next=t),e.pending=t}}function fo(e,t){var r=e.alternate;null!==r&&uo(r,e),null===(r=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=r.next,r.next=t)}function po(e,t,r,n){var i=e.updateQueue;ao=!1;var a=i.baseQueue,s=i.shared.pending;if(null!==s){if(null!==a){var u=a.next;a.next=s.next,s.next=u}a=s,i.shared.pending=null,null!==(u=e.alternate)&&(null!==(u=u.updateQueue)&&(u.baseQueue=s))}if(null!==a){u=a.next;var l=i.baseState,c=0,f=null,p=null,d=null;if(null!==u)for(var h=u;;){if((s=h.expirationTime)<n){var m={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===d?(p=d=m,f=l):d=d.next=m,s>c&&(c=s)}else{null!==d&&(d=d.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),su(s,h.suspenseConfig);e:{var y=e,v=h;switch(s=t,m=r,v.tag){case 1:if("function"==typeof(y=v.payload)){l=y.call(m,l,s);break e}l=y;break e;case 3:y.effectTag=-4097&y.effectTag|64;case 0:if(null==(s="function"==typeof(y=v.payload)?y.call(m,l,s):y))break e;l=o({},l,s);break e;case 2:ao=!0}}null!==h.callback&&(e.effectTag|=32,null===(s=i.effects)?i.effects=[h]:s.push(h))}if(null===(h=h.next)||h===u){if(null===(s=i.shared.pending))break;h=a.next=s.next,s.next=u,i.baseQueue=a=s,i.shared.pending=null}}null===d?f=l:d.next=p,i.baseState=f,i.baseQueue=d,uu(c),e.expirationTime=c,e.memoizedState=l}}function ho(e,t,r){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var n=e[t],i=n.callback;if(null!==i){if(n.callback=null,n=i,i=r,"function"!=typeof n)throw Error(s(191,n));n.call(i)}}}var mo=X.ReactCurrentBatchConfig,yo=(new i.Component).refs;function vo(e,t,r,n){r=null==(r=r(n,t=e.memoizedState))?t:o({},t,r),e.memoizedState=r,0===e.expirationTime&&(e.updateQueue.baseState=r)}var bo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,r){e=e._reactInternalFiber;var n=Ys(),i=mo.suspense;(i=lo(n=Ws(n,e,i),i)).payload=t,null!=r&&(i.callback=r),co(e,i),$s(e,n)},enqueueReplaceState:function(e,t,r){e=e._reactInternalFiber;var n=Ys(),i=mo.suspense;(i=lo(n=Ws(n,e,i),i)).tag=1,i.payload=t,null!=r&&(i.callback=r),co(e,i),$s(e,n)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var r=Ys(),n=mo.suspense;(n=lo(r=Ws(r,e,n),n)).tag=2,null!=t&&(n.callback=t),co(e,n),$s(e,r)}};function go(e,t,r,n,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(n,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Un(r,n)||!Un(i,o))}function wo(e,t,r){var i=!1,o=pi,a=t.contextType;return"object"===n(a)&&null!==a?a=oo(a):(o=vi(t)?mi:di.current,a=(i=null!=(i=t.contextTypes))?yi(e,o):pi),t=new t(r,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=bo,e.stateNode=t,t._reactInternalFiber=e,i&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function _o(e,t,r,n){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(r,n),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(r,n),t.state!==e&&bo.enqueueReplaceState(t,t.state,null)}function Eo(e,t,r,i){var o=e.stateNode;o.props=r,o.state=e.memoizedState,o.refs=yo,so(e);var a=t.contextType;"object"===n(a)&&null!==a?o.context=oo(a):(a=vi(t)?mi:di.current,o.context=yi(e,a)),po(e,r,o,i),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(vo(e,t,a,r),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&bo.enqueueReplaceState(o,o.state,null),po(e,r,o,i),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var xo=Array.isArray;function ko(e,t,r){if(null!==(e=r.ref)&&"function"!=typeof e&&"object"!==n(e)){if(r._owner){if(r=r._owner){if(1!==r.tag)throw Error(s(309));var i=r.stateNode}if(!i)throw Error(s(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=i.refs;t===yo&&(t=i.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(s(284));if(!r._owner)throw Error(s(290,e))}return e}function So(e,t){if("textarea"!==e.type)throw Error(s(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function To(e){function t(t,r){if(e){var n=t.lastEffect;null!==n?(n.nextEffect=r,t.lastEffect=r):t.firstEffect=t.lastEffect=r,r.nextEffect=null,r.effectTag=8}}function r(r,n){if(!e)return null;for(;null!==n;)t(r,n),n=n.sibling;return null}function i(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Cu(e,t)).index=0,e.sibling=null,e}function a(t,r,n){return t.index=n,e?null!==(n=t.alternate)?(n=n.index)<r?(t.effectTag=2,r):n:(t.effectTag=2,r):r}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,r,n){return null===t||6!==t.tag?((t=Au(r,e.mode,n)).return=e,t):((t=o(t,r)).return=e,t)}function c(e,t,r,n){return null!==t&&t.elementType===r.type?((n=o(t,r.props)).ref=ko(e,t,r),n.return=e,n):((n=Nu(r.type,r.key,r.props,null,e.mode,n)).ref=ko(e,t,r),n.return=e,n)}function f(e,t,r,n){return null===t||4!==t.tag||t.stateNode.containerInfo!==r.containerInfo||t.stateNode.implementation!==r.implementation?((t=Du(r,e.mode,n)).return=e,t):((t=o(t,r.children||[])).return=e,t)}function p(e,t,r,n,i){return null===t||7!==t.tag?((t=Ru(r,e.mode,n,i)).return=e,t):((t=o(t,r)).return=e,t)}function d(e,t,r){if("string"==typeof t||"number"==typeof t)return(t=Au(""+t,e.mode,r)).return=e,t;if("object"===n(t)&&null!==t){switch(t.$$typeof){case re:return(r=Nu(t.type,t.key,t.props,null,e.mode,r)).ref=ko(e,null,t),r.return=e,r;case ne:return(t=Du(t,e.mode,r)).return=e,t}if(xo(t)||ve(t))return(t=Ru(t,e.mode,r,null)).return=e,t;So(e,t)}return null}function h(e,t,r,i){var o=null!==t?t.key:null;if("string"==typeof r||"number"==typeof r)return null!==o?null:l(e,t,""+r,i);if("object"===n(r)&&null!==r){switch(r.$$typeof){case re:return r.key===o?r.type===ie?p(e,t,r.props.children,i,o):c(e,t,r,i):null;case ne:return r.key===o?f(e,t,r,i):null}if(xo(r)||ve(r))return null!==o?null:p(e,t,r,i,null);So(e,r)}return null}function m(e,t,r,i,o){if("string"==typeof i||"number"==typeof i)return l(t,e=e.get(r)||null,""+i,o);if("object"===n(i)&&null!==i){switch(i.$$typeof){case re:return e=e.get(null===i.key?r:i.key)||null,i.type===ie?p(t,e,i.props.children,o,i.key):c(t,e,i,o);case ne:return f(t,e=e.get(null===i.key?r:i.key)||null,i,o)}if(xo(i)||ve(i))return p(t,e=e.get(r)||null,i,o,null);So(t,i)}return null}function y(n,o,s,u){for(var l=null,c=null,f=o,p=o=0,y=null;null!==f&&p<s.length;p++){f.index>p?(y=f,f=null):y=f.sibling;var v=h(n,f,s[p],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(n,f),o=a(v,o,p),null===c?l=v:c.sibling=v,c=v,f=y}if(p===s.length)return r(n,f),l;if(null===f){for(;p<s.length;p++)null!==(f=d(n,s[p],u))&&(o=a(f,o,p),null===c?l=f:c.sibling=f,c=f);return l}for(f=i(n,f);p<s.length;p++)null!==(y=m(f,n,p,s[p],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?p:y.key),o=a(y,o,p),null===c?l=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(n,e)})),l}function v(n,o,u,l){var c=ve(u);if("function"!=typeof c)throw Error(s(150));if(null==(u=c.call(u)))throw Error(s(151));for(var f=c=null,p=o,y=o=0,v=null,b=u.next();null!==p&&!b.done;y++,b=u.next()){p.index>y?(v=p,p=null):v=p.sibling;var g=h(n,p,b.value,l);if(null===g){null===p&&(p=v);break}e&&p&&null===g.alternate&&t(n,p),o=a(g,o,y),null===f?c=g:f.sibling=g,f=g,p=v}if(b.done)return r(n,p),c;if(null===p){for(;!b.done;y++,b=u.next())null!==(b=d(n,b.value,l))&&(o=a(b,o,y),null===f?c=b:f.sibling=b,f=b);return c}for(p=i(n,p);!b.done;y++,b=u.next())null!==(b=m(p,n,y,b.value,l))&&(e&&null!==b.alternate&&p.delete(null===b.key?y:b.key),o=a(b,o,y),null===f?c=b:f.sibling=b,f=b);return e&&p.forEach((function(e){return t(n,e)})),c}return function(e,i,a,l){var c="object"===n(a)&&null!==a&&a.type===ie&&null===a.key;c&&(a=a.props.children);var f="object"===n(a)&&null!==a;if(f)switch(a.$$typeof){case re:e:{for(f=a.key,c=i;null!==c;){if(c.key===f){switch(c.tag){case 7:if(a.type===ie){r(e,c.sibling),(i=o(c,a.props.children)).return=e,e=i;break e}break;default:if(c.elementType===a.type){r(e,c.sibling),(i=o(c,a.props)).ref=ko(e,c,a),i.return=e,e=i;break e}}r(e,c);break}t(e,c),c=c.sibling}a.type===ie?((i=Ru(a.props.children,e.mode,l,a.key)).return=e,e=i):((l=Nu(a.type,a.key,a.props,null,e.mode,l)).ref=ko(e,i,a),l.return=e,e=l)}return u(e);case ne:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){r(e,i.sibling),(i=o(i,a.children||[])).return=e,e=i;break e}r(e,i);break}t(e,i),i=i.sibling}(i=Du(a,e.mode,l)).return=e,e=i}return u(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==i&&6===i.tag?(r(e,i.sibling),(i=o(i,a)).return=e,e=i):(r(e,i),(i=Au(a,e.mode,l)).return=e,e=i),u(e);if(xo(a))return y(e,i,a,l);if(ve(a))return v(e,i,a,l);if(f&&So(e,a),void 0===a&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(s(152,e.displayName||e.name||"Component"))}return r(e,i)}}var Oo=To(!0),Co=To(!1),No={},Ro={current:No},Ao={current:No},Do={current:No};function Po(e){if(e===No)throw Error(s(174));return e}function Io(e,t){switch(fi(Do,t),fi(Ao,e),fi(Ro,No),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Fe(null,"");break;default:t=Fe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ci(Ro),fi(Ro,t)}function jo(){ci(Ro),ci(Ao),ci(Do)}function qo(e){Po(Do.current);var t=Po(Ro.current),r=Fe(t,e.type);t!==r&&(fi(Ao,e),fi(Ro,r))}function Lo(e){Ao.current===e&&(ci(Ro),ci(Ao))}var Mo={current:0};function Fo(e){for(var t=e;null!==t;){if(13===t.tag){var r=t.memoizedState;if(null!==r&&(null===(r=r.dehydrated)||"$?"===r.data||"$!"===r.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Bo(e,t){return{responder:e,props:t}}var Uo=X.ReactCurrentDispatcher,Qo=X.ReactCurrentBatchConfig,Vo=0,zo=null,Ko=null,Ho=null,Go=!1;function Yo(){throw Error(s(321))}function Wo(e,t){if(null===t)return!1;for(var r=0;r<t.length&&r<e.length;r++)if(!Fn(e[r],t[r]))return!1;return!0}function $o(e,t,r,n,i,o){if(Vo=o,zo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Uo.current=null===e||null===e.memoizedState?ga:wa,e=r(n,i),t.expirationTime===Vo){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(s(301));o+=1,Ho=Ko=null,t.updateQueue=null,Uo.current=_a,e=r(n,i)}while(t.expirationTime===Vo)}if(Uo.current=ba,t=null!==Ko&&null!==Ko.next,Vo=0,Ho=Ko=zo=null,Go=!1,t)throw Error(s(300));return e}function Jo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Ho?zo.memoizedState=Ho=e:Ho=Ho.next=e,Ho}function Xo(){if(null===Ko){var e=zo.alternate;e=null!==e?e.memoizedState:null}else e=Ko.next;var t=null===Ho?zo.memoizedState:Ho.next;if(null!==t)Ho=t,Ko=e;else{if(null===e)throw Error(s(310));e={memoizedState:(Ko=e).memoizedState,baseState:Ko.baseState,baseQueue:Ko.baseQueue,queue:Ko.queue,next:null},null===Ho?zo.memoizedState=Ho=e:Ho=Ho.next=e}return Ho}function Zo(e,t){return"function"==typeof t?t(e):t}function ea(e){var t=Xo(),r=t.queue;if(null===r)throw Error(s(311));r.lastRenderedReducer=e;var n=Ko,i=n.baseQueue,o=r.pending;if(null!==o){if(null!==i){var a=i.next;i.next=o.next,o.next=a}n.baseQueue=i=o,r.pending=null}if(null!==i){i=i.next,n=n.baseState;var u=a=o=null,l=i;do{var c=l.expirationTime;if(c<Vo){var f={expirationTime:l.expirationTime,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(a=u=f,o=n):u=u.next=f,c>zo.expirationTime&&(zo.expirationTime=c,uu(c))}else null!==u&&(u=u.next={expirationTime:1073741823,suspenseConfig:l.suspenseConfig,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),su(c,l.suspenseConfig),n=l.eagerReducer===e?l.eagerState:e(n,l.action);l=l.next}while(null!==l&&l!==i);null===u?o=n:u.next=a,Fn(n,t.memoizedState)||(Da=!0),t.memoizedState=n,t.baseState=o,t.baseQueue=u,r.lastRenderedState=n}return[t.memoizedState,r.dispatch]}function ta(e){var t=Xo(),r=t.queue;if(null===r)throw Error(s(311));r.lastRenderedReducer=e;var n=r.dispatch,i=r.pending,o=t.memoizedState;if(null!==i){r.pending=null;var a=i=i.next;do{o=e(o,a.action),a=a.next}while(a!==i);Fn(o,t.memoizedState)||(Da=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),r.lastRenderedState=o}return[o,n]}function ra(e){var t=Jo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Zo,lastRenderedState:e}).dispatch=va.bind(null,zo,e),[t.memoizedState,e]}function na(e,t,r,n){return e={tag:e,create:t,destroy:r,deps:n,next:null},null===(t=zo.updateQueue)?(t={lastEffect:null},zo.updateQueue=t,t.lastEffect=e.next=e):null===(r=t.lastEffect)?t.lastEffect=e.next=e:(n=r.next,r.next=e,e.next=n,t.lastEffect=e),e}function ia(){return Xo().memoizedState}function oa(e,t,r,n){var i=Jo();zo.effectTag|=e,i.memoizedState=na(1|t,r,void 0,void 0===n?null:n)}function aa(e,t,r,n){var i=Xo();n=void 0===n?null:n;var o=void 0;if(null!==Ko){var a=Ko.memoizedState;if(o=a.destroy,null!==n&&Wo(n,a.deps))return void na(t,r,o,n)}zo.effectTag|=e,i.memoizedState=na(1|t,r,o,n)}function sa(e,t){return oa(516,4,e,t)}function ua(e,t){return aa(516,4,e,t)}function la(e,t){return aa(4,2,e,t)}function ca(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function fa(e,t,r){return r=null!=r?r.concat([e]):null,aa(4,2,ca.bind(null,t,e),r)}function pa(){}function da(e,t){return Jo().memoizedState=[e,void 0===t?null:t],e}function ha(e,t){var r=Xo();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Wo(t,n[1])?n[0]:(r.memoizedState=[e,t],e)}function ma(e,t){var r=Xo();t=void 0===t?null:t;var n=r.memoizedState;return null!==n&&null!==t&&Wo(t,n[1])?n[0]:(e=e(),r.memoizedState=[e,t],e)}function ya(e,t,r){var n=Qi();zi(98>n?98:n,(function(){e(!0)})),zi(97<n?97:n,(function(){var n=Qo.suspense;Qo.suspense=void 0===t?null:t;try{e(!1),r()}finally{Qo.suspense=n}}))}function va(e,t,r){var n=Ys(),i=mo.suspense;i={expirationTime:n=Ws(n,e,i),suspenseConfig:i,action:r,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===zo||null!==o&&o===zo)Go=!0,i.expirationTime=Vo,zo.expirationTime=Vo;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,s=o(a,r);if(i.eagerReducer=o,i.eagerState=s,Fn(s,a))return}catch(e){}$s(e,n)}}var ba={readContext:oo,useCallback:Yo,useContext:Yo,useEffect:Yo,useImperativeHandle:Yo,useLayoutEffect:Yo,useMemo:Yo,useReducer:Yo,useRef:Yo,useState:Yo,useDebugValue:Yo,useResponder:Yo,useDeferredValue:Yo,useTransition:Yo},ga={readContext:oo,useCallback:da,useContext:oo,useEffect:sa,useImperativeHandle:function(e,t,r){return r=null!=r?r.concat([e]):null,oa(4,2,ca.bind(null,t,e),r)},useLayoutEffect:function(e,t){return oa(4,2,e,t)},useMemo:function(e,t){var r=Jo();return t=void 0===t?null:t,e=e(),r.memoizedState=[e,t],e},useReducer:function(e,t,r){var n=Jo();return t=void 0!==r?r(t):t,n.memoizedState=n.baseState=t,e=(e=n.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,zo,e),[n.memoizedState,e]},useRef:function(e){return e={current:e},Jo().memoizedState=e},useState:ra,useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var r=ra(e),n=r[0],i=r[1];return sa((function(){var r=Qo.suspense;Qo.suspense=void 0===t?null:t;try{i(e)}finally{Qo.suspense=r}}),[e,t]),n},useTransition:function(e){var t=ra(!1),r=t[0];return t=t[1],[da(ya.bind(null,t,e),[t,e]),r]}},wa={readContext:oo,useCallback:ha,useContext:oo,useEffect:ua,useImperativeHandle:fa,useLayoutEffect:la,useMemo:ma,useReducer:ea,useRef:ia,useState:function(){return ea(Zo)},useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var r=ea(Zo),n=r[0],i=r[1];return ua((function(){var r=Qo.suspense;Qo.suspense=void 0===t?null:t;try{i(e)}finally{Qo.suspense=r}}),[e,t]),n},useTransition:function(e){var t=ea(Zo),r=t[0];return t=t[1],[ha(ya.bind(null,t,e),[t,e]),r]}},_a={readContext:oo,useCallback:ha,useContext:oo,useEffect:ua,useImperativeHandle:fa,useLayoutEffect:la,useMemo:ma,useReducer:ta,useRef:ia,useState:function(){return ta(Zo)},useDebugValue:pa,useResponder:Bo,useDeferredValue:function(e,t){var r=ta(Zo),n=r[0],i=r[1];return ua((function(){var r=Qo.suspense;Qo.suspense=void 0===t?null:t;try{i(e)}finally{Qo.suspense=r}}),[e,t]),n},useTransition:function(e){var t=ta(Zo),r=t[0];return t=t[1],[ha(ya.bind(null,t,e),[t,e]),r]}},Ea=null,xa=null,ka=!1;function Sa(e,t){var r=Tu(5,null,null,0);r.elementType="DELETED",r.type="DELETED",r.stateNode=t,r.return=e,r.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=r,e.lastEffect=r):e.firstEffect=e.lastEffect=r}function Ta(e,t){switch(e.tag){case 5:var r=e.type;return null!==(t=1!==t.nodeType||r.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Oa(e){if(ka){var t=xa;if(t){var r=t;if(!Ta(e,t)){if(!(t=Er(r.nextSibling))||!Ta(e,t))return e.effectTag=-1025&e.effectTag|2,ka=!1,void(Ea=e);Sa(Ea,r)}Ea=e,xa=Er(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,ka=!1,Ea=e}}function Ca(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ea=e}function Na(e){if(e!==Ea)return!1;if(!ka)return Ca(e),ka=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!gr(t,e.memoizedProps))for(t=xa;t;)Sa(e,t),t=Er(t.nextSibling);if(Ca(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var r=e.data;if("/$"===r){if(0===t){xa=Er(e.nextSibling);break e}t--}else"$"!==r&&"$!"!==r&&"$?"!==r||t++}e=e.nextSibling}xa=null}}else xa=Ea?Er(e.stateNode.nextSibling):null;return!0}function Ra(){xa=Ea=null,ka=!1}var Aa=X.ReactCurrentOwner,Da=!1;function Pa(e,t,r,n){t.child=null===e?Co(t,null,r,n):Oo(t,e.child,r,n)}function Ia(e,t,r,n,i){r=r.render;var o=t.ref;return io(t,i),n=$o(e,t,r,n,o,i),null===e||Da?(t.effectTag|=1,Pa(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),$a(e,t,i))}function ja(e,t,r,n,i,o){if(null===e){var a=r.type;return"function"!=typeof a||Ou(a)||void 0!==a.defaultProps||null!==r.compare||void 0!==r.defaultProps?((e=Nu(r.type,null,n,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,qa(e,t,a,n,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(r=null!==(r=r.compare)?r:Un)(i,n)&&e.ref===t.ref)?$a(e,t,o):(t.effectTag|=1,(e=Cu(a,n)).ref=t.ref,e.return=t,t.child=e)}function qa(e,t,r,n,i,o){return null!==e&&Un(e.memoizedProps,n)&&e.ref===t.ref&&(Da=!1,i<o)?(t.expirationTime=e.expirationTime,$a(e,t,o)):Ma(e,t,r,n,o)}function La(e,t){var r=t.ref;(null===e&&null!==r||null!==e&&e.ref!==r)&&(t.effectTag|=128)}function Ma(e,t,r,n,i){var o=vi(r)?mi:di.current;return o=yi(t,o),io(t,i),r=$o(e,t,r,n,o,i),null===e||Da?(t.effectTag|=1,Pa(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),$a(e,t,i))}function Fa(e,t,r,i,o){if(vi(r)){var a=!0;_i(t)}else a=!1;if(io(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),wo(t,r,i),Eo(t,r,i,o),i=!0;else if(null===e){var s=t.stateNode,u=t.memoizedProps;s.props=u;var l=s.context,c=r.contextType;"object"===n(c)&&null!==c?c=oo(c):c=yi(t,c=vi(r)?mi:di.current);var f=r.getDerivedStateFromProps,p="function"==typeof f||"function"==typeof s.getSnapshotBeforeUpdate;p||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(u!==i||l!==c)&&_o(t,s,i,c),ao=!1;var d=t.memoizedState;s.state=d,po(t,i,s,o),l=t.memoizedState,u!==i||d!==l||hi.current||ao?("function"==typeof f&&(vo(t,r,f,i),l=t.memoizedState),(u=ao||go(t,r,u,i,d,l,c))?(p||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.effectTag|=4)):("function"==typeof s.componentDidMount&&(t.effectTag|=4),t.memoizedProps=i,t.memoizedState=l),s.props=i,s.state=l,s.context=c,i=u):("function"==typeof s.componentDidMount&&(t.effectTag|=4),i=!1)}else s=t.stateNode,uo(e,t),u=t.memoizedProps,s.props=t.type===t.elementType?u:$i(t.type,u),l=s.context,"object"===n(c=r.contextType)&&null!==c?c=oo(c):c=yi(t,c=vi(r)?mi:di.current),(p="function"==typeof(f=r.getDerivedStateFromProps)||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(u!==i||l!==c)&&_o(t,s,i,c),ao=!1,l=t.memoizedState,s.state=l,po(t,i,s,o),d=t.memoizedState,u!==i||l!==d||hi.current||ao?("function"==typeof f&&(vo(t,r,f,i),d=t.memoizedState),(f=ao||go(t,r,u,i,l,d,c))?(p||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(i,d,c),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(i,d,c)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof s.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=i,t.memoizedState=d),s.props=i,s.state=d,s.context=c,i=f):("function"!=typeof s.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),i=!1);return Ba(e,t,r,i,a,o)}function Ba(e,t,r,n,i,o){La(e,t);var a=0!=(64&t.effectTag);if(!n&&!a)return i&&Ei(t,r,!1),$a(e,t,o);n=t.stateNode,Aa.current=t;var s=a&&"function"!=typeof r.getDerivedStateFromError?null:n.render();return t.effectTag|=1,null!==e&&a?(t.child=Oo(t,e.child,null,o),t.child=Oo(t,null,s,o)):Pa(e,t,s,o),t.memoizedState=n.state,i&&Ei(t,r,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?gi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&gi(0,t.context,!1),Io(e,t.containerInfo)}var Qa,Va,za,Ka={dehydrated:null,retryTime:0};function Ha(e,t,r){var n,i=t.mode,o=t.pendingProps,a=Mo.current,s=!1;if((n=0!=(64&t.effectTag))||(n=0!=(2&a)&&(null===e||null!==e.memoizedState)),n?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),fi(Mo,1&a),null===e){if(void 0!==o.fallback&&Oa(t),s){if(s=o.fallback,(o=Ru(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(r=Ru(s,i,r,null)).return=t,o.sibling=r,t.memoizedState=Ka,t.child=o,r}return i=o.children,t.memoizedState=null,t.child=Co(t,null,i,r)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,s){if(o=o.fallback,(r=Cu(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(r.child=s;null!==s;)s.return=r,s=s.sibling;return(i=Cu(i,o)).return=t,r.sibling=i,r.childExpirationTime=0,t.memoizedState=Ka,t.child=r,i}return r=Oo(t,e.child,o.children,r),t.memoizedState=null,t.child=r}if(e=e.child,s){if(s=o.fallback,(o=Ru(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(r=Ru(s,i,r,null)).return=t,o.sibling=r,r.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Ka,t.child=o,r}return t.memoizedState=null,t.child=Oo(t,e,o.children,r)}function Ga(e,t){e.expirationTime<t&&(e.expirationTime=t);var r=e.alternate;null!==r&&r.expirationTime<t&&(r.expirationTime=t),no(e.return,t)}function Ya(e,t,r,n,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:n,tail:r,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=n,a.tail=r,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function Wa(e,t,r){var n=t.pendingProps,i=n.revealOrder,o=n.tail;if(Pa(e,t,n.children,r),0!=(2&(n=Mo.current)))n=1&n|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ga(e,r);else if(19===e.tag)Ga(e,r);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}n&=1}if(fi(Mo,n),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(r=t.child,i=null;null!==r;)null!==(e=r.alternate)&&null===Fo(e)&&(i=r),r=r.sibling;null===(r=i)?(i=t.child,t.child=null):(i=r.sibling,r.sibling=null),Ya(t,!1,i,r,o,t.lastEffect);break;case"backwards":for(r=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Fo(e)){t.child=i;break}e=i.sibling,i.sibling=r,r=i,i=e}Ya(t,!0,r,null,o,t.lastEffect);break;case"together":Ya(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function $a(e,t,r){null!==e&&(t.dependencies=e.dependencies);var n=t.expirationTime;if(0!==n&&uu(n),t.childExpirationTime<r)return null;if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(r=Cu(e=t.child,e.pendingProps),t.child=r,r.return=t;null!==e.sibling;)e=e.sibling,(r=r.sibling=Cu(e,e.pendingProps)).return=t;r.sibling=null}return t.child}function Ja(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var r=null;null!==t;)null!==t.alternate&&(r=t),t=t.sibling;null===r?e.tail=null:r.sibling=null;break;case"collapsed":r=e.tail;for(var n=null;null!==r;)null!==r.alternate&&(n=r),r=r.sibling;null===n?t||null===e.tail?e.tail=null:e.tail.sibling=null:n.sibling=null}}function Xa(e,t,r){var n=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vi(t.type)&&bi(),null;case 3:return jo(),ci(hi),ci(di),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||!Na(t)||(t.effectTag|=4),null;case 5:Lo(t),r=Po(Do.current);var i=t.type;if(null!==e&&null!=t.stateNode)Va(e,t,i,n,r),e.ref!==t.ref&&(t.effectTag|=128);else{if(!n){if(null===t.stateNode)throw Error(s(166));return null}if(e=Po(Ro.current),Na(t)){n=t.stateNode,i=t.type;var a=t.memoizedProps;switch(n[Sr]=t,n[Tr]=a,i){case"iframe":case"object":case"embed":Wt("load",n);break;case"video":case"audio":for(e=0;e<Xe.length;e++)Wt(Xe[e],n);break;case"source":Wt("error",n);break;case"img":case"image":case"link":Wt("error",n),Wt("load",n);break;case"form":Wt("reset",n),Wt("submit",n);break;case"details":Wt("toggle",n);break;case"input":Se(n,a),Wt("invalid",n),lr(r,"onChange");break;case"select":n._wrapperState={wasMultiple:!!a.multiple},Wt("invalid",n),lr(r,"onChange");break;case"textarea":Pe(n,a),Wt("invalid",n),lr(r,"onChange")}for(var u in ar(i,a),e=null,a)if(a.hasOwnProperty(u)){var l=a[u];"children"===u?"string"==typeof l?n.textContent!==l&&(e=["children",l]):"number"==typeof l&&n.textContent!==""+l&&(e=["children",""+l]):S.hasOwnProperty(u)&&null!=l&&lr(r,u)}switch(i){case"input":Ee(n),Ce(n,a,!0);break;case"textarea":Ee(n),je(n);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(n.onclick=cr)}r=e,t.updateQueue=r,null!==r&&(t.effectTag|=4)}else{switch(u=9===r.nodeType?r:r.ownerDocument,e===ur&&(e=Me(i)),e===ur?"script"===i?((e=u.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof n.is?e=u.createElement(i,{is:n.is}):(e=u.createElement(i),"select"===i&&(u=e,n.multiple?u.multiple=!0:n.size&&(u.size=n.size))):e=u.createElementNS(e,i),e[Sr]=t,e[Tr]=n,Qa(e,t),t.stateNode=e,u=sr(i,n),i){case"iframe":case"object":case"embed":Wt("load",e),l=n;break;case"video":case"audio":for(l=0;l<Xe.length;l++)Wt(Xe[l],e);l=n;break;case"source":Wt("error",e),l=n;break;case"img":case"image":case"link":Wt("error",e),Wt("load",e),l=n;break;case"form":Wt("reset",e),Wt("submit",e),l=n;break;case"details":Wt("toggle",e),l=n;break;case"input":Se(e,n),l=ke(e,n),Wt("invalid",e),lr(r,"onChange");break;case"option":l=Re(e,n);break;case"select":e._wrapperState={wasMultiple:!!n.multiple},l=o({},n,{value:void 0}),Wt("invalid",e),lr(r,"onChange");break;case"textarea":Pe(e,n),l=De(e,n),Wt("invalid",e),lr(r,"onChange");break;default:l=n}ar(i,l);var c=l;for(a in c)if(c.hasOwnProperty(a)){var f=c[a];"style"===a?ir(e,f):"dangerouslySetInnerHTML"===a?null!=(f=f?f.__html:void 0)&&Ue(e,f):"children"===a?"string"==typeof f?("textarea"!==i||""!==f)&&Qe(e,f):"number"==typeof f&&Qe(e,""+f):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(S.hasOwnProperty(a)?null!=f&&lr(r,a):null!=f&&Z(e,a,f,u))}switch(i){case"input":Ee(e),Ce(e,n,!1);break;case"textarea":Ee(e),je(e);break;case"option":null!=n.value&&e.setAttribute("value",""+we(n.value));break;case"select":e.multiple=!!n.multiple,null!=(r=n.value)?Ae(e,!!n.multiple,r,!1):null!=n.defaultValue&&Ae(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof l.onClick&&(e.onclick=cr)}br(i,n)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)za(0,t,e.memoizedProps,n);else{if("string"!=typeof n&&null===t.stateNode)throw Error(s(166));r=Po(Do.current),Po(Ro.current),Na(t)?(r=t.stateNode,n=t.memoizedProps,r[Sr]=t,r.nodeValue!==n&&(t.effectTag|=4)):((r=(9===r.nodeType?r:r.ownerDocument).createTextNode(n))[Sr]=t,t.stateNode=r)}return null;case 13:return ci(Mo),n=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=r,t):(r=null!==n,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Na(t):(n=null!==(i=e.memoizedState),r||null===i||null!==(i=e.child.sibling)&&(null!==(a=t.firstEffect)?(t.firstEffect=i,i.nextEffect=a):(t.firstEffect=t.lastEffect=i,i.nextEffect=null),i.effectTag=8)),r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Mo.current)?Ns===Es&&(Ns=xs):(Ns!==Es&&Ns!==xs||(Ns=ks),0!==Is&&null!==Ts&&(ju(Ts,Cs),qu(Ts,Is)))),(r||n)&&(t.effectTag|=4),null);case 4:return jo(),null;case 10:return ro(t),null;case 17:return vi(t.type)&&bi(),null;case 19:if(ci(Mo),null===(n=t.memoizedState))return null;if(i=0!=(64&t.effectTag),null===(a=n.rendering)){if(i)Ja(n,!1);else if(Ns!==Es||null!==e&&0!=(64&e.effectTag))for(a=t.child;null!==a;){if(null!==(e=Fo(a))){for(t.effectTag|=64,Ja(n,!1),null!==(i=e.updateQueue)&&(t.updateQueue=i,t.effectTag|=4),null===n.lastEffect&&(t.firstEffect=null),t.lastEffect=n.lastEffect,n=t.child;null!==n;)a=r,(i=n).effectTag&=2,i.nextEffect=null,i.firstEffect=null,i.lastEffect=null,null===(e=i.alternate)?(i.childExpirationTime=0,i.expirationTime=a,i.child=null,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null):(i.childExpirationTime=e.childExpirationTime,i.expirationTime=e.expirationTime,i.child=e.child,i.memoizedProps=e.memoizedProps,i.memoizedState=e.memoizedState,i.updateQueue=e.updateQueue,a=e.dependencies,i.dependencies=null===a?null:{expirationTime:a.expirationTime,firstContext:a.firstContext,responders:a.responders}),n=n.sibling;return fi(Mo,1&Mo.current|2),t.child}a=a.sibling}}else{if(!i)if(null!==(e=Fo(a))){if(t.effectTag|=64,i=!0,null!==(r=e.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),Ja(n,!0),null===n.tail&&"hidden"===n.tailMode&&!a.alternate)return null!==(t=t.lastEffect=n.lastEffect)&&(t.nextEffect=null),null}else 2*Ui()-n.renderingStartTime>n.tailExpiration&&1<r&&(t.effectTag|=64,i=!0,Ja(n,!1),t.expirationTime=t.childExpirationTime=r-1);n.isBackwards?(a.sibling=t.child,t.child=a):(null!==(r=n.last)?r.sibling=a:t.child=a,n.last=a)}return null!==n.tail?(0===n.tailExpiration&&(n.tailExpiration=Ui()+500),r=n.tail,n.rendering=r,n.tail=r.sibling,n.lastEffect=t.lastEffect,n.renderingStartTime=Ui(),r.sibling=null,t=Mo.current,fi(Mo,i?1&t|2:1&t),r):null}throw Error(s(156,t.tag))}function Za(e){switch(e.tag){case 1:vi(e.type)&&bi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(jo(),ci(hi),ci(di),0!=(64&(t=e.effectTag)))throw Error(s(285));return e.effectTag=-4097&t|64,e;case 5:return Lo(e),null;case 13:return ci(Mo),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ci(Mo),null;case 4:return jo(),null;case 10:return ro(e),null;default:return null}}function es(e,t){return{value:e,source:t,stack:ge(t)}}Qa=function(e,t){for(var r=t.child;null!==r;){if(5===r.tag||6===r.tag)e.appendChild(r.stateNode);else if(4!==r.tag&&null!==r.child){r.child.return=r,r=r.child;continue}if(r===t)break;for(;null===r.sibling;){if(null===r.return||r.return===t)return;r=r.return}r.sibling.return=r.return,r=r.sibling}},Va=function(e,t,r,n,i){var a=e.memoizedProps;if(a!==n){var s,u,l=t.stateNode;switch(Po(Ro.current),e=null,r){case"input":a=ke(l,a),n=ke(l,n),e=[];break;case"option":a=Re(l,a),n=Re(l,n),e=[];break;case"select":a=o({},a,{value:void 0}),n=o({},n,{value:void 0}),e=[];break;case"textarea":a=De(l,a),n=De(l,n),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof n.onClick&&(l.onclick=cr)}for(s in ar(r,n),r=null,a)if(!n.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s)for(u in l=a[s])l.hasOwnProperty(u)&&(r||(r={}),r[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(S.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in n){var c=n[s];if(l=null!=a?a[s]:void 0,n.hasOwnProperty(s)&&c!==l&&(null!=c||null!=l))if("style"===s)if(l){for(u in l)!l.hasOwnProperty(u)||c&&c.hasOwnProperty(u)||(r||(r={}),r[u]="");for(u in c)c.hasOwnProperty(u)&&l[u]!==c[u]&&(r||(r={}),r[u]=c[u])}else r||(e||(e=[]),e.push(s,r)),r=c;else"dangerouslySetInnerHTML"===s?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(e=e||[]).push(s,c)):"children"===s?l===c||"string"!=typeof c&&"number"!=typeof c||(e=e||[]).push(s,""+c):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(S.hasOwnProperty(s)?(null!=c&&lr(i,s),e||l===c||(e=[])):(e=e||[]).push(s,c))}r&&(e=e||[]).push("style",r),i=e,(t.updateQueue=i)&&(t.effectTag|=4)}},za=function(e,t,r,n){r!==n&&(t.effectTag|=4)};var ts="function"==typeof WeakSet?WeakSet:Set;function rs(e,t){var r=t.source,n=t.stack;null===n&&null!==r&&(n=ge(r)),null!==r&&be(r.type),t=t.value,null!==e&&1===e.tag&&be(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function ns(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){wu(e,t)}else t.current=null}function is(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var r=e.memoizedProps,n=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?r:$i(t.type,r),n),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(s(163))}function os(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.destroy;r.destroy=void 0,void 0!==n&&n()}r=r.next}while(r!==t)}}function as(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var r=t=t.next;do{if((r.tag&e)===e){var n=r.create;r.destroy=n()}r=r.next}while(r!==t)}}function ss(e,t,r){switch(r.tag){case 0:case 11:case 15:case 22:return void as(3,r);case 1:if(e=r.stateNode,4&r.effectTag)if(null===t)e.componentDidMount();else{var n=r.elementType===r.type?t.memoizedProps:$i(r.type,t.memoizedProps);e.componentDidUpdate(n,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=r.updateQueue)&&ho(r,t,e));case 3:if(null!==(t=r.updateQueue)){if(e=null,null!==r.child)switch(r.child.tag){case 5:e=r.child.stateNode;break;case 1:e=r.child.stateNode}ho(r,t,e)}return;case 5:return e=r.stateNode,void(null===t&&4&r.effectTag&&br(r.type,r.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===r.memoizedState&&(r=r.alternate,null!==r&&(r=r.memoizedState,null!==r&&(r=r.dehydrated,null!==r&&Mt(r)))));case 19:case 17:case 20:case 21:return}throw Error(s(163))}function us(e,t,r){switch("function"==typeof ku&&ku(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e.next;zi(97<r?97:r,(function(){var e=n;do{var r=e.destroy;if(void 0!==r){var i=t;try{r()}catch(e){wu(i,e)}}e=e.next}while(e!==n)}))}break;case 1:ns(t),"function"==typeof(r=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){wu(e,t)}}(t,r);break;case 5:ns(t);break;case 4:ps(e,t,r)}}function ls(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&ls(t)}function cs(e){return 5===e.tag||3===e.tag||4===e.tag}function fs(e){e:{for(var t=e.return;null!==t;){if(cs(t)){var r=t;break e}t=t.return}throw Error(s(160))}switch(t=r.stateNode,r.tag){case 5:var n=!1;break;case 3:case 4:t=t.containerInfo,n=!0;break;default:throw Error(s(161))}16&r.effectTag&&(Qe(t,""),r.effectTag&=-17);e:t:for(r=e;;){for(;null===r.sibling;){if(null===r.return||cs(r.return)){r=null;break e}r=r.return}for(r.sibling.return=r.return,r=r.sibling;5!==r.tag&&6!==r.tag&&18!==r.tag;){if(2&r.effectTag)continue t;if(null===r.child||4===r.tag)continue t;r.child.return=r,r=r.child}if(!(2&r.effectTag)){r=r.stateNode;break e}}n?function e(t,r,n){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,r?8===n.nodeType?n.parentNode.insertBefore(t,r):n.insertBefore(t,r):(8===n.nodeType?(r=n.parentNode).insertBefore(t,n):(r=n).appendChild(t),null!==(n=n._reactRootContainer)&&void 0!==n||null!==r.onclick||(r.onclick=cr));else if(4!==i&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,r,t):function e(t,r,n){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,r?n.insertBefore(t,r):n.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,r,n),t=t.sibling;null!==t;)e(t,r,n),t=t.sibling}(e,r,t)}function ps(e,t,r){for(var n,i,o=t,a=!1;;){if(!a){a=o.return;e:for(;;){if(null===a)throw Error(s(160));switch(n=a.stateNode,a.tag){case 5:i=!1;break e;case 3:case 4:n=n.containerInfo,i=!0;break e}a=a.return}a=!0}if(5===o.tag||6===o.tag){e:for(var u=e,l=o,c=r,f=l;;)if(us(u,f,c),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===l)break e;for(;null===f.sibling;){if(null===f.return||f.return===l)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(u=n,l=o.stateNode,8===u.nodeType?u.parentNode.removeChild(l):u.removeChild(l)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(us(e,o,r),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(a=!1)}o.sibling.return=o.return,o=o.sibling}}function ds(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void os(3,t);case 1:return;case 5:var r=t.stateNode;if(null!=r){var n=t.memoizedProps,i=null!==e?e.memoizedProps:n;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(r[Tr]=n,"input"===e&&"radio"===n.type&&null!=n.name&&Te(r,n),sr(e,i),t=sr(e,n),i=0;i<o.length;i+=2){var a=o[i],u=o[i+1];"style"===a?ir(r,u):"dangerouslySetInnerHTML"===a?Ue(r,u):"children"===a?Qe(r,u):Z(r,a,u,t)}switch(e){case"input":Oe(r,n);break;case"textarea":Ie(r,n);break;case"select":t=r._wrapperState.wasMultiple,r._wrapperState.wasMultiple=!!n.multiple,null!=(e=n.value)?Ae(r,!!n.multiple,e,!1):t!==!!n.multiple&&(null!=n.defaultValue?Ae(r,!!n.multiple,n.defaultValue,!0):Ae(r,!!n.multiple,n.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(s(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,Mt(t.containerInfo)));case 12:return;case 13:if(r=t,null===t.memoizedState?n=!1:(n=!0,r=t.child,qs=Ui()),null!==r)e:for(e=r;;){if(5===e.tag)o=e.stateNode,n?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=nr("display",i));else if(6===e.tag)e.stateNode.nodeValue=n?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===r)break;for(;null===e.sibling;){if(null===e.return||e.return===r)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void hs(t);case 19:return void hs(t);case 17:return}throw Error(s(163))}function hs(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var r=e.stateNode;null===r&&(r=e.stateNode=new ts),t.forEach((function(t){var n=Eu.bind(null,e,t);r.has(t)||(r.add(t),t.then(n,n))}))}}var ms="function"==typeof WeakMap?WeakMap:Map;function ys(e,t,r){(r=lo(r,null)).tag=3,r.payload={element:null};var n=t.value;return r.callback=function(){Ms||(Ms=!0,Fs=n),rs(e,t)},r}function vs(e,t,r){(r=lo(r,null)).tag=3;var n=e.type.getDerivedStateFromError;if("function"==typeof n){var i=t.value;r.payload=function(){return rs(e,t),n(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(r.callback=function(){"function"!=typeof n&&(null===Bs?Bs=new Set([this]):Bs.add(this),rs(e,t));var r=t.stack;this.componentDidCatch(t.value,{componentStack:null!==r?r:""})}),r}var bs,gs=Math.ceil,ws=X.ReactCurrentDispatcher,_s=X.ReactCurrentOwner,Es=0,xs=3,ks=4,Ss=0,Ts=null,Os=null,Cs=0,Ns=Es,Rs=null,As=1073741823,Ds=1073741823,Ps=null,Is=0,js=!1,qs=0,Ls=null,Ms=!1,Fs=null,Bs=null,Us=!1,Qs=null,Vs=90,zs=null,Ks=0,Hs=null,Gs=0;function Ys(){return 0!=(48&Ss)?1073741821-(Ui()/10|0):0!==Gs?Gs:Gs=1073741821-(Ui()/10|0)}function Ws(e,t,r){if(0==(2&(t=t.mode)))return 1073741823;var n=Qi();if(0==(4&t))return 99===n?1073741823:1073741822;if(0!=(16&Ss))return Cs;if(null!==r)e=Wi(e,0|r.timeoutMs||5e3,250);else switch(n){case 99:e=1073741823;break;case 98:e=Wi(e,150,100);break;case 97:case 96:e=Wi(e,5e3,250);break;case 95:e=2;break;default:throw Error(s(326))}return null!==Ts&&e===Cs&&--e,e}function $s(e,t){if(50<Ks)throw Ks=0,Hs=null,Error(s(185));if(null!==(e=Js(e,t))){var r=Qi();1073741823===t?0!=(8&Ss)&&0==(48&Ss)?tu(e):(Zs(e),0===Ss&&Gi()):Zs(e),0==(4&Ss)||98!==r&&99!==r||(null===zs?zs=new Map([[e,t]]):(void 0===(r=zs.get(e))||r>t)&&zs.set(e,t))}}function Js(e,t){e.expirationTime<t&&(e.expirationTime=t);var r=e.alternate;null!==r&&r.expirationTime<t&&(r.expirationTime=t);var n=e.return,i=null;if(null===n&&3===e.tag)i=e.stateNode;else for(;null!==n;){if(r=n.alternate,n.childExpirationTime<t&&(n.childExpirationTime=t),null!==r&&r.childExpirationTime<t&&(r.childExpirationTime=t),null===n.return&&3===n.tag){i=n.stateNode;break}n=n.return}return null!==i&&(Ts===i&&(uu(t),Ns===ks&&ju(i,Cs)),qu(i,t)),i}function Xs(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Iu(e,t=e.firstPendingTime))return t;var r=e.lastPingedTime;return 2>=(e=r>(e=e.nextKnownPendingLevel)?r:e)&&t!==e?0:e}function Zs(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Hi(tu.bind(null,e));else{var t=Xs(e),r=e.callbackNode;if(0===t)null!==r&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var n=Ys();if(1073741823===t?n=99:1===t||2===t?n=95:n=0>=(n=10*(1073741821-t)-10*(1073741821-n))?99:250>=n?98:5250>=n?97:95,null!==r){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=n)return;r!==Ii&&Si(r)}e.callbackExpirationTime=t,e.callbackPriority=n,t=1073741823===t?Hi(tu.bind(null,e)):Ki(n,eu.bind(null,e),{timeout:10*(1073741821-t)-Ui()}),e.callbackNode=t}}}function eu(e,t){if(Gs=0,t)return Lu(e,t=Ys()),Zs(e),null;var r=Xs(e);if(0!==r){if(t=e.callbackNode,0!=(48&Ss))throw Error(s(327));if(vu(),e===Ts&&r===Cs||iu(e,r),null!==Os){var n=Ss;Ss|=16;for(var i=au();;)try{cu();break}catch(t){ou(e,t)}if(to(),Ss=n,ws.current=i,1===Ns)throw t=Rs,iu(e,r),ju(e,r),Zs(e),t;if(null===Os)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=r,n=Ns,Ts=null,n){case Es:case 1:throw Error(s(345));case 2:Lu(e,2<r?2:r);break;case xs:if(ju(e,r),r===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=du(i)),1073741823===As&&10<(i=qs+500-Ui())){if(js){var o=e.lastPingedTime;if(0===o||o>=r){e.lastPingedTime=r,iu(e,r);break}}if(0!==(o=Xs(e))&&o!==r)break;if(0!==n&&n!==r){e.lastPingedTime=n;break}e.timeoutHandle=wr(hu.bind(null,e),i);break}hu(e);break;case ks:if(ju(e,r),r===(n=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=du(i)),js&&(0===(i=e.lastPingedTime)||i>=r)){e.lastPingedTime=r,iu(e,r);break}if(0!==(i=Xs(e))&&i!==r)break;if(0!==n&&n!==r){e.lastPingedTime=n;break}if(1073741823!==Ds?n=10*(1073741821-Ds)-Ui():1073741823===As?n=0:(n=10*(1073741821-As)-5e3,0>(n=(i=Ui())-n)&&(n=0),(r=10*(1073741821-r)-i)<(n=(120>n?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*gs(n/1960))-n)&&(n=r)),10<n){e.timeoutHandle=wr(hu.bind(null,e),n);break}hu(e);break;case 5:if(1073741823!==As&&null!==Ps){o=As;var a=Ps;if(0>=(n=0|a.busyMinDurationMs)?n=0:(i=0|a.busyDelayMs,n=(o=Ui()-(10*(1073741821-o)-(0|a.timeoutMs||5e3)))<=i?0:i+n-o),10<n){ju(e,r),e.timeoutHandle=wr(hu.bind(null,e),n);break}}hu(e);break;default:throw Error(s(329))}if(Zs(e),e.callbackNode===t)return eu.bind(null,e)}}return null}function tu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&Ss))throw Error(s(327));if(vu(),e===Ts&&t===Cs||iu(e,t),null!==Os){var r=Ss;Ss|=16;for(var n=au();;)try{lu();break}catch(t){ou(e,t)}if(to(),Ss=r,ws.current=n,1===Ns)throw r=Rs,iu(e,t),ju(e,t),Zs(e),r;if(null!==Os)throw Error(s(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Ts=null,hu(e),Zs(e)}return null}function ru(e,t){var r=Ss;Ss|=1;try{return e(t)}finally{0===(Ss=r)&&Gi()}}function nu(e,t){var r=Ss;Ss&=-2,Ss|=8;try{return e(t)}finally{0===(Ss=r)&&Gi()}}function iu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var r=e.timeoutHandle;if(-1!==r&&(e.timeoutHandle=-1,_r(r)),null!==Os)for(r=Os.return;null!==r;){var n=r;switch(n.tag){case 1:null!=(n=n.type.childContextTypes)&&bi();break;case 3:jo(),ci(hi),ci(di);break;case 5:Lo(n);break;case 4:jo();break;case 13:case 19:ci(Mo);break;case 10:ro(n)}r=r.return}Ts=e,Os=Cu(e.current,null),Cs=t,Ns=Es,Rs=null,Ds=As=1073741823,Ps=null,Is=0,js=!1}function ou(e,t){for(;;){try{if(to(),Uo.current=ba,Go)for(var r=zo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}if(Vo=0,Ho=Ko=zo=null,Go=!1,null===Os||null===Os.return)return Ns=1,Rs=t,Os=null;e:{var o=e,a=Os.return,s=Os,u=t;if(t=Cs,s.effectTag|=2048,s.firstEffect=s.lastEffect=null,null!==u&&"object"===n(u)&&"function"==typeof u.then){var l=u;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.expirationTime=c.expirationTime):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Mo.current),p=a;do{var d;if(d=13===p.tag){var h=p.memoizedState;if(null!==h)d=null!==h.dehydrated;else{var m=p.memoizedProps;d=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(d){var y=p.updateQueue;if(null===y){var v=new Set;v.add(l),p.updateQueue=v}else y.add(l);if(0==(2&p.mode)){if(p.effectTag|=64,s.effectTag&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var b=lo(1073741823,null);b.tag=2,co(s,b)}s.expirationTime=1073741823;break e}u=void 0,s=t;var g=o.pingCache;if(null===g?(g=o.pingCache=new ms,u=new Set,g.set(l,u)):void 0===(u=g.get(l))&&(u=new Set,g.set(l,u)),!u.has(s)){u.add(s);var w=_u.bind(null,o,l,s);l.then(w,w)}p.effectTag|=4096,p.expirationTime=t;break e}p=p.return}while(null!==p);u=Error((be(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ge(s))}5!==Ns&&(Ns=2),u=es(u,s),p=a;do{switch(p.tag){case 3:l=u,p.effectTag|=4096,p.expirationTime=t,fo(p,ys(p,l,t));break e;case 1:l=u;var _=p.type,E=p.stateNode;if(0==(64&p.effectTag)&&("function"==typeof _.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Bs||!Bs.has(E)))){p.effectTag|=4096,p.expirationTime=t,fo(p,vs(p,l,t));break e}}p=p.return}while(null!==p)}Os=pu(Os)}catch(e){t=e;continue}break}}function au(){var e=ws.current;return ws.current=ba,null===e?ba:e}function su(e,t){e<As&&2<e&&(As=e),null!==t&&e<Ds&&2<e&&(Ds=e,Ps=t)}function uu(e){e>Is&&(Is=e)}function lu(){for(;null!==Os;)Os=fu(Os)}function cu(){for(;null!==Os&&!ji();)Os=fu(Os)}function fu(e){var t=bs(e.alternate,e,Cs);return e.memoizedProps=e.pendingProps,null===t&&(t=pu(e)),_s.current=null,t}function pu(e){Os=e;do{var t=Os.alternate;if(e=Os.return,0==(2048&Os.effectTag)){if(t=Xa(t,Os,Cs),1===Cs||1!==Os.childExpirationTime){for(var r=0,n=Os.child;null!==n;){var i=n.expirationTime,o=n.childExpirationTime;i>r&&(r=i),o>r&&(r=o),n=n.sibling}Os.childExpirationTime=r}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Os.firstEffect),null!==Os.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Os.firstEffect),e.lastEffect=Os.lastEffect),1<Os.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Os:e.firstEffect=Os,e.lastEffect=Os))}else{if(null!==(t=Za(Os)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Os.sibling))return t;Os=e}while(null!==Os);return Ns===Es&&(Ns=5),null}function du(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function hu(e){var t=Qi();return zi(99,mu.bind(null,e,t)),null}function mu(e,t){do{vu()}while(null!==Qs);if(0!=(48&Ss))throw Error(s(327));var r=e.finishedWork,n=e.finishedExpirationTime;if(null===r)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,r===e.current)throw Error(s(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=du(r);if(e.firstPendingTime=i,n<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:n<=e.firstSuspendedTime&&(e.firstSuspendedTime=n-1),n<=e.lastPingedTime&&(e.lastPingedTime=0),n<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Ts&&(Os=Ts=null,Cs=0),1<r.effectTag?null!==r.lastEffect?(r.lastEffect.nextEffect=r,i=r.firstEffect):i=r:i=r.firstEffect,null!==i){var o=Ss;Ss|=32,_s.current=null,yr=Yt;var a=hr();if(mr(a)){if("selectionStart"in a)var u={start:a.selectionStart,end:a.selectionEnd};else e:{var l=(u=(u=a.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(l&&0!==l.rangeCount){u=l.anchorNode;var c=l.anchorOffset,f=l.focusNode;l=l.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var p=0,d=-1,h=-1,m=0,y=0,v=a,b=null;t:for(;;){for(var g;v!==u||0!==c&&3!==v.nodeType||(d=p+c),v!==f||0!==l&&3!==v.nodeType||(h=p+l),3===v.nodeType&&(p+=v.nodeValue.length),null!==(g=v.firstChild);)b=v,v=g;for(;;){if(v===a)break t;if(b===u&&++m===c&&(d=p),b===f&&++y===l&&(h=p),null!==(g=v.nextSibling))break;b=(v=b).parentNode}v=g}u=-1===d||-1===h?null:{start:d,end:h}}else u=null}u=u||{start:0,end:0}}else u=null;vr={activeElementDetached:null,focusedElem:a,selectionRange:u},Yt=!1,Ls=i;do{try{yu()}catch(e){if(null===Ls)throw Error(s(330));wu(Ls,e),Ls=Ls.nextEffect}}while(null!==Ls);Ls=i;do{try{for(a=e,u=t;null!==Ls;){var w=Ls.effectTag;if(16&w&&Qe(Ls.stateNode,""),128&w){var _=Ls.alternate;if(null!==_){var E=_.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:fs(Ls),Ls.effectTag&=-3;break;case 6:fs(Ls),Ls.effectTag&=-3,ds(Ls.alternate,Ls);break;case 1024:Ls.effectTag&=-1025;break;case 1028:Ls.effectTag&=-1025,ds(Ls.alternate,Ls);break;case 4:ds(Ls.alternate,Ls);break;case 8:ps(a,c=Ls,u),ls(c)}Ls=Ls.nextEffect}}catch(e){if(null===Ls)throw Error(s(330));wu(Ls,e),Ls=Ls.nextEffect}}while(null!==Ls);if(E=vr,_=hr(),w=E.focusedElem,u=E.selectionRange,_!==w&&w&&w.ownerDocument&&function e(t,r){return!(!t||!r)&&(t===r||(!t||3!==t.nodeType)&&(r&&3===r.nodeType?e(t,r.parentNode):"contains"in t?t.contains(r):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(r))))}(w.ownerDocument.documentElement,w)){null!==u&&mr(w)&&(_=u.start,void 0===(E=u.end)&&(E=_),"selectionStart"in w?(w.selectionStart=_,w.selectionEnd=Math.min(E,w.value.length)):(E=(_=w.ownerDocument||document)&&_.defaultView||window).getSelection&&(E=E.getSelection(),c=w.textContent.length,a=Math.min(u.start,c),u=void 0===u.end?a:Math.min(u.end,c),!E.extend&&a>u&&(c=u,u=a,a=c),c=dr(w,a),f=dr(w,u),c&&f&&(1!==E.rangeCount||E.anchorNode!==c.node||E.anchorOffset!==c.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((_=_.createRange()).setStart(c.node,c.offset),E.removeAllRanges(),a>u?(E.addRange(_),E.extend(f.node,f.offset)):(_.setEnd(f.node,f.offset),E.addRange(_))))),_=[];for(E=w;E=E.parentNode;)1===E.nodeType&&_.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<_.length;w++)(E=_[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Yt=!!yr,vr=yr=null,e.current=r,Ls=i;do{try{for(w=e;null!==Ls;){var x=Ls.effectTag;if(36&x&&ss(w,Ls.alternate,Ls),128&x){_=void 0;var k=Ls.ref;if(null!==k){var S=Ls.stateNode;switch(Ls.tag){case 5:_=S;break;default:_=S}"function"==typeof k?k(_):k.current=_}}Ls=Ls.nextEffect}}catch(e){if(null===Ls)throw Error(s(330));wu(Ls,e),Ls=Ls.nextEffect}}while(null!==Ls);Ls=null,qi(),Ss=o}else e.current=r;if(Us)Us=!1,Qs=e,Vs=t;else for(Ls=i;null!==Ls;)t=Ls.nextEffect,Ls.nextEffect=null,Ls=t;if(0===(t=e.firstPendingTime)&&(Bs=null),1073741823===t?e===Hs?Ks++:(Ks=0,Hs=e):Ks=0,"function"==typeof xu&&xu(r.stateNode,n),Zs(e),Ms)throw Ms=!1,e=Fs,Fs=null,e;return 0!=(8&Ss)||Gi(),null}function yu(){for(;null!==Ls;){var e=Ls.effectTag;0!=(256&e)&&is(Ls.alternate,Ls),0==(512&e)||Us||(Us=!0,Ki(97,(function(){return vu(),null}))),Ls=Ls.nextEffect}}function vu(){if(90!==Vs){var e=97<Vs?97:Vs;return Vs=90,zi(e,bu)}}function bu(){if(null===Qs)return!1;var e=Qs;if(Qs=null,0!=(48&Ss))throw Error(s(331));var t=Ss;for(Ss|=32,e=e.current.firstEffect;null!==e;){try{var r=e;if(0!=(512&r.effectTag))switch(r.tag){case 0:case 11:case 15:case 22:os(5,r),as(5,r)}}catch(t){if(null===e)throw Error(s(330));wu(e,t)}r=e.nextEffect,e.nextEffect=null,e=r}return Ss=t,Gi(),!0}function gu(e,t,r){co(e,t=ys(e,t=es(r,t),1073741823)),null!==(e=Js(e,1073741823))&&Zs(e)}function wu(e,t){if(3===e.tag)gu(e,e,t);else for(var r=e.return;null!==r;){if(3===r.tag){gu(r,e,t);break}if(1===r.tag){var n=r.stateNode;if("function"==typeof r.type.getDerivedStateFromError||"function"==typeof n.componentDidCatch&&(null===Bs||!Bs.has(n))){co(r,e=vs(r,e=es(t,e),1073741823)),null!==(r=Js(r,1073741823))&&Zs(r);break}}r=r.return}}function _u(e,t,r){var n=e.pingCache;null!==n&&n.delete(t),Ts===e&&Cs===r?Ns===ks||Ns===xs&&1073741823===As&&Ui()-qs<500?iu(e,Cs):js=!0:Iu(e,r)&&(0!==(t=e.lastPingedTime)&&t<r||(e.lastPingedTime=r,Zs(e)))}function Eu(e,t){var r=e.stateNode;null!==r&&r.delete(t),0===(t=0)&&(t=Ws(t=Ys(),e,null)),null!==(e=Js(e,t))&&Zs(e)}bs=function(e,t,r){var i=t.expirationTime;if(null!==e){var o=t.pendingProps;if(e.memoizedProps!==o||hi.current)Da=!0;else{if(i<r){switch(Da=!1,t.tag){case 3:Ua(t),Ra();break;case 5:if(qo(t),4&t.mode&&1!==r&&o.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&_i(t);break;case 4:Io(t,t.stateNode.containerInfo);break;case 10:i=t.memoizedProps.value,o=t.type._context,fi(Ji,o._currentValue),o._currentValue=i;break;case 13:if(null!==t.memoizedState)return 0!==(i=t.child.childExpirationTime)&&i>=r?Ha(e,t,r):(fi(Mo,1&Mo.current),null!==(t=$a(e,t,r))?t.sibling:null);fi(Mo,1&Mo.current);break;case 19:if(i=t.childExpirationTime>=r,0!=(64&e.effectTag)){if(i)return Wa(e,t,r);t.effectTag|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null),fi(Mo,Mo.current),!i)return null}return $a(e,t,r)}Da=!1}}else Da=!1;switch(t.expirationTime=0,t.tag){case 2:if(i=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,o=yi(t,di.current),io(t,r),o=$o(null,t,i,e,o,r),t.effectTag|=1,"object"===n(o)&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(i)){var a=!0;_i(t)}else a=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,so(t);var u=i.getDerivedStateFromProps;"function"==typeof u&&vo(t,i,u,e),o.updater=bo,t.stateNode=o,o._reactInternalFiber=t,Eo(t,i,e,r),t=Ba(null,t,i,!0,a,r)}else t.tag=0,Pa(null,t,o,r),t=t.child;return t;case 16:e:{if(o=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(o),1!==o._status)throw o._result;switch(o=o._result,t.type=o,a=t.tag=function(e){if("function"==typeof e)return Ou(e)?1:0;if(null!=e){if((e=e.$$typeof)===ce)return 11;if(e===de)return 14}return 2}(o),e=$i(o,e),a){case 0:t=Ma(null,t,o,e,r);break e;case 1:t=Fa(null,t,o,e,r);break e;case 11:t=Ia(null,t,o,e,r);break e;case 14:t=ja(null,t,o,$i(o.type,e),i,r);break e}throw Error(s(306,o,""))}return t;case 0:return i=t.type,o=t.pendingProps,Ma(e,t,i,o=t.elementType===i?o:$i(i,o),r);case 1:return i=t.type,o=t.pendingProps,Fa(e,t,i,o=t.elementType===i?o:$i(i,o),r);case 3:if(Ua(t),i=t.updateQueue,null===e||null===i)throw Error(s(282));if(i=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,uo(e,t),po(t,i,null,r),(i=t.memoizedState.element)===o)Ra(),t=$a(e,t,r);else{if((o=t.stateNode.hydrate)&&(xa=Er(t.stateNode.containerInfo.firstChild),Ea=t,o=ka=!0),o)for(r=Co(t,null,i,r),t.child=r;r;)r.effectTag=-3&r.effectTag|1024,r=r.sibling;else Pa(e,t,i,r),Ra();t=t.child}return t;case 5:return qo(t),null===e&&Oa(t),i=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,gr(i,o)?u=null:null!==a&&gr(i,a)&&(t.effectTag|=16),La(e,t),4&t.mode&&1!==r&&o.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Pa(e,t,u,r),t=t.child),t;case 6:return null===e&&Oa(t),null;case 13:return Ha(e,t,r);case 4:return Io(t,t.stateNode.containerInfo),i=t.pendingProps,null===e?t.child=Oo(t,null,i,r):Pa(e,t,i,r),t.child;case 11:return i=t.type,o=t.pendingProps,Ia(e,t,i,o=t.elementType===i?o:$i(i,o),r);case 7:return Pa(e,t,t.pendingProps,r),t.child;case 8:case 12:return Pa(e,t,t.pendingProps.children,r),t.child;case 10:e:{i=t.type._context,o=t.pendingProps,u=t.memoizedProps,a=o.value;var l=t.type._context;if(fi(Ji,l._currentValue),l._currentValue=a,null!==u)if(l=u.value,0===(a=Fn(l,a)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(l,a):1073741823))){if(u.children===o.children&&!hi.current){t=$a(e,t,r);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var f=c.firstContext;null!==f;){if(f.context===i&&0!=(f.observedBits&a)){1===l.tag&&((f=lo(r,null)).tag=2,co(l,f)),l.expirationTime<r&&(l.expirationTime=r),null!==(f=l.alternate)&&f.expirationTime<r&&(f.expirationTime=r),no(l.return,r),c.expirationTime<r&&(c.expirationTime=r);break}f=f.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Pa(e,t,o.children,r),t=t.child}return t;case 9:return o=t.type,i=(a=t.pendingProps).children,io(t,r),i=i(o=oo(o,a.unstable_observedBits)),t.effectTag|=1,Pa(e,t,i,r),t.child;case 14:return a=$i(o=t.type,t.pendingProps),ja(e,t,o,a=$i(o.type,a),i,r);case 15:return qa(e,t,t.type,t.pendingProps,i,r);case 17:return i=t.type,o=t.pendingProps,o=t.elementType===i?o:$i(i,o),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(i)?(e=!0,_i(t)):e=!1,io(t,r),wo(t,i,o),Eo(t,i,o,r),Ba(null,t,i,!0,e,r);case 19:return Wa(e,t,r)}throw Error(s(156,t.tag))};var xu=null,ku=null;function Su(e,t,r,n){this.tag=e,this.key=r,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=n,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Tu(e,t,r,n){return new Su(e,t,r,n)}function Ou(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Cu(e,t){var r=e.alternate;return null===r?((r=Tu(e.tag,t,e.key,e.mode)).elementType=e.elementType,r.type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,t=e.dependencies,r.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Nu(e,t,r,i,o,a){var u=2;if(i=e,"function"==typeof e)Ou(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ie:return Ru(r.children,o,a,t);case le:u=8,o|=7;break;case oe:u=8,o|=1;break;case ae:return(e=Tu(12,r,t,8|o)).elementType=ae,e.type=ae,e.expirationTime=a,e;case fe:return(e=Tu(13,r,t,o)).type=fe,e.elementType=fe,e.expirationTime=a,e;case pe:return(e=Tu(19,r,t,o)).elementType=pe,e.expirationTime=a,e;default:if("object"===n(e)&&null!==e)switch(e.$$typeof){case se:u=10;break e;case ue:u=9;break e;case ce:u=11;break e;case de:u=14;break e;case he:u=16,i=null;break e;case me:u=22;break e}throw Error(s(130,null==e?e:n(e),""))}return(t=Tu(u,r,t,o)).elementType=e,t.type=i,t.expirationTime=a,t}function Ru(e,t,r,n){return(e=Tu(7,e,n,t)).expirationTime=r,e}function Au(e,t,r){return(e=Tu(6,e,null,t)).expirationTime=r,e}function Du(e,t,r){return(t=Tu(4,null!==e.children?e.children:[],e.key,t)).expirationTime=r,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Pu(e,t,r){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=r,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Iu(e,t){var r=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==r&&r>=t&&e<=t}function ju(e,t){var r=e.firstSuspendedTime,n=e.lastSuspendedTime;r<t&&(e.firstSuspendedTime=t),(n>t||0===r)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function qu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var r=e.firstSuspendedTime;0!==r&&(t>=r?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Lu(e,t){var r=e.lastExpiredTime;(0===r||r>t)&&(e.lastExpiredTime=t)}function Mu(e,t,r,n){var i=t.current,o=Ys(),a=mo.suspense;o=Ws(o,i,a);e:if(r){t:{if(tt(r=r._reactInternalFiber)!==r||1!==r.tag)throw Error(s(170));var u=r;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(vi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(s(171))}if(1===r.tag){var l=r.type;if(vi(l)){r=wi(r,l,u);break e}}r=u}else r=pi;return null===t.context?t.context=r:t.pendingContext=r,(t=lo(o,a)).payload={element:e},null!==(n=void 0===n?null:n)&&(t.callback=n),co(i,t),$s(i,o),o}function Fu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Bu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Uu(e,t){Bu(e,t),(e=e.alternate)&&Bu(e,t)}function Qu(e,t,r){var n=new Pu(e,t,r=null!=r&&!0===r.hydrate),i=Tu(3,null,null,2===t?7:1===t?3:0);n.current=i,i.stateNode=n,so(i),e[Or]=n.current,r&&0!==t&&function(e,t){var r=et(t);Ct.forEach((function(e){yt(e,t,r)})),Nt.forEach((function(e){yt(e,t,r)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=n}function Vu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function zu(e,t,r,n,i){var o=r._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Fu(a);s.call(e)}}Mu(t,a,e,i)}else{if(o=r._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var r;r=e.lastChild;)e.removeChild(r);return new Qu(e,0,t?{hydrate:!0}:void 0)}(r,n),a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var e=Fu(a);u.call(e)}}nu((function(){Mu(t,a,e,i)}))}return Fu(a)}function Ku(e,t,r){var n=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:ne,key:null==n?null:""+n,children:e,containerInfo:t,implementation:r}}function Hu(e,t){var r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Vu(t))throw Error(s(200));return Ku(e,t,null,r)}Qu.prototype.render=function(e){Mu(e,this._internalRoot,null,null)},Qu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Mu(null,e,null,(function(){t[Or]=null}))},vt=function(e){if(13===e.tag){var t=Wi(Ys(),150,100);$s(e,t),Uu(e,t)}},bt=function(e){13===e.tag&&($s(e,3),Uu(e,3))},gt=function(e){if(13===e.tag){var t=Ys();$s(e,t=Ws(t,e,null)),Uu(e,t)}},N=function(e,t,r){switch(t){case"input":if(Oe(e,r),t=r.name,"radio"===r.type&&null!=t){for(r=e;r.parentNode;)r=r.parentNode;for(r=r.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<r.length;t++){var n=r[t];if(n!==e&&n.form===e.form){var i=Ar(n);if(!i)throw Error(s(90));xe(n),Oe(n,i)}}}break;case"textarea":Ie(e,r);break;case"select":null!=(t=r.value)&&Ae(e,!!r.multiple,t,!1)}},j=ru,q=function(e,t,r,n,i){var o=Ss;Ss|=4;try{return zi(98,e.bind(null,t,r,n,i))}finally{0===(Ss=o)&&Gi()}},L=function(){0==(49&Ss)&&(function(){if(null!==zs){var e=zs;zs=null,e.forEach((function(e,t){Lu(t,e),Zs(t)})),Gi()}}(),vu())},M=function(e,t){var r=Ss;Ss|=2;try{return e(t)}finally{0===(Ss=r)&&Gi()}};var Gu,Yu,Wu={Events:[Nr,Rr,Ar,O,k,Mr,function(e){at(e,Lr)},P,I,Zt,lt,vu,{current:!1}]};Yu=(Gu={findFiberByHostInstance:Cr,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var r=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(r,e,void 0,64==(64&e.current.effectTag))}catch(e){}},ku=function(e){try{t.onCommitFiberUnmount(r,e)}catch(e){}}}catch(e){}}(o({},Gu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:X.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=it(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Yu?Yu(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Wu,t.createPortal=Hu,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(s(188));throw Error(s(268,Object.keys(e)))}return e=null===(e=it(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&Ss))throw Error(s(187));var r=Ss;Ss|=1;try{return zi(99,e.bind(null,t))}finally{Ss=r,Gi()}},t.hydrate=function(e,t,r){if(!Vu(t))throw Error(s(200));return zu(null,e,t,!0,r)},t.render=function(e,t,r){if(!Vu(t))throw Error(s(200));return zu(null,e,t,!1,r)},t.unmountComponentAtNode=function(e){if(!Vu(e))throw Error(s(40));return!!e._reactRootContainer&&(nu((function(){zu(null,null,e,!1,(function(){e._reactRootContainer=null,e[Or]=null}))})),!0)},t.unstable_batchedUpdates=ru,t.unstable_createPortal=function(e,t){return Hu(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,r,n){if(!Vu(r))throw Error(s(200));if(null==e||void 0===e._reactInternalFiber)throw Error(s(38));return zu(e,t,r,!1,n)},t.version="16.13.1"},function(e,t,r){"use strict";e.exports=r(58)},function(e,t,r){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i,o,a,s,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,f=function e(){if(null!==l)try{var r=t.unstable_now();l(!0,r),l=null}catch(t){throw setTimeout(e,0),t}},p=Date.now();t.unstable_now=function(){return Date.now()-p},i=function(e){null!==l?setTimeout(i,0,e):(l=e,setTimeout(f,0))},o=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},s=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,h=window.Date,m=window.setTimeout,y=window.clearTimeout;if("undefined"!=typeof console){var v=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof v&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===n(d)&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var b=h.now();t.unstable_now=function(){return h.now()-b}}var g=!1,w=null,_=-1,E=5,x=0;s=function(){return t.unstable_now()>=x},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var k=new MessageChannel,S=k.port2;k.port1.onmessage=function(){if(null!==w){var e=t.unstable_now();x=e+E;try{w(!0,e)?S.postMessage(null):(g=!1,w=null)}catch(e){throw S.postMessage(null),e}}else g=!1},i=function(e){w=e,g||(g=!0,S.postMessage(null))},o=function(e,r){_=m((function(){e(t.unstable_now())}),r)},a=function(){y(_),_=-1}}function T(e,t){var r=e.length;e.push(t);e:for(;;){var n=r-1>>>1,i=e[n];if(!(void 0!==i&&0<N(i,t)))break e;e[n]=t,e[r]=i,r=n}}function O(e){return void 0===(e=e[0])?null:e}function C(e){var t=e[0];if(void 0!==t){var r=e.pop();if(r!==t){e[0]=r;e:for(var n=0,i=e.length;n<i;){var o=2*(n+1)-1,a=e[o],s=o+1,u=e[s];if(void 0!==a&&0>N(a,r))void 0!==u&&0>N(u,a)?(e[n]=u,e[s]=r,n=s):(e[n]=a,e[o]=r,n=o);else{if(!(void 0!==u&&0>N(u,r)))break e;e[n]=u,e[s]=r,n=s}}}return t}return null}function N(e,t){var r=e.sortIndex-t.sortIndex;return 0!==r?r:e.id-t.id}var R=[],A=[],D=1,P=null,I=3,j=!1,q=!1,L=!1;function M(e){for(var t=O(A);null!==t;){if(null===t.callback)C(A);else{if(!(t.startTime<=e))break;C(A),t.sortIndex=t.expirationTime,T(R,t)}t=O(A)}}function F(e){if(L=!1,M(e),!q)if(null!==O(R))q=!0,i(B);else{var t=O(A);null!==t&&o(F,t.startTime-e)}}function B(e,r){q=!1,L&&(L=!1,a()),j=!0;var n=I;try{for(M(r),P=O(R);null!==P&&(!(P.expirationTime>r)||e&&!s());){var i=P.callback;if(null!==i){P.callback=null,I=P.priorityLevel;var u=i(P.expirationTime<=r);r=t.unstable_now(),"function"==typeof u?P.callback=u:P===O(R)&&C(R),M(r)}else C(R);P=O(R)}if(null!==P)var l=!0;else{var c=O(A);null!==c&&o(F,c.startTime-r),l=!1}return l}finally{P=null,I=n,j=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var Q=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){q||j||(q=!0,i(B))},t.unstable_getCurrentPriorityLevel=function(){return I},t.unstable_getFirstCallbackNode=function(){return O(R)},t.unstable_next=function(e){switch(I){case 1:case 2:case 3:var t=3;break;default:t=I}var r=I;I=t;try{return e()}finally{I=r}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=Q,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=I;I=e;try{return t()}finally{I=r}},t.unstable_scheduleCallback=function(e,r,s){var u=t.unstable_now();if("object"===n(s)&&null!==s){var l=s.delay;l="number"==typeof l&&0<l?u+l:u,s="number"==typeof s.timeout?s.timeout:U(e)}else s=U(e),l=u;return e={id:D++,callback:r,priorityLevel:e,startTime:l,expirationTime:s=l+s,sortIndex:-1},l>u?(e.sortIndex=l,T(A,e),null===O(R)&&e===O(A)&&(L?a():L=!0,o(F,l-u))):(e.sortIndex=s,T(R,e),q||j||(q=!0,i(B))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();M(e);var r=O(R);return r!==P&&null!==P&&null!==r&&null!==r.callback&&r.startTime<=e&&r.expirationTime<P.expirationTime||s()},t.unstable_wrapCallback=function(e){var t=I;return function(){var r=I;I=t;try{return e.apply(this,arguments)}finally{I=r}}}},function(e,t,r){var n=r(13),i=r(60);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};n(i,o);e.exports=i.locals||{}},function(e,t,r){(t=r(14)(!1)).push([e.i,"body{margin:0;font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}code{font-family:source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace}\n",""]),e.exports=t},function(e,t,r){var n=r(13),i=r(62);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};n(i,o);e.exports=i.locals||{}},function(e,t,r){(t=r(14)(!1)).push([e.i,".header{color:white;background-color:#1b1e23;display:flex}.header .logo{width:20vw;height:auto}.header .header__right{align-items:center;flex:1;justify-content:flex-end;list-style-type:none;display:flex;margin-right:10vw}.header .header__right>*{vertical-align:middle;padding:10px}.header .header__right li>a{display:inline-block;color:white}.header .header__right .header__right__newblog{border:none;color:white;background-color:#1b1e23}.footer{position:fixed;bottom:0;height:5vw;z-index:2}.footer .footer__tux{height:100%;transform:rotate(-25deg)}.blog__navigator{border-right:1px solid #a6b5aa;background-color:#eff5f1;padding-right:20px}.blog__navigator ul.blog__category li{display:none}.blog__navigator ul.blog__category.active li{display:block;padding-left:20px;padding-top:8px;padding-bottom:8px}.blogContent{flex-grow:2}.blogContent .summaries__block{padding-top:30px;display:flex;flex-wrap:wrap;line-height:150px;justify-content:center}.blogContent .summaries__block .blogfile__summary{display:flex;align-items:center;justify-content:center;height:10vw;width:40%;border:1px solid #7e9291;text-align:center;line-height:normal;vertical-align:baseline;margin:25px 25px;background-color:#f7f9f6}.blogDateSelector{border-left:1px solid #a6b5aa;background-color:#eff5f1}html,body{height:100%;box-sizing:border-box;font-family:'Roboto', 'Helvetica', 'Arial', sans-serif;font-size:18px;line-height:1.6rem}ul{list-style-type:none;cursor:pointer}#root{height:100%}.profile{height:20vw}.page__blog{display:flex}.App{text-align:center}.App-logo{height:40vmin;pointer-events:none}@media (prefers-reduced-motion: no-preference){.App-logo{animation:App-logo-spin infinite 20s linear}}.App-header{background-color:#282c34;min-height:100vh;display:flex;flex-direction:column;align-items:center;justify-content:center;font-size:calc(10px + 2vmin);color:white}.App-link{color:#61dafb}@keyframes App-logo-spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}\n",""]),e.exports=t},function(e,t,r){"use strict";var n=r(64);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,r,i,o,a){if(a!==n){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,r){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,l=i?Symbol.for("react.profiler"):60114,c=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,p=i?Symbol.for("react.async_mode"):60111,d=i?Symbol.for("react.concurrent_mode"):60111,h=i?Symbol.for("react.forward_ref"):60112,m=i?Symbol.for("react.suspense"):60113,y=i?Symbol.for("react.suspense_list"):60120,v=i?Symbol.for("react.memo"):60115,b=i?Symbol.for("react.lazy"):60116,g=i?Symbol.for("react.block"):60121,w=i?Symbol.for("react.fundamental"):60117,_=i?Symbol.for("react.responder"):60118,E=i?Symbol.for("react.scope"):60119;function x(e){if("object"===n(e)&&null!==e){var t=e.$$typeof;switch(t){case o:switch(e=e.type){case p:case d:case s:case l:case u:case m:return e;default:switch(e=e&&e.$$typeof){case f:case h:case b:case v:case c:return e;default:return t}}case a:return t}}}function k(e){return x(e)===d}t.AsyncMode=p,t.ConcurrentMode=d,t.ContextConsumer=f,t.ContextProvider=c,t.Element=o,t.ForwardRef=h,t.Fragment=s,t.Lazy=b,t.Memo=v,t.Portal=a,t.Profiler=l,t.StrictMode=u,t.Suspense=m,t.isAsyncMode=function(e){return k(e)||x(e)===p},t.isConcurrentMode=k,t.isContextConsumer=function(e){return x(e)===f},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"===n(e)&&null!==e&&e.$$typeof===o},t.isForwardRef=function(e){return x(e)===h},t.isFragment=function(e){return x(e)===s},t.isLazy=function(e){return x(e)===b},t.isMemo=function(e){return x(e)===v},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===u},t.isSuspense=function(e){return x(e)===m},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===s||e===d||e===l||e===u||e===m||e===y||"object"===n(e)&&null!==e&&(e.$$typeof===b||e.$$typeof===v||e.$$typeof===c||e.$$typeof===f||e.$$typeof===h||e.$$typeof===w||e.$$typeof===_||e.$$typeof===E||e.$$typeof===g)},t.typeOf=x},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parse=function(e,t){return new d(e,t).parseDocument()},t.parseValue=function(e,t){var r=new d(e,t);r.expectToken(l.TokenKind.SOF);var n=r.parseValueLiteral(!1);return r.expectToken(l.TokenKind.EOF),n},t.parseType=function(e,t){var r=new d(e,t);r.expectToken(l.TokenKind.SOF);var n=r.parseTypeReference();return r.expectToken(l.TokenKind.EOF),n};var n=p(r(22)),i=p(r(24)),o=r(25),a=r(71),s=r(72),u=r(73),l=r(28),c=r(74),f=r(16);function p(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){var r="string"==typeof e?new s.Source(e):e;r instanceof s.Source||(0,i.default)(0,"Must provide Source. Received: ".concat((0,n.default)(r),".")),this._lexer=new c.Lexer(r),this._options=t}var t=e.prototype;return t.parseName=function(){var e=this.expectToken(l.TokenKind.NAME);return{kind:a.Kind.NAME,value:e.value,loc:this.loc(e)}},t.parseDocument=function(){var e=this._lexer.token;return{kind:a.Kind.DOCUMENT,definitions:this.many(l.TokenKind.SOF,this.parseDefinition,l.TokenKind.EOF),loc:this.loc(e)}},t.parseDefinition=function(){if(this.peek(l.TokenKind.NAME))switch(this._lexer.token.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"schema":case"scalar":case"type":case"interface":case"union":case"enum":case"input":case"directive":return this.parseTypeSystemDefinition();case"extend":return this.parseTypeSystemExtension()}else{if(this.peek(l.TokenKind.BRACE_L))return this.parseOperationDefinition();if(this.peekDescription())return this.parseTypeSystemDefinition()}throw this.unexpected()},t.parseOperationDefinition=function(){var e=this._lexer.token;if(this.peek(l.TokenKind.BRACE_L))return{kind:a.Kind.OPERATION_DEFINITION,operation:"query",name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet(),loc:this.loc(e)};var t,r=this.parseOperationType();return this.peek(l.TokenKind.NAME)&&(t=this.parseName()),{kind:a.Kind.OPERATION_DEFINITION,operation:r,name:t,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseOperationType=function(){var e=this.expectToken(l.TokenKind.NAME);switch(e.value){case"query":return"query";case"mutation":return"mutation";case"subscription":return"subscription"}throw this.unexpected(e)},t.parseVariableDefinitions=function(){return this.optionalMany(l.TokenKind.PAREN_L,this.parseVariableDefinition,l.TokenKind.PAREN_R)},t.parseVariableDefinition=function(){var e=this._lexer.token;return{kind:a.Kind.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(l.TokenKind.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(l.TokenKind.EQUALS)?this.parseValueLiteral(!0):void 0,directives:this.parseDirectives(!0),loc:this.loc(e)}},t.parseVariable=function(){var e=this._lexer.token;return this.expectToken(l.TokenKind.DOLLAR),{kind:a.Kind.VARIABLE,name:this.parseName(),loc:this.loc(e)}},t.parseSelectionSet=function(){var e=this._lexer.token;return{kind:a.Kind.SELECTION_SET,selections:this.many(l.TokenKind.BRACE_L,this.parseSelection,l.TokenKind.BRACE_R),loc:this.loc(e)}},t.parseSelection=function(){return this.peek(l.TokenKind.SPREAD)?this.parseFragment():this.parseField()},t.parseField=function(){var e,t,r=this._lexer.token,n=this.parseName();return this.expectOptionalToken(l.TokenKind.COLON)?(e=n,t=this.parseName()):t=n,{kind:a.Kind.FIELD,alias:e,name:t,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(l.TokenKind.BRACE_L)?this.parseSelectionSet():void 0,loc:this.loc(r)}},t.parseArguments=function(e){var t=e?this.parseConstArgument:this.parseArgument;return this.optionalMany(l.TokenKind.PAREN_L,t,l.TokenKind.PAREN_R)},t.parseArgument=function(){var e=this._lexer.token,t=this.parseName();return this.expectToken(l.TokenKind.COLON),{kind:a.Kind.ARGUMENT,name:t,value:this.parseValueLiteral(!1),loc:this.loc(e)}},t.parseConstArgument=function(){var e=this._lexer.token;return{kind:a.Kind.ARGUMENT,name:this.parseName(),value:(this.expectToken(l.TokenKind.COLON),this.parseValueLiteral(!0)),loc:this.loc(e)}},t.parseFragment=function(){var e=this._lexer.token;this.expectToken(l.TokenKind.SPREAD);var t=this.expectOptionalKeyword("on");return!t&&this.peek(l.TokenKind.NAME)?{kind:a.Kind.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1),loc:this.loc(e)}:{kind:a.Kind.INLINE_FRAGMENT,typeCondition:t?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(e)}},t.parseFragmentDefinition=function(){var e,t=this._lexer.token;return this.expectKeyword("fragment"),!0===(null===(e=this._options)||void 0===e?void 0:e.experimentalFragmentVariables)?{kind:a.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(t)}:{kind:a.Kind.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet(),loc:this.loc(t)}},t.parseFragmentName=function(){if("on"===this._lexer.token.value)throw this.unexpected();return this.parseName()},t.parseValueLiteral=function(e){var t=this._lexer.token;switch(t.kind){case l.TokenKind.BRACKET_L:return this.parseList(e);case l.TokenKind.BRACE_L:return this.parseObject(e);case l.TokenKind.INT:return this._lexer.advance(),{kind:a.Kind.INT,value:t.value,loc:this.loc(t)};case l.TokenKind.FLOAT:return this._lexer.advance(),{kind:a.Kind.FLOAT,value:t.value,loc:this.loc(t)};case l.TokenKind.STRING:case l.TokenKind.BLOCK_STRING:return this.parseStringLiteral();case l.TokenKind.NAME:switch(this._lexer.advance(),t.value){case"true":return{kind:a.Kind.BOOLEAN,value:!0,loc:this.loc(t)};case"false":return{kind:a.Kind.BOOLEAN,value:!1,loc:this.loc(t)};case"null":return{kind:a.Kind.NULL,loc:this.loc(t)};default:return{kind:a.Kind.ENUM,value:t.value,loc:this.loc(t)}}case l.TokenKind.DOLLAR:if(!e)return this.parseVariable()}throw this.unexpected()},t.parseStringLiteral=function(){var e=this._lexer.token;return this._lexer.advance(),{kind:a.Kind.STRING,value:e.value,block:e.kind===l.TokenKind.BLOCK_STRING,loc:this.loc(e)}},t.parseList=function(e){var t=this,r=this._lexer.token;return{kind:a.Kind.LIST,values:this.any(l.TokenKind.BRACKET_L,(function(){return t.parseValueLiteral(e)}),l.TokenKind.BRACKET_R),loc:this.loc(r)}},t.parseObject=function(e){var t=this,r=this._lexer.token;return{kind:a.Kind.OBJECT,fields:this.any(l.TokenKind.BRACE_L,(function(){return t.parseObjectField(e)}),l.TokenKind.BRACE_R),loc:this.loc(r)}},t.parseObjectField=function(e){var t=this._lexer.token,r=this.parseName();return this.expectToken(l.TokenKind.COLON),{kind:a.Kind.OBJECT_FIELD,name:r,value:this.parseValueLiteral(e),loc:this.loc(t)}},t.parseDirectives=function(e){for(var t=[];this.peek(l.TokenKind.AT);)t.push(this.parseDirective(e));return t},t.parseDirective=function(e){var t=this._lexer.token;return this.expectToken(l.TokenKind.AT),{kind:a.Kind.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(e),loc:this.loc(t)}},t.parseTypeReference=function(){var e,t=this._lexer.token;return this.expectOptionalToken(l.TokenKind.BRACKET_L)?(e=this.parseTypeReference(),this.expectToken(l.TokenKind.BRACKET_R),e={kind:a.Kind.LIST_TYPE,type:e,loc:this.loc(t)}):e=this.parseNamedType(),this.expectOptionalToken(l.TokenKind.BANG)?{kind:a.Kind.NON_NULL_TYPE,type:e,loc:this.loc(t)}:e},t.parseNamedType=function(){var e=this._lexer.token;return{kind:a.Kind.NAMED_TYPE,name:this.parseName(),loc:this.loc(e)}},t.parseTypeSystemDefinition=function(){var e=this.peekDescription()?this._lexer.lookahead():this._lexer.token;if(e.kind===l.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}throw this.unexpected(e)},t.peekDescription=function(){return this.peek(l.TokenKind.STRING)||this.peek(l.TokenKind.BLOCK_STRING)},t.parseDescription=function(){if(this.peekDescription())return this.parseStringLiteral()},t.parseSchemaDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("schema");var r=this.parseDirectives(!0),n=this.many(l.TokenKind.BRACE_L,this.parseOperationTypeDefinition,l.TokenKind.BRACE_R);return{kind:a.Kind.SCHEMA_DEFINITION,description:t,directives:r,operationTypes:n,loc:this.loc(e)}},t.parseOperationTypeDefinition=function(){var e=this._lexer.token,t=this.parseOperationType();this.expectToken(l.TokenKind.COLON);var r=this.parseNamedType();return{kind:a.Kind.OPERATION_TYPE_DEFINITION,operation:t,type:r,loc:this.loc(e)}},t.parseScalarTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("scalar");var r=this.parseName(),n=this.parseDirectives(!0);return{kind:a.Kind.SCALAR_TYPE_DEFINITION,description:t,name:r,directives:n,loc:this.loc(e)}},t.parseObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("type");var r=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:a.Kind.OBJECT_TYPE_DEFINITION,description:t,name:r,interfaces:n,directives:i,fields:o,loc:this.loc(e)}},t.parseImplementsInterfaces=function(){var e=[];if(this.expectOptionalKeyword("implements")){this.expectOptionalToken(l.TokenKind.AMP);do{var t;e.push(this.parseNamedType())}while(this.expectOptionalToken(l.TokenKind.AMP)||!0===(null===(t=this._options)||void 0===t?void 0:t.allowLegacySDLImplementsInterfaces)&&this.peek(l.TokenKind.NAME))}return e},t.parseFieldsDefinition=function(){var e;return!0===(null===(e=this._options)||void 0===e?void 0:e.allowLegacySDLEmptyFields)&&this.peek(l.TokenKind.BRACE_L)&&this._lexer.lookahead().kind===l.TokenKind.BRACE_R?(this._lexer.advance(),this._lexer.advance(),[]):this.optionalMany(l.TokenKind.BRACE_L,this.parseFieldDefinition,l.TokenKind.BRACE_R)},t.parseFieldDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),r=this.parseName(),n=this.parseArgumentDefs();this.expectToken(l.TokenKind.COLON);var i=this.parseTypeReference(),o=this.parseDirectives(!0);return{kind:a.Kind.FIELD_DEFINITION,description:t,name:r,arguments:n,type:i,directives:o,loc:this.loc(e)}},t.parseArgumentDefs=function(){return this.optionalMany(l.TokenKind.PAREN_L,this.parseInputValueDef,l.TokenKind.PAREN_R)},t.parseInputValueDef=function(){var e=this._lexer.token,t=this.parseDescription(),r=this.parseName();this.expectToken(l.TokenKind.COLON);var n,i=this.parseTypeReference();this.expectOptionalToken(l.TokenKind.EQUALS)&&(n=this.parseValueLiteral(!0));var o=this.parseDirectives(!0);return{kind:a.Kind.INPUT_VALUE_DEFINITION,description:t,name:r,type:i,defaultValue:n,directives:o,loc:this.loc(e)}},t.parseInterfaceTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("interface");var r=this.parseName(),n=this.parseImplementsInterfaces(),i=this.parseDirectives(!0),o=this.parseFieldsDefinition();return{kind:a.Kind.INTERFACE_TYPE_DEFINITION,description:t,name:r,interfaces:n,directives:i,fields:o,loc:this.loc(e)}},t.parseUnionTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("union");var r=this.parseName(),n=this.parseDirectives(!0),i=this.parseUnionMemberTypes();return{kind:a.Kind.UNION_TYPE_DEFINITION,description:t,name:r,directives:n,types:i,loc:this.loc(e)}},t.parseUnionMemberTypes=function(){var e=[];if(this.expectOptionalToken(l.TokenKind.EQUALS)){this.expectOptionalToken(l.TokenKind.PIPE);do{e.push(this.parseNamedType())}while(this.expectOptionalToken(l.TokenKind.PIPE))}return e},t.parseEnumTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("enum");var r=this.parseName(),n=this.parseDirectives(!0),i=this.parseEnumValuesDefinition();return{kind:a.Kind.ENUM_TYPE_DEFINITION,description:t,name:r,directives:n,values:i,loc:this.loc(e)}},t.parseEnumValuesDefinition=function(){return this.optionalMany(l.TokenKind.BRACE_L,this.parseEnumValueDefinition,l.TokenKind.BRACE_R)},t.parseEnumValueDefinition=function(){var e=this._lexer.token,t=this.parseDescription(),r=this.parseName(),n=this.parseDirectives(!0);return{kind:a.Kind.ENUM_VALUE_DEFINITION,description:t,name:r,directives:n,loc:this.loc(e)}},t.parseInputObjectTypeDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("input");var r=this.parseName(),n=this.parseDirectives(!0),i=this.parseInputFieldsDefinition();return{kind:a.Kind.INPUT_OBJECT_TYPE_DEFINITION,description:t,name:r,directives:n,fields:i,loc:this.loc(e)}},t.parseInputFieldsDefinition=function(){return this.optionalMany(l.TokenKind.BRACE_L,this.parseInputValueDef,l.TokenKind.BRACE_R)},t.parseTypeSystemExtension=function(){var e=this._lexer.lookahead();if(e.kind===l.TokenKind.NAME)switch(e.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(e)},t.parseSchemaExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");var t=this.parseDirectives(!0),r=this.optionalMany(l.TokenKind.BRACE_L,this.parseOperationTypeDefinition,l.TokenKind.BRACE_R);if(0===t.length&&0===r.length)throw this.unexpected();return{kind:a.Kind.SCHEMA_EXTENSION,directives:t,operationTypes:r,loc:this.loc(e)}},t.parseScalarTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");var t=this.parseName(),r=this.parseDirectives(!0);if(0===r.length)throw this.unexpected();return{kind:a.Kind.SCALAR_TYPE_EXTENSION,name:t,directives:r,loc:this.loc(e)}},t.parseObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");var t=this.parseName(),r=this.parseImplementsInterfaces(),n=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===r.length&&0===n.length&&0===i.length)throw this.unexpected();return{kind:a.Kind.OBJECT_TYPE_EXTENSION,name:t,interfaces:r,directives:n,fields:i,loc:this.loc(e)}},t.parseInterfaceTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");var t=this.parseName(),r=this.parseImplementsInterfaces(),n=this.parseDirectives(!0),i=this.parseFieldsDefinition();if(0===r.length&&0===n.length&&0===i.length)throw this.unexpected();return{kind:a.Kind.INTERFACE_TYPE_EXTENSION,name:t,interfaces:r,directives:n,fields:i,loc:this.loc(e)}},t.parseUnionTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");var t=this.parseName(),r=this.parseDirectives(!0),n=this.parseUnionMemberTypes();if(0===r.length&&0===n.length)throw this.unexpected();return{kind:a.Kind.UNION_TYPE_EXTENSION,name:t,directives:r,types:n,loc:this.loc(e)}},t.parseEnumTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");var t=this.parseName(),r=this.parseDirectives(!0),n=this.parseEnumValuesDefinition();if(0===r.length&&0===n.length)throw this.unexpected();return{kind:a.Kind.ENUM_TYPE_EXTENSION,name:t,directives:r,values:n,loc:this.loc(e)}},t.parseInputObjectTypeExtension=function(){var e=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");var t=this.parseName(),r=this.parseDirectives(!0),n=this.parseInputFieldsDefinition();if(0===r.length&&0===n.length)throw this.unexpected();return{kind:a.Kind.INPUT_OBJECT_TYPE_EXTENSION,name:t,directives:r,fields:n,loc:this.loc(e)}},t.parseDirectiveDefinition=function(){var e=this._lexer.token,t=this.parseDescription();this.expectKeyword("directive"),this.expectToken(l.TokenKind.AT);var r=this.parseName(),n=this.parseArgumentDefs(),i=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");var o=this.parseDirectiveLocations();return{kind:a.Kind.DIRECTIVE_DEFINITION,description:t,name:r,arguments:n,repeatable:i,locations:o,loc:this.loc(e)}},t.parseDirectiveLocations=function(){this.expectOptionalToken(l.TokenKind.PIPE);var e=[];do{e.push(this.parseDirectiveLocation())}while(this.expectOptionalToken(l.TokenKind.PIPE));return e},t.parseDirectiveLocation=function(){var e=this._lexer.token,t=this.parseName();if(void 0!==u.DirectiveLocation[t.value])return t;throw this.unexpected(e)},t.loc=function(e){var t;if(!0!==(null===(t=this._options)||void 0===t?void 0:t.noLocation))return new f.Location(e,this._lexer.lastToken,this._lexer.source)},t.peek=function(e){return this._lexer.token.kind===e},t.expectToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t;throw(0,o.syntaxError)(this._lexer.source,t.start,"Expected ".concat(m(e),", found ").concat(h(t),"."))},t.expectOptionalToken=function(e){var t=this._lexer.token;if(t.kind===e)return this._lexer.advance(),t},t.expectKeyword=function(e){var t=this._lexer.token;if(t.kind!==l.TokenKind.NAME||t.value!==e)throw(0,o.syntaxError)(this._lexer.source,t.start,'Expected "'.concat(e,'", found ').concat(h(t),"."));this._lexer.advance()},t.expectOptionalKeyword=function(e){var t=this._lexer.token;return t.kind===l.TokenKind.NAME&&t.value===e&&(this._lexer.advance(),!0)},t.unexpected=function(e){var t=null!=e?e:this._lexer.token;return(0,o.syntaxError)(this._lexer.source,t.start,"Unexpected ".concat(h(t),"."))},t.any=function(e,t,r){this.expectToken(e);for(var n=[];!this.expectOptionalToken(r);)n.push(t.call(this));return n},t.optionalMany=function(e,t,r){if(this.expectOptionalToken(e)){var n=[];do{n.push(t.call(this))}while(!this.expectOptionalToken(r));return n}return[]},t.many=function(e,t,r){this.expectToken(e);var n=[];do{n.push(t.call(this))}while(!this.expectOptionalToken(r));return n},e}();function h(e){var t=e.value;return m(e.kind)+(null!=t?' "'.concat(t,'"'):"")}function m(e){return(0,c.isPunctuatorTokenKind)(e)?'"'.concat(e,'"'):e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printError=b,t.GraphQLError=void 0;var n,i=(n=r(69))&&n.__esModule?n:{default:n},o=r(26),a=r(27),s=r(70);function u(e){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function c(e,t){return!t||"object"!==u(t)&&"function"!=typeof t?f(e):t}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e){var t="function"==typeof Map?new Map:void 0;return(p=function(e){if(null===e||(r=e,-1===Function.toString.call(r).indexOf("[native code]")))return e;var r;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return d(e,arguments,y(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),m(n,e)})(e)}function d(e,t,r){return(d=h()?Reflect.construct:function(e,t,r){var n=[null];n.push.apply(n,t);var i=new(Function.bind.apply(e,n));return r&&m(i,r.prototype),i}).apply(null,arguments)}function h(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function y(e){return(y=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(p,e);var t,r,n,s,u=(t=p,function(){var e,r=y(t);if(h()){var n=y(this).constructor;e=Reflect.construct(r,arguments,n)}else e=r.apply(this,arguments);return c(this,e)});function p(e,t,r,n,o,s,l){var d,h,m,y,v;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),v=u.call(this,e);var b,g=Array.isArray(t)?0!==t.length?t:void 0:t?[t]:void 0,w=r;!w&&g&&(w=null===(b=g[0].loc)||void 0===b?void 0:b.source);var _,E=n;!E&&g&&(E=g.reduce((function(e,t){return t.loc&&e.push(t.loc.start),e}),[])),E&&0===E.length&&(E=void 0),n&&r?_=n.map((function(e){return(0,a.getLocation)(r,e)})):g&&(_=g.reduce((function(e,t){return t.loc&&e.push((0,a.getLocation)(t.loc.source,t.loc.start)),e}),[]));var x=l;if(null==x&&null!=s){var k=s.extensions;(0,i.default)(k)&&(x=k)}return Object.defineProperties(f(v),{name:{value:"GraphQLError"},message:{value:e,enumerable:!0,writable:!0},locations:{value:null!==(d=_)&&void 0!==d?d:void 0,enumerable:null!=_},path:{value:null!=o?o:void 0,enumerable:null!=o},nodes:{value:null!=g?g:void 0},source:{value:null!==(h=w)&&void 0!==h?h:void 0},positions:{value:null!==(m=E)&&void 0!==m?m:void 0},originalError:{value:s},extensions:{value:null!==(y=x)&&void 0!==y?y:void 0,enumerable:null!=x}}),(null==s?void 0:s.stack)?(Object.defineProperty(f(v),"stack",{value:s.stack,writable:!0,configurable:!0}),c(v)):(Error.captureStackTrace?Error.captureStackTrace(f(v),p):Object.defineProperty(f(v),"stack",{value:Error().stack,writable:!0,configurable:!0}),v)}return r=p,(n=[{key:"toString",value:function(){return b(this)}},{key:o.SYMBOL_TO_STRING_TAG,get:function(){return"Object"}}])&&l(r.prototype,n),s&&l(r,s),p}(p(Error));function b(e){var t=e.message;if(e.nodes)for(var r=0,n=e.nodes;r<n.length;r++){var i=n[r];i.loc&&(t+="\n\n"+(0,s.printLocation)(i.loc))}else if(e.source&&e.locations)for(var o=0,a=e.locations;o<a.length;o++){var u=a[o];t+="\n\n"+(0,s.printSourceLocation)(e.source,u)}return t}t.GraphQLError=v},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"object"==n(e)&&null!==e}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.printLocation=function(e){return i(e.source,(0,n.getLocation)(e.source,e.start))},t.printSourceLocation=i;var n=r(27);function i(e,t){var r=e.locationOffset.column-1,n=a(r)+e.body,i=t.line-1,s=e.locationOffset.line-1,u=t.line+s,l=1===t.line?r:0,c=t.column+l,f="".concat(e.name,":").concat(u,":").concat(c,"\n"),p=n.split(/\r\n|[\n\r]/g),d=p[i];if(d.length>120){for(var h=Math.floor(c/80),m=c%80,y=[],v=0;v<d.length;v+=80)y.push(d.slice(v,v+80));return f+o([["".concat(u),y[0]]].concat(y.slice(1,h+1).map((function(e){return["",e]})),[[" ",a(m-1)+"^"],["",y[h+1]]]))}return f+o([["".concat(u-1),p[i-1]],["".concat(u),d],["",a(c-1)+"^"],["".concat(u+1),p[i+1]]])}function o(e){var t=e.filter((function(e){e[0];return void 0!==e[1]})),r=Math.max.apply(Math,t.map((function(e){return e[0].length})));return t.map((function(e){var t,n=e[0],i=e[1];return a(r-(t=n).length)+t+(i?" | "+i:" |")})).join("\n")}function a(e){return Array(e+1).join(" ")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Kind=void 0;var n=Object.freeze({NAME:"Name",DOCUMENT:"Document",OPERATION_DEFINITION:"OperationDefinition",VARIABLE_DEFINITION:"VariableDefinition",SELECTION_SET:"SelectionSet",FIELD:"Field",ARGUMENT:"Argument",FRAGMENT_SPREAD:"FragmentSpread",INLINE_FRAGMENT:"InlineFragment",FRAGMENT_DEFINITION:"FragmentDefinition",VARIABLE:"Variable",INT:"IntValue",FLOAT:"FloatValue",STRING:"StringValue",BOOLEAN:"BooleanValue",NULL:"NullValue",ENUM:"EnumValue",LIST:"ListValue",OBJECT:"ObjectValue",OBJECT_FIELD:"ObjectField",DIRECTIVE:"Directive",NAMED_TYPE:"NamedType",LIST_TYPE:"ListType",NON_NULL_TYPE:"NonNullType",SCHEMA_DEFINITION:"SchemaDefinition",OPERATION_TYPE_DEFINITION:"OperationTypeDefinition",SCALAR_TYPE_DEFINITION:"ScalarTypeDefinition",OBJECT_TYPE_DEFINITION:"ObjectTypeDefinition",FIELD_DEFINITION:"FieldDefinition",INPUT_VALUE_DEFINITION:"InputValueDefinition",INTERFACE_TYPE_DEFINITION:"InterfaceTypeDefinition",UNION_TYPE_DEFINITION:"UnionTypeDefinition",ENUM_TYPE_DEFINITION:"EnumTypeDefinition",ENUM_VALUE_DEFINITION:"EnumValueDefinition",INPUT_OBJECT_TYPE_DEFINITION:"InputObjectTypeDefinition",DIRECTIVE_DEFINITION:"DirectiveDefinition",SCHEMA_EXTENSION:"SchemaExtension",SCALAR_TYPE_EXTENSION:"ScalarTypeExtension",OBJECT_TYPE_EXTENSION:"ObjectTypeExtension",INTERFACE_TYPE_EXTENSION:"InterfaceTypeExtension",UNION_TYPE_EXTENSION:"UnionTypeExtension",ENUM_TYPE_EXTENSION:"EnumTypeExtension",INPUT_OBJECT_TYPE_EXTENSION:"InputObjectTypeExtension"});t.Kind=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Source=void 0;var n,i=r(26),o=(n=r(24))&&n.__esModule?n:{default:n};function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var s=function(){function e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"GraphQL request",r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{line:1,column:1};this.body=e,this.name=t,this.locationOffset=r,this.locationOffset.line>0||(0,o.default)(0,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||(0,o.default)(0,"column in locationOffset is 1-indexed and must be positive.")}var t,r,n;return t=e,(r=[{key:i.SYMBOL_TO_STRING_TAG,get:function(){return"Source"}}])&&a(t.prototype,r),n&&a(t,n),e}();t.Source=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DirectiveLocation=void 0;var n=Object.freeze({QUERY:"QUERY",MUTATION:"MUTATION",SUBSCRIPTION:"SUBSCRIPTION",FIELD:"FIELD",FRAGMENT_DEFINITION:"FRAGMENT_DEFINITION",FRAGMENT_SPREAD:"FRAGMENT_SPREAD",INLINE_FRAGMENT:"INLINE_FRAGMENT",VARIABLE_DEFINITION:"VARIABLE_DEFINITION",SCHEMA:"SCHEMA",SCALAR:"SCALAR",OBJECT:"OBJECT",FIELD_DEFINITION:"FIELD_DEFINITION",ARGUMENT_DEFINITION:"ARGUMENT_DEFINITION",INTERFACE:"INTERFACE",UNION:"UNION",ENUM:"ENUM",ENUM_VALUE:"ENUM_VALUE",INPUT_OBJECT:"INPUT_OBJECT",INPUT_FIELD_DEFINITION:"INPUT_FIELD_DEFINITION"});t.DirectiveLocation=n},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isPunctuatorTokenKind=function(e){return e===a.TokenKind.BANG||e===a.TokenKind.DOLLAR||e===a.TokenKind.AMP||e===a.TokenKind.PAREN_L||e===a.TokenKind.PAREN_R||e===a.TokenKind.SPREAD||e===a.TokenKind.COLON||e===a.TokenKind.EQUALS||e===a.TokenKind.AT||e===a.TokenKind.BRACKET_L||e===a.TokenKind.BRACKET_R||e===a.TokenKind.BRACE_L||e===a.TokenKind.PIPE||e===a.TokenKind.BRACE_R},t.Lexer=void 0;var n=r(25),i=r(16),o=r(29),a=r(28),s=function(){function e(e){var t=new i.Token(a.TokenKind.SOF,0,0,0,0,null);this.source=e,this.lastToken=t,this.token=t,this.line=1,this.lineStart=0}var t=e.prototype;return t.advance=function(){return this.lastToken=this.token,this.token=this.lookahead()},t.lookahead=function(){var e=this.token;if(e.kind!==a.TokenKind.EOF)do{var t;e=null!==(t=e.next)&&void 0!==t?t:e.next=l(this,e)}while(e.kind===a.TokenKind.COMMENT);return e},e}();function u(e){return isNaN(e)?a.TokenKind.EOF:e<127?JSON.stringify(String.fromCharCode(e)):'"\\u'.concat(("00"+e.toString(16).toUpperCase()).slice(-4),'"')}function l(e,t){var r=e.source,s=r.body,l=s.length,p=function(e,t,r){var n=e.length,i=t;for(;i<n;){var o=e.charCodeAt(i);if(9===o||32===o||44===o||65279===o)++i;else if(10===o)++i,++r.line,r.lineStart=i;else{if(13!==o)break;10===e.charCodeAt(i+1)?i+=2:++i,++r.line,r.lineStart=i}}return i}(s,t.end,e),d=e.line,h=1+p-e.lineStart;if(p>=l)return new i.Token(a.TokenKind.EOF,l,l,d,h,t);var m=s.charCodeAt(p);switch(m){case 33:return new i.Token(a.TokenKind.BANG,p,p+1,d,h,t);case 35:return function(e,t,r,n,o){var s,u=e.body,l=t;do{s=u.charCodeAt(++l)}while(!isNaN(s)&&(s>31||9===s));return new i.Token(a.TokenKind.COMMENT,t,l,r,n,o,u.slice(t+1,l))}(r,p,d,h,t);case 36:return new i.Token(a.TokenKind.DOLLAR,p,p+1,d,h,t);case 38:return new i.Token(a.TokenKind.AMP,p,p+1,d,h,t);case 40:return new i.Token(a.TokenKind.PAREN_L,p,p+1,d,h,t);case 41:return new i.Token(a.TokenKind.PAREN_R,p,p+1,d,h,t);case 46:if(46===s.charCodeAt(p+1)&&46===s.charCodeAt(p+2))return new i.Token(a.TokenKind.SPREAD,p,p+3,d,h,t);break;case 58:return new i.Token(a.TokenKind.COLON,p,p+1,d,h,t);case 61:return new i.Token(a.TokenKind.EQUALS,p,p+1,d,h,t);case 64:return new i.Token(a.TokenKind.AT,p,p+1,d,h,t);case 91:return new i.Token(a.TokenKind.BRACKET_L,p,p+1,d,h,t);case 93:return new i.Token(a.TokenKind.BRACKET_R,p,p+1,d,h,t);case 123:return new i.Token(a.TokenKind.BRACE_L,p,p+1,d,h,t);case 124:return new i.Token(a.TokenKind.PIPE,p,p+1,d,h,t);case 125:return new i.Token(a.TokenKind.BRACE_R,p,p+1,d,h,t);case 65:case 66:case 67:case 68:case 69:case 70:case 71:case 72:case 73:case 74:case 75:case 76:case 77:case 78:case 79:case 80:case 81:case 82:case 83:case 84:case 85:case 86:case 87:case 88:case 89:case 90:case 95:case 97:case 98:case 99:case 100:case 101:case 102:case 103:case 104:case 105:case 106:case 107:case 108:case 109:case 110:case 111:case 112:case 113:case 114:case 115:case 116:case 117:case 118:case 119:case 120:case 121:case 122:return function(e,t,r,n,o){var s=e.body,u=s.length,l=t+1,c=0;for(;l!==u&&!isNaN(c=s.charCodeAt(l))&&(95===c||c>=48&&c<=57||c>=65&&c<=90||c>=97&&c<=122);)++l;return new i.Token(a.TokenKind.NAME,t,l,r,n,o,s.slice(t,l))}(r,p,d,h,t);case 45:case 48:case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:return function(e,t,r,o,s,l){var f=e.body,p=r,d=t,h=!1;45===p&&(p=f.charCodeAt(++d));if(48===p){if((p=f.charCodeAt(++d))>=48&&p<=57)throw(0,n.syntaxError)(e,d,"Invalid number, unexpected digit after 0: ".concat(u(p),"."))}else d=c(e,d,p),p=f.charCodeAt(d);46===p&&(h=!0,p=f.charCodeAt(++d),d=c(e,d,p),p=f.charCodeAt(d));69!==p&&101!==p||(h=!0,43!==(p=f.charCodeAt(++d))&&45!==p||(p=f.charCodeAt(++d)),d=c(e,d,p),p=f.charCodeAt(d));if(46===p||function(e){return 95===e||e>=65&&e<=90||e>=97&&e<=122}(p))throw(0,n.syntaxError)(e,d,"Invalid number, expected digit but got: ".concat(u(p),"."));return new i.Token(h?a.TokenKind.FLOAT:a.TokenKind.INT,t,d,o,s,l,f.slice(t,d))}(r,p,m,d,h,t);case 34:return 34===s.charCodeAt(p+1)&&34===s.charCodeAt(p+2)?function(e,t,r,s,l,c){var f=e.body,p=t+3,d=p,h=0,m="";for(;p<f.length&&!isNaN(h=f.charCodeAt(p));){if(34===h&&34===f.charCodeAt(p+1)&&34===f.charCodeAt(p+2))return m+=f.slice(d,p),new i.Token(a.TokenKind.BLOCK_STRING,t,p+3,r,s,l,(0,o.dedentBlockStringValue)(m));if(h<32&&9!==h&&10!==h&&13!==h)throw(0,n.syntaxError)(e,p,"Invalid character within String: ".concat(u(h),"."));10===h?(++p,++c.line,c.lineStart=p):13===h?(10===f.charCodeAt(p+1)?p+=2:++p,++c.line,c.lineStart=p):92===h&&34===f.charCodeAt(p+1)&&34===f.charCodeAt(p+2)&&34===f.charCodeAt(p+3)?(m+=f.slice(d,p)+'"""',d=p+=4):++p}throw(0,n.syntaxError)(e,p,"Unterminated string.")}(r,p,d,h,t,e):function(e,t,r,o,s){var l=e.body,c=t+1,p=c,d=0,h="";for(;c<l.length&&!isNaN(d=l.charCodeAt(c))&&10!==d&&13!==d;){if(34===d)return h+=l.slice(p,c),new i.Token(a.TokenKind.STRING,t,c+1,r,o,s,h);if(d<32&&9!==d)throw(0,n.syntaxError)(e,c,"Invalid character within String: ".concat(u(d),"."));if(++c,92===d){switch(h+=l.slice(p,c-1),d=l.charCodeAt(c)){case 34:h+='"';break;case 47:h+="/";break;case 92:h+="\\";break;case 98:h+="\b";break;case 102:h+="\f";break;case 110:h+="\n";break;case 114:h+="\r";break;case 116:h+="\t";break;case 117:var m=(v=l.charCodeAt(c+1),b=l.charCodeAt(c+2),g=l.charCodeAt(c+3),w=l.charCodeAt(c+4),f(v)<<12|f(b)<<8|f(g)<<4|f(w));if(m<0){var y=l.slice(c+1,c+5);throw(0,n.syntaxError)(e,c,"Invalid character escape sequence: \\u".concat(y,"."))}h+=String.fromCharCode(m),c+=4;break;default:throw(0,n.syntaxError)(e,c,"Invalid character escape sequence: \\".concat(String.fromCharCode(d),"."))}++c,p=c}}var v,b,g,w;throw(0,n.syntaxError)(e,c,"Unterminated string.")}(r,p,d,h,t)}throw(0,n.syntaxError)(r,p,function(e){if(e<32&&9!==e&&10!==e&&13!==e)return"Cannot contain the invalid character ".concat(u(e),".");if(39===e)return"Unexpected single quote character ('), did you mean to use a double quote (\")?";return"Cannot parse the unexpected character ".concat(u(e),".")}(m))}function c(e,t,r){var i=e.body,o=t,a=r;if(a>=48&&a<=57){do{a=i.charCodeAt(++o)}while(a>=48&&a<=57);return o}throw(0,n.syntaxError)(e,o,"Invalid number, expected digit but got: ".concat(u(a),"."))}function f(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}t.Lexer=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.prototype.toString;e.prototype.toJSON=t,e.prototype.inspect=t,i.default&&(e.prototype[i.default]=t)};var n,i=(n=r(23))&&n.__esModule?n:{default:n}},function(e,t,r){var n=r(13),i=r(77);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var o={insert:"head",singleton:!1};n(i,o);e.exports=i.locals||{}},function(e,t,r){(t=r(14)(!1)).push([e.i,"@keyframes firstItem{0%{left:0}12.5%{left:2rem}25%{left:4rem}37.5%{left:2rem}50%{left:0}100%{left:0}}@keyframes secondItem{0%{left:2rem}12.5%{left:2rem}25%{left:4rem}37.5%{left:2rem}62.5%{left:2rem}75%{left:0}87.5%{left:2rem}100%{left:2rem}}@keyframes thirdItem{0%{left:4rem}50%{left:4rem}62.5%{left:2rem}75%{left:0}87.5%{left:2rem}100%{left:4rem}}.loader{display:flex;align-items:center;width:100%;height:100%;padding:1rem 0}.loader__items{position:relative;width:5rem;height:1rem;margin:0 auto}.loader__items span{background-color:blue;width:1rem;height:1rem;border-radius:1rem;position:absolute}.loader__items span:nth-child(1){left:0;animation:firstItem 2s infinite;animation-timing-function:linear}.loader__items span:nth-child(2){left:2rem;animation:secondItem 2s infinite;animation-timing-function:linear}.loader__items span:nth-child(3){right:0;animation:thirdItem 2s infinite;animation-timing-function:linear}\n",""]),e.exports=t},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function a(e,t,r){return t&&o(e.prototype,t),r&&o(e,r),e}Object.defineProperty(t,"__esModule",{value:!0}),t.Observable=void 0;var s=function(){return"function"==typeof Symbol},u=function(e){return s()&&Boolean(Symbol[e])},l=function(e){return u(e)?Symbol[e]:"@@"+e};s()&&!u("observable")&&(Symbol.observable=Symbol("observable"));var c=l("iterator"),f=l("observable"),p=l("species");function d(e,t){var r=e[t];if(null!=r){if("function"!=typeof r)throw new TypeError(r+" is not a function");return r}}function h(e){var t=e.constructor;return void 0!==t&&null===(t=t[p])&&(t=void 0),void 0!==t?t:k}function m(e){return e instanceof k}function y(e){y.log?y.log(e):setTimeout((function(){throw e}))}function v(e){Promise.resolve().then((function(){try{e()}catch(e){y(e)}}))}function b(e){var t=e._cleanup;if(void 0!==t&&(e._cleanup=void 0,t))try{if("function"==typeof t)t();else{var r=d(t,"unsubscribe");r&&r.call(t)}}catch(e){y(e)}}function g(e){e._observer=void 0,e._queue=void 0,e._state="closed"}function w(e,t,r){e._state="running";var n=e._observer;try{var i=d(n,t);switch(t){case"next":i&&i.call(n,r);break;case"error":if(g(e),!i)throw r;i.call(n,r);break;case"complete":g(e),i&&i.call(n)}}catch(e){y(e)}"closed"===e._state?b(e):"running"===e._state&&(e._state="ready")}function _(e,t,r){if("closed"!==e._state){if("buffering"!==e._state)return"ready"!==e._state?(e._state="buffering",e._queue=[{type:t,value:r}],void v((function(){return function(e){var t=e._queue;if(t){e._queue=void 0,e._state="ready";for(var r=0;r<t.length&&(w(e,t[r].type,t[r].value),"closed"!==e._state);++r);}}(e)}))):void w(e,t,r);e._queue.push({type:t,value:r})}}var E=function(){function e(t,r){i(this,e),this._cleanup=void 0,this._observer=t,this._queue=void 0,this._state="initializing";var n=new x(this);try{this._cleanup=r.call(void 0,n)}catch(e){n.error(e)}"initializing"===this._state&&(this._state="ready")}return a(e,[{key:"unsubscribe",value:function(){"closed"!==this._state&&(g(this),b(this))}},{key:"closed",get:function(){return"closed"===this._state}}]),e}(),x=function(){function e(t){i(this,e),this._subscription=t}return a(e,[{key:"next",value:function(e){_(this._subscription,"next",e)}},{key:"error",value:function(e){_(this._subscription,"error",e)}},{key:"complete",value:function(){_(this._subscription,"complete")}},{key:"closed",get:function(){return"closed"===this._subscription._state}}]),e}(),k=function(){function e(t){if(i(this,e),!(this instanceof e))throw new TypeError("Observable cannot be called as a function");if("function"!=typeof t)throw new TypeError("Observable initializer must be a function");this._subscriber=t}return a(e,[{key:"subscribe",value:function(e){return"object"===n(e)&&null!==e||(e={next:e,error:arguments[1],complete:arguments[2]}),new E(e,this._subscriber)}},{key:"forEach",value:function(e){var t=this;return new Promise((function(r,n){if("function"==typeof e)var i=t.subscribe({next:function(t){try{e(t,o)}catch(e){n(e),i.unsubscribe()}},error:n,complete:r});else n(new TypeError(e+" is not a function"));function o(){i.unsubscribe(),r()}}))}},{key:"map",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(h(this))((function(r){return t.subscribe({next:function(t){try{t=e(t)}catch(e){return r.error(e)}r.next(t)},error:function(e){r.error(e)},complete:function(){r.complete()}})}))}},{key:"filter",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");return new(h(this))((function(r){return t.subscribe({next:function(t){try{if(!e(t))return}catch(e){return r.error(e)}r.next(t)},error:function(e){r.error(e)},complete:function(){r.complete()}})}))}},{key:"reduce",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var r=h(this),n=arguments.length>1,i=!1,o=arguments[1],a=o;return new r((function(r){return t.subscribe({next:function(t){var o=!i;if(i=!0,!o||n)try{a=e(a,t)}catch(e){return r.error(e)}else a=t},error:function(e){r.error(e)},complete:function(){if(!i&&!n)return r.error(new TypeError("Cannot reduce an empty sequence"));r.next(a),r.complete()}})}))}},{key:"concat",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var i=h(this);return new i((function(t){var n,o=0;return function e(a){n=a.subscribe({next:function(e){t.next(e)},error:function(e){t.error(e)},complete:function(){o===r.length?(n=void 0,t.complete()):e(i.from(r[o++]))}})}(e),function(){n&&(n.unsubscribe(),n=void 0)}}))}},{key:"flatMap",value:function(e){var t=this;if("function"!=typeof e)throw new TypeError(e+" is not a function");var r=h(this);return new r((function(n){var i=[],o=t.subscribe({next:function(t){if(e)try{t=e(t)}catch(e){return n.error(e)}var o=r.from(t).subscribe({next:function(e){n.next(e)},error:function(e){n.error(e)},complete:function(){var e=i.indexOf(o);e>=0&&i.splice(e,1),a()}});i.push(o)},error:function(e){n.error(e)},complete:function(){a()}});function a(){o.closed&&0===i.length&&n.complete()}return function(){i.forEach((function(e){return e.unsubscribe()})),o.unsubscribe()}}))}},{key:f,value:function(){return this}}],[{key:"from",value:function(t){var r="function"==typeof this?this:e;if(null==t)throw new TypeError(t+" is not an object");var n=d(t,f);if(n){var i=n.call(t);if(Object(i)!==i)throw new TypeError(i+" is not an object");return m(i)&&i.constructor===r?i:new r((function(e){return i.subscribe(e)}))}if(u("iterator")&&(n=d(t,c)))return new r((function(e){v((function(){if(!e.closed){var r=!0,i=!1,o=void 0;try{for(var a,s=n.call(t)[Symbol.iterator]();!(r=(a=s.next()).done);r=!0){var u=a.value;if(e.next(u),e.closed)return}}catch(e){i=!0,o=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw o}}e.complete()}}))}));if(Array.isArray(t))return new r((function(e){v((function(){if(!e.closed){for(var r=0;r<t.length;++r)if(e.next(t[r]),e.closed)return;e.complete()}}))}));throw new TypeError(t+" is not observable")}},{key:"of",value:function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];var i="function"==typeof this?this:e;return new i((function(e){v((function(){if(!e.closed){for(var t=0;t<r.length;++t)if(e.next(r[t]),e.closed)return;e.complete()}}))}))}},{key:p,get:function(){return this}}]),e}();t.Observable=k,s()&&Object.defineProperty(k,Symbol("extensions"),{value:{symbol:f,hostReportError:y},configurable:!0})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"text"===e.type&&/\r?\n/.test(e.data)&&""===e.data.trim()}},function(e,t,r){"use strict";var n;Object.defineProperty(t,"__esModule",{value:!0});var i=r(7),o=l(r(112)),a=l(r(113)),s=l(r(119)),u=l(r(120));function l(e){return e&&e.__esModule?e:{default:e}}function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}t.default=(c(n={},i.ElementType.Text,o.default),c(n,i.ElementType.Tag,a.default),c(n,i.ElementType.Style,s.default),c(n,i.ElementType.Directive,u.default),c(n,i.ElementType.Comment,u.default),c(n,i.ElementType.Script,u.default),c(n,i.ElementType.CDATA,u.default),c(n,i.ElementType.Doctype,u.default),n)},function(e,t,r){var n=r(83);e.exports=function(e){if(e>=55296&&e<=57343||e>1114111)return"�";e in n&&(e=n[e]);var t="";e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e);return t+=String.fromCharCode(e)}},function(e){e.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e){e.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i,o="object"===("undefined"==typeof Reflect?"undefined":n(Reflect))?Reflect:null,a=o&&"function"==typeof o.apply?o.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};i=o&&"function"==typeof o.ownKeys?o.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function u(){u.init.call(this)}e.exports=u,u.EventEmitter=u,u.prototype._events=void 0,u.prototype._eventsCount=0,u.prototype._maxListeners=void 0;var l=10;function c(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+n(e))}function f(e){return void 0===e._maxListeners?u.defaultMaxListeners:e._maxListeners}function p(e,t,r,n){var i,o,a,s;if(c(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),a=o[t]),void 0===a)a=o[t]=r,++e._eventsCount;else if("function"==typeof a?a=o[t]=n?[r,a]:[a,r]:n?a.unshift(r):a.push(r),(i=f(e))>0&&a.length>i&&!a.warned){a.warned=!0;var u=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");u.name="MaxListenersExceededWarning",u.emitter=e,u.type=t,u.count=a.length,s=u,console&&console.warn&&console.warn(s)}return e}function d(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=d.bind(n);return i.listener=r,n.wrapFn=i,i}function m(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):v(i,i.length)}function y(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function v(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}Object.defineProperty(u,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),u.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},u.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},u.prototype.getMaxListeners=function(){return f(this)},u.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var n="error"===e,i=this._events;if(void 0!==i)n=n&&void 0===i.error;else if(!n)return!1;if(n){var o;if(t.length>0&&(o=t[0]),o instanceof Error)throw o;var s=new Error("Unhandled error."+(o?" ("+o.message+")":""));throw s.context=o,s}var u=i[e];if(void 0===u)return!1;if("function"==typeof u)a(u,this,t);else{var l=u.length,c=v(u,l);for(r=0;r<l;++r)a(c[r],this,t)}return!0},u.prototype.addListener=function(e,t){return p(this,e,t,!1)},u.prototype.on=u.prototype.addListener,u.prototype.prependListener=function(e,t){return p(this,e,t,!0)},u.prototype.once=function(e,t){return c(t),this.on(e,h(this,e,t)),this},u.prototype.prependOnceListener=function(e,t){return c(t),this.prependListener(e,h(this,e,t)),this},u.prototype.removeListener=function(e,t){var r,n,i,o,a;if(c(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){a=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,a||t)}return this},u.prototype.off=u.prototype.removeListener,u.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},u.prototype.listeners=function(e){return m(this,e,!0)},u.prototype.rawListeners=function(e){return m(this,e,!1)},u.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):y.call(e,t)},u.prototype.listenerCount=y,u.prototype.eventNames=function(){return this._eventsCount>0?i(this._events):[]}},function(e,t,r){var n=r(34),i=e.exports=Object.create(n),o={tagName:"name"};Object.keys(o).forEach((function(e){var t=o[e];Object.defineProperty(i,e,{get:function(){return this[t]||null},set:function(e){return this[t]=e,e}})}))},function(e,t,r){var n=r(33),i=r(35);function o(e,t){this.init(e,t)}function a(e,t){return i.getElementsByTagName(e,t,!0)}function s(e,t){return i.getElementsByTagName(e,t,!0,1)[0]}function u(e,t,r){return i.getText(i.getElementsByTagName(e,t,r,1)).trim()}function l(e,t,r,n,i){var o=u(r,n,i);o&&(e[t]=o)}r(10)(o,n),o.prototype.init=n;var c=function(e){return"rss"===e||"feed"===e||"rdf:RDF"===e};o.prototype.onend=function(){var e,t,r={},i=s(c,this.dom);i&&("feed"===i.name?(t=i.children,r.type="atom",l(r,"id","id",t),l(r,"title","title",t),(e=s("link",t))&&(e=e.attribs)&&(e=e.href)&&(r.link=e),l(r,"description","subtitle",t),(e=u("updated",t))&&(r.updated=new Date(e)),l(r,"author","email",t,!0),r.items=a("entry",t).map((function(e){var t,r={};return l(r,"id","id",e=e.children),l(r,"title","title",e),(t=s("link",e))&&(t=t.attribs)&&(t=t.href)&&(r.link=t),(t=u("summary",e)||u("content",e))&&(r.description=t),(t=u("updated",e))&&(r.pubDate=new Date(t)),r}))):(t=s("channel",i.children).children,r.type=i.name.substr(0,3),r.id="",l(r,"title","title",t),l(r,"link","link",t),l(r,"description","description",t),(e=u("lastBuildDate",t))&&(r.updated=new Date(e)),l(r,"author","managingEditor",t,!0),r.items=a("item",i.children).map((function(e){var t,r={};return l(r,"id","guid",e=e.children),l(r,"title","title",e),l(r,"link","link",e),l(r,"description","description",e),(t=u("pubDate",e))&&(r.pubDate=new Date(t)),r})))),this.dom=r,n.prototype._handleCallback.call(this,i?null:Error("couldn't find root of feed"))},e.exports=o},function(e,t,r){var n=r(8),i=r(91),o=n.isTag;e.exports={getInnerHTML:function(e,t){return e.children?e.children.map((function(e){return i(e,t)})).join(""):""},getOuterHTML:i,getText:function e(t){return Array.isArray(t)?t.map(e).join(""):o(t)?"br"===t.name?"\n":e(t.children):t.type===n.CDATA?e(t.children):t.type===n.Text?t.data:""}}},function(e,t,r){var n=r(92),i=r(93),o=r(97);o.elementNames.__proto__=null,o.attributeNames.__proto__=null;var a={__proto__:null,style:!0,script:!0,xmp:!0,iframe:!0,noembed:!0,noframes:!0,plaintext:!0,noscript:!0};var s={__proto__:null,area:!0,base:!0,basefont:!0,br:!0,col:!0,command:!0,embed:!0,frame:!0,hr:!0,img:!0,input:!0,isindex:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},u=e.exports=function(e,t){Array.isArray(e)||e.cheerio||(e=[e]),t=t||{};for(var r="",i=0;i<e.length;i++){var o=e[i];"root"===o.type?r+=u(o.children,t):n.isTag(o)?r+=c(o,t):o.type===n.Directive?r+=f(o):o.type===n.Comment?r+=h(o):o.type===n.CDATA?r+=d(o):r+=p(o,t)}return r},l=["mi","mo","mn","ms","mtext","annotation-xml","foreignObject","desc","title"];function c(e,t){"foreign"===t.xmlMode&&(e.name=o.elementNames[e.name]||e.name,e.parent&&l.indexOf(e.parent.name)>=0&&(t=Object.assign({},t,{xmlMode:!1}))),!t.xmlMode&&["svg","math"].indexOf(e.name)>=0&&(t=Object.assign({},t,{xmlMode:"foreign"}));var r="<"+e.name,n=function(e,t){if(e){var r,n="";for(var a in e)r=e[a],n&&(n+=" "),"foreign"===t.xmlMode&&(a=o.attributeNames[a]||a),n+=a,(null!==r&&""!==r||t.xmlMode)&&(n+='="'+(t.decodeEntities?i.encodeXML(r):r.replace(/\"/g,"&quot;"))+'"');return n}}(e.attribs,t);return n&&(r+=" "+n),!t.xmlMode||e.children&&0!==e.children.length?(r+=">",e.children&&(r+=u(e.children,t)),s[e.name]&&!t.xmlMode||(r+="</"+e.name+">")):r+="/>",r}function f(e){return"<"+e.data+">"}function p(e,t){var r=e.data||"";return!t.decodeEntities||e.parent&&e.parent.name in a||(r=i.encodeXML(r)),r}function d(e){return"<![CDATA["+e.children[0].data+"]]>"}function h(e){return"\x3c!--"+e.data+"--\x3e"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isTag=function(e){return"tag"===e.type||"script"===e.type||"style"===e.type},t.Text="text",t.Directive="directive",t.Comment="comment",t.Script="script",t.Style="style",t.Tag="tag",t.CDATA="cdata",t.Doctype="doctype"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=r(36),i=r(39);t.decode=function(e,t){return(!t||t<=0?n.decodeXML:n.decodeHTML)(e)},t.decodeStrict=function(e,t){return(!t||t<=0?n.decodeXML:n.decodeHTMLStrict)(e)},t.encode=function(e,t){return(!t||t<=0?i.encodeXML:i.encodeHTML)(e)};var o=r(39);t.encodeXML=o.encodeXML,t.encodeHTML=o.encodeHTML,t.escape=o.escape,t.encodeHTML4=o.encodeHTML,t.encodeHTML5=o.encodeHTML;var a=r(36);t.decodeXML=a.decodeXML,t.decodeHTML=a.decodeHTML,t.decodeHTMLStrict=a.decodeHTMLStrict,t.decodeHTML4=a.decodeHTML,t.decodeHTML5=a.decodeHTML,t.decodeHTML4Strict=a.decodeHTMLStrict,t.decodeHTML5Strict=a.decodeHTMLStrict,t.decodeXMLStrict=a.decodeXML},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(r(96));t.default=function(e){if(e>=55296&&e<=57343||e>1114111)return"�";e in i.default&&(e=i.default[e]);var t="";return e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),t+=String.fromCharCode(e)}},function(e){e.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(e){e.exports=JSON.parse('{"elementNames":{"altglyph":"altGlyph","altglyphdef":"altGlyphDef","altglyphitem":"altGlyphItem","animatecolor":"animateColor","animatemotion":"animateMotion","animatetransform":"animateTransform","clippath":"clipPath","feblend":"feBlend","fecolormatrix":"feColorMatrix","fecomponenttransfer":"feComponentTransfer","fecomposite":"feComposite","feconvolvematrix":"feConvolveMatrix","fediffuselighting":"feDiffuseLighting","fedisplacementmap":"feDisplacementMap","fedistantlight":"feDistantLight","fedropshadow":"feDropShadow","feflood":"feFlood","fefunca":"feFuncA","fefuncb":"feFuncB","fefuncg":"feFuncG","fefuncr":"feFuncR","fegaussianblur":"feGaussianBlur","feimage":"feImage","femerge":"feMerge","femergenode":"feMergeNode","femorphology":"feMorphology","feoffset":"feOffset","fepointlight":"fePointLight","fespecularlighting":"feSpecularLighting","fespotlight":"feSpotLight","fetile":"feTile","feturbulence":"feTurbulence","foreignobject":"foreignObject","glyphref":"glyphRef","lineargradient":"linearGradient","radialgradient":"radialGradient","textpath":"textPath"},"attributeNames":{"definitionurl":"definitionURL","attributename":"attributeName","attributetype":"attributeType","basefrequency":"baseFrequency","baseprofile":"baseProfile","calcmode":"calcMode","clippathunits":"clipPathUnits","diffuseconstant":"diffuseConstant","edgemode":"edgeMode","filterunits":"filterUnits","glyphref":"glyphRef","gradienttransform":"gradientTransform","gradientunits":"gradientUnits","kernelmatrix":"kernelMatrix","kernelunitlength":"kernelUnitLength","keypoints":"keyPoints","keysplines":"keySplines","keytimes":"keyTimes","lengthadjust":"lengthAdjust","limitingconeangle":"limitingConeAngle","markerheight":"markerHeight","markerunits":"markerUnits","markerwidth":"markerWidth","maskcontentunits":"maskContentUnits","maskunits":"maskUnits","numoctaves":"numOctaves","pathlength":"pathLength","patterncontentunits":"patternContentUnits","patterntransform":"patternTransform","patternunits":"patternUnits","pointsatx":"pointsAtX","pointsaty":"pointsAtY","pointsatz":"pointsAtZ","preservealpha":"preserveAlpha","preserveaspectratio":"preserveAspectRatio","primitiveunits":"primitiveUnits","refx":"refX","refy":"refY","repeatcount":"repeatCount","repeatdur":"repeatDur","requiredextensions":"requiredExtensions","requiredfeatures":"requiredFeatures","specularconstant":"specularConstant","specularexponent":"specularExponent","spreadmethod":"spreadMethod","startoffset":"startOffset","stddeviation":"stdDeviation","stitchtiles":"stitchTiles","surfacescale":"surfaceScale","systemlanguage":"systemLanguage","tablevalues":"tableValues","targetx":"targetX","targety":"targetY","textlength":"textLength","viewbox":"viewBox","viewtarget":"viewTarget","xchannelselector":"xChannelSelector","ychannelselector":"yChannelSelector","zoomandpan":"zoomAndPan"}}')},function(e,t){var r=t.getChildren=function(e){return e.children},n=t.getParent=function(e){return e.parent};t.getSiblings=function(e){var t=n(e);return t?r(t):[e]},t.getAttributeValue=function(e,t){return e.attribs&&e.attribs[t]},t.hasAttrib=function(e,t){return!!e.attribs&&hasOwnProperty.call(e.attribs,t)},t.getName=function(e){return e.name}},function(e,t){t.removeElement=function(e){if(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),e.parent){var t=e.parent.children;t.splice(t.lastIndexOf(e),1)}},t.replaceElement=function(e,t){var r=t.prev=e.prev;r&&(r.next=t);var n=t.next=e.next;n&&(n.prev=t);var i=t.parent=e.parent;if(i){var o=i.children;o[o.lastIndexOf(e)]=t}},t.appendChild=function(e,t){if(t.parent=e,1!==e.children.push(t)){var r=e.children[e.children.length-2];r.next=t,t.prev=r,t.next=null}},t.append=function(e,t){var r=e.parent,n=e.next;if(t.next=n,t.prev=e,e.next=t,t.parent=r,n){if(n.prev=t,r){var i=r.children;i.splice(i.lastIndexOf(n),0,t)}}else r&&r.children.push(t)},t.prepend=function(e,t){var r=e.parent;if(r){var n=r.children;n.splice(n.lastIndexOf(e),0,t)}e.prev&&(e.prev.next=t),t.parent=r,t.prev=e.prev,t.next=e,e.prev=t}},function(e,t,r){var n=r(8).isTag;function i(e,t,r,n){for(var o,a=[],s=0,u=t.length;s<u&&!(e(t[s])&&(a.push(t[s]),--n<=0))&&(o=t[s].children,!(r&&o&&o.length>0&&(o=i(e,o,r,n),a=a.concat(o),(n-=o.length)<=0)));s++);return a}e.exports={filter:function(e,t,r,n){Array.isArray(t)||(t=[t]);"number"==typeof n&&isFinite(n)||(n=1/0);return i(e,t,!1!==r,n)},find:i,findOneChild:function(e,t){for(var r=0,n=t.length;r<n;r++)if(e(t[r]))return t[r];return null},findOne:function e(t,r){for(var i=null,o=0,a=r.length;o<a&&!i;o++)n(r[o])&&(t(r[o])?i=r[o]:r[o].children.length>0&&(i=e(t,r[o].children)));return i},existsOne:function e(t,r){for(var i=0,o=r.length;i<o;i++)if(n(r[i])&&(t(r[i])||r[i].children.length>0&&e(t,r[i].children)))return!0;return!1},findAll:function(e,t){var r=[],i=t.slice();for(;i.length;){var o=i.shift();n(o)&&(o.children&&o.children.length>0&&i.unshift.apply(i,o.children),e(o)&&r.push(o))}return r}}},function(e,t,r){var n=r(8),i=t.isTag=n.isTag;t.testElement=function(e,t){for(var r in e)if(e.hasOwnProperty(r)){if("tag_name"===r){if(!i(t)||!e.tag_name(t.name))return!1}else if("tag_type"===r){if(!e.tag_type(t.type))return!1}else if("tag_contains"===r){if(i(t)||!e.tag_contains(t.data))return!1}else if(!t.attribs||!e[r](t.attribs[r]))return!1}else;return!0};var o={tag_name:function(e){return"function"==typeof e?function(t){return i(t)&&e(t.name)}:"*"===e?i:function(t){return i(t)&&t.name===e}},tag_type:function(e){return"function"==typeof e?function(t){return e(t.type)}:function(t){return t.type===e}},tag_contains:function(e){return"function"==typeof e?function(t){return!i(t)&&e(t.data)}:function(t){return!i(t)&&t.data===e}}};function a(e,t){return"function"==typeof t?function(r){return r.attribs&&t(r.attribs[e])}:function(r){return r.attribs&&r.attribs[e]===t}}function s(e,t){return function(r){return e(r)||t(r)}}t.getElements=function(e,t,r,n){var i=Object.keys(e).map((function(t){var r=e[t];return t in o?o[t](r):a(t,r)}));return 0===i.length?[]:this.filter(i.reduce(s),t,r,n)},t.getElementById=function(e,t,r){return Array.isArray(t)||(t=[t]),this.findOne(a("id",e),t,!1!==r)},t.getElementsByTagName=function(e,t,r,n){return this.filter(o.tag_name(e),t,r,n)},t.getElementsByTagType=function(e,t,r,n){return this.filter(o.tag_type(e),t,r,n)}},function(e,t){t.removeSubsets=function(e){for(var t,r,n,i=e.length;--i>-1;){for(t=r=e[i],e[i]=null,n=!0;r;){if(e.indexOf(r)>-1){n=!1,e.splice(i,1);break}r=r.parent}n&&(e[i]=t)}return e};var r=1,n=2,i=4,o=8,a=16,s=t.compareDocumentPosition=function(e,t){var s,u,l,c,f,p,d=[],h=[];if(e===t)return 0;for(s=e;s;)d.unshift(s),s=s.parent;for(s=t;s;)h.unshift(s),s=s.parent;for(p=0;d[p]===h[p];)p++;return 0===p?r:(l=(u=d[p-1]).children,c=d[p],f=h[p],l.indexOf(c)>l.indexOf(f)?u===t?i|a:i:u===e?n|o:n)};t.uniqueSort=function(e){var t,r,o=e.length;for(e=e.slice();--o>-1;)t=e[o],(r=e.indexOf(t))>-1&&r<o&&e.splice(o,1);return e.sort((function(e,t){var r=s(e,t);return r&n?-1:r&i?1:0})),e}},function(e,t,r){e.exports=i;var n=r(40);function i(e){n.call(this,new o(this),e)}function o(e){this.scope=e}r(10)(i,n),i.prototype.readable=!0;var a=r(7).EVENTS;Object.keys(a).forEach((function(e){if(0===a[e])o.prototype["on"+e]=function(){this.scope.emit(e)};else if(1===a[e])o.prototype["on"+e]=function(t){this.scope.emit(e,t)};else{if(2!==a[e])throw Error("wrong number of arguments!");o.prototype["on"+e]=function(t,r){this.scope.emit(e,t,r)}}}))},function(e,t){},function(e,t,r){"use strict";var n=r(106).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=u,this.end=l,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=c,this.end=f,t=3;break;default:return this.write=p,void(this.end=d)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function u(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function l(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function c(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function f(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function p(e){return e.toString(this.encoding)}function d(e){return e&&e.length?this.write(e):""}t.StringDecoder=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=a(t[n]);if(i>=0)return i>0&&(e.lastNeed=i-1),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(e.lastNeed=i-2),i;if(--n<r||-2===i)return 0;if((i=a(t[n]))>=0)return i>0&&(2===i?i=0:e.lastNeed=i-3),i;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,r){var n=r(41),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function a(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=a),a.prototype=Object.create(i.prototype),o(i,a),a.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},a.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},function(e,t,r){"use strict";t.byteLength=function(e){var t=l(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,n=l(e),a=n[0],s=n[1],u=new o(function(e,t,r){return 3*(t+r)/4-r}(0,a,s)),c=0,f=s>0?a-4:a;for(r=0;r<f;r+=4)t=i[e.charCodeAt(r)]<<18|i[e.charCodeAt(r+1)]<<12|i[e.charCodeAt(r+2)]<<6|i[e.charCodeAt(r+3)],u[c++]=t>>16&255,u[c++]=t>>8&255,u[c++]=255&t;2===s&&(t=i[e.charCodeAt(r)]<<2|i[e.charCodeAt(r+1)]>>4,u[c++]=255&t);1===s&&(t=i[e.charCodeAt(r)]<<10|i[e.charCodeAt(r+1)]<<4|i[e.charCodeAt(r+2)]>>2,u[c++]=t>>8&255,u[c++]=255&t);return u},t.fromByteArray=function(e){for(var t,r=e.length,i=r%3,o=[],a=0,s=r-i;a<s;a+=16383)o.push(c(e,a,a+16383>s?s:a+16383));1===i?(t=e[r-1],o.push(n[t>>2]+n[t<<4&63]+"==")):2===i&&(t=(e[r-2]<<8)+e[r-1],o.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"="));return o.join("")};for(var n=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)n[s]=a[s],i[a.charCodeAt(s)]=s;function l(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,r){for(var i,o,a=[],s=t;s<r;s+=3)i=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(n[(o=i)>>18&63]+n[o>>12&63]+n[o>>6&63]+n[63&o]);return a.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,r,n,i){var o,a,s=8*i-n-1,u=(1<<s)-1,l=u>>1,c=-7,f=r?i-1:0,p=r?-1:1,d=e[t+f];for(f+=p,o=d&(1<<-c)-1,d>>=-c,c+=s;c>0;o=256*o+e[t+f],f+=p,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=n;c>0;a=256*a+e[t+f],f+=p,c-=8);if(0===o)o=1-l;else{if(o===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,n),o-=l}return(d?-1:1)*a*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var a,s,u,l=8*o-i-1,c=(1<<l)-1,f=c>>1,p=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,h=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=c):(a=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-a))<1&&(a--,u*=2),(t+=a+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(a++,u/=2),a+f>=c?(s=0,a=c):a+f>=1?(s=(t*u-1)*Math.pow(2,i),a+=f):(s=t*Math.pow(2,f-1)*Math.pow(2,i),a=0));i>=8;e[r+d]=255&s,d+=h,s/=256,i-=8);for(a=a<<i|s,l+=i;l>0;e[r+d]=255&a,d+=h,a/=256,l-=8);e[r+d-h]|=128*m}},function(e,t){var r={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==r.call(e)}},function(e,t,r){function n(e){this._cbs=e||{}}e.exports=n;var i=r(7).EVENTS;Object.keys(i).forEach((function(e){if(0===i[e])e="on"+e,n.prototype[e]=function(){this._cbs[e]&&this._cbs[e]()};else if(1===i[e])e="on"+e,n.prototype[e]=function(t){this._cbs[e]&&this._cbs[e](t)};else{if(2!==i[e])throw Error("wrong number of arguments");e="on"+e,n.prototype[e]=function(t,r){this._cbs[e]&&this._cbs[e](t,r)}}}))},function(e,t,r){function n(e){this._cbs=e||{},this.events=[]}e.exports=n;var i=r(7).EVENTS;Object.keys(i).forEach((function(e){if(0===i[e])e="on"+e,n.prototype[e]=function(){this.events.push([e]),this._cbs[e]&&this._cbs[e]()};else if(1===i[e])e="on"+e,n.prototype[e]=function(t){this.events.push([e,t]),this._cbs[e]&&this._cbs[e](t)};else{if(2!==i[e])throw Error("wrong number of arguments");e="on"+e,n.prototype[e]=function(t,r){this.events.push([e,t,r]),this._cbs[e]&&this._cbs[e](t,r)}}})),n.prototype.onreset=function(){this.events=[],this._cbs.onreset&&this._cbs.onreset()},n.prototype.restart=function(){this._cbs.onreset&&this._cbs.onreset();for(var e=0,t=this.events.length;e<t;e++)if(this._cbs[this.events[e][0]]){var r=this.events[e].length;1===r?this._cbs[this.events[e][0]]():2===r?this._cbs[this.events[e][0]](this.events[e][1]):this._cbs[this.events[e][0]](this.events[e][1],this.events[e][2])}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.data}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){var u=e.name;if(!(0,s.default)(u))return null;var l=(0,o.default)(e.attribs,t),c=null;-1===a.default.indexOf(u)&&(c=(0,i.default)(e.children,r));return n.default.createElement(u,l,c)};var n=u(r(0)),i=u(r(17)),o=u(r(42)),a=u(r(118)),s=u(r(43));function u(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return Object.keys(e).filter((function(e){return(0,o.default)(e)})).reduce((function(t,r){var o=r.toLowerCase(),a=i.default[o]||o;return t[a]=function(e,t){n.default.map((function(e){return e.toLowerCase()})).indexOf(e.toLowerCase())>=0&&(t=e);return t}(a,e[r]),t}),{})};var n=a(r(115)),i=a(r(116)),o=a(r(43));function a(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=["allowfullScreen","async","autoplay","capture","checked","controls","default","defer","disabled","formnovalidate","hidden","loop","multiple","muted","novalidate","open","playsinline","readonly","required","reversed","scoped","seamless","selected","itemscope"]},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={accept:"accept","accept-charset":"acceptCharset",accesskey:"accessKey",action:"action",allowfullscreen:"allowFullScreen",allowtransparency:"allowTransparency",alt:"alt",as:"as",async:"async",autocomplete:"autoComplete",autoplay:"autoPlay",capture:"capture",cellpadding:"cellPadding",cellspacing:"cellSpacing",charset:"charSet",challenge:"challenge",checked:"checked",cite:"cite",classid:"classID",class:"className",cols:"cols",colspan:"colSpan",content:"content",contenteditable:"contentEditable",contextmenu:"contextMenu",controls:"controls",controlsList:"controlsList",coords:"coords",crossorigin:"crossOrigin",data:"data",datetime:"dateTime",default:"default",defer:"defer",dir:"dir",disabled:"disabled",download:"download",draggable:"draggable",enctype:"encType",form:"form",formaction:"formAction",formenctype:"formEncType",formmethod:"formMethod",formnovalidate:"formNoValidate",formtarget:"formTarget",frameborder:"frameBorder",headers:"headers",height:"height",hidden:"hidden",high:"high",href:"href",hreflang:"hrefLang",for:"htmlFor","http-equiv":"httpEquiv",icon:"icon",id:"id",inputmode:"inputMode",integrity:"integrity",is:"is",keyparams:"keyParams",keytype:"keyType",kind:"kind",label:"label",lang:"lang",list:"list",loop:"loop",low:"low",manifest:"manifest",marginheight:"marginHeight",marginwidth:"marginWidth",max:"max",maxlength:"maxLength",media:"media",mediagroup:"mediaGroup",method:"method",min:"min",minlength:"minLength",multiple:"multiple",muted:"muted",name:"name",nonce:"nonce",novalidate:"noValidate",open:"open",optimum:"optimum",pattern:"pattern",placeholder:"placeholder",playsinline:"playsInline",poster:"poster",preload:"preload",profile:"profile",radiogroup:"radioGroup",readonly:"readOnly",referrerpolicy:"referrerPolicy",rel:"rel",required:"required",reversed:"reversed",role:"role",rows:"rows",rowspan:"rowSpan",sandbox:"sandbox",scope:"scope",scoped:"scoped",scrolling:"scrolling",seamless:"seamless",selected:"selected",shape:"shape",size:"size",sizes:"sizes",slot:"slot",span:"span",spellcheck:"spellCheck",src:"src",srcdoc:"srcDoc",srclang:"srcLang",srcset:"srcSet",start:"start",step:"step",style:"style",summary:"summary",tabindex:"tabIndex",target:"target",title:"title",type:"type",usemap:"useMap",value:"value",width:"width",wmode:"wmode",wrap:"wrap",about:"about",datatype:"datatype",inlist:"inlist",prefix:"prefix",property:"property",resource:"resource",typeof:"typeof",vocab:"vocab",autocapitalize:"autoCapitalize",autocorrect:"autoCorrect",autosave:"autoSave",color:"color",itemprop:"itemProp",itemscope:"itemScope",itemtype:"itemType",itemid:"itemID",itemref:"itemRef",results:"results",security:"security",unselectable:"unselectable"}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{!n&&s.return&&s.return()}finally{if(i)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(""===e)return{};return e.split(";").reduce((function(e,t){var r=t.split(/^([^:]+):/).filter((function(e,t){return t>0})).map((function(e){return e.trim().toLowerCase()})),i=n(r,2),o=i[0],a=i[1];return void 0===a||(e[o=o.replace(/^-ms-/,"ms-").replace(/-(.)/g,(function(e,t){return t.toUpperCase()}))]=a),e}),{})}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=["area","base","br","col","command","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var r=void 0;e.children.length>0&&(r=e.children[0].data);var o=(0,i.default)(e.attribs,t);return n.default.createElement("style",o,r)};var n=o(r(0)),i=o(r(42));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){return null}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.decodeEntities,o=void 0===r||r,a=t.transform,s=t.preprocessNodes,u=void 0===s?function(e){return e}:s,l=u(n.default.parseDOM(e,{decodeEntities:o}));return(0,i.default)(l,a)};var n=o(r(7)),i=o(r(17));function o(e){return e&&e.__esModule?e:{default:e}}},function(e,t,r){"use strict";r.r(t);var n=r(0),i=r.n(n),o=r(44),a=r.n(o);r(59),r(61);function s(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}var u=r(4),l=r.n(u);function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function f(e){return"/"===e.charAt(0)}function p(e,t){for(var r=t,n=r+1,i=e.length;n<i;r+=1,n+=1)e[r]=e[n];e.pop()}var d=function(e,t){void 0===t&&(t="");var r,n=e&&e.split("/")||[],i=t&&t.split("/")||[],o=e&&f(e),a=t&&f(t),s=o||a;if(e&&f(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";if(i.length){var u=i[i.length-1];r="."===u||".."===u||""===u}else r=!1;for(var l=0,c=i.length;c>=0;c--){var d=i[c];"."===d?p(i,c):".."===d?(p(i,c),l++):l&&(p(i,c),l--)}if(!s)for(;l--;l)i.unshift("..");!s||""===i[0]||i[0]&&f(i[0])||i.unshift("");var h=i.join("/");return r&&"/"!==h.substr(-1)&&(h+="/"),h};var h=function(e,t){if(!e)throw new Error("Invariant failed")};function m(e){return"/"===e.charAt(0)?e:"/"+e}function y(e){return"/"===e.charAt(0)?e.substr(1):e}function v(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function b(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function g(e){var t=e.pathname,r=e.search,n=e.hash,i=t||"/";return r&&"?"!==r&&(i+="?"===r.charAt(0)?r:"?"+r),n&&"#"!==n&&(i+="#"===n.charAt(0)?n:"#"+n),i}function w(e,t,r,n){var i;"string"==typeof e?(i=function(e){var t=e||"/",r="",n="",i=t.indexOf("#");-1!==i&&(n=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(r=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===r?"":r,hash:"#"===n?"":n}}(e)).state=t:(void 0===(i=c({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return r&&(i.key=r),n?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=d(i.pathname,n.pathname)):i.pathname=n.pathname:i.pathname||(i.pathname="/"),i}function _(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,r,n,i){if(null!=e){var o="function"==typeof e?e(t,r):e;"string"==typeof o?"function"==typeof n?n(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var r=!0;function n(){r&&e.apply(void 0,arguments)}return t.push(n),function(){r=!1,t=t.filter((function(e){return e!==n}))}},notifyListeners:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];t.forEach((function(e){return e.apply(void 0,r)}))}}}var E=!("undefined"==typeof window||!window.document||!window.document.createElement);function x(e,t){t(window.confirm(e))}function k(){try{return window.history.state||{}}catch(e){return{}}}function S(e){void 0===e&&(e={}),E||h(!1);var t,r=window.history,n=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,a=o.forceRefresh,s=void 0!==a&&a,u=o.getUserConfirmation,l=void 0===u?x:u,f=o.keyLength,p=void 0===f?6:f,d=e.basename?b(m(e.basename)):"";function y(e){var t=e||{},r=t.key,n=t.state,i=window.location,o=i.pathname+i.search+i.hash;return d&&(o=v(o,d)),w(o,n,r)}function S(){return Math.random().toString(36).substr(2,p)}var T=_();function O(e){c(F,e),F.length=r.length,T.notifyListeners(F.location,F.action)}function C(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||A(y(e.state))}function N(){A(y(k()))}var R=!1;function A(e){if(R)R=!1,O();else{T.confirmTransitionTo(e,"POP",l,(function(t){t?O({action:"POP",location:e}):function(e){var t=F.location,r=P.indexOf(t.key);-1===r&&(r=0);var n=P.indexOf(e.key);-1===n&&(n=0);var i=r-n;i&&(R=!0,j(i))}(e)}))}}var D=y(k()),P=[D.key];function I(e){return d+g(e)}function j(e){r.go(e)}var q=0;function L(e){1===(q+=e)&&1===e?(window.addEventListener("popstate",C),i&&window.addEventListener("hashchange",N)):0===q&&(window.removeEventListener("popstate",C),i&&window.removeEventListener("hashchange",N))}var M=!1;var F={length:r.length,action:"POP",location:D,createHref:I,push:function(e,t){var i=w(e,t,S(),F.location);T.confirmTransitionTo(i,"PUSH",l,(function(e){if(e){var t=I(i),o=i.key,a=i.state;if(n)if(r.pushState({key:o,state:a},null,t),s)window.location.href=t;else{var u=P.indexOf(F.location.key),l=P.slice(0,u+1);l.push(i.key),P=l,O({action:"PUSH",location:i})}else window.location.href=t}}))},replace:function(e,t){var i=w(e,t,S(),F.location);T.confirmTransitionTo(i,"REPLACE",l,(function(e){if(e){var t=I(i),o=i.key,a=i.state;if(n)if(r.replaceState({key:o,state:a},null,t),s)window.location.replace(t);else{var u=P.indexOf(F.location.key);-1!==u&&(P[u]=i.key),O({action:"REPLACE",location:i})}else window.location.replace(t)}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=T.setPrompt(e);return M||(L(1),M=!0),function(){return M&&(M=!1,L(-1)),t()}},listen:function(e){var t=T.appendListener(e);return L(1),function(){L(-1),t()}}};return F}var T={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+y(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:y,decodePath:m},slash:{encodePath:m,decodePath:m}};function O(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function C(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function N(e){window.location.replace(O(window.location.href)+"#"+e)}function R(e){void 0===e&&(e={}),E||h(!1);var t=window.history,r=(window.navigator.userAgent.indexOf("Firefox"),e),n=r.getUserConfirmation,i=void 0===n?x:n,o=r.hashType,a=void 0===o?"slash":o,s=e.basename?b(m(e.basename)):"",u=T[a],l=u.encodePath,f=u.decodePath;function p(){var e=f(C());return s&&(e=v(e,s)),w(e)}var d=_();function y(e){c(F,e),F.length=t.length,d.notifyListeners(F.location,F.action)}var k=!1,S=null;function R(){var e,t,r=C(),n=l(r);if(r!==n)N(n);else{var o=p(),a=F.location;if(!k&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(S===g(o))return;S=null,function(e){if(k)k=!1,y();else{d.confirmTransitionTo(e,"POP",i,(function(t){t?y({action:"POP",location:e}):function(e){var t=F.location,r=I.lastIndexOf(g(t));-1===r&&(r=0);var n=I.lastIndexOf(g(e));-1===n&&(n=0);var i=r-n;i&&(k=!0,j(i))}(e)}))}}(o)}}var A=C(),D=l(A);A!==D&&N(D);var P=p(),I=[g(P)];function j(e){t.go(e)}var q=0;function L(e){1===(q+=e)&&1===e?window.addEventListener("hashchange",R):0===q&&window.removeEventListener("hashchange",R)}var M=!1;var F={length:t.length,action:"POP",location:P,createHref:function(e){var t=document.querySelector("base"),r="";return t&&t.getAttribute("href")&&(r=O(window.location.href)),r+"#"+l(s+g(e))},push:function(e,t){var r=w(e,void 0,void 0,F.location);d.confirmTransitionTo(r,"PUSH",i,(function(e){if(e){var t=g(r),n=l(s+t);if(C()!==n){S=t,function(e){window.location.hash=e}(n);var i=I.lastIndexOf(g(F.location)),o=I.slice(0,i+1);o.push(t),I=o,y({action:"PUSH",location:r})}else y()}}))},replace:function(e,t){var r=w(e,void 0,void 0,F.location);d.confirmTransitionTo(r,"REPLACE",i,(function(e){if(e){var t=g(r),n=l(s+t);C()!==n&&(S=t,N(n));var i=I.indexOf(g(F.location));-1!==i&&(I[i]=t),y({action:"REPLACE",location:r})}}))},go:j,goBack:function(){j(-1)},goForward:function(){j(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return M||(L(1),M=!0),function(){return M&&(M=!1,L(-1)),t()}},listen:function(e){var t=d.appendListener(e);return L(1),function(){L(-1),t()}}};return F}function A(e,t,r){return Math.min(Math.max(e,t),r)}function D(e){void 0===e&&(e={});var t=e,r=t.getUserConfirmation,n=t.initialEntries,i=void 0===n?["/"]:n,o=t.initialIndex,a=void 0===o?0:o,s=t.keyLength,u=void 0===s?6:s,l=_();function f(e){c(v,e),v.length=v.entries.length,l.notifyListeners(v.location,v.action)}function p(){return Math.random().toString(36).substr(2,u)}var d=A(a,0,i.length-1),h=i.map((function(e){return w(e,void 0,"string"==typeof e?p():e.key||p())})),m=g;function y(e){var t=A(v.index+e,0,v.entries.length-1),n=v.entries[t];l.confirmTransitionTo(n,"POP",r,(function(e){e?f({action:"POP",location:n,index:t}):f()}))}var v={length:h.length,action:"POP",location:h[d],index:d,entries:h,createHref:m,push:function(e,t){var n=w(e,t,p(),v.location);l.confirmTransitionTo(n,"PUSH",r,(function(e){if(e){var t=v.index+1,r=v.entries.slice(0);r.length>t?r.splice(t,r.length-t,n):r.push(n),f({action:"PUSH",location:n,index:t,entries:r})}}))},replace:function(e,t){var n=w(e,t,p(),v.location);l.confirmTransitionTo(n,"REPLACE",r,(function(e){e&&(v.entries[v.index]=n,f({action:"REPLACE",location:n}))}))},go:y,goBack:function(){y(-1)},goForward:function(){y(1)},canGo:function(e){var t=v.index+e;return t>=0&&t<v.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return v}var P=r(18),I=r.n(P),j=r(46),q=r.n(j);function L(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(r,n){e=r,t.forEach((function(t){return t(e,n)}))}}}var M=i.a.createContext||function(e,t){var r,i,o="__create-react-context-"+q()()+"__",a=function(e){function r(){var t;return(t=e.apply(this,arguments)||this).emitter=L(t.props.value),t}I()(r,e);var n=r.prototype;return n.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},n.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var r,n=this.props.value,i=e.value;((o=n)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?r=0:(r="function"==typeof t?t(n,i):1073741823,0!==(r|=0)&&this.emitter.set(e.value,r))}var o,a},n.render=function(){return this.props.children},r}(n.Component);a.childContextTypes=((r={})[o]=l.a.object.isRequired,r);var s=function(t){function r(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,r){0!=((0|e.observedBits)&r)&&e.setState({value:e.getValue()})},e}I()(r,t);var n=r.prototype;return n.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},n.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},n.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},n.getValue=function(){return this.context[o]?this.context[o].get():e},n.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},r}(n.Component);return s.contextTypes=((i={})[o]=l.a.object,i),{Provider:a,Consumer:s}},F=r(19),B=r.n(F);r(21);function U(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}r(47);var Q=function(e){var t=M();return t.displayName=e,t}("Router"),V=function(e){function t(t){var r;return(r=e.call(this,t)||this).state={location:t.history.location},r._isMounted=!1,r._pendingLocation=null,t.staticContext||(r.unlisten=t.history.listen((function(e){r._isMounted?r.setState({location:e}):r._pendingLocation=e}))),r}s(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=t.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&this.unlisten()},r.render=function(){return i.a.createElement(Q.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(i.a.Component);i.a.Component;i.a.Component;var z={},K=0;function H(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var r=t,n=r.path,i=r.exact,o=void 0!==i&&i,a=r.strict,s=void 0!==a&&a,u=r.sensitive,l=void 0!==u&&u;return[].concat(n).reduce((function(t,r){if(!r&&""!==r)return null;if(t)return t;var n=function(e,t){var r=""+t.end+t.strict+t.sensitive,n=z[r]||(z[r]={});if(n[e])return n[e];var i=[],o={regexp:B()(e,i,t),keys:i};return K<1e4&&(n[e]=o,K++),o}(r,{end:o,strict:s,sensitive:l}),i=n.regexp,a=n.keys,u=i.exec(e);if(!u)return null;var c=u[0],f=u.slice(1),p=e===c;return o&&!p?null:{path:r,url:"/"===r&&""===c?"/":c,isExact:p,params:a.reduce((function(e,t,r){return e[t.name]=f[r],e}),{})}}),null)}var G=function(e){function t(){return e.apply(this,arguments)||this}return s(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(Q.Consumer,null,(function(t){t||h(!1);var r=e.props.location||t.location,n=c({},t,{location:r,match:e.props.computedMatch?e.props.computedMatch:e.props.path?H(r.pathname,e.props):t.match}),o=e.props,a=o.children,s=o.component,u=o.render;return Array.isArray(a)&&0===a.length&&(a=null),i.a.createElement(Q.Provider,{value:n},n.match?a?"function"==typeof a?a(n):a:s?i.a.createElement(s,n):u?u(n):null:"function"==typeof a?a(n):null)}))},t}(i.a.Component);function Y(e){return"/"===e.charAt(0)?e:"/"+e}function W(e,t){if(!e)return t;var r=Y(e);return 0!==t.pathname.indexOf(r)?t:c({},t,{pathname:t.pathname.substr(r.length)})}function $(e){return"string"==typeof e?e:g(e)}function J(e){return function(){h(!1)}}function X(){}i.a.Component;var Z=function(e){function t(){return e.apply(this,arguments)||this}return s(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(Q.Consumer,null,(function(t){t||h(!1);var r,n,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==n&&i.a.isValidElement(e)){r=e;var a=e.props.path||e.props.from;n=a?H(o.pathname,c({},e.props,{path:a})):t.match}})),n?i.a.cloneElement(r,{location:o,computedMatch:n}):null}))},t}(i.a.Component);i.a.useContext;var ee=function(e){function t(){for(var t,r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return(t=e.call.apply(e,[this].concat(n))||this).history=S(t.props),t}return s(t,e),t.prototype.render=function(){return i.a.createElement(V,{history:this.history,children:this.props.children})},t}(i.a.Component);i.a.Component;var te=function(e,t){return"function"==typeof e?e(t):e},re=function(e,t){return"string"==typeof e?w(e,null,null,t):e},ne=function(e){return e},ie=i.a.forwardRef;void 0===ie&&(ie=ne);var oe=ie((function(e,t){var r=e.innerRef,n=e.navigate,o=e.onClick,a=U(e,["innerRef","navigate","onClick"]),s=a.target,u=c({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),n())}});return u.ref=ne!==ie&&t||r,i.a.createElement("a",u)}));var ae=ie((function(e,t){var r=e.component,n=void 0===r?oe:r,o=e.replace,a=e.to,s=e.innerRef,u=U(e,["component","replace","to","innerRef"]);return i.a.createElement(Q.Consumer,null,(function(e){e||h(!1);var r=e.history,l=re(te(a,e.location),e.location),f=l?r.createHref(l):"",p=c({},u,{href:f,navigate:function(){var t=te(a,e.location);(o?r.replace:r.push)(t)}});return ne!==ie?p.ref=t||s:p.innerRef=s,i.a.createElement(n,p)}))})),se=function(e){return e},ue=i.a.forwardRef;void 0===ue&&(ue=se);ue((function(e,t){var r=e["aria-current"],n=void 0===r?"page":r,o=e.activeClassName,a=void 0===o?"active":o,s=e.activeStyle,u=e.className,l=e.exact,f=e.isActive,p=e.location,d=e.strict,m=e.style,y=e.to,v=e.innerRef,b=U(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return i.a.createElement(Q.Consumer,null,(function(e){e||h(!1);var r=p||e.location,o=re(te(y,r),r),g=o.pathname,w=g&&g.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),_=w?H(r.pathname,{path:w,exact:l,strict:d}):null,E=!!(f?f(_,r):_),x=E?function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.filter((function(e){return e})).join(" ")}(u,a):u,k=E?c({},m,{},s):m,S=c({"aria-current":E&&n||null,className:x,style:k,to:o},b);return se!==ue?S.ref=t||v:S.innerRef=v,i.a.createElement(ae,S)}))}));var le=r(1),ce=r(2);function fe(e){return{kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:{kind:"Name",value:"GeneratedClientQuery"},selectionSet:pe(e)}]}}function pe(e){if("number"==typeof e||"boolean"==typeof e||"string"==typeof e||null==e)return null;if(Array.isArray(e))return pe(e[0]);var t=[];return Object.keys(e).forEach((function(r){var n={kind:"Field",name:{kind:"Name",value:r},selectionSet:pe(e[r])||void 0};t.push(n)})),{kind:"SelectionSet",selections:t}}var de,he={kind:"Document",definitions:[{kind:"OperationDefinition",operation:"query",name:null,variableDefinitions:null,directives:[],selectionSet:{kind:"SelectionSet",selections:[{kind:"Field",alias:null,name:{kind:"Name",value:"__typename"},arguments:[],directives:[],selectionSet:null}]}}]},me=function(){function e(){}return e.prototype.transformDocument=function(e){return e},e.prototype.transformForLink=function(e){return e},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.read({query:e.query,variables:e.variables,optimistic:t})},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.read({query:Object(ce.k)(e.fragment,e.fragmentName),variables:e.variables,rootId:e.id,optimistic:t})},e.prototype.writeQuery=function(e){this.write({dataId:"ROOT_QUERY",result:e.data,query:e.query,variables:e.variables})},e.prototype.writeFragment=function(e){this.write({dataId:e.id,result:e.data,variables:e.variables,query:Object(ce.k)(e.fragment,e.fragmentName)})},e.prototype.writeData=function(e){var t,r,n=e.id,i=e.data;if(void 0!==n){var o=null;try{o=this.read({rootId:n,optimistic:!1,query:he})}catch(e){}var a=o&&o.__typename||"__ClientData",s=Object.assign({__typename:a},i);this.writeFragment({id:n,fragment:(t=s,r=a,{kind:"Document",definitions:[{kind:"FragmentDefinition",typeCondition:{kind:"NamedType",name:{kind:"Name",value:r||"__FakeType"}},name:{kind:"Name",value:"GeneratedClientQuery"},selectionSet:pe(t)}]}),data:s})}else this.writeQuery({query:fe(i),data:i})},e}();de||(de={});var ye=r(6),ve=null,be={},ge=1,we=Array,_e=we["@wry/context:Slot"]||function(){var e=function(){function e(){this.id=["slot",ge++,Date.now(),Math.random().toString(36).slice(2)].join(":")}return e.prototype.hasValue=function(){for(var e=ve;e;e=e.parent)if(this.id in e.slots){var t=e.slots[this.id];if(t===be)break;return e!==ve&&(ve.slots[this.id]=t),!0}return ve&&(ve.slots[this.id]=be),!1},e.prototype.getValue=function(){if(this.hasValue())return ve.slots[this.id]},e.prototype.withValue=function(e,t,r,n){var i,o=((i={__proto__:null})[this.id]=e,i),a=ve;ve={parent:a,slots:o};try{return t.apply(n,r)}finally{ve=a}},e.bind=function(e){var t=ve;return function(){var r=ve;try{return ve=t,e.apply(this,arguments)}finally{ve=r}}},e.noContext=function(e,t,r){if(!ve)return e.apply(r,t);var n=ve;try{return ve=null,e.apply(r,t)}finally{ve=n}},e}();try{Object.defineProperty(we,"@wry/context:Slot",{value:we["@wry/context:Slot"]=e,enumerable:!1,writable:!1,configurable:!1})}finally{return e}}();_e.bind,_e.noContext;function Ee(e){return(Ee="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xe(){}var ke=function(){function e(e,t){void 0===e&&(e=1/0),void 0===t&&(t=xe),this.max=e,this.dispose=t,this.map=new Map,this.newest=null,this.oldest=null}return e.prototype.has=function(e){return this.map.has(e)},e.prototype.get=function(e){var t=this.getEntry(e);return t&&t.value},e.prototype.getEntry=function(e){var t=this.map.get(e);if(t&&t!==this.newest){var r=t.older,n=t.newer;n&&(n.older=r),r&&(r.newer=n),t.older=this.newest,t.older.newer=t,t.newer=null,this.newest=t,t===this.oldest&&(this.oldest=n)}return t},e.prototype.set=function(e,t){var r=this.getEntry(e);return r?r.value=t:(r={key:e,value:t,newer:null,older:this.newest},this.newest&&(this.newest.newer=r),this.newest=r,this.oldest=this.oldest||r,this.map.set(e,r),r.value)},e.prototype.clean=function(){for(;this.oldest&&this.map.size>this.max;)this.delete(this.oldest.key)},e.prototype.delete=function(e){var t=this.map.get(e);return!!t&&(t===this.newest&&(this.newest=t.older),t===this.oldest&&(this.oldest=t.newer),t.newer&&(t.newer.older=t.older),t.older&&(t.older.newer=t.newer),this.map.delete(e),this.dispose(t.value,e),!0)},e}(),Se=new _e,Te=[],Oe=[];function Ce(e,t){if(!e)throw new Error(t||"assertion failure")}function Ne(e){switch(e.length){case 0:throw new Error("unknown value");case 1:return e[0];case 2:throw e[1]}}var Re=function(){function e(t,r){this.fn=t,this.args=r,this.parents=new Set,this.childValues=new Map,this.dirtyChildren=null,this.dirty=!0,this.recomputing=!1,this.value=[],++e.count}return e.prototype.recompute=function(){if(Ce(!this.recomputing,"already recomputing"),function(e){var t=Se.getValue();if(t)return e.parents.add(t),t.childValues.has(e)||t.childValues.set(e,[]),De(e)?je(t,e):qe(t,e),t}(this)||!Me(this))return De(this)?function(e){var t=Fe(e);Se.withValue(e,Ae,[e]),function(e){if("function"==typeof e.subscribe)try{Ue(e),e.unsubscribe=e.subscribe.apply(null,e.args)}catch(t){return e.setDirty(),!1}return!0}(e)&&function(e){if(e.dirty=!1,De(e))return;Ie(e)}(e);return t.forEach(Me),Ne(e.value)}(this):Ne(this.value)},e.prototype.setDirty=function(){this.dirty||(this.dirty=!0,this.value.length=0,Pe(this),Ue(this))},e.prototype.dispose=function(){var e=this;Fe(this).forEach(Me),Ue(this),this.parents.forEach((function(t){t.setDirty(),Be(t,e)}))},e.count=0,e}();function Ae(e){e.recomputing=!0,e.value.length=0;try{e.value[0]=e.fn.apply(null,e.args)}catch(t){e.value[1]=t}e.recomputing=!1}function De(e){return e.dirty||!(!e.dirtyChildren||!e.dirtyChildren.size)}function Pe(e){e.parents.forEach((function(t){return je(t,e)}))}function Ie(e){e.parents.forEach((function(t){return qe(t,e)}))}function je(e,t){if(Ce(e.childValues.has(t)),Ce(De(t)),e.dirtyChildren){if(e.dirtyChildren.has(t))return}else e.dirtyChildren=Oe.pop()||new Set;e.dirtyChildren.add(t),Pe(e)}function qe(e,t){Ce(e.childValues.has(t)),Ce(!De(t));var r,n,i,o=e.childValues.get(t);0===o.length?e.childValues.set(t,t.value.slice(0)):(r=o,n=t.value,(i=r.length)>0&&i===n.length&&r[i-1]===n[i-1]||e.setDirty()),Le(e,t),De(e)||Ie(e)}function Le(e,t){var r=e.dirtyChildren;r&&(r.delete(t),0===r.size&&(Oe.length<100&&Oe.push(r),e.dirtyChildren=null))}function Me(e){return 0===e.parents.size&&"function"==typeof e.reportOrphan&&!0===e.reportOrphan()}function Fe(e){var t=Te;return e.childValues.size>0&&(t=[],e.childValues.forEach((function(r,n){Be(e,n),t.push(n)}))),Ce(null===e.dirtyChildren),t}function Be(e,t){t.parents.delete(e),e.childValues.delete(t),Le(e,t)}function Ue(e){var t=e.unsubscribe;"function"==typeof t&&(e.unsubscribe=void 0,t())}var Qe=function(){function e(e){this.weakness=e}return e.prototype.lookup=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.lookupArray(e)},e.prototype.lookupArray=function(e){var t=this;return e.forEach((function(e){return t=t.getChildTrie(e)})),t.data||(t.data=Object.create(null))},e.prototype.getChildTrie=function(t){var r=this.weakness&&function(e){switch(Ee(e)){case"object":if(null===e)break;case"function":return!0}return!1}(t)?this.weak||(this.weak=new WeakMap):this.strong||(this.strong=new Map),n=r.get(t);return n||r.set(t,n=new e(this.weakness)),n},e}();var Ve=new Qe("function"==typeof WeakMap);function ze(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return Ve.lookupArray(e)}var Ke=new Set;function He(e,t){void 0===t&&(t=Object.create(null));var r=new ke(t.max||Math.pow(2,16),(function(e){return e.dispose()})),n=!!t.disposable,i=t.makeCacheKey||ze;function o(){if(!n||Se.hasValue()){var o=i.apply(null,arguments);if(void 0===o)return e.apply(null,arguments);var a=Array.prototype.slice.call(arguments),s=r.get(o);s?s.args=a:(s=new Re(e,a),r.set(o,s),s.subscribe=t.subscribe,n&&(s.reportOrphan=function(){return r.delete(o)}));var u=s.recompute();return r.set(o,s),Ke.add(r),Se.hasValue()||(Ke.forEach((function(e){return e.clean()})),Ke.clear()),n?void 0:u}}return o.dirty=function(){var e=i.apply(null,arguments),t=void 0!==e&&r.get(e);t&&t.setDirty()},o}var Ge=r(3);function Ye(e){return(Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var We=!1;function $e(){var e=!We;return Object(ce.y)()||(We=!0),e}var Je=function(){function e(){}return e.prototype.ensureReady=function(){return Promise.resolve()},e.prototype.canBypassInit=function(){return!0},e.prototype.match=function(e,t,r){var n=r.store.get(e.id),i="ROOT_QUERY"===e.id;if(!n)return i;var o=n.__typename,a=void 0===o?i&&"Query":o;return a&&a===t||($e(),"heuristic")},e}(),Xe=(function(){function e(e){e&&e.introspectionQueryResultData?(this.possibleTypesMap=this.parseIntrospectionResult(e.introspectionQueryResultData),this.isReady=!0):this.isReady=!1,this.match=this.match.bind(this)}e.prototype.match=function(e,t,r){Object(Ge.b)(this.isReady,2);var n=r.store.get(e.id),i="ROOT_QUERY"===e.id;if(!n)return i;var o=n.__typename,a=void 0===o?i&&"Query":o;if(Object(Ge.b)(a,3),a===t)return!0;var s=this.possibleTypesMap[t];return!!(a&&s&&s.indexOf(a)>-1)},e.prototype.parseIntrospectionResult=function(e){var t={};return e.__schema.types.forEach((function(e){"UNION"!==e.kind&&"INTERFACE"!==e.kind||(t[e.name]=e.possibleTypes.map((function(e){return e.name})))})),t}}(),Object.prototype.hasOwnProperty),Ze=function(){function e(e){var t=this;void 0===e&&(e=Object.create(null)),this.data=e,this.depend=He((function(e){return t.data[e]}),{disposable:!0,makeCacheKey:function(e){return e}})}return e.prototype.toObject=function(){return this.data},e.prototype.get=function(e){return this.depend(e),this.data[e]},e.prototype.set=function(e,t){t!==this.data[e]&&(this.data[e]=t,this.depend.dirty(e))},e.prototype.delete=function(e){Xe.call(this.data,e)&&(delete this.data[e],this.depend.dirty(e))},e.prototype.clear=function(){this.replace(null)},e.prototype.replace=function(e){var t=this;e?(Object.keys(e).forEach((function(r){t.set(r,e[r])})),Object.keys(this.data).forEach((function(r){Xe.call(e,r)||t.delete(r)}))):Object.keys(this.data).forEach((function(e){t.delete(e)}))},e}();function et(e){return new Ze(e)}var tt=function(){function e(e){var t=this,r=void 0===e?{}:e,n=r.cacheKeyRoot,i=void 0===n?new Qe(ce.e):n,o=r.freezeResults,a=void 0!==o&&o,s=this.executeStoreQuery,u=this.executeSelectionSet,l=this.executeSubSelectedArray;this.freezeResults=a,this.executeStoreQuery=He((function(e){return s.call(t,e)}),{makeCacheKey:function(e){var t=e.query,r=e.rootValue,n=e.contextValue,o=e.variableValues,a=e.fragmentMatcher;if(n.store instanceof Ze)return i.lookup(n.store,t,a,JSON.stringify(o),r.id)}}),this.executeSelectionSet=He((function(e){return u.call(t,e)}),{makeCacheKey:function(e){var t=e.selectionSet,r=e.rootValue,n=e.execContext;if(n.contextValue.store instanceof Ze)return i.lookup(n.contextValue.store,t,n.fragmentMatcher,JSON.stringify(n.variableValues),r.id)}}),this.executeSubSelectedArray=He((function(e){return l.call(t,e)}),{makeCacheKey:function(e){var t=e.field,r=e.array,n=e.execContext;if(n.contextValue.store instanceof Ze)return i.lookup(n.contextValue.store,t,r,JSON.stringify(n.variableValues))}})}return e.prototype.readQueryFromStore=function(e){return this.diffQueryAgainstStore(Object(le.a)(Object(le.a)({},e),{returnPartialData:!1})).result},e.prototype.diffQueryAgainstStore=function(e){var t=e.store,r=e.query,n=e.variables,i=e.previousResult,o=e.returnPartialData,a=void 0===o||o,s=e.rootId,u=void 0===s?"ROOT_QUERY":s,l=e.fragmentMatcherFunction,c=e.config,f=Object(ce.o)(r);n=Object(ce.c)({},Object(ce.h)(f),n);var p={store:t,dataIdFromObject:c&&c.dataIdFromObject,cacheRedirects:c&&c.cacheRedirects||{}},d=this.executeStoreQuery({query:r,rootValue:{type:"id",id:u,generated:!0,typename:"Query"},contextValue:p,variableValues:n,fragmentMatcher:l}),h=d.missing&&d.missing.length>0;return h&&!a&&d.missing.forEach((function(e){if(!e.tolerable)throw new Ge.a(8)})),i&&Object(ye.a)(i,d.result)&&(d.result=i),{result:d.result,complete:!h}},e.prototype.executeStoreQuery=function(e){var t=e.query,r=e.rootValue,n=e.contextValue,i=e.variableValues,o=e.fragmentMatcher,a=void 0===o?nt:o,s=Object(ce.l)(t),u=Object(ce.j)(t),l={query:t,fragmentMap:Object(ce.g)(u),contextValue:n,variableValues:i,fragmentMatcher:a};return this.executeSelectionSet({selectionSet:s.selectionSet,rootValue:r,execContext:l})},e.prototype.executeSelectionSet=function(e){var t=this,r=e.selectionSet,n=e.rootValue,i=e.execContext,o=i.fragmentMap,a=i.contextValue,s=i.variableValues,u={result:null},l=[],c=a.store.get(n.id),f=c&&c.__typename||"ROOT_QUERY"===n.id&&"Query"||void 0;function p(e){var t;return e.missing&&(u.missing=u.missing||[],(t=u.missing).push.apply(t,e.missing)),e.result}return r.selections.forEach((function(e){var r;if(Object(ce.F)(e,s))if(Object(ce.t)(e)){var u=p(t.executeField(c,f,e,i));void 0!==u&&l.push(((r={})[Object(ce.E)(e)]=u,r))}else{var d=void 0;if(Object(ce.v)(e))d=e;else if(!(d=o[e.name.value]))throw new Ge.a(9);var h=d.typeCondition&&d.typeCondition.name.value,m=!h||i.fragmentMatcher(n,h,a);if(m){var y=t.executeSelectionSet({selectionSet:d.selectionSet,rootValue:n,execContext:i});"heuristic"===m&&y.missing&&(y=Object(le.a)(Object(le.a)({},y),{missing:y.missing.map((function(e){return Object(le.a)(Object(le.a)({},e),{tolerable:!0})}))})),l.push(p(y))}}})),u.result=Object(ce.B)(l),this.freezeResults,u},e.prototype.executeField=function(e,t,r,n){var i=n.variableValues,o=n.contextValue,a=function(e,t,r,n,i,o){o.resultKey;var a=o.directives,s=r;(n||a)&&(s=Object(ce.p)(s,n,a));var u=void 0;if(e&&void 0===(u=e[s])&&i.cacheRedirects&&"string"==typeof t){var l=i.cacheRedirects[t];if(l){var c=l[r];c&&(u=c(e,n,{getCacheKey:function(e){var t=i.dataIdFromObject(e);return t&&Object(ce.H)({id:t,typename:e.__typename})}}))}}if(void 0===u)return{result:u,missing:[{object:e,fieldName:s,tolerable:!1}]};Object(ce.w)(u)&&(u=u.json);return{result:u}}(e,t,r.name.value,Object(ce.b)(r,i),o,{resultKey:Object(ce.E)(r),directives:Object(ce.i)(r,i)});return Array.isArray(a.result)?this.combineExecResults(a,this.executeSubSelectedArray({field:r,array:a.result,execContext:n})):r.selectionSet?null==a.result?a:this.combineExecResults(a,this.executeSelectionSet({selectionSet:r.selectionSet,rootValue:a.result,execContext:n})):(rt(r,a.result),this.freezeResults,a)},e.prototype.combineExecResults=function(){for(var e,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return t.forEach((function(t){t.missing&&(e=e||[]).push.apply(e,t.missing)})),{result:t.pop().result,missing:e}},e.prototype.executeSubSelectedArray=function(e){var t,r=this,n=e.field,i=e.array,o=e.execContext;function a(e){return e.missing&&(t=t||[]).push.apply(t,e.missing),e.result}return i=i.map((function(e){return null===e?null:Array.isArray(e)?a(r.executeSubSelectedArray({field:n,array:e,execContext:o})):n.selectionSet?a(r.executeSelectionSet({selectionSet:n.selectionSet,rootValue:e,execContext:o})):(rt(n,e),e)})),this.freezeResults,{result:i,missing:t}},e}();function rt(e,t){if(!e.selectionSet&&Object(ce.u)(t))throw new Ge.a(10)}function nt(){return!0}var it=function(){function e(e){void 0===e&&(e=Object.create(null)),this.data=e}return e.prototype.toObject=function(){return this.data},e.prototype.get=function(e){return this.data[e]},e.prototype.set=function(e,t){this.data[e]=t},e.prototype.delete=function(e){this.data[e]=void 0},e.prototype.clear=function(){this.data=Object.create(null)},e.prototype.replace=function(e){this.data=e||Object.create(null)},e}();var ot=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.type="WriteError",t}return Object(le.c)(t,e),t}(Error);var at=function(){function e(){}return e.prototype.writeQueryToStore=function(e){var t=e.query,r=e.result,n=e.store,i=void 0===n?et():n,o=e.variables,a=e.dataIdFromObject,s=e.fragmentMatcherFunction;return this.writeResultToStore({dataId:"ROOT_QUERY",result:r,document:t,store:i,variables:o,dataIdFromObject:a,fragmentMatcherFunction:s})},e.prototype.writeResultToStore=function(e){var t=e.dataId,r=e.result,n=e.document,i=e.store,o=void 0===i?et():i,a=e.variables,s=e.dataIdFromObject,u=e.fragmentMatcherFunction,l=Object(ce.m)(n);try{return this.writeSelectionSetToStore({result:r,dataId:t,selectionSet:l.selectionSet,context:{store:o,processedData:{},variables:Object(ce.c)({},Object(ce.h)(l),a),dataIdFromObject:s,fragmentMap:Object(ce.g)(Object(ce.j)(n)),fragmentMatcherFunction:u}})}catch(e){throw function(e,t){var r=new ot("Error writing result to store for query:\n "+JSON.stringify(t));return r.message+="\n"+e.message,r.stack=e.stack,r}(e,n)}},e.prototype.writeSelectionSetToStore=function(e){var t=this,r=e.result,n=e.dataId,i=e.selectionSet,o=e.context,a=o.variables,s=o.store,u=o.fragmentMap;return i.selections.forEach((function(e){var i;if(Object(ce.F)(e,a))if(Object(ce.t)(e)){var s=Object(ce.E)(e),l=r[s];if(void 0!==l)t.writeFieldToStore({dataId:n,value:l,field:e,context:o});else{var c=!1,f=!1;e.directives&&e.directives.length&&(c=e.directives.some((function(e){return e.name&&"defer"===e.name.value})),f=e.directives.some((function(e){return e.name&&"client"===e.name.value}))),!c&&!f&&o.fragmentMatcherFunction}}else{var p=void 0;Object(ce.v)(e)?p=e:(p=(u||{})[e.name.value],Object(Ge.b)(p,4));var d=!0;if(o.fragmentMatcherFunction&&p.typeCondition){var h=n||"self",m=Object(ce.H)({id:h,typename:void 0}),y={store:new it((i={},i[h]=r,i)),cacheRedirects:{}},v=o.fragmentMatcherFunction(m,p.typeCondition.name.value,y);Object(ce.x)(),d=!!v}d&&t.writeSelectionSetToStore({result:r,selectionSet:p.selectionSet,dataId:n,context:o})}})),s},e.prototype.writeFieldToStore=function(e){var t,r,n,i=e.field,o=e.value,a=e.dataId,s=e.context,u=s.variables,l=s.dataIdFromObject,c=s.store,f=Object(ce.G)(i,u);if(i.selectionSet&&null!==o)if(Array.isArray(o)){var p=a+"."+f;r=this.processArrayValue(o,p,i.selectionSet,s)}else{var d=a+"."+f,h=!0;if(st(d)||(d="$"+d),l){var m=l(o);Object(Ge.b)(!m||!st(m),5),(m||"number"==typeof m&&0===m)&&(d=m,h=!1)}ut(d,i,s.processedData)||this.writeSelectionSetToStore({dataId:d,result:o,selectionSet:i.selectionSet,context:s});var y=o.__typename;r=Object(ce.H)({id:d,typename:y},h);var v=(n=c.get(a))&&n[f];if(v!==r&&Object(ce.u)(v)){var b=void 0!==v.typename,g=void 0!==y,w=b&&g&&v.typename!==y;Object(Ge.b)(!h||v.generated||w,6),Object(Ge.b)(!b||g,7),v.generated&&(w?h||c.delete(v.id):function e(t,r,n){if(t===r)return!1;var i=n.get(t),o=n.get(r),a=!1;Object.keys(i).forEach((function(t){var r=i[t],s=o[t];Object(ce.u)(r)&&st(r.id)&&Object(ce.u)(s)&&!Object(ye.a)(r,s)&&e(r.id,s.id,n)&&(a=!0)})),n.delete(t);var s=Object(le.a)(Object(le.a)({},i),o);if(Object(ye.a)(s,o))return a;return n.set(r,s),!0}(v.id,r.id,c))}}else r=null!=o&&"object"===Ye(o)?{type:"json",json:o}:o;(n=c.get(a))&&Object(ye.a)(r,n[f])||c.set(a,Object(le.a)(Object(le.a)({},n),((t={})[f]=r,t)))},e.prototype.processArrayValue=function(e,t,r,n){var i=this;return e.map((function(e,o){if(null===e)return null;var a=t+"."+o;if(Array.isArray(e))return i.processArrayValue(e,a,r,n);var s=!0;if(n.dataIdFromObject){var u=n.dataIdFromObject(e);u&&(a=u,s=!1)}return ut(a,r,n.processedData)||i.writeSelectionSetToStore({dataId:a,result:e,selectionSet:r,context:n}),Object(ce.H)({id:a,typename:e.__typename},s)}))},e}();function st(e){return"$"===e[0]}function ut(e,t,r){if(!r)return!1;if(r[e]){if(r[e].indexOf(t)>=0)return!0;r[e].push(t)}else r[e]=[t];return!1}var lt={fragmentMatcher:new Je,dataIdFromObject:function(e){if(e.__typename){if(void 0!==e.id)return e.__typename+":"+e.id;if(void 0!==e._id)return e.__typename+":"+e._id}return null},addTypename:!0,resultCaching:!0,freezeResults:!1};var ct=Object.prototype.hasOwnProperty,ft=function(e){function t(t,r,n){var i=e.call(this,Object.create(null))||this;return i.optimisticId=t,i.parent=r,i.transaction=n,i}return Object(le.c)(t,e),t.prototype.toObject=function(){return Object(le.a)(Object(le.a)({},this.parent.toObject()),this.data)},t.prototype.get=function(e){return ct.call(this.data,e)?this.data[e]:this.parent.get(e)},t}(it),pt=function(e){function t(t){void 0===t&&(t={});var r=e.call(this)||this;r.watches=new Set,r.typenameDocumentCache=new Map,r.cacheKeyRoot=new Qe(ce.e),r.silenceBroadcast=!1,r.config=Object(le.a)(Object(le.a)({},lt),t),r.config.customResolvers&&(r.config.cacheRedirects=r.config.customResolvers),r.config.cacheResolvers&&(r.config.cacheRedirects=r.config.cacheResolvers),r.addTypename=!!r.config.addTypename,r.data=r.config.resultCaching?new Ze:new it,r.optimisticData=r.data,r.storeWriter=new at,r.storeReader=new tt({cacheKeyRoot:r.cacheKeyRoot,freezeResults:t.freezeResults});var n=r,i=n.maybeBroadcastWatch;return r.maybeBroadcastWatch=He((function(e){return i.call(r,e)}),{makeCacheKey:function(e){if(!e.optimistic&&!e.previousResult)return n.data instanceof Ze?n.cacheKeyRoot.lookup(e.query,JSON.stringify(e.variables)):void 0}}),r}return Object(le.c)(t,e),t.prototype.restore=function(e){return e&&this.data.replace(e),this},t.prototype.extract=function(e){return void 0===e&&(e=!1),(e?this.optimisticData:this.data).toObject()},t.prototype.read=function(e){if("string"==typeof e.rootId&&void 0===this.data.get(e.rootId))return null;var t=this.config.fragmentMatcher,r=t&&t.match;return this.storeReader.readQueryFromStore({store:e.optimistic?this.optimisticData:this.data,query:this.transformDocument(e.query),variables:e.variables,rootId:e.rootId,fragmentMatcherFunction:r,previousResult:e.previousResult,config:this.config})||null},t.prototype.write=function(e){var t=this.config.fragmentMatcher,r=t&&t.match;this.storeWriter.writeResultToStore({dataId:e.dataId,result:e.result,variables:e.variables,document:this.transformDocument(e.query),store:this.data,dataIdFromObject:this.config.dataIdFromObject,fragmentMatcherFunction:r}),this.broadcastWatches()},t.prototype.diff=function(e){var t=this.config.fragmentMatcher,r=t&&t.match;return this.storeReader.diffQueryAgainstStore({store:e.optimistic?this.optimisticData:this.data,query:this.transformDocument(e.query),variables:e.variables,returnPartialData:e.returnPartialData,previousResult:e.previousResult,fragmentMatcherFunction:r,config:this.config})},t.prototype.watch=function(e){var t=this;return this.watches.add(e),function(){t.watches.delete(e)}},t.prototype.evict=function(e){throw new Ge.a(1)},t.prototype.reset=function(){return this.data.clear(),this.broadcastWatches(),Promise.resolve()},t.prototype.removeOptimistic=function(e){for(var t=[],r=0,n=this.optimisticData;n instanceof ft;)n.optimisticId===e?++r:t.push(n),n=n.parent;if(r>0){for(this.optimisticData=n;t.length>0;){var i=t.pop();this.performTransaction(i.transaction,i.optimisticId)}this.broadcastWatches()}},t.prototype.performTransaction=function(e,t){var r=this.data,n=this.silenceBroadcast;this.silenceBroadcast=!0,"string"==typeof t&&(this.data=this.optimisticData=new ft(t,this.optimisticData,e));try{e(this)}finally{this.silenceBroadcast=n,this.data=r}this.broadcastWatches()},t.prototype.recordOptimisticTransaction=function(e,t){return this.performTransaction(e,t)},t.prototype.transformDocument=function(e){if(this.addTypename){var t=this.typenameDocumentCache.get(e);return t||(t=Object(ce.a)(e),this.typenameDocumentCache.set(e,t),this.typenameDocumentCache.set(t,t)),t}return e},t.prototype.broadcastWatches=function(){var e=this;this.silenceBroadcast||this.watches.forEach((function(t){return e.maybeBroadcastWatch(t)}))},t.prototype.maybeBroadcastWatch=function(e){e.callback(this.diff({query:e.query,variables:e.variables,previousResult:e.previousResult&&e.previousResult(),optimistic:e.optimistic}))},t}(me),dt=r(50),ht=r.n(dt).a;!function(e){function t(t,r){var n=e.call(this,t)||this;return n.link=r,n}Object(le.c)(t,e)}(Error);function mt(e){return e.request.length<=1}function yt(e){return new ht((function(t){t.error(e)}))}function vt(e,t){var r=Object(le.a)({},e);return Object.defineProperty(t,"setContext",{enumerable:!1,value:function(e){r="function"==typeof e?Object(le.a)({},r,e(r)):Object(le.a)({},r,e)}}),Object.defineProperty(t,"getContext",{enumerable:!1,value:function(){return Object(le.a)({},r)}}),Object.defineProperty(t,"toKey",{enumerable:!1,value:function(){return function(e){var t=e.query,r=e.variables,n=e.operationName;return JSON.stringify([n,t,r])}(t)}}),t}function bt(e,t){return t?t(e):ht.of()}function gt(e){return"function"==typeof e?new xt(e):e}function wt(){return new xt((function(){return ht.of()}))}function _t(e){return 0===e.length?wt():e.map(gt).reduce((function(e,t){return e.concat(t)}))}function Et(e,t,r){var n=gt(t),i=gt(r||new xt(bt));return mt(n)&&mt(i)?new xt((function(t){return e(t)?n.request(t)||ht.of():i.request(t)||ht.of()})):new xt((function(t,r){return e(t)?n.request(t,r)||ht.of():i.request(t,r)||ht.of()}))}var xt=function(){function e(e){e&&(this.request=e)}return e.prototype.split=function(t,r,n){return this.concat(Et(t,r,n||new e(bt)))},e.prototype.concat=function(e){return function(e,t){var r=gt(e);if(mt(r))return r;var n=gt(t);return mt(n)?new xt((function(e){return r.request(e,(function(e){return n.request(e)||ht.of()}))||ht.of()})):new xt((function(e,t){return r.request(e,(function(e){return n.request(e,t)||ht.of()}))||ht.of()}))}(this,e)},e.prototype.request=function(e,t){throw new Ge.a(1)},e.empty=wt,e.from=_t,e.split=Et,e.execute=kt,e}();function kt(e,t){return e.request(vt(t.context,function(e){var t={variables:e.variables||{},extensions:e.extensions||{},operationName:e.operationName,query:e.query};return t.operationName||(t.operationName="string"!=typeof t.query?Object(ce.n)(t.query):""),t}(function(e){for(var t=["query","operationName","variables","extensions","context"],r=0,n=Object.keys(e);r<n.length;r++){var i=n[r];if(t.indexOf(i)<0)throw new Ge.a(2)}return e}(t))))||ht.of()}var St=r(53),Tt={http:{includeQuery:!0,includeExtensions:!1},headers:{accept:"*/*","content-type":"application/json"},options:{method:"POST"}},Ot=function(e,t,r){var n=new Error(r);throw n.name="ServerError",n.response=e,n.statusCode=e.status,n.result=t,n},Ct=function(e,t){var r;try{r=JSON.stringify(e)}catch(e){var n=new Ge.a(2);throw n.parseError=e,n}return r},Nt=function(e){void 0===e&&(e={});var t=e.uri,r=void 0===t?"/graphql":t,n=e.fetch,i=e.includeExtensions,o=e.useGETForQueries,a=Object(le.e)(e,["uri","fetch","includeExtensions","useGETForQueries"]);!function(e){if(!e&&"undefined"==typeof fetch){throw"undefined"==typeof window&&"node-fetch",new Ge.a(1)}}(n),n||(n=fetch);var s={http:{includeExtensions:i},options:a.fetchOptions,credentials:a.credentials,headers:a.headers};return new xt((function(e){var t=function(e,t){var r=e.getContext().uri;return r||("function"==typeof t?t(e):t||"/graphql")}(e,r),i=e.getContext(),a={};if(i.clientAwareness){var u=i.clientAwareness,l=u.name,c=u.version;l&&(a["apollographql-client-name"]=l),c&&(a["apollographql-client-version"]=c)}var f,p=Object(le.a)({},a,i.headers),d={http:i.http,options:i.fetchOptions,credentials:i.credentials,headers:p},h=function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var i=Object(le.a)({},t.options,{headers:t.headers,credentials:t.credentials}),o=t.http;r.forEach((function(e){i=Object(le.a)({},i,e.options,{headers:Object(le.a)({},i.headers,e.headers)}),e.credentials&&(i.credentials=e.credentials),o=Object(le.a)({},o,e.http)}));var a=e.operationName,s=e.extensions,u=e.variables,l=e.query,c={operationName:a,variables:u};return o.includeExtensions&&(c.extensions=s),o.includeQuery&&(c.query=Object(St.print)(l)),{options:i,body:c}}(e,Tt,s,d),m=h.options,y=h.body;if(!m.signal){var v=function(){if("undefined"==typeof AbortController)return{controller:!1,signal:!1};var e=new AbortController;return{controller:e,signal:e.signal}}(),b=v.controller,g=v.signal;(f=b)&&(m.signal=g)}if(o&&!e.query.definitions.some((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation}))&&(m.method="GET"),"GET"===m.method){var w=function(e,t){var r=[],n=function(e,t){r.push(e+"="+encodeURIComponent(t))};"query"in t&&n("query",t.query);t.operationName&&n("operationName",t.operationName);if(t.variables){var i=void 0;try{i=Ct(t.variables)}catch(e){return{parseError:e}}n("variables",i)}if(t.extensions){var o=void 0;try{o=Ct(t.extensions)}catch(e){return{parseError:e}}n("extensions",o)}var a="",s=e,u=e.indexOf("#");-1!==u&&(a=e.substr(u),s=e.substr(0,u));var l=-1===s.indexOf("?")?"?":"&";return{newURI:s+l+r.join("&")+a}}(t,y),_=w.newURI,E=w.parseError;if(E)return yt(E);t=_}else try{m.body=Ct(y)}catch(E){return yt(E)}return new ht((function(r){var i;return n(t,m).then((function(t){return e.setContext({response:t}),t})).then((i=e,function(e){return e.text().then((function(t){try{return JSON.parse(t)}catch(n){var r=n;return r.name="ServerParseError",r.response=e,r.statusCode=e.status,r.bodyText=t,Promise.reject(r)}})).then((function(t){return e.status>=300&&Ot(e,t,"Response not successful: Received status code "+e.status),Array.isArray(t)||t.hasOwnProperty("data")||t.hasOwnProperty("errors")||Ot(e,t,"Server response was missing for query '"+(Array.isArray(i)?i.map((function(e){return e.operationName})):i.operationName)+"'."),t}))})).then((function(e){return r.next(e),r.complete(),e})).catch((function(e){"AbortError"!==e.name&&(e.result&&e.result.errors&&e.result.data&&r.next(e.result),r.error(e))})),function(){f&&f.abort()}}))}))};var Rt,At=function(e){function t(t){return e.call(this,Nt(t).request)||this}return Object(le.c)(t,e),t}(xt),Dt=r(48),Pt=r(5);function It(e){return e<7}!function(e){e[e.loading=1]="loading",e[e.setVariables=2]="setVariables",e[e.fetchMore=3]="fetchMore",e[e.refetch=4]="refetch",e[e.poll=6]="poll",e[e.ready=7]="ready",e[e.error=8]="error"}(Rt||(Rt={}));var jt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Object(le.c)(t,e),t.prototype[Dt.a]=function(){return this},t.prototype["@@observable"]=function(){return this},t}(ht);function qt(e){return Array.isArray(e)&&e.length>0}var Lt,Mt=function(e){function t(r){var n,i,o=r.graphQLErrors,a=r.networkError,s=r.errorMessage,u=r.extraInfo,l=e.call(this,s)||this;return l.graphQLErrors=o||[],l.networkError=a||null,l.message=s||(i="",qt((n=l).graphQLErrors)&&n.graphQLErrors.forEach((function(e){var t=e?e.message:"Error message not found.";i+="GraphQL error: "+t+"\n"})),n.networkError&&(i+="Network error: "+n.networkError.message+"\n"),i=i.replace(/\n$/,"")),l.extraInfo=u,l.__proto__=t.prototype,l}return Object(le.c)(t,e),t}(Error);!function(e){e[e.normal=1]="normal",e[e.refetch=2]="refetch",e[e.poll=3]="poll"}(Lt||(Lt={}));var Ft=function(e){function t(t){var r=t.queryManager,n=t.options,i=t.shouldSubscribe,o=void 0===i||i,a=e.call(this,(function(e){return a.onSubscribe(e)}))||this;a.observers=new Set,a.subscriptions=new Set,a.isTornDown=!1,a.options=n,a.variables=n.variables||{},a.queryId=r.generateQueryId(),a.shouldSubscribe=o;var s=Object(ce.m)(n.query);return a.queryName=s&&s.name&&s.name.value,a.queryManager=r,a}return Object(le.c)(t,e),t.prototype.result=function(){var e=this;return new Promise((function(t,r){var n={next:function(r){t(r),e.observers.delete(n),e.observers.size||e.queryManager.removeQuery(e.queryId),setTimeout((function(){i.unsubscribe()}),0)},error:r},i=e.subscribe(n)}))},t.prototype.currentResult=function(){var e=this.getCurrentResult();return void 0===e.data&&(e.data={}),e},t.prototype.getCurrentResult=function(){if(this.isTornDown){var e=this.lastResult;return{data:!this.lastError&&e&&e.data||void 0,error:this.lastError,loading:!1,networkStatus:Rt.error}}var t,r,n,i=this.queryManager.getCurrentQueryResult(this),o=i.data,a=i.partial,s=this.queryManager.queryStore.get(this.queryId),u=this.options.fetchPolicy,l="network-only"===u||"no-cache"===u;if(s){var c=s.networkStatus;if(r=s,void 0===(n=this.options.errorPolicy)&&(n="none"),r&&(r.networkError||"none"===n&&qt(r.graphQLErrors)))return{data:void 0,loading:!1,networkStatus:c,error:new Mt({graphQLErrors:s.graphQLErrors,networkError:s.networkError})};s.variables&&(this.options.variables=Object(le.a)(Object(le.a)({},this.options.variables),s.variables),this.variables=this.options.variables),t={data:o,loading:It(c),networkStatus:c},s.graphQLErrors&&"all"===this.options.errorPolicy&&(t.errors=s.graphQLErrors)}else{var f=l||a&&"cache-only"!==u;t={data:o,loading:f,networkStatus:f?Rt.loading:Rt.ready}}return a||this.updateLastResult(Object(le.a)(Object(le.a)({},t),{stale:!1})),Object(le.a)(Object(le.a)({},t),{partial:a})},t.prototype.isDifferentFromLastResult=function(e){var t=this.lastResultSnapshot;return!(t&&e&&t.networkStatus===e.networkStatus&&t.stale===e.stale&&Object(ye.a)(t.data,e.data))},t.prototype.getLastResult=function(){return this.lastResult},t.prototype.getLastError=function(){return this.lastError},t.prototype.resetLastResults=function(){delete this.lastResult,delete this.lastResultSnapshot,delete this.lastError,this.isTornDown=!1},t.prototype.resetQueryStoreErrors=function(){var e=this.queryManager.queryStore.get(this.queryId);e&&(e.networkError=null,e.graphQLErrors=[])},t.prototype.refetch=function(e){var t=this.options.fetchPolicy;return"cache-only"===t?Promise.reject(new Ge.a(3)):("no-cache"!==t&&"cache-and-network"!==t&&(t="network-only"),Object(ye.a)(this.variables,e)||(this.variables=Object(le.a)(Object(le.a)({},this.variables),e)),Object(ye.a)(this.options.variables,this.variables)||(this.options.variables=Object(le.a)(Object(le.a)({},this.options.variables),this.variables)),this.queryManager.fetchQuery(this.queryId,Object(le.a)(Object(le.a)({},this.options),{fetchPolicy:t}),Lt.refetch))},t.prototype.fetchMore=function(e){var t=this;Object(Ge.b)(e.updateQuery,4);var r=Object(le.a)(Object(le.a)({},e.query?e:Object(le.a)(Object(le.a)(Object(le.a)({},this.options),e),{variables:Object(le.a)(Object(le.a)({},this.variables),e.variables)})),{fetchPolicy:"network-only"}),n=this.queryManager.generateQueryId();return this.queryManager.fetchQuery(n,r,Lt.normal,this.queryId).then((function(i){return t.updateQuery((function(t){return e.updateQuery(t,{fetchMoreResult:i.data,variables:r.variables})})),t.queryManager.stopQuery(n),i}),(function(e){throw t.queryManager.stopQuery(n),e}))},t.prototype.subscribeToMore=function(e){var t=this,r=this.queryManager.startGraphQLSubscription({query:e.document,variables:e.variables}).subscribe({next:function(r){var n=e.updateQuery;n&&t.updateQuery((function(e,t){var i=t.variables;return n(e,{subscriptionData:r,variables:i})}))},error:function(t){e.onError&&e.onError(t)}});return this.subscriptions.add(r),function(){t.subscriptions.delete(r)&&r.unsubscribe()}},t.prototype.setOptions=function(e){var t=this.options.fetchPolicy;this.options=Object(le.a)(Object(le.a)({},this.options),e),e.pollInterval?this.startPolling(e.pollInterval):0===e.pollInterval&&this.stopPolling();var r=e.fetchPolicy;return this.setVariables(this.options.variables,t!==r&&("cache-only"===t||"standby"===t||"network-only"===r),e.fetchResults)},t.prototype.setVariables=function(e,t,r){return void 0===t&&(t=!1),void 0===r&&(r=!0),this.isTornDown=!1,e=e||this.variables,!t&&Object(ye.a)(e,this.variables)?this.observers.size&&r?this.result():Promise.resolve():(this.variables=this.options.variables=e,this.observers.size?this.queryManager.fetchQuery(this.queryId,this.options):Promise.resolve())},t.prototype.updateQuery=function(e){var t=this.queryManager,r=t.getQueryWithPreviousResult(this.queryId),n=r.previousResult,i=r.variables,o=r.document,a=Object(ce.I)((function(){return e(n,{variables:i})}));a&&(t.dataStore.markUpdateQueryResult(o,i,a),t.broadcastQueries())},t.prototype.stopPolling=function(){this.queryManager.stopPollingQuery(this.queryId),this.options.pollInterval=void 0},t.prototype.startPolling=function(e){Qt(this),this.options.pollInterval=e,this.queryManager.startPollingQuery(this.options,this.queryId)},t.prototype.updateLastResult=function(e){var t=this.lastResult;return this.lastResult=e,this.lastResultSnapshot=this.queryManager.assumeImmutableResults?e:Object(ce.f)(e),t},t.prototype.onSubscribe=function(e){var t=this;try{var r=e._subscription._observer;r&&!r.error&&(r.error=Bt)}catch(e){}var n=!this.observers.size;return this.observers.add(e),e.next&&this.lastResult&&e.next(this.lastResult),e.error&&this.lastError&&e.error(this.lastError),n&&this.setUpQuery(),function(){t.observers.delete(e)&&!t.observers.size&&t.tearDownQuery()}},t.prototype.setUpQuery=function(){var e=this,t=this.queryManager,r=this.queryId;this.shouldSubscribe&&t.addObservableQuery(r,this),this.options.pollInterval&&(Qt(this),t.startPollingQuery(this.options,r));var n=function(t){e.updateLastResult(Object(le.a)(Object(le.a)({},e.lastResult),{errors:t.graphQLErrors,networkStatus:Rt.error,loading:!1})),Ut(e.observers,"error",e.lastError=t)};t.observeQuery(r,this.options,{next:function(r){if(e.lastError||e.isDifferentFromLastResult(r)){var n=e.updateLastResult(r),i=e.options,o=i.query,a=i.variables,s=i.fetchPolicy;t.transform(o).hasClientExports?t.getLocalState().addExportedVariables(o,a).then((function(i){var a=e.variables;e.variables=e.options.variables=i,!r.loading&&n&&"cache-only"!==s&&t.transform(o).serverQuery&&!Object(ye.a)(a,i)?e.refetch():Ut(e.observers,"next",r)})):Ut(e.observers,"next",r)}},error:n}).catch(n)},t.prototype.tearDownQuery=function(){var e=this.queryManager;this.isTornDown=!0,e.stopPollingQuery(this.queryId),this.subscriptions.forEach((function(e){return e.unsubscribe()})),this.subscriptions.clear(),e.removeObservableQuery(this.queryId),e.stopQuery(this.queryId),this.observers.clear()},t}(jt);function Bt(e){}function Ut(e,t,r){var n=[];e.forEach((function(e){return e[t]&&n.push(e)})),n.forEach((function(e){return e[t](r)}))}function Qt(e){var t=e.options.fetchPolicy;Object(Ge.b)("cache-first"!==t&&"cache-only"!==t,5)}var Vt=function(){function e(){this.store={}}return e.prototype.getStore=function(){return this.store},e.prototype.get=function(e){return this.store[e]},e.prototype.initMutation=function(e,t,r){this.store[e]={mutation:t,variables:r||{},loading:!0,error:null}},e.prototype.markMutationError=function(e,t){var r=this.store[e];r&&(r.loading=!1,r.error=t)},e.prototype.markMutationResult=function(e){var t=this.store[e];t&&(t.loading=!1,t.error=null)},e.prototype.reset=function(){this.store={}},e}(),zt=function(){function e(){this.store={}}return e.prototype.getStore=function(){return this.store},e.prototype.get=function(e){return this.store[e]},e.prototype.initQuery=function(e){var t=this.store[e.queryId];Object(Ge.b)(!t||t.document===e.document||Object(ye.a)(t.document,e.document),19);var r,n=!1,i=null;e.storePreviousVariables&&t&&t.networkStatus!==Rt.loading&&(Object(ye.a)(t.variables,e.variables)||(n=!0,i=t.variables)),r=n?Rt.setVariables:e.isPoll?Rt.poll:e.isRefetch?Rt.refetch:Rt.loading;var o=[];t&&t.graphQLErrors&&(o=t.graphQLErrors),this.store[e.queryId]={document:e.document,variables:e.variables,previousVariables:i,networkError:null,graphQLErrors:o,networkStatus:r,metadata:e.metadata},"string"==typeof e.fetchMoreForQueryId&&this.store[e.fetchMoreForQueryId]&&(this.store[e.fetchMoreForQueryId].networkStatus=Rt.fetchMore)},e.prototype.markQueryResult=function(e,t,r){this.store&&this.store[e]&&(this.store[e].networkError=null,this.store[e].graphQLErrors=qt(t.errors)?t.errors:[],this.store[e].previousVariables=null,this.store[e].networkStatus=Rt.ready,"string"==typeof r&&this.store[r]&&(this.store[r].networkStatus=Rt.ready))},e.prototype.markQueryError=function(e,t,r){this.store&&this.store[e]&&(this.store[e].networkError=t,this.store[e].networkStatus=Rt.error,"string"==typeof r&&this.markQueryResultClient(r,!0))},e.prototype.markQueryResultClient=function(e,t){var r=this.store&&this.store[e];r&&(r.networkError=null,r.previousVariables=null,t&&(r.networkStatus=Rt.ready))},e.prototype.stopQuery=function(e){delete this.store[e]},e.prototype.reset=function(e){var t=this;Object.keys(this.store).forEach((function(r){e.indexOf(r)<0?t.stopQuery(r):t.store[r].networkStatus=Rt.loading}))},e}();var Kt=function(){function e(e){var t=e.cache,r=e.client,n=e.resolvers,i=e.fragmentMatcher;this.cache=t,r&&(this.client=r),n&&this.addResolvers(n),i&&this.setFragmentMatcher(i)}return e.prototype.addResolvers=function(e){var t=this;this.resolvers=this.resolvers||{},Array.isArray(e)?e.forEach((function(e){t.resolvers=Object(ce.A)(t.resolvers,e)})):this.resolvers=Object(ce.A)(this.resolvers,e)},e.prototype.setResolvers=function(e){this.resolvers={},this.addResolvers(e)},e.prototype.getResolvers=function(){return this.resolvers||{}},e.prototype.runResolvers=function(e){var t=e.document,r=e.remoteResult,n=e.context,i=e.variables,o=e.onlyRunForcedResolvers,a=void 0!==o&&o;return Object(le.b)(this,void 0,void 0,(function(){return Object(le.d)(this,(function(e){return t?[2,this.resolveDocument(t,r.data,n,i,this.fragmentMatcher,a).then((function(e){return Object(le.a)(Object(le.a)({},r),{data:e.result})}))]:[2,r]}))}))},e.prototype.setFragmentMatcher=function(e){this.fragmentMatcher=e},e.prototype.getFragmentMatcher=function(){return this.fragmentMatcher},e.prototype.clientQuery=function(e){return Object(ce.s)(["client"],e)&&this.resolvers?e:null},e.prototype.serverQuery=function(e){return this.resolvers?Object(ce.C)(e):e},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.cache;return Object(le.a)(Object(le.a)({},e),{cache:t,getCacheKey:function(e){if(t.config)return t.config.dataIdFromObject(e);Object(Ge.b)(!1,6)}})},e.prototype.addExportedVariables=function(e,t,r){return void 0===t&&(t={}),void 0===r&&(r={}),Object(le.b)(this,void 0,void 0,(function(){return Object(le.d)(this,(function(n){return e?[2,this.resolveDocument(e,this.buildRootValueFromCache(e,t)||{},this.prepareContext(r),t).then((function(e){return Object(le.a)(Object(le.a)({},t),e.exportedVariables)}))]:[2,Object(le.a)({},t)]}))}))},e.prototype.shouldForceResolvers=function(e){var t=!1;return Object(Pt.visit)(e,{Directive:{enter:function(e){if("client"===e.name.value&&e.arguments&&(t=e.arguments.some((function(e){return"always"===e.name.value&&"BooleanValue"===e.value.kind&&!0===e.value.value}))))return Pt.BREAK}}}),t},e.prototype.buildRootValueFromCache=function(e,t){return this.cache.diff({query:Object(ce.d)(e),variables:t,returnPartialData:!0,optimistic:!1}).result},e.prototype.resolveDocument=function(e,t,r,n,i,o){return void 0===r&&(r={}),void 0===n&&(n={}),void 0===i&&(i=function(){return!0}),void 0===o&&(o=!1),Object(le.b)(this,void 0,void 0,(function(){var a,s,u,l,c,f,p,d,h;return Object(le.d)(this,(function(m){var y;return a=Object(ce.l)(e),s=Object(ce.j)(e),u=Object(ce.g)(s),l=a.operation,c=l?(y=l).charAt(0).toUpperCase()+y.slice(1):"Query",p=(f=this).cache,d=f.client,h={fragmentMap:u,context:Object(le.a)(Object(le.a)({},r),{cache:p,client:d}),variables:n,fragmentMatcher:i,defaultOperationType:c,exportedVariables:{},onlyRunForcedResolvers:o},[2,this.resolveSelectionSet(a.selectionSet,t,h).then((function(e){return{result:e,exportedVariables:h.exportedVariables}}))]}))}))},e.prototype.resolveSelectionSet=function(e,t,r){return Object(le.b)(this,void 0,void 0,(function(){var n,i,o,a,s,u=this;return Object(le.d)(this,(function(l){return n=r.fragmentMap,i=r.context,o=r.variables,a=[t],s=function(e){return Object(le.b)(u,void 0,void 0,(function(){var s,u;return Object(le.d)(this,(function(l){return Object(ce.F)(e,o)?Object(ce.t)(e)?[2,this.resolveField(e,t,r).then((function(t){var r;void 0!==t&&a.push(((r={})[Object(ce.E)(e)]=t,r))}))]:(Object(ce.v)(e)?s=e:(s=n[e.name.value],Object(Ge.b)(s,7)),s&&s.typeCondition&&(u=s.typeCondition.name.value,r.fragmentMatcher(t,u,i))?[2,this.resolveSelectionSet(s.selectionSet,t,r).then((function(e){a.push(e)}))]:[2]):[2]}))}))},[2,Promise.all(e.selections.map(s)).then((function(){return Object(ce.B)(a)}))]}))}))},e.prototype.resolveField=function(e,t,r){return Object(le.b)(this,void 0,void 0,(function(){var n,i,o,a,s,u,l,c,f,p=this;return Object(le.d)(this,(function(d){return n=r.variables,i=e.name.value,o=Object(ce.E)(e),a=i!==o,s=t[o]||t[i],u=Promise.resolve(s),r.onlyRunForcedResolvers&&!this.shouldForceResolvers(e)||(l=t.__typename||r.defaultOperationType,(c=this.resolvers&&this.resolvers[l])&&(f=c[a?i:o])&&(u=Promise.resolve(f(t,Object(ce.b)(e,n),r.context,{field:e,fragmentMap:r.fragmentMap})))),[2,u.then((function(t){return void 0===t&&(t=s),e.directives&&e.directives.forEach((function(e){"export"===e.name.value&&e.arguments&&e.arguments.forEach((function(e){"as"===e.name.value&&"StringValue"===e.value.kind&&(r.exportedVariables[e.value.value]=t)}))})),e.selectionSet?null==t?t:Array.isArray(t)?p.resolveSubSelectedArray(e,t,r):e.selectionSet?p.resolveSelectionSet(e.selectionSet,t,r):void 0:t}))]}))}))},e.prototype.resolveSubSelectedArray=function(e,t,r){var n=this;return Promise.all(t.map((function(t){return null===t?null:Array.isArray(t)?n.resolveSubSelectedArray(e,t,r):e.selectionSet?n.resolveSelectionSet(e.selectionSet,t,r):void 0})))},e}();function Ht(e){var t=new Set,r=null;return new jt((function(n){return t.add(n),r=r||e.subscribe({next:function(e){t.forEach((function(t){return t.next&&t.next(e)}))},error:function(e){t.forEach((function(t){return t.error&&t.error(e)}))},complete:function(){t.forEach((function(e){return e.complete&&e.complete()}))}}),function(){t.delete(n)&&!t.size&&r&&(r.unsubscribe(),r=null)}}))}var Gt,Yt=Object.prototype.hasOwnProperty,Wt=function(){function e(e){var t=e.link,r=e.queryDeduplication,n=void 0!==r&&r,i=e.store,o=e.onBroadcast,a=void 0===o?function(){}:o,s=e.ssrMode,u=void 0!==s&&s,l=e.clientAwareness,c=void 0===l?{}:l,f=e.localState,p=e.assumeImmutableResults;this.mutationStore=new Vt,this.queryStore=new zt,this.clientAwareness={},this.idCounter=1,this.queries=new Map,this.fetchQueryRejectFns=new Map,this.transformCache=new(ce.e?WeakMap:Map),this.inFlightLinkObservables=new Map,this.pollingInfoByQueryId=new Map,this.link=t,this.queryDeduplication=n,this.dataStore=i,this.onBroadcast=a,this.clientAwareness=c,this.localState=f||new Kt({cache:i.getCache()}),this.ssrMode=u,this.assumeImmutableResults=!!p}return e.prototype.stop=function(){var e=this;this.queries.forEach((function(t,r){e.stopQueryNoBroadcast(r)})),this.fetchQueryRejectFns.forEach((function(e){e(new Ge.a(8))}))},e.prototype.mutate=function(e){var t=e.mutation,r=e.variables,n=e.optimisticResponse,i=e.updateQueries,o=e.refetchQueries,a=void 0===o?[]:o,s=e.awaitRefetchQueries,u=void 0!==s&&s,l=e.update,c=e.errorPolicy,f=void 0===c?"none":c,p=e.fetchPolicy,d=e.context,h=void 0===d?{}:d;return Object(le.b)(this,void 0,void 0,(function(){var e,o,s,c=this;return Object(le.d)(this,(function(d){switch(d.label){case 0:return Object(Ge.b)(t,9),Object(Ge.b)(!p||"no-cache"===p,10),e=this.generateQueryId(),t=this.transform(t).document,this.setQuery(e,(function(){return{document:t}})),r=this.getVariables(t,r),this.transform(t).hasClientExports?[4,this.localState.addExportedVariables(t,r,h)]:[3,2];case 1:r=d.sent(),d.label=2;case 2:return o=function(){var e={};return i&&c.queries.forEach((function(t,r){var n=t.observableQuery;if(n){var o=n.queryName;o&&Yt.call(i,o)&&(e[r]={updater:i[o],query:c.queryStore.get(r)})}})),e},this.mutationStore.initMutation(e,t,r),this.dataStore.markMutationInit({mutationId:e,document:t,variables:r,updateQueries:o(),update:l,optimisticResponse:n}),this.broadcastQueries(),s=this,[2,new Promise((function(i,c){var d,m;s.getObservableFromLink(t,Object(le.a)(Object(le.a)({},h),{optimisticResponse:n}),r,!1).subscribe({next:function(n){Object(ce.q)(n)&&"none"===f?m=new Mt({graphQLErrors:n.errors}):(s.mutationStore.markMutationResult(e),"no-cache"!==p&&s.dataStore.markMutationResult({mutationId:e,result:n,document:t,variables:r,updateQueries:o(),update:l}),d=n)},error:function(t){s.mutationStore.markMutationError(e,t),s.dataStore.markMutationComplete({mutationId:e,optimisticResponse:n}),s.broadcastQueries(),s.setQuery(e,(function(){return{document:null}})),c(new Mt({networkError:t}))},complete:function(){if(m&&s.mutationStore.markMutationError(e,m),s.dataStore.markMutationComplete({mutationId:e,optimisticResponse:n}),s.broadcastQueries(),m)c(m);else{"function"==typeof a&&(a=a(d));var t=[];qt(a)&&a.forEach((function(e){if("string"==typeof e)s.queries.forEach((function(r){var n=r.observableQuery;n&&n.queryName===e&&t.push(n.refetch())}));else{var r={query:e.query,variables:e.variables,fetchPolicy:"network-only"};e.context&&(r.context=e.context),t.push(s.query(r))}})),Promise.all(u?t:[]).then((function(){s.setQuery(e,(function(){return{document:null}})),"ignore"===f&&d&&Object(ce.q)(d)&&delete d.errors,i(d)}))}}})}))]}}))}))},e.prototype.fetchQuery=function(e,t,r,n){return Object(le.b)(this,void 0,void 0,(function(){var i,o,a,s,u,l,c,f,p,d,h,m,y,v,b,g,w,_,E=this;return Object(le.d)(this,(function(x){switch(x.label){case 0:return i=t.metadata,o=void 0===i?null:i,a=t.fetchPolicy,s=void 0===a?"cache-first":a,u=t.context,l=void 0===u?{}:u,c=this.transform(t.query).document,f=this.getVariables(c,t.variables),this.transform(c).hasClientExports?[4,this.localState.addExportedVariables(c,f,l)]:[3,2];case 1:f=x.sent(),x.label=2;case 2:if(t=Object(le.a)(Object(le.a)({},t),{variables:f}),h=d="network-only"===s||"no-cache"===s,d||(m=this.dataStore.getCache().diff({query:c,variables:f,returnPartialData:!0,optimistic:!1}),y=m.complete,v=m.result,h=!y||"cache-and-network"===s,p=v),b=h&&"cache-only"!==s&&"standby"!==s,Object(ce.s)(["live"],c)&&(b=!0),g=this.idCounter++,w="no-cache"!==s?this.updateQueryWatch(e,c,t):void 0,this.setQuery(e,(function(){return{document:c,lastRequestId:g,invalidated:!0,cancel:w}})),this.invalidate(n),this.queryStore.initQuery({queryId:e,document:c,storePreviousVariables:b,variables:f,isPoll:r===Lt.poll,isRefetch:r===Lt.refetch,metadata:o,fetchMoreForQueryId:n}),this.broadcastQueries(),b){if(_=this.fetchRequest({requestId:g,queryId:e,document:c,options:t,fetchMoreForQueryId:n}).catch((function(t){throw t.hasOwnProperty("graphQLErrors")?t:(g>=E.getQuery(e).lastRequestId&&(E.queryStore.markQueryError(e,t,n),E.invalidate(e),E.invalidate(n),E.broadcastQueries()),new Mt({networkError:t}))})),"cache-and-network"!==s)return[2,_];_.catch((function(){}))}return this.queryStore.markQueryResultClient(e,!b),this.invalidate(e),this.invalidate(n),this.transform(c).hasForcedResolvers?[2,this.localState.runResolvers({document:c,remoteResult:{data:p},context:l,variables:f,onlyRunForcedResolvers:!0}).then((function(r){return E.markQueryResult(e,r,t,n),E.broadcastQueries(),r}))]:(this.broadcastQueries(),[2,{data:p}])}}))}))},e.prototype.markQueryResult=function(e,t,r,n){var i=r.fetchPolicy,o=r.variables,a=r.errorPolicy;"no-cache"===i?this.setQuery(e,(function(){return{newData:{result:t.data,complete:!0}}})):this.dataStore.markQueryResult(t,this.getQuery(e).document,o,n,"ignore"===a||"all"===a)},e.prototype.queryListenerForObserver=function(e,t,r){var n=this;function i(e,t){if(r[e])try{r[e](t)}catch(e){}}return function(r,o){if(n.invalidate(e,!1),r){var a=n.getQuery(e),s=a.observableQuery,u=a.document,l=s?s.options.fetchPolicy:t.fetchPolicy;if("standby"!==l){var c=It(r.networkStatus),f=s&&s.getLastResult(),p=!(!f||f.networkStatus===r.networkStatus),d=t.returnPartialData||!o&&r.previousVariables||p&&t.notifyOnNetworkStatusChange||"cache-only"===l||"cache-and-network"===l;if(!c||d){var h=qt(r.graphQLErrors),m=s&&s.options.errorPolicy||t.errorPolicy||"none";if("none"===m&&h||r.networkError)return i("error",new Mt({graphQLErrors:r.graphQLErrors,networkError:r.networkError}));try{var y=void 0,v=void 0;if(o)"no-cache"!==l&&"network-only"!==l&&n.setQuery(e,(function(){return{newData:null}})),y=o.result,v=!o.complete;else{var b=s&&s.getLastError(),g="none"!==m&&(b&&b.graphQLErrors)!==r.graphQLErrors;if(f&&f.data&&!g)y=f.data,v=!1;else{var w=n.dataStore.getCache().diff({query:u,variables:r.previousVariables||r.variables,returnPartialData:!0,optimistic:!0});y=w.result,v=!w.complete}}var _=v&&!(t.returnPartialData||"cache-only"===l),E={data:_?f&&f.data:y,loading:c,networkStatus:r.networkStatus,stale:_};"all"===m&&h&&(E.errors=r.graphQLErrors),i("next",E)}catch(e){i("error",new Mt({networkError:e}))}}}}}},e.prototype.transform=function(e){var t=this.transformCache;if(!t.has(e)){var r=this.dataStore.getCache(),n=r.transformDocument(e),i=Object(ce.D)(r.transformForLink(n)),o=this.localState.clientQuery(n),a=this.localState.serverQuery(i),s={document:n,hasClientExports:Object(ce.r)(n),hasForcedResolvers:this.localState.shouldForceResolvers(n),clientQuery:o,serverQuery:a,defaultVars:Object(ce.h)(Object(ce.m)(n))},u=function(e){e&&!t.has(e)&&t.set(e,s)};u(e),u(n),u(o),u(a)}return t.get(e)},e.prototype.getVariables=function(e,t){return Object(le.a)(Object(le.a)({},this.transform(e).defaultVars),t)},e.prototype.watchQuery=function(e,t){void 0===t&&(t=!0),Object(Ge.b)("standby"!==e.fetchPolicy,11),e.variables=this.getVariables(e.query,e.variables),void 0===e.notifyOnNetworkStatusChange&&(e.notifyOnNetworkStatusChange=!1);var r=Object(le.a)({},e);return new Ft({queryManager:this,options:r,shouldSubscribe:t})},e.prototype.query=function(e){var t=this;return Object(Ge.b)(e.query,12),Object(Ge.b)("Document"===e.query.kind,13),Object(Ge.b)(!e.returnPartialData,14),Object(Ge.b)(!e.pollInterval,15),new Promise((function(r,n){var i=t.watchQuery(e,!1);t.fetchQueryRejectFns.set("query:"+i.queryId,n),i.result().then(r,n).then((function(){return t.fetchQueryRejectFns.delete("query:"+i.queryId)}))}))},e.prototype.generateQueryId=function(){return String(this.idCounter++)},e.prototype.stopQueryInStore=function(e){this.stopQueryInStoreNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryInStoreNoBroadcast=function(e){this.stopPollingQuery(e),this.queryStore.stopQuery(e),this.invalidate(e)},e.prototype.addQueryListener=function(e,t){this.setQuery(e,(function(e){return e.listeners.add(t),{invalidated:!1}}))},e.prototype.updateQueryWatch=function(e,t,r){var n=this,i=this.getQuery(e).cancel;i&&i();return this.dataStore.getCache().watch({query:t,variables:r.variables,optimistic:!0,previousResult:function(){var t=null,r=n.getQuery(e).observableQuery;if(r){var i=r.getLastResult();i&&(t=i.data)}return t},callback:function(t){n.setQuery(e,(function(){return{invalidated:!0,newData:t}}))}})},e.prototype.addObservableQuery=function(e,t){this.setQuery(e,(function(){return{observableQuery:t}}))},e.prototype.removeObservableQuery=function(e){var t=this.getQuery(e).cancel;this.setQuery(e,(function(){return{observableQuery:null}})),t&&t()},e.prototype.clearStore=function(){this.fetchQueryRejectFns.forEach((function(e){e(new Ge.a(16))}));var e=[];return this.queries.forEach((function(t,r){t.observableQuery&&e.push(r)})),this.queryStore.reset(e),this.mutationStore.reset(),this.dataStore.reset()},e.prototype.resetStore=function(){var e=this;return this.clearStore().then((function(){return e.reFetchObservableQueries()}))},e.prototype.reFetchObservableQueries=function(e){var t=this;void 0===e&&(e=!1);var r=[];return this.queries.forEach((function(n,i){var o=n.observableQuery;if(o){var a=o.options.fetchPolicy;o.resetLastResults(),"cache-only"===a||!e&&"standby"===a||r.push(o.refetch()),t.setQuery(i,(function(){return{newData:null}})),t.invalidate(i)}})),this.broadcastQueries(),Promise.all(r)},e.prototype.observeQuery=function(e,t,r){return this.addQueryListener(e,this.queryListenerForObserver(e,t,r)),this.fetchQuery(e,t)},e.prototype.startQuery=function(e,t,r){return this.addQueryListener(e,r),this.fetchQuery(e,t).catch((function(){})),e},e.prototype.startGraphQLSubscription=function(e){var t=this,r=e.query,n=e.fetchPolicy,i=e.variables;r=this.transform(r).document,i=this.getVariables(r,i);var o=function(e){return t.getObservableFromLink(r,{},e,!1).map((function(i){if(n&&"no-cache"===n||(t.dataStore.markSubscriptionResult(i,r,e),t.broadcastQueries()),Object(ce.q)(i))throw new Mt({graphQLErrors:i.errors});return i}))};if(this.transform(r).hasClientExports){var a=this.localState.addExportedVariables(r,i).then(o);return new jt((function(e){var t=null;return a.then((function(r){return t=r.subscribe(e)}),e.error),function(){return t&&t.unsubscribe()}}))}return o(i)},e.prototype.stopQuery=function(e){this.stopQueryNoBroadcast(e),this.broadcastQueries()},e.prototype.stopQueryNoBroadcast=function(e){this.stopQueryInStoreNoBroadcast(e),this.removeQuery(e)},e.prototype.removeQuery=function(e){this.fetchQueryRejectFns.delete("query:"+e),this.fetchQueryRejectFns.delete("fetchRequest:"+e),this.getQuery(e).subscriptions.forEach((function(e){return e.unsubscribe()})),this.queries.delete(e)},e.prototype.getCurrentQueryResult=function(e,t){void 0===t&&(t=!0);var r=e.options,n=r.variables,i=r.query,o=r.fetchPolicy,a=r.returnPartialData,s=e.getLastResult(),u=this.getQuery(e.queryId).newData;if(u&&u.complete)return{data:u.result,partial:!1};if("no-cache"===o||"network-only"===o)return{data:void 0,partial:!1};var l=this.dataStore.getCache().diff({query:i,variables:n,previousResult:s?s.data:void 0,returnPartialData:!0,optimistic:t}),c=l.result,f=l.complete;return{data:f||a?c:void 0,partial:!f}},e.prototype.getQueryWithPreviousResult=function(e){var t;if("string"==typeof e){var r=this.getQuery(e).observableQuery;Object(Ge.b)(r,17),t=r}else t=e;var n=t.options,i=n.variables,o=n.query;return{previousResult:this.getCurrentQueryResult(t,!1).data,variables:i,document:o}},e.prototype.broadcastQueries=function(){var e=this;this.onBroadcast(),this.queries.forEach((function(t,r){t.invalidated&&t.listeners.forEach((function(n){n&&n(e.queryStore.get(r),t.newData)}))}))},e.prototype.getLocalState=function(){return this.localState},e.prototype.getObservableFromLink=function(e,t,r,n){var i,o=this;void 0===n&&(n=this.queryDeduplication);var a=this.transform(e).serverQuery;if(a){var s=this.inFlightLinkObservables,u=this.link,l={query:a,variables:r,operationName:Object(ce.n)(a)||void 0,context:this.prepareContext(Object(le.a)(Object(le.a)({},t),{forceFetch:!n}))};if(t=l.context,n){var c=s.get(a)||new Map;s.set(a,c);var f=JSON.stringify(r);if(!(i=c.get(f))){c.set(f,i=Ht(kt(u,l)));var p=function(){c.delete(f),c.size||s.delete(a),d.unsubscribe()},d=i.subscribe({next:p,error:p,complete:p})}}else i=Ht(kt(u,l))}else i=jt.of({data:{}}),t=this.prepareContext(t);var h=this.transform(e).clientQuery;return h&&(i=function(e,t){return new jt((function(r){var n=r.next,i=r.error,o=r.complete,a=0,s=!1,u={next:function(e){++a,new Promise((function(r){r(t(e))})).then((function(e){--a,n&&n.call(r,e),s&&u.complete()}),(function(e){--a,i&&i.call(r,e)}))},error:function(e){i&&i.call(r,e)},complete:function(){s=!0,a||o&&o.call(r)}},l=e.subscribe(u);return function(){return l.unsubscribe()}}))}(i,(function(e){return o.localState.runResolvers({document:h,remoteResult:e,context:t,variables:r})}))),i},e.prototype.fetchRequest=function(e){var t,r,n=this,i=e.requestId,o=e.queryId,a=e.document,s=e.options,u=e.fetchMoreForQueryId,l=s.variables,c=s.errorPolicy,f=void 0===c?"none":c,p=s.fetchPolicy;return new Promise((function(e,c){var d=n.getObservableFromLink(a,s.context,l),h="fetchRequest:"+o;n.fetchQueryRejectFns.set(h,c);var m=function(){n.fetchQueryRejectFns.delete(h),n.setQuery(o,(function(e){e.subscriptions.delete(y)}))},y=d.map((function(e){if(i>=n.getQuery(o).lastRequestId&&(n.markQueryResult(o,e,s,u),n.queryStore.markQueryResult(o,e,u),n.invalidate(o),n.invalidate(u),n.broadcastQueries()),"none"===f&&qt(e.errors))return c(new Mt({graphQLErrors:e.errors}));if("all"===f&&(r=e.errors),u||"no-cache"===p)t=e.data;else{var d=n.dataStore.getCache().diff({variables:l,query:a,optimistic:!1,returnPartialData:!0}),h=d.result;(d.complete||s.returnPartialData)&&(t=h)}})).subscribe({error:function(e){m(),c(e)},complete:function(){m(),e({data:t,errors:r,loading:!1,networkStatus:Rt.ready,stale:!1})}});n.setQuery(o,(function(e){e.subscriptions.add(y)}))}))},e.prototype.getQuery=function(e){return this.queries.get(e)||{listeners:new Set,invalidated:!1,document:null,newData:null,lastRequestId:1,observableQuery:null,subscriptions:new Set}},e.prototype.setQuery=function(e,t){var r=this.getQuery(e),n=Object(le.a)(Object(le.a)({},r),t(r));this.queries.set(e,n)},e.prototype.invalidate=function(e,t){void 0===t&&(t=!0),e&&this.setQuery(e,(function(){return{invalidated:t}}))},e.prototype.prepareContext=function(e){void 0===e&&(e={});var t=this.localState.prepareContext(e);return Object(le.a)(Object(le.a)({},t),{clientAwareness:this.clientAwareness})},e.prototype.checkInFlight=function(e){var t=this.queryStore.get(e);return t&&t.networkStatus!==Rt.ready&&t.networkStatus!==Rt.error},e.prototype.startPollingQuery=function(e,t,r){var n=this,i=e.pollInterval;if(Object(Ge.b)(i,18),!this.ssrMode){var o=this.pollingInfoByQueryId.get(t);o||this.pollingInfoByQueryId.set(t,o={}),o.interval=i,o.options=Object(le.a)(Object(le.a)({},e),{fetchPolicy:"network-only"});var a=function(){var e=n.pollingInfoByQueryId.get(t);e&&(n.checkInFlight(t)?s():n.fetchQuery(t,e.options,Lt.poll).then(s,s))},s=function(){var e=n.pollingInfoByQueryId.get(t);e&&(clearTimeout(e.timeout),e.timeout=setTimeout(a,e.interval))};r&&this.addQueryListener(t,r),s()}return t},e.prototype.stopPollingQuery=function(e){this.pollingInfoByQueryId.delete(e)},e}(),$t=function(){function e(e){this.cache=e}return e.prototype.getCache=function(){return this.cache},e.prototype.markQueryResult=function(e,t,r,n,i){void 0===i&&(i=!1);var o=!Object(ce.q)(e);i&&Object(ce.q)(e)&&e.data&&(o=!0),!n&&o&&this.cache.write({result:e.data,dataId:"ROOT_QUERY",query:t,variables:r})},e.prototype.markSubscriptionResult=function(e,t,r){Object(ce.q)(e)||this.cache.write({result:e.data,dataId:"ROOT_SUBSCRIPTION",query:t,variables:r})},e.prototype.markMutationInit=function(e){var t,r=this;e.optimisticResponse&&(t="function"==typeof e.optimisticResponse?e.optimisticResponse(e.variables):e.optimisticResponse,this.cache.recordOptimisticTransaction((function(n){var i=r.cache;r.cache=n;try{r.markMutationResult({mutationId:e.mutationId,result:{data:t},document:e.document,variables:e.variables,updateQueries:e.updateQueries,update:e.update})}finally{r.cache=i}}),e.mutationId))},e.prototype.markMutationResult=function(e){var t=this;if(!Object(ce.q)(e.result)){var r=[{result:e.result.data,dataId:"ROOT_MUTATION",query:e.document,variables:e.variables}],n=e.updateQueries;n&&Object.keys(n).forEach((function(i){var o=n[i],a=o.query,s=o.updater,u=t.cache.diff({query:a.document,variables:a.variables,returnPartialData:!0,optimistic:!1}),l=u.result;if(u.complete){var c=Object(ce.I)((function(){return s(l,{mutationResult:e.result,queryName:Object(ce.n)(a.document)||void 0,queryVariables:a.variables})}));c&&r.push({result:c,dataId:"ROOT_QUERY",query:a.document,variables:a.variables})}})),this.cache.performTransaction((function(t){r.forEach((function(e){return t.write(e)}));var n=e.update;n&&Object(ce.I)((function(){return n(t,e.result)}))}))}},e.prototype.markMutationComplete=function(e){var t=e.mutationId;e.optimisticResponse&&this.cache.removeOptimistic(t)},e.prototype.markUpdateQueryResult=function(e,t,r){this.cache.write({result:r,dataId:"ROOT_QUERY",variables:t,query:e})},e.prototype.reset=function(){return this.cache.reset()},e}(),Jt=function(){function e(e){var t=this;this.defaultOptions={},this.resetStoreCallbacks=[],this.clearStoreCallbacks=[];var r=e.cache,n=e.ssrMode,i=void 0!==n&&n,o=e.ssrForceFetchDelay,a=void 0===o?0:o,s=e.connectToDevTools,u=e.queryDeduplication,l=void 0===u||u,c=e.defaultOptions,f=e.assumeImmutableResults,p=void 0!==f&&f,d=e.resolvers,h=e.typeDefs,m=e.fragmentMatcher,y=e.name,v=e.version,b=e.link;if(!b&&d&&(b=xt.empty()),!b||!r)throw new Ge.a(1);this.link=b,this.cache=r,this.store=new $t(r),this.disableNetworkFetches=i||a>0,this.queryDeduplication=l,this.defaultOptions=c||{},this.typeDefs=h,a&&setTimeout((function(){return t.disableNetworkFetches=!1}),a),this.watchQuery=this.watchQuery.bind(this),this.query=this.query.bind(this),this.mutate=this.mutate.bind(this),this.resetStore=this.resetStore.bind(this),this.reFetchObservableQueries=this.reFetchObservableQueries.bind(this);void 0!==s&&(s&&"undefined"!=typeof window)&&(window.__APOLLO_CLIENT__=this),this.version="2.6.8",this.localState=new Kt({cache:r,client:this,resolvers:d,fragmentMatcher:m}),this.queryManager=new Wt({link:this.link,store:this.store,queryDeduplication:l,ssrMode:i,clientAwareness:{name:y,version:v},localState:this.localState,assumeImmutableResults:p,onBroadcast:function(){t.devToolsHookCb&&t.devToolsHookCb({action:{},state:{queries:t.queryManager.queryStore.getStore(),mutations:t.queryManager.mutationStore.getStore()},dataWithOptimisticResults:t.cache.extract(!0)})}})}return e.prototype.stop=function(){this.queryManager.stop()},e.prototype.watchQuery=function(e){return this.defaultOptions.watchQuery&&(e=Object(le.a)(Object(le.a)({},this.defaultOptions.watchQuery),e)),!this.disableNetworkFetches||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e=Object(le.a)(Object(le.a)({},e),{fetchPolicy:"cache-first"})),this.queryManager.watchQuery(e)},e.prototype.query=function(e){return this.defaultOptions.query&&(e=Object(le.a)(Object(le.a)({},this.defaultOptions.query),e)),Object(Ge.b)("cache-and-network"!==e.fetchPolicy,2),this.disableNetworkFetches&&"network-only"===e.fetchPolicy&&(e=Object(le.a)(Object(le.a)({},e),{fetchPolicy:"cache-first"})),this.queryManager.query(e)},e.prototype.mutate=function(e){return this.defaultOptions.mutate&&(e=Object(le.a)(Object(le.a)({},this.defaultOptions.mutate),e)),this.queryManager.mutate(e)},e.prototype.subscribe=function(e){return this.queryManager.startGraphQLSubscription(e)},e.prototype.readQuery=function(e,t){return void 0===t&&(t=!1),this.cache.readQuery(e,t)},e.prototype.readFragment=function(e,t){return void 0===t&&(t=!1),this.cache.readFragment(e,t)},e.prototype.writeQuery=function(e){var t=this.cache.writeQuery(e);return this.queryManager.broadcastQueries(),t},e.prototype.writeFragment=function(e){var t=this.cache.writeFragment(e);return this.queryManager.broadcastQueries(),t},e.prototype.writeData=function(e){var t=this.cache.writeData(e);return this.queryManager.broadcastQueries(),t},e.prototype.__actionHookForDevTools=function(e){this.devToolsHookCb=e},e.prototype.__requestRaw=function(e){return kt(this.link,e)},e.prototype.initQueryManager=function(){return this.queryManager},e.prototype.resetStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore()})).then((function(){return Promise.all(e.resetStoreCallbacks.map((function(e){return e()})))})).then((function(){return e.reFetchObservableQueries()}))},e.prototype.clearStore=function(){var e=this;return Promise.resolve().then((function(){return e.queryManager.clearStore()})).then((function(){return Promise.all(e.clearStoreCallbacks.map((function(e){return e()})))}))},e.prototype.onResetStore=function(e){var t=this;return this.resetStoreCallbacks.push(e),function(){t.resetStoreCallbacks=t.resetStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.onClearStore=function(e){var t=this;return this.clearStoreCallbacks.push(e),function(){t.clearStoreCallbacks=t.clearStoreCallbacks.filter((function(t){return t!==e}))}},e.prototype.reFetchObservableQueries=function(e){return this.queryManager.reFetchObservableQueries(e)},e.prototype.extract=function(e){return this.cache.extract(e)},e.prototype.restore=function(e){return this.cache.restore(e)},e.prototype.addResolvers=function(e){this.localState.addResolvers(e)},e.prototype.setResolvers=function(e){this.localState.setResolvers(e)},e.prototype.getResolvers=function(){return this.localState.getResolvers()},e.prototype.setLocalStateFragmentMatcher=function(e){this.localState.setFragmentMatcher(e)},e}();function Xt(){return Gt||(Gt=i.a.createContext({})),Gt}var Zt,er=function(e){var t=e.client,r=e.children,n=Xt();return i.a.createElement(n.Consumer,null,(function(e){return void 0===e&&(e={}),t&&e.client!==t&&(e=Object.assign({},e,{client:t})),Object(Ge.b)(e.client,5),i.a.createElement(n.Provider,{value:e},r)}))};!function(e){e[e.Query=0]="Query",e[e.Mutation=1]="Mutation",e[e.Subscription=2]="Subscription"}(Zt||(Zt={}));var tr=new Map;function rr(e){var t;switch(e){case Zt.Query:t="Query";break;case Zt.Mutation:t="Mutation";break;case Zt.Subscription:t="Subscription"}return t}var nr=r(45),ir=r.p+"assets/9c3ea60d1c0efa0dbe902b18b6dec89c.svg";function or(){return i.a.createElement("div",{className:"header"},i.a.createElement("img",{className:"logo",src:ir,alt:"logo"}),i.a.createElement("ul",{className:"header__right"},i.a.createElement("li",null,i.a.createElement(ae,{to:"/create",className:"header__right__newblog"},"Create Blog")),i.a.createElement("li",null,i.a.createElement(ae,{to:"/about"},"About Me"))))}var ar=function(e){var t=document.getElementById("quillEditor");if(!t){var r=document.createElement("script");r.src="https://cdn.quilljs.com/1.3.6/quill.js",r.id="quillEditor",document.body.appendChild(r),r.onload=function(){e&&e()}}t&&e&&e()};function sr(e){return(sr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ur(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function lr(e,t){return(lr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function cr(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=dr(e);if(t){var i=dr(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return fr(this,r)}}function fr(e,t){return!t||"object"!==sr(t)&&"function"!=typeof t?pr(e):t}function pr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function dr(e){return(dr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var hr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&lr(e,t)}(a,e);var t,r,n,o=cr(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this,e)).state={editor:null},t.initializeQuillEditor=t.initializeQuillEditor.bind(pr(t)),t}return t=a,(r=[{key:"componentDidMount",value:function(){ar(this.initializeQuillEditor)}},{key:"initializeQuillEditor",value:function(){this.setState({editor:new window.Quill("#editor",{modules:{toolbar:{container:"#toolbar"}},theme:"snow"})})}},{key:"render",value:function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement("div",{id:"toolbar"},i.a.createElement("select",{className:"ql-size"},i.a.createElement("option",{value:"small"}),i.a.createElement("option",{value:"large"}),i.a.createElement("option",{value:"huge"})),i.a.createElement("button",{className:"ql-bold"}),i.a.createElement("button",{className:"ql-italic"}),i.a.createElement("button",{className:"ql-underline"}),i.a.createElement("button",{className:"ql-strike"}),i.a.createElement("button",{className:"ql-code-block"}),i.a.createElement("button",{className:"ql-script",value:"sub"}),i.a.createElement("button",{className:"ql-script",value:"super"})),i.a.createElement("div",{id:"editor"},i.a.createElement("p",null,"Hello World!"),i.a.createElement("p",null,"Some initial ",i.a.createElement("strong",null,"bold")," text")))}}])&&ur(t.prototype,r),n&&ur(t,n),a}(i.a.Component);function mr(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=e[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw o}}return r}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return yr(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);"Object"===r&&e.constructor&&(r=e.constructor.name);if("Map"===r||"Set"===r)return Array.from(e);if("Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return yr(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function yr(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var vr=i.a.createContext(void 0);var br=function(e){var t=e.children,r=mr(Object(n.useState)(void 0),2),o=r[0],a=r[1];return i.a.createElement(vr.Provider,{value:{currentCategory:o,setCurrentCategory:a}},t)};function gr(e){return(gr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wr(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function _r(e,t){return(_r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Er(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}();return function(){var r,n=Sr(e);if(t){var i=Sr(this).constructor;r=Reflect.construct(n,arguments,i)}else r=n.apply(this,arguments);return xr(this,r)}}function xr(e,t){return!t||"object"!==gr(t)&&"function"!=typeof t?kr(e):t}function kr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Sr(e){return(Sr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var Tr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_r(e,t)}(a,e);var t,r,n,o=Er(a);function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=o.call(this,e)).state={active:!1},t.openTopCategory=t.openTopCategory.bind(kr(t)),t}return t=a,(r=[{key:"openTopCategory",value:function(){this.setState((function(e){return{active:!e.active}}))}},{key:"render",value:function(){var e=this,t=this.props.category;return i.a.createElement(vr.Consumer,null,(function(r){var n=r.setCurrentCategory;return i.a.createElement("ul",{className:"blog__category ".concat(e.state.active?"active":""),onClick:function(){return e.openTopCategory()}},t.name," ▼",t.subCategories.map((function(e){return i.a.createElement("li",{key:e.name,className:"blog__category__item",onClick:function(){return n(t.name)}},e.name)})))}))}}])&&wr(t.prototype,r),n&&wr(t,n),a}(i.a.Component),Or=function(e){var t=e.categories;return i.a.createElement("div",{className:"blog__navigator"},t.map((function(e){return i.a.createElement(Tr,{key:e.name,category:e})})))},Cr=r(11),Nr=r.n(Cr),Rr=function(){function e(e,t){this.isMounted=!1,this.previousOptions={},this.context={},this.options={},this.options=e||{},this.context=t||{}}return e.prototype.getOptions=function(){return this.options},e.prototype.setOptions=function(e,t){void 0===t&&(t=!1),t&&!Object(ye.a)(this.options,e)&&(this.previousOptions=this.options),this.options=e},e.prototype.unmount=function(){this.isMounted=!1},e.prototype.refreshClient=function(){var e=this.options&&this.options.client||this.context&&this.context.client;Object(Ge.b)(!!e,2);var t=!1;return e!==this.client&&(t=!0,this.client=e,this.cleanup()),{client:this.client,isNew:t}},e.prototype.verifyDocumentType=function(e,t){var r=function(e){var t,r,n=tr.get(e);if(n)return n;Object(Ge.b)(!!e&&!!e.kind,1);var i=e.definitions.filter((function(e){return"FragmentDefinition"===e.kind})),o=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"query"===e.operation})),a=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"mutation"===e.operation})),s=e.definitions.filter((function(e){return"OperationDefinition"===e.kind&&"subscription"===e.operation}));Object(Ge.b)(!i.length||o.length||a.length||s.length,2),Object(Ge.b)(o.length+a.length+s.length<=1,3),r=o.length?Zt.Query:Zt.Mutation,o.length||a.length||(r=Zt.Subscription);var u=o.length?o:a.length?a:s;Object(Ge.b)(1===u.length,4);var l=u[0];t=l.variableDefinitions||[];var c={name:l.name&&"Name"===l.name.kind?l.name.value:"data",type:r,variables:t};return tr.set(e,c),c}(e);rr(t),rr(r.type);Object(Ge.b)(r.type===t,3)},e}(),Ar=function(e){function t(t){var r=t.options,n=t.context,i=t.onNewData,o=e.call(this,r,n)||this;return o.previousData={},o.currentObservable={},o.runLazy=!1,o.runLazyQuery=function(e){o.cleanup(),o.runLazy=!0,o.lazyOptions=e,o.onNewData()},o.getExecuteResult=function(){var e=o.getQueryResult();return o.startQuerySubscription(),e},o.obsRefetch=function(e){return o.currentObservable.query.refetch(e)},o.obsFetchMore=function(e){return o.currentObservable.query.fetchMore(e)},o.obsUpdateQuery=function(e){return o.currentObservable.query.updateQuery(e)},o.obsStartPolling=function(e){o.currentObservable&&o.currentObservable.query&&o.currentObservable.query.startPolling(e)},o.obsStopPolling=function(){o.currentObservable&&o.currentObservable.query&&o.currentObservable.query.stopPolling()},o.obsSubscribeToMore=function(e){return o.currentObservable.query.subscribeToMore(e)},o.onNewData=i,o}return Object(le.c)(t,e),t.prototype.execute=function(){this.refreshClient();var e=this.getOptions(),t=e.skip,r=e.query;return(t||r!==this.previousData.query)&&(this.removeQuerySubscription(),this.previousData.query=r),this.updateObservableQuery(),this.isMounted&&this.startQuerySubscription(),this.getExecuteSsrResult()||this.getExecuteResult()},t.prototype.executeLazy=function(){return this.runLazy?[this.runLazyQuery,this.execute()]:[this.runLazyQuery,{loading:!1,networkStatus:Rt.ready,called:!1,data:void 0}]},t.prototype.fetchData=function(){var e=this.getOptions();if(e.skip||!1===e.ssr)return!1;var t=this.currentObservable.query;return!!t.getCurrentResult().loading&&t.result()},t.prototype.afterExecute=function(e){var t=(void 0===e?{}:e).lazy,r=void 0!==t&&t;return this.isMounted=!0,r&&!this.runLazy||this.handleErrorOrCompleted(),this.previousOptions=this.getOptions(),this.unmount.bind(this)},t.prototype.cleanup=function(){this.removeQuerySubscription(),delete this.currentObservable.query,delete this.previousData.result},t.prototype.getOptions=function(){var t=e.prototype.getOptions.call(this);return this.lazyOptions&&(t.variables=Object(le.a)(Object(le.a)({},t.variables),this.lazyOptions.variables),t.context=Object(le.a)(Object(le.a)({},t.context),this.lazyOptions.context)),this.runLazy&&delete t.skip,t},t.prototype.ssrInitiated=function(){return this.context&&this.context.renderPromises},t.prototype.getExecuteSsrResult=function(){var e,t=!1===this.getOptions().ssr,r=this.refreshClient().client.disableNetworkFetches,n=Object(le.a)({loading:!0,networkStatus:Rt.loading,called:!0,data:void 0,stale:!1,client:this.client},this.observableQueryFields());return t&&(this.ssrInitiated()||r)?(this.previousData.result=n,n):(this.ssrInitiated()&&(e=this.context.renderPromises.addQueryPromise(this,this.getExecuteResult)||n),e)},t.prototype.prepareObservableQueryOptions=function(){var e=this.getOptions();this.verifyDocumentType(e.query,Zt.Query);var t=e.displayName||"Query";return!this.ssrInitiated()||"network-only"!==e.fetchPolicy&&"cache-and-network"!==e.fetchPolicy||(e.fetchPolicy="cache-first"),Object(le.a)(Object(le.a)({},e),{displayName:t,context:e.context,metadata:{reactComponent:{displayName:t}}})},t.prototype.initializeObservableQuery=function(){var e,t;if(this.ssrInitiated()&&(this.currentObservable.query=this.context.renderPromises.getSSRObservable(this.getOptions())),!this.currentObservable.query){var r=this.prepareObservableQueryOptions();this.previousData.observableQueryOptions=Object(le.a)(Object(le.a)({},r),{children:null}),this.currentObservable.query=this.refreshClient().client.watchQuery(Object(le.a)({},r)),this.ssrInitiated()&&(null===(t=null===(e=this.context)||void 0===e?void 0:e.renderPromises)||void 0===t||t.registerSSRObservable(this.currentObservable.query,r))}},t.prototype.updateObservableQuery=function(){if(this.currentObservable.query){var e=Object(le.a)(Object(le.a)({},this.prepareObservableQueryOptions()),{children:null});Object(ye.a)(e,this.previousData.observableQueryOptions)||(this.previousData.observableQueryOptions=e,this.currentObservable.query.setOptions(e).catch((function(){})))}else this.initializeObservableQuery()},t.prototype.startQuerySubscription=function(){var e=this;if(!this.currentObservable.subscription&&!this.getOptions().skip){var t=this.currentObservable.query;this.currentObservable.subscription=t.subscribe({next:function(t){var r=t.loading,n=t.networkStatus,i=t.data,o=e.previousData.result;o&&o.loading===r&&o.networkStatus===n&&Object(ye.a)(o.data,i)||e.onNewData()},error:function(t){if(e.resubscribeToQuery(),!t.hasOwnProperty("graphQLErrors"))throw t;var r=e.previousData.result;(r&&r.loading||!Object(ye.a)(t,e.previousData.error))&&(e.previousData.error=t,e.onNewData())}})}},t.prototype.resubscribeToQuery=function(){this.removeQuerySubscription();var e=this.currentObservable.query.getLastError(),t=this.currentObservable.query.getLastResult();this.currentObservable.query.resetLastResults(),this.startQuerySubscription(),Object.assign(this.currentObservable.query,{lastError:e,lastResult:t})},t.prototype.getQueryResult=function(){var e=this.observableQueryFields(),t=this.getOptions();if(t.skip)e=Object(le.a)(Object(le.a)({},e),{data:void 0,error:void 0,loading:!1,called:!0});else{var r=this.currentObservable.query.getCurrentResult(),n=r.loading,i=r.partial,o=r.networkStatus,a=r.errors,s=r.error,u=r.data;if(a&&a.length>0&&(s=new Mt({graphQLErrors:a})),e=Object(le.a)(Object(le.a)({},e),{loading:n,networkStatus:o,error:s,called:!0}),n){var l=this.previousData.result&&this.previousData.result.data;e.data=l&&u?Object(le.a)(Object(le.a)({},l),u):l||u}else if(s)Object.assign(e,{data:(this.currentObservable.query.getLastResult()||{}).data});else{var c=this.currentObservable.query.options.fetchPolicy;if(t.partialRefetch&&!u&&i&&"cache-only"!==c)return Object.assign(e,{loading:!0,networkStatus:Rt.loading}),e.refetch(),e;e.data=u}}return e.client=this.client,this.previousData.loading=this.previousData.result&&this.previousData.result.loading||!1,this.previousData.result=e,this.currentObservable.query&&this.currentObservable.query.resetQueryStoreErrors(),e},t.prototype.handleErrorOrCompleted=function(){if(this.currentObservable.query&&this.previousData.result){var e=this.previousData.result,t=e.data,r=e.loading,n=e.error;if(!r){var i=this.getOptions(),o=i.query,a=i.variables,s=i.onCompleted,u=i.onError;if(this.previousOptions&&!this.previousData.loading&&Object(ye.a)(this.previousOptions.query,o)&&Object(ye.a)(this.previousOptions.variables,a))return;s&&!n?s(t):u&&n&&u(n)}}},t.prototype.removeQuerySubscription=function(){this.currentObservable.subscription&&(this.currentObservable.subscription.unsubscribe(),delete this.currentObservable.subscription)},t.prototype.observableQueryFields=function(){return{variables:this.currentObservable.query.variables,refetch:this.obsRefetch,fetchMore:this.obsFetchMore,updateQuery:this.obsUpdateQuery,startPolling:this.obsStartPolling,stopPolling:this.obsStopPolling,subscribeToMore:this.obsSubscribeToMore}},t}(Rr);function Dr(e,t,r){void 0===r&&(r=!1);var i=Object(n.useContext)(Xt()),o=Object(n.useReducer)((function(e){return e+1}),0),a=o[0],s=o[1],u=t?Object(le.a)(Object(le.a)({},t),{query:e}):{query:e},l=Object(n.useRef)(),c=l.current||new Ar({options:u,context:i,onNewData:function(){c.ssrInitiated()?s():Promise.resolve().then(s)}});c.setOptions(u),c.context=i,c.ssrInitiated()&&!l.current&&(l.current=c);var f,p,d,h={options:Object(le.a)(Object(le.a)({},u),{onError:void 0,onCompleted:void 0}),context:i,tick:a},m=(f=function(){return r?c.executeLazy():c.execute()},p=h,(d=Object(n.useRef)()).current&&Object(ye.a)(p,d.current.key)||(d.current={key:p,value:f()}),d.current.value),y=r?m[1]:m;return Object(n.useEffect)((function(){return l.current||(l.current=c),function(){return c.cleanup()}}),[]),Object(n.useEffect)((function(){return c.afterExecute({lazy:r})}),[y.loading,y.networkStatus,y.error,y.data]),m}var Pr=function(e){function t(t){var r=t.options,n=t.context,i=t.result,o=t.setResult,a=e.call(this,r,n)||this;return a.runMutation=function(e){void 0===e&&(e={}),a.onMutationStart();var t=a.generateNewMutationId();return a.mutate(e).then((function(e){return a.onMutationCompleted(e,t),e})).catch((function(e){if(a.onMutationError(e,t),!a.getOptions().onError)throw e}))},a.verifyDocumentType(r.mutation,Zt.Mutation),a.result=i,a.setResult=o,a.mostRecentMutationId=0,a}return Object(le.c)(t,e),t.prototype.execute=function(e){return this.isMounted=!0,this.verifyDocumentType(this.getOptions().mutation,Zt.Mutation),e.client=this.refreshClient().client,[this.runMutation,e]},t.prototype.afterExecute=function(){return this.isMounted=!0,this.unmount.bind(this)},t.prototype.cleanup=function(){},t.prototype.mutate=function(e){var t=this.getOptions(),r=t.mutation,n=t.variables,i=t.optimisticResponse,o=t.update,a=t.context,s=void 0===a?{}:a,u=t.awaitRefetchQueries,l=void 0!==u&&u,c=t.fetchPolicy,f=Object(le.a)({},e),p=Object.assign({},n,f.variables);return delete f.variables,this.refreshClient().client.mutate(Object(le.a)({mutation:r,optimisticResponse:i,refetchQueries:f.refetchQueries||this.getOptions().refetchQueries,awaitRefetchQueries:l,update:o,context:s,fetchPolicy:c,variables:p},f))},t.prototype.onMutationStart=function(){this.result.loading||this.getOptions().ignoreResults||this.updateResult({loading:!0,error:void 0,data:void 0,called:!0})},t.prototype.onMutationCompleted=function(e,t){var r=this.getOptions(),n=r.onCompleted,i=r.ignoreResults,o=e.data,a=e.errors,s=a&&a.length>0?new Mt({graphQLErrors:a}):void 0;this.isMostRecentMutation(t)&&!i&&this.updateResult({called:!0,loading:!1,data:o,error:s}),n&&n(o)},t.prototype.onMutationError=function(e,t){var r=this.getOptions().onError;this.isMostRecentMutation(t)&&this.updateResult({loading:!1,error:e,data:void 0,called:!0}),r&&r(e)},t.prototype.generateNewMutationId=function(){return++this.mostRecentMutationId},t.prototype.isMostRecentMutation=function(e){return this.mostRecentMutationId===e},t.prototype.updateResult=function(e){!this.isMounted||this.previousResult&&Object(ye.a)(this.previousResult,e)||(this.setResult(e),this.previousResult=e)},t}(Rr);var Ir=function(e){function t(t){var r=t.options,n=t.context,i=t.setResult,o=e.call(this,r,n)||this;return o.currentObservable={},o.setResult=i,o.initialize(r),o}return Object(le.c)(t,e),t.prototype.execute=function(e){if(!0===this.getOptions().skip)return this.cleanup(),{loading:!1,error:void 0,data:void 0,variables:this.getOptions().variables};var t=e;this.refreshClient().isNew&&(t=this.getLoadingResult());var r=this.getOptions().shouldResubscribe;return"function"==typeof r&&(r=!!r(this.getOptions())),!1!==r&&this.previousOptions&&Object.keys(this.previousOptions).length>0&&(this.previousOptions.subscription!==this.getOptions().subscription||!Object(ye.a)(this.previousOptions.variables,this.getOptions().variables)||this.previousOptions.skip!==this.getOptions().skip)&&(this.cleanup(),t=this.getLoadingResult()),this.initialize(this.getOptions()),this.startSubscription(),this.previousOptions=this.getOptions(),Object(le.a)(Object(le.a)({},t),{variables:this.getOptions().variables})},t.prototype.afterExecute=function(){this.isMounted=!0},t.prototype.cleanup=function(){this.endSubscription(),delete this.currentObservable.query},t.prototype.initialize=function(e){this.currentObservable.query||!0===this.getOptions().skip||(this.currentObservable.query=this.refreshClient().client.subscribe({query:e.subscription,variables:e.variables,fetchPolicy:e.fetchPolicy}))},t.prototype.startSubscription=function(){this.currentObservable.subscription||(this.currentObservable.subscription=this.currentObservable.query.subscribe({next:this.updateCurrentData.bind(this),error:this.updateError.bind(this),complete:this.completeSubscription.bind(this)}))},t.prototype.getLoadingResult=function(){return{loading:!0,error:void 0,data:void 0}},t.prototype.updateResult=function(e){this.isMounted&&this.setResult(e)},t.prototype.updateCurrentData=function(e){var t=this.getOptions().onSubscriptionData;this.updateResult({data:e.data,loading:!1,error:void 0}),t&&t({client:this.refreshClient().client,subscriptionData:e})},t.prototype.updateError=function(e){this.updateResult({error:e,loading:!1})},t.prototype.completeSubscription=function(){var e=this.getOptions().onSubscriptionComplete;e&&e(),this.endSubscription()},t.prototype.endSubscription=function(){this.currentObservable.subscription&&(this.currentObservable.subscription.unsubscribe(),delete this.currentObservable.subscription)},t}(Rr);!function(){function e(){this.queryPromises=new Map,this.queryInfoTrie=new Map}e.prototype.registerSSRObservable=function(e,t){this.lookupQueryInfo(t).observable=e},e.prototype.getSSRObservable=function(e){return this.lookupQueryInfo(e).observable},e.prototype.addQueryPromise=function(e,t){return this.lookupQueryInfo(e.getOptions()).seen?t():(this.queryPromises.set(e.getOptions(),new Promise((function(t){t(e.fetchData())}))),null)},e.prototype.hasPromises=function(){return this.queryPromises.size>0},e.prototype.consumeAndAwaitPromises=function(){var e=this,t=[];return this.queryPromises.forEach((function(r,n){e.lookupQueryInfo(n).seen=!0,t.push(r)})),this.queryPromises.clear(),Promise.all(t)},e.prototype.lookupQueryInfo=function(e){var t=this.queryInfoTrie,r=e.query,n=e.variables,i=t.get(r)||new Map;t.has(r)||t.set(r,i);var o=JSON.stringify(n),a=i.get(o)||{seen:!1,observable:null};return i.has(o)||i.set(o,a),a}}();function jr(e){var t=e.children,r=function(e,t){return Dr(e,t,!1)}(e.query,Object(le.e)(e,["children","query"]));return t&&r?t(r):null}function qr(e){var t=function(e,t){var r=Object(n.useContext)(Xt()),i=Object(n.useState)({called:!1,loading:!1}),o=i[0],a=i[1],s=t?Object(le.a)(Object(le.a)({},t),{mutation:e}):{mutation:e},u=Object(n.useRef)(),l=(u.current||(u.current=new Pr({options:s,context:r,result:o,setResult:a})),u.current);return l.setOptions(s),l.context=r,Object(n.useEffect)((function(){return l.afterExecute()})),l.execute(o)}(e.mutation,e),r=t[0],i=t[1];return e.children?e.children(r,i):null}function Lr(e){var t=function(e,t){var r=Object(n.useContext)(Xt()),i=t?Object(le.a)(Object(le.a)({},t),{subscription:e}):{subscription:e},o=Object(n.useState)({loading:!i.skip,error:void 0,data:void 0}),a=o[0],s=o[1],u=Object(n.useRef)(),l=(u.current||(u.current=new Ir({options:i,context:r,setResult:s})),u.current);return l.setOptions(i,!0),l.context=r,Object(n.useEffect)((function(){return l.afterExecute()})),Object(n.useEffect)((function(){return l.cleanup.bind(l)}),[]),l.execute(a)}(e.subscription,e);return e.children&&t?e.children(t):null}(jr||(jr={})).propTypes={client:l.a.object,children:l.a.func.isRequired,fetchPolicy:l.a.string,notifyOnNetworkStatusChange:l.a.bool,onCompleted:l.a.func,onError:l.a.func,pollInterval:l.a.number,query:l.a.object.isRequired,variables:l.a.object,ssr:l.a.bool,partialRefetch:l.a.bool,returnPartialData:l.a.bool},(qr||(qr={})).propTypes={mutation:l.a.object.isRequired,variables:l.a.object,optimisticResponse:l.a.oneOfType([l.a.object,l.a.func]),refetchQueries:l.a.oneOfType([l.a.arrayOf(l.a.oneOfType([l.a.string,l.a.object])),l.a.func]),awaitRefetchQueries:l.a.bool,update:l.a.func,children:l.a.func.isRequired,onCompleted:l.a.func,onError:l.a.func,fetchPolicy:l.a.string},(Lr||(Lr={})).propTypes={subscription:l.a.object.isRequired,variables:l.a.object,children:l.a.func,onSubscriptionData:l.a.func,onSubscriptionComplete:l.a.func,shouldResubscribe:l.a.oneOfType([l.a.func,l.a.bool])};var Mr=function(e){var t=e.error;return n.createElement(n.Fragment,null,t)},Fr=(r(76),function(e){var t,r,n=e.full;return i.a.createElement("div",{className:"loader",style:n&&{height:(t=document.getElementById("header")&&document.getElementById("header").offsetHeight,r=document.getElementById("footer")&&document.getElementById("footer").offsetHeight,window.innerHeight-t-r)}},i.a.createElement("div",{className:"loader__items"},i.a.createElement("span",null),i.a.createElement("span",null),i.a.createElement("span",null)))});function Br(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ur(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Br(Object(r),!0).forEach((function(t){Qr(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Br(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function Qr(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Vr(e){return function(t){var r=t,n=r.children,o=r.displayError,a=void 0===o||o,s=r.displayLoader,u=void 0===s||s,l=r.renderOnError,c=void 0!==l&&l,f=r.alwaysRender,p=void 0!==f&&f,d=r.fetchPolicy,h=void 0===d?"cache-and-network":d,m=r.errorPolicy,y=r.loaderFull,v=r.skip,b=r.variables,g=r.onCompleted;return i.a.createElement(jr,{query:e,variables:b,skip:v,fetchPolicy:h,errorPolicy:m,onCompleted:g},(function(t){var r=t.error,o=t.loading,s=t.data,l=t.fetchMore,f=function(e,t){try{var r=e();return void 0===r?t:r}catch(e){return t}}((function(){return!!Object.keys(s).length}),!1);return a&&r&&!f?i.a.createElement(Mr,{error:r.message}):u&&o&&!f?i.a.createElement(Fr,{full:y}):f||c&&r||p?n(Ur(Ur({},t),{},{loadMore:function(t,r){return l({query:e,updateQuery:function(e,r){var n=r.fetchMoreResult;return n?t(e,n):e},variables:Ur(Ur({},b),r)})}})):null}))}}function zr(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\n  query BlogsForCategory($categoryId: String!){\n    blogsForCategory(categoryId: $categoryId) {\n        id\n        content\n    }\n  }\n"]);return zr=function(){return e},e}var Kr=Vr(Nr()(zr())),Hr=function(e){var t=e.pagedBlogs;return i.a.createElement(vr.Consumer,null,(function(e){var r=e.currentCategory;if(null==r){if(t.edges.length>0){var n=t.edges.map((function(e){return i.a.createElement("p",{key:e.node.id},e.node.content)}));return i.a.createElement(i.a.Fragment,null,n)}return i.a.createElement("p",null,"The author is too lazy, he does not have any blogs currrently")}return i.a.createElement(Kr,{variables:{categoryId:r}},(function(e){var t=e.data;if(t&&t.blogsForCategory&&t.blogsForCategory.length>0){var r=t&&t.blogsForCategory.map((function(e){return i.a.createElement("p",{key:e.id},e.content)}));return i.a.createElement(i.a.Fragment,null,r)}return i.a.createElement("p",null,"The author has not created any blogs")}))}))},Gr=function(){return i.a.createElement("p",{className:"blogDateSelector"}," show all blogs for month ")},Yr=(r(52),r.p+"assets/96a8d2d69ce8b170b4733241dd02bea2.svg");function Wr(){return i.a.createElement("div",{className:"footer"},i.a.createElement("img",{className:"footer__tux",src:Yr,alt:"tux"}))}function $r(){var e=function(e,t){t||(t=e.slice(0));return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}(["\nquery BlogList($cursor: String) {\n    blogs(first: 10, after: $cursor) {\n      edges {\n        cursor\n        node {\n            id\n            summary\n            content\n        }\n      }\n    pageInfo {\n        hasPreviousPage\n        hasNextPage\n        }\n    }\n    categories{\n        id\n        name\n        subCategories {\n            id\n            name\n        } \n    }\n}\n"]);return $r=function(){return e},e}var Jr=Vr(Nr()($r())),Xr=function(){return n.createElement(Jr,null,(function(e){var t=e.data;return n.createElement("div",{className:"page__blog"},n.createElement(br,null,n.createElement(Or,{categories:t.categories}),n.createElement(Hr,{pagedBlogs:t.blogs})),n.createElement(Gr,null))}))},Zr=r.p+"assets/ffe7a32498ba9a3db9c1538c4a723776.png";function en(){return n.createElement(n.Fragment,null,n.createElement("img",{className:"profile",src:Zr,alt:"Profile"}),n.createElement("p",null,"Hi,",n.createElement("span",{role:"img","aria-label":"Panda"},"😬"),"! Welcome to my personal blog. My name Ryan. I love coding. I like the feeling of converting technology into useful products to improve people's lifes."),n.createElement("p",null,"My blog will contain machine learning, and different frameworks of frontend and backend.The content will will be continuously updated. Stay tuned."))}var tn=new pt,rn=new Jt({link:new At({uri:"".concat(nr.a,"/graphql")}),cache:tn});tn.writeData({data:{}});var nn=function(){return i.a.createElement(er,{client:rn},i.a.createElement(ee,null,i.a.createElement(or,null),i.a.createElement(Z,null,i.a.createElement(G,{exact:!0,path:"/"},i.a.createElement(Xr,null)),i.a.createElement(G,{path:"/about"},i.a.createElement(en,null)),i.a.createElement(G,{path:"/create"},i.a.createElement(hr,null))),i.a.createElement(Wr,null)))},on=r(54);a.a.render(i.a.createElement(nn,null),document.getElementById("root")),on.a()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zdG9yZVV0aWxzLnRzIiwid2VicGFjazovLy8uLi9zcmMvZGlyZWN0aXZlcy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2ZyYWdtZW50cy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvYXNzaWduLnRzIiwid2VicGFjazovLy8uLi9zcmMvZ2V0RnJvbUFTVC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvZmlsdGVySW5QbGFjZS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3RyYW5zZm9ybS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvY2FuVXNlLnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbC9jbG9uZURlZXAudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlsL2Vudmlyb25tZW50LnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbC9lcnJvckhhbmRsaW5nLnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbC9tYXliZURlZXBGcmVlemUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlsL21lcmdlRGVlcC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvd2Fybk9uY2UudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9pbnZhcmlhbnQudHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvdmlzaXRvci5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL2VxdWFsaXR5LnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvZG9tZWxlbWVudHR5cGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaW5oZXJpdHMvaW5oZXJpdHNfYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC10YWcvc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvYXN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvcHJvY2Vzc05vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3BlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvanN1dGlscy9ub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGV2QXNzZXJ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2Vycm9yL3N5bnRheEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL3BvbHlmaWxscy9zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Rva2VuS2luZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9ibG9ja1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2NvbnZlcnROb2RlVG9FbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbm9kZV9tb2R1bGVzL2h0bWxwYXJzZXIyL2xpYi9Ub2tlbml6ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9kb21oYW5kbGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvZG9taGFuZGxlci9saWIvbm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZW5jb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL1dyaXRhYmxlU3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi91dGlscy9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi91dGlscy9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnN0YW50cy50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3VkL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3ltYm9sLW9ic2VydmFibGUvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL3BvbnlmaWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy96ZW4tb2JzZXJ2YWJsZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZmFzdC1qc29uLXN0YWJsZS1zdHJpbmdpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlV29ya2VyLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5zY3NzPzcyMjMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5zY3NzPzRjZTEiLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC5zY3NzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wYXJzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3IvR3JhcGhRTEVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50TG9jYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uva2luZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uvc291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xleGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGVmaW5lVG9KU09OLmpzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2xvYWRlci9zY3NzL2luZGV4LnNjc3M/NzZmYiIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9sb2FkZXIvc2Nzcy9pbmRleC5zY3NzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9oYXJtb255LW1vZHVsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvemVuLW9ic2VydmFibGUvbGliL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi91dGlscy9pc0VtcHR5VGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9lbGVtZW50VHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbm9kZV9tb2R1bGVzL2RvbWhhbmRsZXIvbGliL2VsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvRmVlZEhhbmRsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvc3RyaW5naWZ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb20tc2VyaWFsaXplci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZG9tZWxlbWVudHR5cGUvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9lbnRpdGllcy9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2VudGl0aWVzL2xpYi9kZWNvZGVfY29kZXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL3RyYXZlcnNhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbm9kZV9tb2R1bGVzL2RvbXV0aWxzL2xpYi9tYW5pcHVsYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvcXVlcnlpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9kb211dGlscy9saWIvbGVnYWN5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvZG9tdXRpbHMvbGliL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvU3RyZWFtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHJpbmdfZGVjb2Rlci9saWIvc3RyaW5nX2RlY29kZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0cmluZ19kZWNvZGVyL25vZGVfbW9kdWxlcy9zYWZlLWJ1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYmFzZTY0LWpzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9idWZmZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL25vZGVfbW9kdWxlcy9odG1scGFyc2VyMi9saWIvUHJveHlIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9ub2RlX21vZHVsZXMvaHRtbHBhcnNlcjIvbGliL0NvbGxlY3RpbmdIYW5kbGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvZWxlbWVudFR5cGVzL1RleHRFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2VsZW1lbnRUeXBlcy9UYWdFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL3V0aWxzL2h0bWxBdHRyaWJ1dGVzVG9SZWFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2RvbS9hdHRyaWJ1dGVzL0Jvb2xlYW5BdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvZG9tL2F0dHJpYnV0ZXMvUmVhY3RBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvdXRpbHMvaW5saW5lU3R5bGVUb09iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2RvbS9lbGVtZW50cy9Wb2lkRWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWh0bWwtcGFyc2VyL2xpYi9lbGVtZW50VHlwZXMvU3R5bGVFbGVtZW50VHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaHRtbC1wYXJzZXIvbGliL2VsZW1lbnRUeXBlcy9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1odG1sLXBhcnNlci9saWIvSHRtbFBhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXNtL2hpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21pbmktY3JlYXRlLXJlYWN0LWNvbnRleHQvZGlzdC9lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvUm91dGVyQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvTWVtb3J5Um91dGVyLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL0xpZmVjeWNsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9ob29rcy5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvdXRpbHMvbG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9MaW5rLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3R5cGVzL0NhY2hlLnRzIiwid2VicGFjazovLy8uLi9zcmMvY2FjaGUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9zbG90LnRzIiwid2VicGFjazovLy8uLi9zcmMvY29udGV4dC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2VudHJ5LnRzIiwid2VicGFjazovLy8uLi9zcmMva2V5LXRyaWUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2ZyYWdtZW50TWF0Y2hlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RlcFRyYWNraW5nQ2FjaGUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZWFkRnJvbVN0b3JlLnRzIiwid2VicGFjazovLy8uLi9zcmMvb2JqZWN0Q2FjaGUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy93cml0ZVRvU3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9pbk1lbW9yeUNhY2hlLnRzIiwid2VicGFjazovLy8uLi9zcmMvemVuT2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2xpbmtVdGlscy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2xpbmsudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9odHRwTGluay50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvcmUvbmV0d29ya1N0YXR1cy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvT2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvYXJyYXlzLnRzIiwid2VicGFjazovLy8uLi9zcmMvZXJyb3JzL0Fwb2xsb0Vycm9yLnRzIiwid2VicGFjazovLy8uLi9zcmMvY29yZS90eXBlcy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvcmUvT2JzZXJ2YWJsZVF1ZXJ5LnRzIiwid2VicGFjazovLy8uLi9zcmMvZGF0YS9tdXRhdGlvbnMudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9kYXRhL3F1ZXJpZXMudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb3JlL0xvY2FsU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlsL2NhcGl0YWxpemVGaXJzdExldHRlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL3V0aWwvb2JzZXJ2YWJsZXMudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9jb3JlL1F1ZXJ5TWFuYWdlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQvQXBvbGxvQ29udGV4dC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RhdGEvc3RvcmUudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9BcG9sbG9DbGllbnQudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy92ZXJzaW9uLnRzIiwid2VicGFjazovLy8uLi9zcmMvcGFyc2VyL3BhcnNlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2NvbnRleHQvQXBvbGxvUHJvdmlkZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvbG9nby5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvSGVhZGVyLnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9yaWNodGV4dC9sb2FkUXVpbGwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvcmljaHRleHQvUXVpbGxFZGl0b3IudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jsb2cvY29udGV4dC9DYXRlZ29yeUNvbnRleHQudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jsb2cvbWVudS9CbG9nTWVudUl0ZW0udHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jsb2cvbWVudS9CbG9nQ2F0ZWdvcnlOYXZpZ2F0b3IudHN4Iiwid2VicGFjazovLy8uLi9zcmMvZGF0YS9PcGVyYXRpb25EYXRhLnRzIiwid2VicGFjazovLy8uLi9zcmMvZGF0YS9RdWVyeURhdGEudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy91c2VCYXNlUXVlcnkudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy91c2VEZWVwTWVtby50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RhdGEvTXV0YXRpb25EYXRhLnRzIiwid2VicGFjazovLy8uLi9zcmMvZGF0YS9TdWJzY3JpcHRpb25EYXRhLnRzIiwid2VicGFjazovLy8uLi9zcmMvc3NyL1JlbmRlclByb21pc2VzLnRzIiwid2VicGFjazovLy8uLi9zcmMvUXVlcnkudHN4Iiwid2VicGFjazovLy8uLi9zcmMvdXNlUXVlcnkudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9NdXRhdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4uL3NyYy91c2VNdXRhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL1N1YnNjcmlwdGlvbi50c3giLCJ3ZWJwYWNrOi8vLy4uL3NyYy91c2VTdWJzY3JpcHRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvZXJyb3IvaW5kZXgudHN4Iiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2xvYWRlci9pbmRleC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvcmUvcXVlcmllcy50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9xdWVyaWVzLnRzIiwid2VicGFjazovLy8uL3NyYy9jb21wb25lbnRzL2Jsb2cvY29udGVudC9CbG9nQ29udGVudC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbXBvbmVudHMvYmxvZy9kYXRlcGlja2VyL0Jsb2dEYXRlU2VsZWN0b3IudHN4Iiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvdHV4LnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9Gb290ZXIudHN4Iiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9xdWVyaWVzLnRzIiwid2VicGFjazovLy8uL3NyYy9wYWdlcy9Ib21lUGFnZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9wcm9maWxlLnBuZyIsIndlYnBhY2s6Ly8vLi9zcmMvcGFnZXMvQWJvdXRNZS50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0FwcC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzeCJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJleHRlbmRTdGF0aWNzIiwiYiIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJfX2V4dGVuZHMiLCJfXyIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIl9fYXNzaWduIiwiYXNzaWduIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXBwbHkiLCJfX3Jlc3QiLCJlIiwiaW5kZXhPZiIsImdldE93blByb3BlcnR5U3ltYm9scyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsInRoZW4iLCJfX2dlbmVyYXRvciIsImJvZHkiLCJmIiwieSIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJpdGVyYXRvciIsInYiLCJvcCIsIlR5cGVFcnJvciIsInBvcCIsInB1c2giLCJfX3NwcmVhZEFycmF5cyIsImlsIiwiayIsImEiLCJqIiwiamwiLCJ2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24iLCJhcmdPYmoiLCJ2YXJpYWJsZXMiLCJraW5kIiwiaXNJbnRWYWx1ZSIsImlzRmxvYXRWYWx1ZSIsIk51bWJlciIsImlzQm9vbGVhblZhbHVlIiwiaXNTdHJpbmdWYWx1ZSIsImlzT2JqZWN0VmFsdWUiLCJmaWVsZHMiLCJtYXAiLCJvYmoiLCJpc1ZhcmlhYmxlIiwidmFyaWFibGVWYWx1ZSIsImlzTGlzdFZhbHVlIiwidmFsdWVzIiwibGlzdFZhbHVlIiwibmVzdGVkQXJnQXJyYXlPYmoiLCJpc0VudW1WYWx1ZSIsImlzTnVsbFZhbHVlIiwic3RvcmVLZXlOYW1lRnJvbUZpZWxkIiwiZmllbGQiLCJkaXJlY3RpdmVzT2JqIiwiZGlyZWN0aXZlcyIsImZvckVhY2giLCJkaXJlY3RpdmUiLCJnZXRTdG9yZUtleU5hbWUiLCJLTk9XTl9ESVJFQ1RJVkVTIiwiZmllbGROYW1lIiwiYXJncyIsImZpbHRlcktleXMiLCJzb3J0IiwiSlNPTiIsInN0cmluZ2lmeSIsImNvbXBsZXRlRmllbGROYW1lIiwic3RyaW5naWZpZWRBcmdzIiwia2V5cyIsImFyZ3VtZW50c09iamVjdEZyb21GaWVsZCIsInJlc3VsdEtleU5hbWVGcm9tRmllbGQiLCJhbGlhcyIsImlzRmllbGQiLCJzZWxlY3Rpb24iLCJpc0lubGluZUZyYWdtZW50IiwiaXNJZFZhbHVlIiwiaWRPYmplY3QiLCJ0eXBlIiwiZ2VuZXJhdGVkIiwidG9JZFZhbHVlIiwiaWRDb25maWciLCJpZCIsInR5cGVuYW1lIiwidW5kZWZpbmVkIiwiaXNKc29uVmFsdWUiLCJqc29uT2JqZWN0IiwiZ2V0RGlyZWN0aXZlSW5mb0Zyb21GaWVsZCIsInNob3VsZEluY2x1ZGUiLCJmaWx0ZXIiLCJpc0luY2x1c2lvbkRpcmVjdGl2ZSIsImRpcmVjdGl2ZUFyZ3VtZW50cyIsImlmQXJndW1lbnQiLCJpZlZhbHVlIiwiZXZlcnkiLCJldmFsZWRWYWx1ZSIsImhhc0RpcmVjdGl2ZXMiLCJuYW1lcyIsImRvYyIsIkRpcmVjdGl2ZSIsIm5vZGUiLCJnZXREaXJlY3RpdmVOYW1lcyIsInNvbWUiLCJoYXNDbGllbnRFeHBvcnRzIiwiZG9jdW1lbnQiLCJnZXRGcmFnbWVudFF1ZXJ5RG9jdW1lbnQiLCJmcmFnbWVudE5hbWUiLCJhY3R1YWxGcmFnbWVudE5hbWUiLCJmcmFnbWVudHMiLCJkZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJvcGVyYXRpb24iLCJzZWxlY3Rpb25TZXQiLCJzZWxlY3Rpb25zIiwidGFyZ2V0Iiwic291cmNlcyIsInNvdXJjZSIsImNoZWNrRG9jdW1lbnQiLCJvcGVyYXRpb25zIiwiZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbiIsImdldE9wZXJhdGlvbk5hbWUiLCJ4IiwiZ2V0RnJhZ21lbnREZWZpbml0aW9ucyIsImdldFF1ZXJ5RGVmaW5pdGlvbiIsInF1ZXJ5RGVmIiwiZ2V0TWFpbkRlZmluaXRpb24iLCJxdWVyeURvYyIsImZyYWdtZW50RGVmaW5pdGlvbiIsImNyZWF0ZUZyYWdtZW50TWFwIiwic3ltVGFibGUiLCJmcmFnbWVudCIsImdldERlZmF1bHRWYWx1ZXMiLCJ2YXJpYWJsZURlZmluaXRpb25zIiwiZGVmYXVsdFZhbHVlcyIsImRlZmF1bHRWYWx1ZSIsInZhcmlhYmxlIiwiZGVmYXVsdFZhbHVlT2JqIiwiZmlsdGVySW5QbGFjZSIsImFycmF5IiwidGVzdCIsImNvbnRleHQiLCJlbGVtIiwiVFlQRU5BTUVfRklFTEQiLCJudWxsSWZEb2NJc0VtcHR5IiwiaXNFbXB0eSIsImZyYWdtZW50RGVmIiwiZ2V0RnJhZ21lbnREZWZpbml0aW9uIiwiZ2V0RGlyZWN0aXZlTWF0Y2hlciIsImRpciIsInJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQiLCJ2YXJpYWJsZXNJblVzZSIsInZhcmlhYmxlc1RvUmVtb3ZlIiwiZnJhZ21lbnRTcHJlYWRzSW5Vc2UiLCJmcmFnbWVudFNwcmVhZHNUb1JlbW92ZSIsIm1vZGlmaWVkRG9jIiwiVmFyaWFibGUiLCJlbnRlciIsIl9rZXkiLCJwYXJlbnQiLCJGaWVsZCIsInJlbW92ZSIsImFyZyIsImdldEFsbEZyYWdtZW50U3ByZWFkc0Zyb21TZWxlY3Rpb25TZXQiLCJhbGxGcmFnbWVudHMiLCJmcmFnIiwiRnJhZ21lbnRTcHJlYWQiLCJjb25maWciLCJhcmdNYXRjaGVyIiwiYXJndW1lbnQiLCJhQ29uZmlnIiwiZ2V0QXJndW1lbnRNYXRjaGVyIiwiT3BlcmF0aW9uRGVmaW5pdGlvbiIsInZhckRlZiIsImFyZ0NvbmZpZyIsIkFyZ3VtZW50IiwicmVtb3ZlQXJndW1lbnRzRnJvbURvY3VtZW50IiwiZnMiLCJkZWYiLCJGcmFnbWVudERlZmluaXRpb24iLCJyZW1vdmVGcmFnbWVudFNwcmVhZEZyb21Eb2N1bWVudCIsImFkZFR5cGVuYW1lVG9Eb2N1bWVudCIsIlNlbGVjdGlvblNldCIsImxhc3RJbmRleE9mIiwiY29ubmVjdGlvblJlbW92ZUNvbmZpZyIsIndpbGxSZW1vdmUiLCJyZW1vdmVDb25uZWN0aW9uRGlyZWN0aXZlRnJvbURvY3VtZW50IiwiYnVpbGRRdWVyeUZyb21TZWxlY3Rpb25TZXQiLCJyZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50IiwiY2FuVXNlV2Vha01hcCIsIldlYWtNYXAiLCJuYXZpZ2F0b3IiLCJwcm9kdWN0IiwidG9TdHJpbmciLCJjbG9uZURlZXAiLCJjbG9uZURlZXBIZWxwZXIiLCJ2YWwiLCJzZWVuIiwiaGFzIiwic2xpY2UiLCJzZXQiLCJjaGlsZCIsImdldFByb3RvdHlwZU9mIiwiTWFwIiwiaXNFbnYiLCJlbnYiLCJwcm9jZXNzIiwiaXNQcm9kdWN0aW9uIiwiaXNUZXN0IiwidHJ5RnVuY3Rpb25PckxvZ0Vycm9yIiwiY29uc29sZSIsImVycm9yIiwiZ3JhcGhRTFJlc3VsdEhhc0Vycm9yIiwiZXJyb3JzIiwibWF5YmVEZWVwRnJlZXplIiwiZGVlcEZyZWV6ZSIsImZyZWV6ZSIsImdldE93blByb3BlcnR5TmFtZXMiLCJwcm9wIiwiaXNGcm96ZW4iLCJtZXJnZURlZXAiLCJtZXJnZURlZXBBcnJheSIsImNvdW50IiwicGFzdENvcGllcyIsInNoYWxsb3dDb3B5Rm9yTWVyZ2UiLCJtZXJnZUhlbHBlciIsImlzT2JqZWN0IiwiaXNFeHRlbnNpYmxlIiwic291cmNlS2V5Iiwic291cmNlVmFsdWUiLCJ0YXJnZXRWYWx1ZSIsImlzQXJyYXkiLCJtZXNzYWdlIiwiZ2VuZXJpY01lc3NhZ2UiLCJmcmFtZXNUb1BvcCIsIkludmFyaWFudEVycm9yIiwiRXJyb3IiLCJpbnZhcmlhbnQiLCJjb25kaXRpb24iLCJ3cmFwQ29uc29sZU1ldGhvZCIsIm1ldGhvZCIsIndhcm4iLCJwcm9jZXNzU3R1YiIsIkZ1bmN0aW9uIiwiYXRMZWFzdFdlVHJpZWQiLCJ2aXNpdCIsInJvb3QiLCJ2aXNpdG9yIiwidmlzaXRvcktleXMiLCJRdWVyeURvY3VtZW50S2V5cyIsInN0YWNrIiwiaW5BcnJheSIsImluZGV4IiwiZWRpdHMiLCJwYXRoIiwiYW5jZXN0b3JzIiwibmV3Um9vdCIsImlzTGVhdmluZyIsImlzRWRpdGVkIiwiY2xvbmUiLCJfaTIiLCJfT2JqZWN0JGtleXMyIiwiZWRpdE9mZnNldCIsImlpIiwiZWRpdEtleSIsImVkaXRWYWx1ZSIsInNwbGljZSIsInByZXYiLCJfdmlzaXRvcktleXMkbm9kZSRraW4iLCJfYXN0IiwiaXNOb2RlIiwiY29uY2F0IiwiX2luc3BlY3QiLCJkZWZhdWx0IiwidmlzaXRGbiIsImdldFZpc2l0Rm4iLCJCUkVBSyIsInZpc2l0SW5QYXJhbGxlbCIsInZpc2l0b3JzIiwic2tpcHBpbmciLCJmbiIsImxlYXZlIiwiTmFtZSIsIkRvY3VtZW50IiwiVmFyaWFibGVEZWZpbml0aW9uIiwiSW5saW5lRnJhZ21lbnQiLCJJbnRWYWx1ZSIsIkZsb2F0VmFsdWUiLCJTdHJpbmdWYWx1ZSIsIkJvb2xlYW5WYWx1ZSIsIk51bGxWYWx1ZSIsIkVudW1WYWx1ZSIsIkxpc3RWYWx1ZSIsIk9iamVjdFZhbHVlIiwiT2JqZWN0RmllbGQiLCJOYW1lZFR5cGUiLCJMaXN0VHlwZSIsIk5vbk51bGxUeXBlIiwiU2NoZW1hRGVmaW5pdGlvbiIsIk9wZXJhdGlvblR5cGVEZWZpbml0aW9uIiwiU2NhbGFyVHlwZURlZmluaXRpb24iLCJPYmplY3RUeXBlRGVmaW5pdGlvbiIsIkZpZWxkRGVmaW5pdGlvbiIsIklucHV0VmFsdWVEZWZpbml0aW9uIiwiSW50ZXJmYWNlVHlwZURlZmluaXRpb24iLCJVbmlvblR5cGVEZWZpbml0aW9uIiwiRW51bVR5cGVEZWZpbml0aW9uIiwiRW51bVZhbHVlRGVmaW5pdGlvbiIsIklucHV0T2JqZWN0VHlwZURlZmluaXRpb24iLCJEaXJlY3RpdmVEZWZpbml0aW9uIiwiU2NoZW1hRXh0ZW5zaW9uIiwiU2NhbGFyVHlwZUV4dGVuc2lvbiIsIk9iamVjdFR5cGVFeHRlbnNpb24iLCJJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uIiwiVW5pb25UeXBlRXh0ZW5zaW9uIiwiRW51bVR5cGVFeHRlbnNpb24iLCJJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24iLCJraW5kVmlzaXRvciIsImtpbmRTcGVjaWZpY1Zpc2l0b3IiLCJzcGVjaWZpY1Zpc2l0b3IiLCJzcGVjaWZpY0tpbmRWaXNpdG9yIiwicHJldmlvdXNDb21wYXJpc29ucyIsImVxdWFsIiwiY2hlY2siLCJhVGFnIiwiYlRhZyIsInByZXZpb3VzbHlDb21wYXJlZCIsImFLZXlzIiwiYktleXMiLCJrZXlDb3VudCIsInNpemUiLCJhSXRlcmF0b3IiLCJlbnRyaWVzIiwiaXNNYXAiLCJpbmZvIiwiYUtleSIsImFWYWx1ZSIsImNsZWFyIiwiYlNldCIsIlNldCIsImFkZCIsIlBhcnNlciIsIkRvbUhhbmRsZXIiLCJkZWZpbmVQcm9wIiwiVG9rZW5pemVyIiwiRWxlbWVudFR5cGUiLCJEZWZhdWx0SGFuZGxlciIsIkZlZWRIYW5kbGVyIiwicGFyc2VET00iLCJkYXRhIiwib3B0aW9ucyIsImhhbmRsZXIiLCJlbmQiLCJkb20iLCJwYXJzZUZlZWQiLCJmZWVkIiwiY3JlYXRlRG9tU3RyZWFtIiwiY2IiLCJlbGVtZW50Q2IiLCJFVkVOVFMiLCJhdHRyaWJ1dGUiLCJjZGF0YXN0YXJ0IiwiY2RhdGFlbmQiLCJ0ZXh0IiwicHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiY29tbWVudCIsImNvbW1lbnRlbmQiLCJjbG9zZXRhZyIsIm9wZW50YWciLCJvcGVudGFnbmFtZSIsIlRleHQiLCJDb21tZW50IiwiU2NyaXB0IiwiU3R5bGUiLCJUYWciLCJDREFUQSIsIkRvY3R5cGUiLCJpc1RhZyIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwicXVldWUiLCJkcmFpbmluZyIsInF1ZXVlSW5kZXgiLCJjbGVhblVwTmV4dFRpY2siLCJkcmFpblF1ZXVlIiwidGltZW91dCIsImxlbiIsInJ1biIsIm1hcmtlciIsInJ1bkNsZWFyVGltZW91dCIsIkl0ZW0iLCJub29wIiwibmV4dFRpY2siLCJ0aXRsZSIsImJyb3dzZXIiLCJhcmd2IiwidmVyc2lvbiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwidW1hc2siLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJUZW1wQ3RvciIsInBhcnNlIiwibm9ybWFsaXplIiwic3RyaW5nIiwicmVwbGFjZSIsInRyaW0iLCJkb2NDYWNoZSIsImZyYWdtZW50U291cmNlTWFwIiwicHJpbnRGcmFnbWVudFdhcm5pbmdzIiwiZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiLCJwYXJzZURvY3VtZW50IiwiY2FjaGVLZXkiLCJwYXJzZWQiLCJzdHJpcExvYyIsInJlbW92ZUxvY0F0VGhpc0xldmVsIiwiZG9jVHlwZSIsImxvYyIsInN0YXJ0VG9rZW4iLCJlbmRUb2tlbiIsInZhbHVlVHlwZSIsImFzdCIsImFzdEZyYWdtZW50TWFwIiwic3Vic3RyaW5nIiwic3RhcnQiLCJwcm9jZXNzRnJhZ21lbnRzIiwiZ3FsIiwibGl0ZXJhbHMiLCJyZXNldENhY2hlcyIsImRpc2FibGVGcmFnbWVudFdhcm5pbmdzIiwiZW5hYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiLCJkaXNhYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMiLCJtZW1vIiwiaXNPbGRJRSIsIkJvb2xlYW4iLCJ3aW5kb3ciLCJhbGwiLCJhdG9iIiwiZ2V0VGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJxdWVyeVNlbGVjdG9yIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJtb2R1bGVzVG9Eb20iLCJsaXN0IiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiaXRlbSIsImJhc2UiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJzZXRBdHRyaWJ1dGUiLCJpbnNlcnQiLCJhcHBlbmRDaGlsZCIsInRleHRTdG9yZSIsInJlcGxhY2VUZXh0IiwicmVwbGFjZW1lbnQiLCJqb2luIiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3NzTm9kZSIsImNyZWF0ZVRleHROb2RlIiwiY2hpbGROb2RlcyIsInJlbW92ZUNoaWxkIiwiaW5zZXJ0QmVmb3JlIiwiYXBwbHlUb1RhZyIsInJlbW92ZUF0dHJpYnV0ZSIsImJ0b2EiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImZpcnN0Q2hpbGQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwidXBkYXRlIiwic3R5bGVJbmRleCIsInBhcmVudE5vZGUiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJ1c2VTb3VyY2VNYXAiLCJjb250ZW50IiwiY3NzTWFwcGluZyIsInNvdXJjZU1hcHBpbmciLCJiYXNlNjQiLCJzb3VyY2VVUkxzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1heWJlTm9kZSIsIlRva2VuIiwiTG9jYXRpb24iLCJfZGVmaW5lVG9KU09OIiwibGluZSIsImNvbHVtbiIsIm5vZGVzIiwidHJhbnNmb3JtIiwiX2lzRW1wdHlUZXh0Tm9kZTIiLCJ0cmFuc2Zvcm1lZCIsIl9jb252ZXJ0Tm9kZVRvRWxlbWVudDIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0Iiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsImNvbXBpbGUiLCJzdHIiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsIm9mZnNldCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwiZmxhZ3MiLCJvcHRzIiwiZW5jb2RlIiwicHJldHR5IiwidG9rZW4iLCJzZWdtZW50IiwiYXR0YWNoS2V5cyIsInJlIiwic2Vuc2l0aXZlIiwic3RyaWN0Iiwicm91dGUiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsIm1hdGNoIiwicmVnZXhwVG9SZWdleHAiLCJwYXJ0cyIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwiU3RyaW5nIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsInNwbGl0IiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsImZvcm1hdFZhbHVlIiwiX25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wiLCJfdHlwZW9mIiwic2VlblZhbHVlcyIsInByZXZpb3VzbHlTZWVuVmFsdWVzIiwiY3VzdG9tSW5zcGVjdEZuIiwiaW5zcGVjdCIsImdldEN1c3RvbUZuIiwiY3VzdG9tVmFsdWUiLCJNYXRoIiwibWluIiwicmVtYWluaW5nIiwiaXRlbXMiLCJmb3JtYXRBcnJheSIsInRhZyIsImdldE9iamVjdFRhZyIsImZvcm1hdE9iamVjdCIsImZvcm1hdE9iamVjdFZhbHVlIiwiX2RlZmF1bHQiLCJmb3IiLCJzeW50YXhFcnJvciIsInBvc2l0aW9uIiwiZGVzY3JpcHRpb24iLCJfR3JhcGhRTEVycm9yIiwiR3JhcGhRTEVycm9yIiwiU1lNQk9MX1RPX1NUUklOR19UQUciLCJTWU1CT0xfQVNZTkNfSVRFUkFUT1IiLCJTWU1CT0xfSVRFUkFUT1IiLCJhc3luY0l0ZXJhdG9yIiwiZ2V0TG9jYXRpb24iLCJsaW5lUmVnZXhwIiwiVG9rZW5LaW5kIiwiU09GIiwiRU9GIiwiQkFORyIsIkRPTExBUiIsIkFNUCIsIlBBUkVOX0wiLCJQQVJFTl9SIiwiU1BSRUFEIiwiQ09MT04iLCJFUVVBTFMiLCJBVCIsIkJSQUNLRVRfTCIsIkJSQUNLRVRfUiIsIkJSQUNFX0wiLCJQSVBFIiwiQlJBQ0VfUiIsIk5BTUUiLCJJTlQiLCJGTE9BVCIsIlNUUklORyIsIkJMT0NLX1NUUklORyIsIkNPTU1FTlQiLCJnZXRCbG9ja1N0cmluZ0luZGVudGF0aW9uIiwibGluZXMiLCJjb21tb25JbmRlbnQiLCJpbmRlbnQiLCJsZWFkaW5nV2hpdGVzcGFjZSIsImlzQmxhbmsiLCJkZWRlbnRCbG9ja1N0cmluZ1ZhbHVlIiwicmF3U3RyaW5nIiwic2hpZnQiLCJwcmludEJsb2NrU3RyaW5nIiwiaW5kZW50YXRpb24iLCJwcmVmZXJNdWx0aXBsZUxpbmVzIiwiaXNTaW5nbGVMaW5lIiwiaGFzTGVhZGluZ1NwYWNlIiwiaGFzVHJhaWxpbmdRdW90ZSIsInByaW50QXNNdWx0aXBsZUxpbmVzIiwiX2VsZW1lbnRUeXBlczIiLCJfZWxlbWVudFR5cGVzIiwiZm9ybVRhZ3MiLCJpbnB1dCIsIm9wdGlvbiIsIm9wdGdyb3VwIiwic2VsZWN0IiwiYnV0dG9uIiwiZGF0YWxpc3QiLCJ0ZXh0YXJlYSIsIm9wZW5JbXBsaWVzQ2xvc2UiLCJ0ciIsInRoIiwidGQiLCJ0aGVhZCIsImxpbmsiLCJzY3JpcHQiLCJsaSIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsIm91dHB1dCIsInZvaWRFbGVtZW50cyIsImFyZWEiLCJiYXNlZm9udCIsImJyIiwiY29sIiwiY29tbWFuZCIsImVtYmVkIiwiZnJhbWUiLCJociIsImltZyIsImlzaW5kZXgiLCJrZXlnZW4iLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsImZvcmVpZ25Db250ZXh0RWxlbWVudHMiLCJtYXRoIiwic3ZnIiwiaHRtbEludGVncmF0aW9uRWxlbWVudHMiLCJtaSIsIm1vIiwibW4iLCJtcyIsIm10ZXh0IiwiZm9yZWlnbk9iamVjdCIsImRlc2MiLCJyZV9uYW1lRW5kIiwiY2JzIiwiX29wdGlvbnMiLCJfY2JzIiwiX3RhZ25hbWUiLCJfYXR0cmlibmFtZSIsIl9hdHRyaWJ2YWx1ZSIsIl9hdHRyaWJzIiwiX3N0YWNrIiwiX2ZvcmVpZ25Db250ZXh0Iiwic3RhcnRJbmRleCIsImVuZEluZGV4IiwiX2xvd2VyQ2FzZVRhZ05hbWVzIiwibG93ZXJDYXNlVGFncyIsInhtbE1vZGUiLCJfbG93ZXJDYXNlQXR0cmlidXRlTmFtZXMiLCJsb3dlckNhc2VBdHRyaWJ1dGVOYW1lcyIsIl90b2tlbml6ZXIiLCJvbnBhcnNlcmluaXQiLCJFdmVudEVtaXR0ZXIiLCJfdXBkYXRlUG9zaXRpb24iLCJpbml0aWFsT2Zmc2V0IiwiX3NlY3Rpb25TdGFydCIsImdldEFic29sdXRlSW5kZXgiLCJvbnRleHQiLCJvbm9wZW50YWduYW1lIiwidG9Mb3dlckNhc2UiLCJlbCIsIm9uY2xvc2V0YWciLCJvbm9wZW50YWciLCJvbm9wZW50YWdlbmQiLCJfY2xvc2VDdXJyZW50VGFnIiwicG9zIiwib25zZWxmY2xvc2luZ3RhZyIsInJlY29nbml6ZVNlbGZDbG9zaW5nIiwib25hdHRyaWJuYW1lIiwib25hdHRyaWJkYXRhIiwib25hdHRyaWJlbmQiLCJvbmF0dHJpYnV0ZSIsIl9nZXRJbnN0cnVjdGlvbk5hbWUiLCJpZHgiLCJzZWFyY2giLCJvbmRlY2xhcmF0aW9uIiwib25wcm9jZXNzaW5naW5zdHJ1Y3Rpb24iLCJvbmNvbW1lbnQiLCJvbmNvbW1lbnRlbmQiLCJvbmNkYXRhIiwicmVjb2duaXplQ0RBVEEiLCJvbmNkYXRhc3RhcnQiLCJvbmNkYXRhZW5kIiwib25lcnJvciIsIm9uZW5kIiwicmVzZXQiLCJvbnJlc2V0IiwicGFyc2VDb21wbGV0ZSIsIndyaXRlIiwiY2h1bmsiLCJwYXVzZSIsInJlc3VtZSIsInBhcnNlQ2h1bmsiLCJkZWNvZGVDb2RlUG9pbnQiLCJlbnRpdHlNYXAiLCJsZWdhY3lNYXAiLCJ4bWxNYXAiLCJURVhUIiwiQkVGT1JFX1RBR19OQU1FIiwiSU5fVEFHX05BTUUiLCJJTl9TRUxGX0NMT1NJTkdfVEFHIiwiQkVGT1JFX0NMT1NJTkdfVEFHX05BTUUiLCJJTl9DTE9TSU5HX1RBR19OQU1FIiwiQUZURVJfQ0xPU0lOR19UQUdfTkFNRSIsIkJFRk9SRV9BVFRSSUJVVEVfTkFNRSIsIklOX0FUVFJJQlVURV9OQU1FIiwiQUZURVJfQVRUUklCVVRFX05BTUUiLCJCRUZPUkVfQVRUUklCVVRFX1ZBTFVFIiwiSU5fQVRUUklCVVRFX1ZBTFVFX0RRIiwiSU5fQVRUUklCVVRFX1ZBTFVFX1NRIiwiSU5fQVRUUklCVVRFX1ZBTFVFX05RIiwiQkVGT1JFX0RFQ0xBUkFUSU9OIiwiSU5fREVDTEFSQVRJT04iLCJJTl9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OIiwiQkVGT1JFX0NPTU1FTlQiLCJJTl9DT01NRU5UIiwiQUZURVJfQ09NTUVOVF8xIiwiQUZURVJfQ09NTUVOVF8yIiwiQkVGT1JFX0NEQVRBXzEiLCJCRUZPUkVfQ0RBVEFfMiIsIkJFRk9SRV9DREFUQV8zIiwiQkVGT1JFX0NEQVRBXzQiLCJCRUZPUkVfQ0RBVEFfNSIsIkJFRk9SRV9DREFUQV82IiwiSU5fQ0RBVEEiLCJBRlRFUl9DREFUQV8xIiwiQUZURVJfQ0RBVEFfMiIsIkJFRk9SRV9TUEVDSUFMIiwiQkVGT1JFX1NQRUNJQUxfRU5EIiwiQkVGT1JFX1NDUklQVF8xIiwiQkVGT1JFX1NDUklQVF8yIiwiQkVGT1JFX1NDUklQVF8zIiwiQkVGT1JFX1NDUklQVF80IiwiQkVGT1JFX1NDUklQVF81IiwiQUZURVJfU0NSSVBUXzEiLCJBRlRFUl9TQ1JJUFRfMiIsIkFGVEVSX1NDUklQVF8zIiwiQUZURVJfU0NSSVBUXzQiLCJBRlRFUl9TQ1JJUFRfNSIsIkJFRk9SRV9TVFlMRV8xIiwiQkVGT1JFX1NUWUxFXzIiLCJCRUZPUkVfU1RZTEVfMyIsIkJFRk9SRV9TVFlMRV80IiwiQUZURVJfU1RZTEVfMSIsIkFGVEVSX1NUWUxFXzIiLCJBRlRFUl9TVFlMRV8zIiwiQUZURVJfU1RZTEVfNCIsIkJFRk9SRV9FTlRJVFkiLCJCRUZPUkVfTlVNRVJJQ19FTlRJVFkiLCJJTl9OQU1FRF9FTlRJVFkiLCJJTl9OVU1FUklDX0VOVElUWSIsIklOX0hFWF9FTlRJVFkiLCJTUEVDSUFMX05PTkUiLCJTUEVDSUFMX1NDUklQVCIsIlNQRUNJQUxfU1RZTEUiLCJ3aGl0ZXNwYWNlIiwiaWZFbHNlU3RhdGUiLCJ1cHBlciIsIlNVQ0NFU1MiLCJGQUlMVVJFIiwibG93ZXIiLCJfc3RhdGUiLCJjb25zdW1lU3BlY2lhbE5hbWVDaGFyIiwiTkVYVF9TVEFURSIsIl9idWZmZXIiLCJfYnVmZmVyT2Zmc2V0IiwiX2Jhc2VTdGF0ZSIsIl9zcGVjaWFsIiwiX3J1bm5pbmciLCJfZW5kZWQiLCJfeG1sTW9kZSIsIl9kZWNvZGVFbnRpdGllcyIsImRlY29kZUVudGl0aWVzIiwiX3N0YXRlVGV4dCIsIl9nZXRTZWN0aW9uIiwiX3N0YXRlQmVmb3JlVGFnTmFtZSIsIl9zdGF0ZUluVGFnTmFtZSIsIl9lbWl0VG9rZW4iLCJfc3RhdGVCZWZvcmVDbG9zZWluZ1RhZ05hbWUiLCJfc3RhdGVJbkNsb3NlaW5nVGFnTmFtZSIsIl9zdGF0ZUFmdGVyQ2xvc2VpbmdUYWdOYW1lIiwiX3N0YXRlQmVmb3JlQXR0cmlidXRlTmFtZSIsIl9zdGF0ZUluU2VsZkNsb3NpbmdUYWciLCJfc3RhdGVJbkF0dHJpYnV0ZU5hbWUiLCJfc3RhdGVBZnRlckF0dHJpYnV0ZU5hbWUiLCJfc3RhdGVCZWZvcmVBdHRyaWJ1dGVWYWx1ZSIsIl9zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMiLCJfc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzIiwiX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzIiwiX3N0YXRlQmVmb3JlRGVjbGFyYXRpb24iLCJfc3RhdGVJbkRlY2xhcmF0aW9uIiwiX3N0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24iLCJfc3RhdGVCZWZvcmVDb21tZW50IiwiX3N0YXRlSW5Db21tZW50IiwiX3N0YXRlQWZ0ZXJDb21tZW50MSIsIl9zdGF0ZUFmdGVyQ29tbWVudDIiLCJfc3RhdGVCZWZvcmVDZGF0YTEiLCJfc3RhdGVCZWZvcmVDZGF0YTIiLCJfc3RhdGVCZWZvcmVDZGF0YTMiLCJfc3RhdGVCZWZvcmVDZGF0YTQiLCJfc3RhdGVCZWZvcmVDZGF0YTUiLCJfc3RhdGVCZWZvcmVDZGF0YTYiLCJfc3RhdGVJbkNkYXRhIiwiX3N0YXRlQWZ0ZXJDZGF0YTEiLCJfc3RhdGVBZnRlckNkYXRhMiIsIl9zdGF0ZUJlZm9yZVNwZWNpYWwiLCJfc3RhdGVCZWZvcmVTcGVjaWFsRW5kIiwiX3N0YXRlQmVmb3JlU2NyaXB0MSIsIl9zdGF0ZUJlZm9yZVNjcmlwdDIiLCJfc3RhdGVCZWZvcmVTY3JpcHQzIiwiX3N0YXRlQmVmb3JlU2NyaXB0NCIsIl9zdGF0ZUJlZm9yZVNjcmlwdDUiLCJfc3RhdGVBZnRlclNjcmlwdDEiLCJfc3RhdGVBZnRlclNjcmlwdDIiLCJfc3RhdGVBZnRlclNjcmlwdDMiLCJfc3RhdGVBZnRlclNjcmlwdDQiLCJfc3RhdGVBZnRlclNjcmlwdDUiLCJfc3RhdGVCZWZvcmVTdHlsZTEiLCJfc3RhdGVCZWZvcmVTdHlsZTIiLCJfc3RhdGVCZWZvcmVTdHlsZTMiLCJfc3RhdGVCZWZvcmVTdHlsZTQiLCJfc3RhdGVBZnRlclN0eWxlMSIsIl9zdGF0ZUFmdGVyU3R5bGUyIiwiX3N0YXRlQWZ0ZXJTdHlsZTMiLCJfc3RhdGVBZnRlclN0eWxlNCIsIl9zdGF0ZUJlZm9yZUVudGl0eSIsIl9zdGF0ZUJlZm9yZU51bWVyaWNFbnRpdHkiLCJfcGFyc2VOYW1lZEVudGl0eVN0cmljdCIsImVudGl0eSIsIl9lbWl0UGFydGlhbCIsIl9wYXJzZUxlZ2FjeUVudGl0eSIsImxpbWl0IiwiX3N0YXRlSW5OYW1lZEVudGl0eSIsIl9kZWNvZGVOdW1lcmljRW50aXR5Iiwic2VjdGlvblN0YXJ0IiwicGFyc2VJbnQiLCJfc3RhdGVJbk51bWVyaWNFbnRpdHkiLCJfc3RhdGVJbkhleEVudGl0eSIsIl9jbGVhbnVwIiwiX3BhcnNlIiwiY2hhckF0IiwiX2ZpbmlzaCIsIl9oYW5kbGVUcmFpbGluZ0RhdGEiLCJyZV93aGl0ZXNwYWNlIiwiTm9kZVByb3RvdHlwZSIsIkVsZW1lbnRQcm90b3R5cGUiLCJjYWxsYmFjayIsImVsZW1lbnRDQiIsImRlZmF1bHRPcHRzIiwiX2NhbGxiYWNrIiwiX2VsZW1lbnRDQiIsIl9kb25lIiwiX3RhZ1N0YWNrIiwiX3BhcnNlciIsIm5vcm1hbGl6ZVdoaXRlc3BhY2UiLCJ3aXRoU3RhcnRJbmRpY2VzIiwid2l0aEVuZEluZGljZXMiLCJwYXJzZXIiLCJfaGFuZGxlQ2FsbGJhY2siLCJfY3JlYXRlRG9tRWxlbWVudCIsInByb3BlcnRpZXMiLCJ3aXRoRG9tTHZsMSIsImVsZW1lbnQiLCJfYWRkRG9tRWxlbWVudCIsInNpYmxpbmdzIiwiY2hpbGRyZW4iLCJwcmV2aW91c1NpYmxpbmciLCJhdHRyaWJzIiwibGFzdFRhZyIsImlnbm9yZVdoaXRlc3BhY2UiLCJub2RlVHlwZXMiLCJkb21MdmwxIiwidGFnTmFtZSIsIm5leHRTaWJsaW5nIiwibm9kZVZhbHVlIiwiY2RhdGEiLCJzaG9ydGhhbmQiLCJEb21VdGlscyIsImV4dCIsIl9faW1wb3J0RGVmYXVsdCIsIm1vZCIsImVudGl0aWVzX2pzb25fMSIsImxlZ2FjeV9qc29uXzEiLCJ4bWxfanNvbl8xIiwiZGVjb2RlX2NvZGVwb2ludF8xIiwiZ2V0U3RyaWN0RGVjb2RlciIsImdldFJlcGxhY2VyIiwiZGVjb2RlWE1MIiwiZGVjb2RlSFRNTFN0cmljdCIsInNvcnRlciIsImRlY29kZUhUTUwiLCJsZWdhY3kiLCJyZXBsYWNlciIsImludmVyc2VYTUwiLCJnZXRJbnZlcnNlT2JqIiwieG1sUmVwbGFjZXIiLCJnZXRJbnZlcnNlUmVwbGFjZXIiLCJlbmNvZGVYTUwiLCJnZXRJbnZlcnNlIiwiaW52ZXJzZUhUTUwiLCJodG1sUmVwbGFjZXIiLCJyZWR1Y2UiLCJpbnZlcnNlIiwic2luZ2xlIiwibXVsdGlwbGUiLCJ1bnNoaWZ0IiwiZW5jb2RlSFRNTCIsInJlTm9uQVNDSUkiLCJyZUFzdHJhbFN5bWJvbHMiLCJzaW5nbGVDaGFyUmVwbGFjZXIiLCJhc3RyYWxSZXBsYWNlciIsInJlWG1sQ2hhcnMiLCJlc2NhcGUiLCJTdHJlYW0iLCJXcml0YWJsZVN0cmVhbSIsIldyaXRhYmxlIiwiU3RyaW5nRGVjb2RlciIsIkJ1ZmZlciIsImRlY29kZXIiLCJfZGVjb2RlciIsImRlY29kZVN0cmluZ3MiLCJfd3JpdGUiLCJlbmNvZGluZyIsImllZWU3NTQiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsInRoYXQiLCJSYW5nZUVycm9yIiwiVWludDhBcnJheSIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsIkFycmF5QnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsImZyb21TdHJpbmciLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJjb3B5IiwiYnVmZmVyIiwiZnJvbU9iamVjdCIsImFzc2VydFNpemUiLCJpc1ZpZXciLCJsb3dlcmVkQ2FzZSIsInV0ZjhUb0J5dGVzIiwiYmFzZTY0VG9CeXRlcyIsInNsb3dUb1N0cmluZyIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJpc05hTiIsImFycmF5SW5kZXhPZiIsImFyciIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInN0ckxlbiIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsIm1heCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsImlzRmluaXRlIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwibXVsIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInBvdyIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJmbG9vciIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwic3ViIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsIl9leHRlbmRzIiwicHJvcHMiLCJfaHRtbEF0dHJpYnV0ZXNUb1JlYWN0MiIsIl9pbmxpbmVTdHlsZVRvT2JqZWN0MiIsIm5hbWVDYWNoZSIsIlZBTElEX1RBR19SRUdFWCIsImNoZWNrRENFIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiYXBpVXJsIiwiQVBJX1VSSSIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJ0YXJnZXRTdGF0aWNzIiwic291cmNlU3RhdGljcyIsImRlc2NyaXB0b3IiLCJzZWxmIiwicG9ueWZpbGwiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiT2JzZXJ2YWJsZSIsImNtcCIsImN5Y2xlcyIsImFvYmoiLCJib2JqIiwic2VlbkluZGV4IiwiaHRtbHBhcnNlcjIiLCJjb252ZXJ0Tm9kZVRvRWxlbWVudCIsInByb2Nlc3NOb2RlcyIsIl9wcm9jZXNzTm9kZXMiLCJfY29udmVydE5vZGVUb0VsZW1lbnQiLCJfaHRtbHBhcnNlciIsIl9IdG1sUGFyc2VyMiIsInByaW50IiwiX3Zpc2l0b3IiLCJwcmludERvY0FTVFJlZHVjZXIiLCJfYmxvY2tTdHJpbmciLCJ2YXJEZWZzIiwid3JhcCIsIl9yZWYiLCJfcmVmMiIsImJsb2NrIiwiX3JlZjMiLCJfcmVmNCIsIl9yZWY1IiwiX3JlZjYiLCJ0eXBlQ29uZGl0aW9uIiwiX3JlZjciLCJfcmVmOCIsIl9yZWY5IiwiX3JlZjEwIiwiX3JlZjExIiwiX3JlZjEyIiwiX3JlZjEzIiwiX3JlZjE0IiwiX3JlZjE1IiwiX3JlZjE2IiwiX3JlZjE3IiwiX3JlZjE4IiwiX3JlZjE5IiwiYWRkRGVzY3JpcHRpb24iLCJfcmVmMjAiLCJvcGVyYXRpb25UeXBlcyIsIl9yZWYyMSIsIl9yZWYyMiIsIl9yZWYyMyIsImludGVyZmFjZXMiLCJfcmVmMjQiLCJoYXNNdWx0aWxpbmVJdGVtcyIsIl9yZWYyNSIsIl9yZWYyNiIsIl9yZWYyNyIsInR5cGVzIiwiX3JlZjI4IiwiX3JlZjI5IiwiX3JlZjMwIiwiX3JlZjMxIiwicmVwZWF0YWJsZSIsImxvY2F0aW9ucyIsIl9yZWYzMiIsIl9yZWYzMyIsIl9yZWYzNCIsIl9yZWYzNSIsIl9yZWYzNiIsIl9yZWYzNyIsIl9yZWYzOCIsIm1heWJlQXJyYXkiLCJfbWF5YmVBcnJheSRmaWx0ZXIkam8iLCJzZXBhcmF0b3IiLCJtYXliZVN0cmluZyIsImlzTXVsdGlsaW5lIiwibG9jYXRpb24iLCJob3N0bmFtZSIsInVucmVnaXN0ZXIiLCJzZXJ2aWNlV29ya2VyIiwicmVhZHkiLCJyZWdpc3RyYXRpb24iLCJjYXRjaCIsInEiLCJ1IiwidyIsInoiLCJBIiwiQiIsIkMiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJGIiwicmVmcyIsIkciLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJJIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJKIiwiY3VycmVudCIsIksiLCJMIiwicmVmIiwiX19zZWxmIiwiX19zb3VyY2UiLCJNIiwiaCIsIiQkdHlwZW9mIiwiX293bmVyIiwiTyIsIlEiLCJSIiwia2V5UHJlZml4IiwiZnVuYyIsIlMiLCJWIiwiVCIsIlUiLCJXIiwiYWEiLCJYIiwiTiIsIlkiLCJaIiwiYmEiLCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJzdXNwZW5zZSIsIlJlYWN0Q3VycmVudE93bmVyIiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJDaGlsZHJlbiIsInRvQXJyYXkiLCJvbmx5IiwiQ29tcG9uZW50IiwiRnJhZ21lbnQiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJvbkVycm9yIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJkZXBlbmRlbmNpZXMiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiVGEiLCJhY2NlcHRzQm9vbGVhbnMiLCJTYSIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsIlVhIiwiVmEiLCJ4bGlua0hyZWYiLCJXYSIsIlhhIiwiUmEiLCJzZXRBdHRyaWJ1dGVOUyIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJ6YiIsImRlZmF1bHRDaGVja2VkIiwiX3dyYXBwZXJTdGF0ZSIsImluaXRpYWxDaGVja2VkIiwiQWIiLCJpbml0aWFsVmFsdWUiLCJjb250cm9sbGVkIiwiQmIiLCJDYiIsIkRiIiwiRWIiLCJvd25lckRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsIkdiIiwiRmIiLCJIYiIsInNlbGVjdGVkIiwiZGVmYXVsdFNlbGVjdGVkIiwiZGlzYWJsZWQiLCJJYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiSmIiLCJLYiIsIkxiIiwidGV4dENvbnRlbnQiLCJNYiIsIk5iIiwiT2IiLCJQYiIsIlFiIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJSYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwiU2IiLCJUYiIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsIlViIiwiVmIiLCJXYiIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJYYiIsIlliIiwiWmIiLCIkYiIsImFjIiwiYmMiLCJjYyIsImRjIiwiYWx0ZXJuYXRlIiwiZWZmZWN0VGFnIiwiZWMiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImZjIiwiaGMiLCJzaWJsaW5nIiwiZ2MiLCJpYyIsImpjIiwia2MiLCJsYyIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwiaXNQZXJzaXN0ZW50IiwicmVsZWFzZSIsIm1jIiwibmMiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJvYyIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJkZWxldGUiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsIlVjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiVmMiLCJXYyIsIlljIiwiWmMiLCIkYyIsImFkIiwiYnViYmxlZCIsImNhcHR1cmVkIiwiZXZlbnRQcmlvcml0eSIsImJkIiwiY2QiLCJkZCIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiZWQiLCJmZCIsImdkIiwiaGQiLCJhZGRFdmVudExpc3RlbmVyIiwiT2MiLCJqZCIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwia2QiLCJsZCIsIm1kIiwic2V0UHJvcGVydHkiLCJuZCIsIm1lbnVpdGVtIiwib2QiLCJwZCIsImlzIiwicWQiLCJyZCIsInNkIiwidWQiLCJ2ZCIsInhkIiwiY29udGVudFdpbmRvdyIsImhyZWYiLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiX19odG1sIiwiSGQiLCJJZCIsIkpkIiwiS2QiLCJMZCIsInJhbmRvbSIsIk1kIiwiTmQiLCJPZCIsIlBkIiwiUWQiLCJSZCIsIlNkIiwiVGQiLCJkaXNwYXRjaENvbmZpZyIsIlVkIiwiX3RhcmdldEluc3QiLCJWZCIsIldkIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJhZSIsImJlIiwiY2UiLCJJbnRlcmZhY2UiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmV0dXJuVmFsdWUiLCJlZSIsImV2ZW50UG9vbCIsImZlIiwiZGVzdHJ1Y3RvciIsImRlIiwiZ2V0UG9vbGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiZXZlbnRQaGFzZSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwidGltZVN0YW1wIiwiRGF0ZSIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwidWUiLCJ3ZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJ0ZWwiLCJ0aW1lIiwidXJsIiwid2VlayIsInhlIiwieWUiLCJjaGFuZ2UiLCJ6ZSIsIkFlIiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkdlIiwiZGV0YWNoRXZlbnQiLCJIZSIsIkllIiwiYXR0YWNoRXZlbnQiLCJKZSIsIktlIiwiTGUiLCJNZSIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJOZSIsInZpZXciLCJPZSIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZSIsImdldE1vZGlmaWVyU3RhdGUiLCJRZSIsIlJlIiwiU2UiLCJUZSIsIlVlIiwiVmUiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsInNoaWZ0S2V5IiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIldlIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiWGUiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsInBvaW50ZXJFbnRlciIsInBvaW50ZXJMZWF2ZSIsIlllIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCIkZSIsImFmIiwiYmYiLCJjZiIsImRmIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJqZiIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiZ2V0Q2hpbGRDb250ZXh0IiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJvYnNlcnZlZEJpdHMiLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwic2hhcmVkIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwic3RhdGUiLCJNZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJPZyIsIlBnIiwiX3N0cmluZ1JlZiIsIlFnIiwiUmciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiU2ciLCJUZyIsImVsZW1lbnRUeXBlIiwiVWciLCJpbXBsZW1lbnRhdGlvbiIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZG9jdW1lbnRFbGVtZW50IiwiZWgiLCJmaCIsImdoIiwiaGgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsInJldHJ5VGltZSIsImppIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsImtpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJvbkNsaWNrIiwib25jbGljayIsImNyZWF0ZUVsZW1lbnROUyIsInRpIiwidWkiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiQWkiLCJCaSIsIldlYWtTZXQiLCJDaSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiZm9jdXMiLCJLaSIsIkxpIiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJEaSIsIk1pIiwiTmkiLCJPaSIsIlBpIiwiUWkiLCJpbnN0YW5jZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJSaSIsIlNpIiwiVGkiLCJkaXNwbGF5IiwiVWkiLCJWaSIsIldpIiwiWGkiLCJZaSIsIlppIiwiJGkiLCJjb21wb25lbnREaWRDYXRjaCIsImFqIiwiY29tcG9uZW50U3RhY2siLCJSaiIsImJqIiwiY2VpbCIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZEV4cGlyYXRpb25UaW1lIiwibGFzdFN1c3BlbmRlZFRpbWUiLCJJaiIsInRpbWVvdXRIYW5kbGUiLCJKaiIsImJ1c3lNaW5EdXJhdGlvbk1zIiwiYnVzeURlbGF5TXMiLCJLaiIsIk1qIiwiTmoiLCJwaW5nQ2FjaGUiLCJPaiIsInViIiwiUGoiLCJYYyIsIlFqIiwiU2oiLCJmaXJzdFN1c3BlbmRlZFRpbWUiLCJyYW5nZUNvdW50Iiwid2IiLCJhY3RpdmVFbGVtZW50RGV0YWNoZWQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiVGoiLCJ3ZCIsImNvbnRhaW5zIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsInZiIiwiVWoiLCJWaiIsIldqIiwiaGlkZGVuIiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJhcGkiLCJsb2NhbHMiLCJfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18iLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsImlzUmVxdWlyZWQiLCJSZWFjdFByb3BUeXBlcyIsImJvb2wiLCJzeW1ib2wiLCJhbnkiLCJhcnJheU9mIiwiaW5zdGFuY2VPZiIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwicGFyc2VWYWx1ZSIsImV4cGVjdFRva2VuIiwiX3Rva2VuS2luZCIsInBhcnNlVmFsdWVMaXRlcmFsIiwicGFyc2VUeXBlIiwicGFyc2VUeXBlUmVmZXJlbmNlIiwiX2RldkFzc2VydCIsIl9zeW50YXhFcnJvciIsIl9raW5kcyIsIl9zb3VyY2UiLCJfZGlyZWN0aXZlTG9jYXRpb24iLCJfbGV4ZXIiLCJzb3VyY2VPYmoiLCJTb3VyY2UiLCJMZXhlciIsIl9wcm90byIsInBhcnNlTmFtZSIsIktpbmQiLCJET0NVTUVOVCIsIm1hbnkiLCJwYXJzZURlZmluaXRpb24iLCJwZWVrIiwicGFyc2VPcGVyYXRpb25EZWZpbml0aW9uIiwicGFyc2VGcmFnbWVudERlZmluaXRpb24iLCJwYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uIiwicGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uIiwicGVla0Rlc2NyaXB0aW9uIiwidW5leHBlY3RlZCIsIk9QRVJBVElPTl9ERUZJTklUSU9OIiwicGFyc2VTZWxlY3Rpb25TZXQiLCJwYXJzZU9wZXJhdGlvblR5cGUiLCJwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMiLCJwYXJzZURpcmVjdGl2ZXMiLCJvcGVyYXRpb25Ub2tlbiIsIm9wdGlvbmFsTWFueSIsInBhcnNlVmFyaWFibGVEZWZpbml0aW9uIiwiVkFSSUFCTEVfREVGSU5JVElPTiIsInBhcnNlVmFyaWFibGUiLCJleHBlY3RPcHRpb25hbFRva2VuIiwiVkFSSUFCTEUiLCJTRUxFQ1RJT05fU0VUIiwicGFyc2VTZWxlY3Rpb24iLCJwYXJzZUZyYWdtZW50IiwicGFyc2VGaWVsZCIsIm5hbWVPckFsaWFzIiwiRklFTEQiLCJwYXJzZUFyZ3VtZW50cyIsImlzQ29uc3QiLCJwYXJzZUNvbnN0QXJndW1lbnQiLCJwYXJzZUFyZ3VtZW50IiwiQVJHVU1FTlQiLCJoYXNUeXBlQ29uZGl0aW9uIiwiZXhwZWN0T3B0aW9uYWxLZXl3b3JkIiwiRlJBR01FTlRfU1BSRUFEIiwicGFyc2VGcmFnbWVudE5hbWUiLCJJTkxJTkVfRlJBR01FTlQiLCJwYXJzZU5hbWVkVHlwZSIsIl90aGlzJF9vcHRpb25zIiwiZXhwZWN0S2V5d29yZCIsIkZSQUdNRU5UX0RFRklOSVRJT04iLCJwYXJzZUxpc3QiLCJwYXJzZU9iamVjdCIsImFkdmFuY2UiLCJwYXJzZVN0cmluZ0xpdGVyYWwiLCJCT09MRUFOIiwiTlVMTCIsIkVOVU0iLCJfdGhpcyIsIkxJU1QiLCJfdGhpczIiLCJPQkpFQ1QiLCJwYXJzZU9iamVjdEZpZWxkIiwiT0JKRUNUX0ZJRUxEIiwicGFyc2VEaXJlY3RpdmUiLCJESVJFQ1RJVkUiLCJMSVNUX1RZUEUiLCJOT05fTlVMTF9UWVBFIiwiTkFNRURfVFlQRSIsImtleXdvcmRUb2tlbiIsImxvb2thaGVhZCIsInBhcnNlU2NoZW1hRGVmaW5pdGlvbiIsInBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24iLCJwYXJzZU9iamVjdFR5cGVEZWZpbml0aW9uIiwicGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbiIsInBhcnNlVW5pb25UeXBlRGVmaW5pdGlvbiIsInBhcnNlRW51bVR5cGVEZWZpbml0aW9uIiwicGFyc2VJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uIiwicGFyc2VEaXJlY3RpdmVEZWZpbml0aW9uIiwicGFyc2VEZXNjcmlwdGlvbiIsInBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24iLCJTQ0hFTUFfREVGSU5JVElPTiIsIk9QRVJBVElPTl9UWVBFX0RFRklOSVRJT04iLCJTQ0FMQVJfVFlQRV9ERUZJTklUSU9OIiwicGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcyIsInBhcnNlRmllbGRzRGVmaW5pdGlvbiIsIk9CSkVDVF9UWVBFX0RFRklOSVRJT04iLCJfdGhpcyRfb3B0aW9uczIiLCJhbGxvd0xlZ2FjeVNETEltcGxlbWVudHNJbnRlcmZhY2VzIiwiX3RoaXMkX29wdGlvbnMzIiwiYWxsb3dMZWdhY3lTRExFbXB0eUZpZWxkcyIsInBhcnNlRmllbGREZWZpbml0aW9uIiwicGFyc2VBcmd1bWVudERlZnMiLCJGSUVMRF9ERUZJTklUSU9OIiwicGFyc2VJbnB1dFZhbHVlRGVmIiwiSU5QVVRfVkFMVUVfREVGSU5JVElPTiIsIklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04iLCJwYXJzZVVuaW9uTWVtYmVyVHlwZXMiLCJVTklPTl9UWVBFX0RFRklOSVRJT04iLCJwYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uIiwiRU5VTV9UWVBFX0RFRklOSVRJT04iLCJwYXJzZUVudW1WYWx1ZURlZmluaXRpb24iLCJFTlVNX1ZBTFVFX0RFRklOSVRJT04iLCJwYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbiIsIklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04iLCJwYXJzZVNjaGVtYUV4dGVuc2lvbiIsInBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbiIsInBhcnNlT2JqZWN0VHlwZUV4dGVuc2lvbiIsInBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbiIsInBhcnNlVW5pb25UeXBlRXh0ZW5zaW9uIiwicGFyc2VFbnVtVHlwZUV4dGVuc2lvbiIsInBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uIiwiU0NIRU1BX0VYVEVOU0lPTiIsIlNDQUxBUl9UWVBFX0VYVEVOU0lPTiIsIk9CSkVDVF9UWVBFX0VYVEVOU0lPTiIsIklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiIsIlVOSU9OX1RZUEVfRVhURU5TSU9OIiwiRU5VTV9UWVBFX0VYVEVOU0lPTiIsIklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTiIsInBhcnNlRGlyZWN0aXZlTG9jYXRpb25zIiwiRElSRUNUSVZFX0RFRklOSVRJT04iLCJwYXJzZURpcmVjdGl2ZUxvY2F0aW9uIiwiRGlyZWN0aXZlTG9jYXRpb24iLCJfdGhpcyRfb3B0aW9uczQiLCJub0xvY2F0aW9uIiwibGFzdFRva2VuIiwiZ2V0VG9rZW5LaW5kRGVzYyIsImdldFRva2VuRGVzYyIsImF0VG9rZW4iLCJvcGVuS2luZCIsInBhcnNlRm4iLCJjbG9zZUtpbmQiLCJpc1B1bmN0dWF0b3JUb2tlbktpbmQiLCJwcmludEVycm9yIiwiX2lzT2JqZWN0TGlrZSIsIl9zeW1ib2xzIiwiX2xvY2F0aW9uIiwiX3ByaW50TG9jYXRpb24iLCJfZGVmaW5lUHJvcGVydGllcyIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsIlJlZmVyZW5jZUVycm9yIiwiX3dyYXBOYXRpdmVTdXBlciIsIkNsYXNzIiwiX2NhY2hlIiwiV3JhcHBlciIsIl9jb25zdHJ1Y3QiLCJfZ2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJQYXJlbnQiLCJfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0IiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsInNoYW0iLCJQcm94eSIsIl9FcnJvciIsIl9pbmhlcml0cyIsIkRlcml2ZWQiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsIl9zdXBlciIsIlN1cGVyIiwiTmV3VGFyZ2V0IiwicG9zaXRpb25zIiwib3JpZ2luYWxFcnJvciIsImV4dGVuc2lvbnMiLCJfbG9jYXRpb25zMiIsIl9zb3VyY2UyIiwiX3Bvc2l0aW9uczIiLCJfZXh0ZW5zaW9uczIiLCJfY2xhc3NDYWxsQ2hlY2siLCJfbm9kZXMkMCRsb2MiLCJfbm9kZXMiLCJfbG9jYXRpb25zIiwiX3Bvc2l0aW9ucyIsIl9leHRlbnNpb25zIiwib3JpZ2luYWxFeHRlbnNpb25zIiwiZGVmaW5lUHJvcGVydGllcyIsImNhcHR1cmVTdGFja1RyYWNlIiwiX2Vycm9yJG5vZGVzMiIsInByaW50TG9jYXRpb24iLCJfaTQiLCJfZXJyb3IkbG9jYXRpb25zMiIsInByaW50U291cmNlTG9jYXRpb24iLCJzb3VyY2VMb2NhdGlvbiIsImZpcnN0TGluZUNvbHVtbk9mZnNldCIsImxvY2F0aW9uT2Zmc2V0IiwibGluZUluZGV4IiwibGluZU9mZnNldCIsImxpbmVOdW0iLCJjb2x1bW5PZmZzZXQiLCJjb2x1bW5OdW0iLCJsb2NhdGlvblN0ciIsImxvY2F0aW9uTGluZSIsInN1YkxpbmVJbmRleCIsInN1YkxpbmVDb2x1bW5OdW0iLCJzdWJMaW5lcyIsInByaW50UHJlZml4ZWRMaW5lcyIsInN1YkxpbmUiLCJleGlzdGluZ0xpbmVzIiwicGFkTGVuIiwiUVVFUlkiLCJNVVRBVElPTiIsIlNVQlNDUklQVElPTiIsIlNDSEVNQSIsIlNDQUxBUiIsIkFSR1VNRU5UX0RFRklOSVRJT04iLCJJTlRFUkZBQ0UiLCJVTklPTiIsIkVOVU1fVkFMVUUiLCJJTlBVVF9PQkpFQ1QiLCJJTlBVVF9GSUVMRF9ERUZJTklUSU9OIiwic3RhcnRPZkZpbGVUb2tlbiIsImxpbmVTdGFydCIsIl90b2tlbiRuZXh0IiwicmVhZFRva2VuIiwicHJpbnRDaGFyQ29kZSIsImxleGVyIiwiYm9keUxlbmd0aCIsInN0YXJ0UG9zaXRpb24iLCJwb3NpdGlvbkFmdGVyV2hpdGVzcGFjZSIsInJlYWRDb21tZW50IiwicmVhZE5hbWUiLCJmaXJzdENvZGUiLCJpc0Zsb2F0IiwicmVhZERpZ2l0cyIsImlzTmFtZVN0YXJ0IiwicmVhZE51bWJlciIsImNodW5rU3RhcnQiLCJyYXdWYWx1ZSIsInJlYWRCbG9ja1N0cmluZyIsImNoYXIyaGV4IiwiaW52YWxpZFNlcXVlbmNlIiwicmVhZFN0cmluZyIsInVuZXhwZWN0ZWRDaGFyYWN0ZXJNZXNzYWdlIiwiY2xhc3NPYmplY3QiLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsIl9jcmVhdGVDbGFzcyIsImhhc1N5bWJvbHMiLCJoYXNTeW1ib2wiLCJnZXRTeW1ib2wiLCJTeW1ib2xJdGVyYXRvciIsIlN5bWJvbE9ic2VydmFibGUiLCJTeW1ib2xTcGVjaWVzIiwiZ2V0TWV0aG9kIiwiZ2V0U3BlY2llcyIsImlzT2JzZXJ2YWJsZSIsImhvc3RSZXBvcnRFcnJvciIsImxvZyIsImVucXVldWUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInVuc3Vic2NyaWJlIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJfb2JzZXJ2ZXIiLCJfcXVldWUiLCJub3RpZnlTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsIm9uTm90aWZ5IiwiZmx1c2hTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJzdWJzY3JpYmVyIiwic3Vic2NyaXB0aW9uT2JzZXJ2ZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsIl9zdWJzY3JpcHRpb24iLCJfc3Vic2NyaWJlciIsImNvbXBsZXRlIiwic3Vic2NyaWJlIiwiX3RoaXMzIiwiX3RoaXM0IiwiaGFzU2VlZCIsImhhc1ZhbHVlIiwic2VlZCIsImFjYyIsImZpcnN0IiwiX3RoaXM1IiwiX2xlbiIsInN0YXJ0TmV4dCIsIl90aGlzNiIsInN1YnNjcmlwdGlvbnMiLCJvdXRlciIsImlubmVyIiwiY29tcGxldGVJZkRvbmUiLCJjbG9zZWQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiX2l0ZW0iLCJfbGVuMiIsIl9rZXkyIiwiX0VsZW1lbnRUeXBlJFRleHQkRWxlIiwiX1RleHRFbGVtZW50VHlwZTIiLCJfVGFnRWxlbWVudFR5cGUyIiwiX1N0eWxlRWxlbWVudFR5cGUyIiwiX1Vuc3VwcG9ydGVkRWxlbWVudFR5cGUyIiwiX2RlZmluZVByb3BlcnR5IiwiZGVjb2RlTWFwIiwiUmVmbGVjdE93bktleXMiLCJSZWZsZWN0QXBwbHkiLCJyZWNlaXZlciIsIm93bktleXMiLCJOdW1iZXJJc05hTiIsImluaXQiLCJfZXZlbnRzIiwiX2V2ZW50c0NvdW50IiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJjaGVja0xpc3RlbmVyIiwibGlzdGVuZXIiLCJfZ2V0TWF4TGlzdGVuZXJzIiwiX2FkZExpc3RlbmVyIiwicHJlcGVuZCIsImV2ZW50cyIsImV4aXN0aW5nIiwid2FybmluZyIsIm5ld0xpc3RlbmVyIiwid2FybmVkIiwiZW1pdHRlciIsIm9uY2VXcmFwcGVyIiwiZmlyZWQiLCJ3cmFwRm4iLCJfb25jZVdyYXAiLCJ3cmFwcGVkIiwiX2xpc3RlbmVycyIsInVud3JhcCIsImV2bGlzdGVuZXIiLCJ1bndyYXBMaXN0ZW5lcnMiLCJhcnJheUNsb25lIiwibGlzdGVuZXJDb3VudCIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImRvRXJyb3IiLCJlciIsIm9yaWdpbmFsTGlzdGVuZXIiLCJzcGxpY2VPbmUiLCJyYXdMaXN0ZW5lcnMiLCJldmVudE5hbWVzIiwiZ2V0RWxlbWVudHMiLCJ3aGF0Iiwid2hlcmUiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdldE9uZUVsZW1lbnQiLCJmZXRjaCIsInJlY3Vyc2UiLCJnZXRUZXh0IiwiYWRkQ29uZGl0aW9uYWxseSIsInRtcCIsImlzVmFsaWRGZWVkIiwiY2hpbGRzIiwiZmVlZFJvb3QiLCJ1cGRhdGVkIiwiZW50cnkiLCJwdWJEYXRlIiwiZ2V0T3V0ZXJIVE1MIiwiZ2V0SW5uZXJIVE1MIiwiZW50aXRpZXMiLCJmb3JlaWduTmFtZXMiLCJlbGVtZW50TmFtZXMiLCJhdHRyaWJ1dGVOYW1lcyIsInVuZW5jb2RlZEVsZW1lbnRzIiwieG1wIiwiaWZyYW1lIiwibm9lbWJlZCIsIm5vZnJhbWVzIiwicGxhaW50ZXh0Iiwibm9zY3JpcHQiLCJzaW5nbGVUYWciLCJjaGVlcmlvIiwicmVuZGVyVGFnIiwicmVuZGVyRGlyZWN0aXZlIiwicmVuZGVyQ29tbWVudCIsInJlbmRlckNkYXRhIiwicmVuZGVyVGV4dCIsImZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMiLCJmb3JtYXRBdHRycyIsImRlY29kZV8xIiwiZW5jb2RlXzEiLCJkZWNvZGUiLCJsZXZlbCIsImRlY29kZVN0cmljdCIsImVuY29kZV8yIiwiZW5jb2RlSFRNTDQiLCJlbmNvZGVIVE1MNSIsImRlY29kZV8yIiwiZGVjb2RlSFRNTDQiLCJkZWNvZGVIVE1MNSIsImRlY29kZUhUTUw0U3RyaWN0IiwiZGVjb2RlSFRNTDVTdHJpY3QiLCJkZWNvZGVYTUxTdHJpY3QiLCJkZWNvZGVfanNvbl8xIiwiZ2V0Q2hpbGRyZW4iLCJnZXRQYXJlbnQiLCJnZXRTaWJsaW5ncyIsImdldEF0dHJpYnV0ZVZhbHVlIiwiaGFzQXR0cmliIiwiZ2V0TmFtZSIsInJlbW92ZUVsZW1lbnQiLCJyZXBsYWNlRWxlbWVudCIsImFwcGVuZCIsImN1cnJOZXh0IiwiZmluZCIsImVsZW1zIiwiZmluZE9uZUNoaWxkIiwiZmluZE9uZSIsImV4aXN0c09uZSIsImZpbmRBbGwiLCJyb290RWxlbXMiLCJ0ZXN0RWxlbWVudCIsInRhZ19uYW1lIiwidGFnX3R5cGUiLCJ0YWdfY29udGFpbnMiLCJDaGVja3MiLCJnZXRBdHRyaWJDaGVjayIsImF0dHJpYiIsImNvbWJpbmVGdW5jcyIsImZ1bmNzIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5VGFnVHlwZSIsInJlbW92ZVN1YnNldHMiLCJhbmNlc3RvciIsIlBPU0lUSU9OIiwiY29tcGFyZVBvcyIsIm5vZGVBIiwibm9kZUIiLCJzaGFyZWRQYXJlbnQiLCJhU2libGluZyIsImJTaWJsaW5nIiwiYVBhcmVudHMiLCJiUGFyZW50cyIsInVuaXF1ZVNvcnQiLCJyZWxhdGl2ZSIsIkNicyIsInNjb3BlIiwicmVhZGFibGUiLCJlbmMiLCJuZW5jIiwicmV0cmllZCIsIl9ub3JtYWxpemVFbmNvZGluZyIsIm5vcm1hbGl6ZUVuY29kaW5nIiwidXRmMTZUZXh0IiwidXRmMTZFbmQiLCJmaWxsTGFzdCIsInV0ZjhGaWxsTGFzdCIsImJhc2U2NFRleHQiLCJiYXNlNjRFbmQiLCJzaW1wbGVXcml0ZSIsInNpbXBsZUVuZCIsImxhc3ROZWVkIiwibGFzdFRvdGFsIiwibGFzdENoYXIiLCJ1dGY4Q2hlY2tCeXRlIiwiYnl0ZSIsInV0ZjhDaGVja0V4dHJhQnl0ZXMiLCJ0b3RhbCIsInV0ZjhDaGVja0luY29tcGxldGUiLCJjb3B5UHJvcHMiLCJTYWZlQnVmZmVyIiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsInVpbnQ4IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsIm51bSIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTmFOIiwicnQiLCJhYnMiLCJMTjIiLCJQcm94eUhhbmRsZXIiLCJDb2xsZWN0aW5nSGFuZGxlciIsInJlc3RhcnQiLCJfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZTIiLCJfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzMiIsIl9Wb2lkRWxlbWVudHMyIiwiX3Byb2Nlc3NOb2RlczIiLCJfcmVhY3QyIiwiYXR0ciIsIm1hcHBlZEF0dHJpYnV0ZXMiLCJsb3dlckNhc2VBdHRyaWJ1dGUiLCJfUmVhY3RBdHRyaWJ1dGVzMiIsIl9Cb29sZWFuQXR0cmlidXRlczIiLCJnZXRQYXJzZWRBdHRyaWJ1dGVWYWx1ZSIsImFjY2VwdCIsImFjY2Vzc2tleSIsImFsbG93ZnVsbHNjcmVlbiIsImFsbG93dHJhbnNwYXJlbmN5IiwiYWx0IiwiYXMiLCJhc3luYyIsImF1dG9jb21wbGV0ZSIsImF1dG9wbGF5IiwiY2VsbHBhZGRpbmciLCJjZWxsc3BhY2luZyIsImNoYXJzZXQiLCJjaGFsbGVuZ2UiLCJjaXRlIiwiY2xhc3NpZCIsImNsYXNzIiwiY29scyIsImNvbHNwYW4iLCJjb250ZW50ZWRpdGFibGUiLCJjb250ZXh0bWVudSIsImNvbnRyb2xzIiwiY29udHJvbHNMaXN0IiwiY29vcmRzIiwiY3Jvc3NvcmlnaW4iLCJkZWZlciIsImRvd25sb2FkIiwiZHJhZ2dhYmxlIiwiZW5jdHlwZSIsImZvcm1hY3Rpb24iLCJmb3JtZW5jdHlwZSIsImZvcm1tZXRob2QiLCJmb3Jtbm92YWxpZGF0ZSIsImZvcm10YXJnZXQiLCJmcmFtZWJvcmRlciIsImhlYWRlcnMiLCJoaWdoIiwiaHJlZmxhbmciLCJpY29uIiwiaW5wdXRtb2RlIiwiaW50ZWdyaXR5Iiwia2V5cGFyYW1zIiwia2V5dHlwZSIsImxhbmciLCJsb29wIiwibG93IiwibWFuaWZlc3QiLCJtYXJnaW5oZWlnaHQiLCJtYXJnaW53aWR0aCIsIm1heGxlbmd0aCIsIm1lZGlhZ3JvdXAiLCJtaW5sZW5ndGgiLCJtdXRlZCIsIm5vdmFsaWRhdGUiLCJvcGVuIiwib3B0aW11bSIsInBsYWNlaG9sZGVyIiwicGxheXNpbmxpbmUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicHJvZmlsZSIsInJhZGlvZ3JvdXAiLCJyZWFkb25seSIsInJlZmVycmVycG9saWN5IiwicmVsIiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvbGUiLCJyb3dzIiwicm93c3BhbiIsInNhbmRib3giLCJzY29wZWQiLCJzY3JvbGxpbmciLCJzZWFtbGVzcyIsInNpemVzIiwic2xvdCIsInNwYW4iLCJzcGVsbGNoZWNrIiwic3JjZG9jIiwic3JjbGFuZyIsInNyY3NldCIsInN1bW1hcnkiLCJ0YWJpbmRleCIsInVzZW1hcCIsIndtb2RlIiwiYWJvdXQiLCJkYXRhdHlwZSIsImlubGlzdCIsInJlc291cmNlIiwidHlwZW9mIiwidm9jYWIiLCJhdXRvY2FwaXRhbGl6ZSIsImF1dG9jb3JyZWN0IiwiYXV0b3NhdmUiLCJpdGVtcHJvcCIsIml0ZW1zY29wZSIsIml0ZW10eXBlIiwiaXRlbWlkIiwiaXRlbXJlZiIsInJlc3VsdHMiLCJzZWN1cml0eSIsInVuc2VsZWN0YWJsZSIsIl9zbGljZWRUb0FycmF5IiwiX24iLCJfZCIsIl9lIiwiX3MiLCJzbGljZUl0ZXJhdG9yIiwiaW5saW5lU3R5bGUiLCJzdHlsZU9iamVjdCIsInN0eWxlUHJvcGVydHlWYWx1ZSIsIl9zdHlsZVByb3BlcnR5VmFsdWUkcyIsIl9zdHlsZVByb3BlcnR5VmFsdWUkczIiLCJjaGFyYWN0ZXIiLCJzdHlsZXMiLCJodG1sIiwiX3JlZiRkZWNvZGVFbnRpdGllcyIsIl9yZWYkcHJlcHJvY2Vzc05vZGVzIiwicHJlcHJvY2Vzc05vZGVzIiwiX2h0bWxwYXJzZXIyIiwiX2luaGVyaXRzTG9vc2UiLCJpc0Fic29sdXRlIiwicGF0aG5hbWUiLCJyZXNvbHZlUGF0aG5hbWUiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJwYXJ0IiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJnZXRIaXN0b3J5U3RhdGUiLCJoaXN0b3J5IiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiY2FuVXNlSGlzdG9yeSIsInVzZXJBZ2VudCIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImZvcmNlUmVmcmVzaCIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRrZXlMZW5ndGgiLCJrZXlMZW5ndGgiLCJiYXNlbmFtZSIsImdldERPTUxvY2F0aW9uIiwiaGlzdG9yeVN0YXRlIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiaGFuZGxlUG9wU3RhdGUiLCJldmVudCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwicmV2ZXJ0UG9wIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsImNoZWNrRE9NTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwic3RyaXBIYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJjcmVhdGVIYXNoSGlzdG9yeSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJiYXNlVGFnIiwiZ2V0QXR0cmlidXRlIiwicHVzaEhhc2hQYXRoIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiUmVhY3QiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiZ3VkIiwiX0NvbXBvbmVudCIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsImNyZWF0ZU5hbWVkQ29udGV4dCIsIlJvdXRlciIsImNvbXB1dGVSb290TWF0Y2giLCJwYXJhbXMiLCJpc0V4YWN0IiwiX3BlbmRpbmdMb2NhdGlvbiIsIlJvdXRlckNvbnRleHQiLCJzdGF0aWNDb250ZXh0IiwiY2FjaGUiLCJjYWNoZUNvdW50IiwibWF0Y2hQYXRoIiwibWF0Y2hlZCIsInBhdGhDYWNoZSIsInJlZ2V4cCIsImNvbXBpbGVQYXRoIiwiUm91dGUiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIlN3aXRjaCIsImNvbXB1dGVkTWF0Y2giLCJCcm93c2VyUm91dGVyIiwiY3JlYXRlSGlzdG9yeSIsInJlc29sdmVUb0xvY2F0aW9uIiwibm9ybWFsaXplVG9Mb2NhdGlvbiIsImZvcndhcmRSZWZTaGltIiwiTGlua0FuY2hvciIsImlubmVyUmVmIiwibmF2aWdhdGUiLCJyZXN0IiwiZXgiLCJpc01vZGlmaWVkRXZlbnQiLCJmb3J3YXJkZWRSZWYiLCJMaW5rIiwiYXJpYUN1cnJlbnQiLCJhY3RpdmVDbGFzc05hbWUiLCJhY3RpdmVTdHlsZSIsImNsYXNzTmFtZVByb3AiLCJjbGFzc05hbWUiLCJpc0FjdGl2ZVByb3AiLCJsb2NhdGlvblByb3AiLCJzdHlsZVByb3AiLCJlc2NhcGVkUGF0aCIsImNsYXNzbmFtZXMiLCJqb2luQ2xhc3NuYW1lcyIsInF1ZXJ5RnJvbVBvam8iLCJzZWxlY3Rpb25TZXRGcm9tT2JqIiwiQ2FjaGUiLCJqdXN0VHlwZW5hbWVRdWVyeSIsImN1cnJlbnRDb250ZXh0IiwiTUlTU0lOR19WQUxVRSIsImlkQ291bnRlciIsImhvc3QiLCJTbG90Iiwic2xvdHMiLCJ3aXRoVmFsdWUiLCJzYXZlZCIsIm5vQ29udGV4dCIsImRlZmF1bHREaXNwb3NlIiwiZGlzcG9zZSIsIm5ld2VzdCIsIm9sZGVzdCIsImdldEVudHJ5Iiwib2xkZXIiLCJuZXdlciIsImNsZWFuIiwicGFyZW50RW50cnlTbG90IiwicmV1c2FibGVFbXB0eUFycmF5IiwiZW1wdHlTZXRQb29sIiwiYXNzZXJ0Iiwib3B0aW9uYWxNZXNzYWdlIiwidmFsdWVHZXQiLCJwYXJlbnRzIiwiY2hpbGRWYWx1ZXMiLCJkaXJ0eUNoaWxkcmVuIiwiZGlydHkiLCJyZWNvbXB1dGluZyIsIkVudHJ5IiwicmVjb21wdXRlIiwibWlnaHRCZURpcnR5IiwicmVwb3J0RGlydHlDaGlsZCIsInJlcG9ydENsZWFuQ2hpbGQiLCJyZW1lbWJlclBhcmVudCIsIm1heWJlUmVwb3J0T3JwaGFuIiwib3JpZ2luYWxDaGlsZHJlbiIsImZvcmdldENoaWxkcmVuIiwicmVjb21wdXRlTmV3VmFsdWUiLCJtYXliZVVuc3Vic2NyaWJlIiwic2V0RGlydHkiLCJtYXliZVN1YnNjcmliZSIsInJlcG9ydENsZWFuIiwic2V0Q2xlYW4iLCJyZWFsbHlSZWNvbXB1dGUiLCJyZXBvcnREaXJ0eSIsImZvcmdldENoaWxkIiwiY2hpbGRWYWx1ZSIsInJlbW92ZURpcnR5Q2hpbGQiLCJyZXBvcnRPcnBoYW4iLCJfdmFsdWUiLCJ3ZWFrbmVzcyIsImxvb2t1cEFycmF5IiwiZ2V0Q2hpbGRUcmllIiwiaXNPYmpSZWYiLCJ3ZWFrIiwic3Ryb25nIiwiS2V5VHJpZSIsImhhdmVXYXJuZWQiLCJzaG91bGRXYXJuIiwiYW5zd2VyIiwiZW5zdXJlUmVhZHkiLCJjYW5CeXBhc3NJbml0IiwiaWRWYWx1ZSIsInN0b3JlIiwiaXNSb290UXVlcnkiLCJfX3R5cGVuYW1lIiwiaGFzT3duIiwiaW50cm9zcGVjdGlvblF1ZXJ5UmVzdWx0RGF0YSIsInBvc3NpYmxlVHlwZXNNYXAiLCJwYXJzZUludHJvc3BlY3Rpb25SZXN1bHQiLCJpc1JlYWR5IiwiaW1wbGVtZW50aW5nVHlwZXMiLCJpbnRyb3NwZWN0aW9uUmVzdWx0RGF0YSIsInR5cGVNYXAiLCJfX3NjaGVtYSIsInBvc3NpYmxlVHlwZXMiLCJpbXBsZW1lbnRpbmdUeXBlIiwiZGVwZW5kIiwiZGF0YUlkIiwiZGlzcG9zYWJsZSIsIm1ha2VDYWNoZUtleSIsIm5ld0RhdGEiLCJkZWZhdWx0Tm9ybWFsaXplZENhY2hlRmFjdG9yeSIsImNhY2hlS2V5Um9vdCIsImZyZWV6ZVJlc3VsdHMiLCJleGVjdXRlU3RvcmVRdWVyeSIsImV4ZWN1dGVTZWxlY3Rpb25TZXQiLCJleGVjdXRlU3ViU2VsZWN0ZWRBcnJheSIsInF1ZXJ5Iiwicm9vdFZhbHVlIiwiY29udGV4dFZhbHVlIiwidmFyaWFibGVWYWx1ZXMiLCJmcmFnbWVudE1hdGNoZXIiLCJleGVjQ29udGV4dCIsInJlYWRRdWVyeUZyb21TdG9yZSIsImRpZmZRdWVyeUFnYWluc3RTdG9yZSIsInJldHVyblBhcnRpYWxEYXRhIiwicHJldmlvdXNSZXN1bHQiLCJyb290SWQiLCJmcmFnbWVudE1hdGNoZXJGdW5jdGlvbiIsInF1ZXJ5RGVmaW5pdGlvbiIsImRhdGFJZEZyb21PYmplY3QiLCJjYWNoZVJlZGlyZWN0cyIsImV4ZWNSZXN1bHQiLCJoYXNNaXNzaW5nRmllbGRzIiwibWlzc2luZyIsInRvbGVyYWJsZSIsIm1haW5EZWZpbml0aW9uIiwiZnJhZ21lbnRNYXAiLCJmaW5hbFJlc3VsdCIsIm9iamVjdHNUb01lcmdlIiwiaGFuZGxlTWlzc2luZyIsImZpZWxkUmVzdWx0IiwiZXhlY3V0ZUZpZWxkIiwiZnJhZ21lbnRFeGVjUmVzdWx0IiwicmVhZFN0b3JlUmVzdWx0IiwicmVzdWx0S2V5Iiwic3RvcmVLZXlOYW1lIiwiZmllbGRWYWx1ZSIsInJlc29sdmVyIiwiZ2V0Q2FjaGVLZXkiLCJzdG9yZU9iaiIsImpzb24iLCJyZWFkU3RvcmVSZXNvbHZlciIsImNvbWJpbmVFeGVjUmVzdWx0cyIsImFzc2VydFNlbGVjdGlvblNldEZvcklkVmFsdWUiLCJleGVjUmVzdWx0cyIsImNoaWxkUmVzdWx0IiwiZGVmYXVsdEZyYWdtZW50TWF0Y2hlciIsIndyaXRlUXVlcnlUb1N0b3JlIiwid3JpdGVSZXN1bHRUb1N0b3JlIiwib3BlcmF0aW9uRGVmaW5pdGlvbiIsIndyaXRlU2VsZWN0aW9uU2V0VG9TdG9yZSIsInByb2Nlc3NlZERhdGEiLCJlbmhhbmNlZEVycm9yIiwiZW5oYW5jZUVycm9yV2l0aERvY3VtZW50IiwicmVzdWx0RmllbGRLZXkiLCJ3cml0ZUZpZWxkVG9TdG9yZSIsImlzRGVmZXJlZCIsImlzQ2xpZW50IiwiZmFrZUNvbnRleHQiLCJPYmplY3RDYWNoZSIsInN0b3JlVmFsdWUiLCJzdG9yZU9iamVjdCIsInN0b3JlRmllbGROYW1lIiwiZ2VuZXJhdGVkSWQiLCJwcm9jZXNzQXJyYXlWYWx1ZSIsInZhbHVlRGF0YUlkIiwiaXNHZW5lcmF0ZWRJZCIsInNlbWFudGljSWQiLCJpc0RhdGFQcm9jZXNzZWQiLCJlc2NhcGVkSWQiLCJoYWRUeXBlbmFtZSIsImhhc1R5cGVuYW1lIiwidHlwZW5hbWVDaGFuZ2VkIiwibWVyZ2VXaXRoR2VuZXJhdGVkIiwiZ2VuZXJhdGVkS2V5IiwicmVhbEtleSIsInJlYWwiLCJtYWRlQ2hhbmdlcyIsInJlYWxWYWx1ZSIsIm5ld1JlYWxWYWx1ZSIsIml0ZW1EYXRhSWQiLCJkZWZhdWx0Q29uZmlnIiwiSGV1cmlzdGljRnJhZ21lbnRNYXRjaGVyIiwiX2lkIiwiYWRkVHlwZW5hbWUiLCJyZXN1bHRDYWNoaW5nIiwib3B0aW1pc3RpY0lkIiwidHJhbnNhY3Rpb24iLCJ3YXRjaGVzIiwidHlwZW5hbWVEb2N1bWVudENhY2hlIiwic2lsZW5jZUJyb2FkY2FzdCIsImN1c3RvbVJlc29sdmVycyIsImNhY2hlUmVzb2x2ZXJzIiwib3B0aW1pc3RpY0RhdGEiLCJzdG9yZVdyaXRlciIsInN0b3JlUmVhZGVyIiwibWF5YmVCcm9hZGNhc3RXYXRjaCIsIm9wdGltaXN0aWMiLCJyZXN0b3JlIiwiZXh0cmFjdCIsInRyYW5zZm9ybURvY3VtZW50IiwiYnJvYWRjYXN0V2F0Y2hlcyIsImRpZmYiLCJ3YXRjaCIsImV2aWN0IiwicmVtb3ZlT3B0aW1pc3RpYyIsImlkVG9SZW1vdmUiLCJ0b1JlYXBwbHkiLCJyZW1vdmVkQ291bnQiLCJsYXllciIsInBlcmZvcm1UcmFuc2FjdGlvbiIsInJlY29yZE9wdGltaXN0aWNUcmFuc2FjdGlvbiIsImlzVGVybWluYXRpbmciLCJyZXF1ZXN0IiwiZnJvbUVycm9yIiwiZXJyb3JWYWx1ZSIsImNyZWF0ZU9wZXJhdGlvbiIsInN0YXJ0aW5nIiwib3BlcmF0aW9uTmFtZSIsImdldEtleSIsInBhc3N0aHJvdWdoIiwiZm9yd2FyZCIsInRvTGluayIsImVtcHR5IiwibGlua3MiLCJyaWdodCIsImxlZnRMaW5rIiwicmlnaHRMaW5rIiwiQXBvbGxvTGluayIsInNlY29uZCIsImZpcnN0TGluayIsIm5leHRMaW5rIiwiZXhlY3V0ZSIsInRyYW5zZm9ybWVkT3BlcmF0aW9uIiwidHJhbnNmb3JtT3BlcmF0aW9uIiwiT1BFUkFUSU9OX0ZJRUxEUyIsInZhbGlkYXRlT3BlcmF0aW9uIiwiZmFsbGJhY2tIdHRwQ29uZmlnIiwiaHR0cCIsImluY2x1ZGVRdWVyeSIsImluY2x1ZGVFeHRlbnNpb25zIiwidGhyb3dTZXJ2ZXJFcnJvciIsInJlc3BvbnNlIiwic3RhdHVzQ29kZSIsInN0YXR1cyIsInNlcmlhbGl6ZWQiLCJwYXJzZUVycm9yIiwibGlua09wdGlvbnMiLCJ1cmkiLCJ1c2VHRVRGb3JRdWVyaWVzIiwiZmV0Y2hlciIsImxpbmtDb25maWciLCJyZXF1ZXN0T3B0aW9ucyIsImZldGNoT3B0aW9ucyIsImNyZWRlbnRpYWxzIiwiY2hvc2VuVVJJIiwiZmFsbGJhY2tVUkkiLCJjb250ZXh0VVJJIiwiZ2V0Q29udGV4dCIsInNlbGVjdFVSSSIsImNsaWVudEF3YXJlbmVzc0hlYWRlcnMiLCJjbGllbnRBd2FyZW5lc3MiLCJjb250cm9sbGVyIiwiY29udGV4dEhlYWRlcnMiLCJjb250ZXh0Q29uZmlnIiwiZmFsbGJhY2tDb25maWciLCJjb25maWdzIiwic2lnbmFsIiwiQWJvcnRDb250cm9sbGVyIiwiX2NvbnRyb2xsZXIiLCJxdWVyeVBhcmFtcyIsImFkZFF1ZXJ5UGFyYW0iLCJzZXJpYWxpemVkVmFyaWFibGVzIiwic2VyaWFsaXplZEV4dGVuc2lvbnMiLCJwcmVGcmFnbWVudCIsImZyYWdtZW50U3RhcnQiLCJxdWVyeVBhcmFtc1ByZWZpeCIsIm5ld1VSSSIsInNldENvbnRleHQiLCJib2R5VGV4dCIsImFib3J0IiwiTmV0d29ya1N0YXR1cyIsImlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCIsIm5ldHdvcmtTdGF0dXMiLCJMaW5rT2JzZXJ2YWJsZSIsImlzTm9uRW1wdHlBcnJheSIsIkZldGNoVHlwZSIsImdyYXBoUUxFcnJvcnMiLCJuZXR3b3JrRXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJleHRyYUluZm8iLCJncmFwaFFMRXJyb3IiLCJBcG9sbG9FcnJvciIsInF1ZXJ5TWFuYWdlciIsInNob3VsZFN1YnNjcmliZSIsIm9uU3Vic2NyaWJlIiwib2JzZXJ2ZXJzIiwiaXNUb3JuRG93biIsInF1ZXJ5SWQiLCJnZW5lcmF0ZVF1ZXJ5SWQiLCJvcERlZiIsInF1ZXJ5TmFtZSIsInJlbW92ZVF1ZXJ5IiwiY3VycmVudFJlc3VsdCIsImdldEN1cnJlbnRSZXN1bHQiLCJsYXN0UmVzdWx0IiwibGFzdEVycm9yIiwibG9hZGluZyIsInBvbGljeSIsInF1ZXJ5U3RvcmVWYWx1ZSIsInF1ZXJ5U3RvcmUiLCJmZXRjaFBvbGljeSIsImlzTmV0d29ya0ZldGNoUG9saWN5IiwiZXJyb3JQb2xpY3kiLCJ1cGRhdGVMYXN0UmVzdWx0Iiwic3RhbGUiLCJpc0RpZmZlcmVudEZyb21MYXN0UmVzdWx0IiwibmV3UmVzdWx0IiwibGFzdFJlc3VsdFNuYXBzaG90Iiwic25hcHNob3QiLCJnZXRMYXN0UmVzdWx0IiwiZ2V0TGFzdEVycm9yIiwicmVzZXRMYXN0UmVzdWx0cyIsInJlc2V0UXVlcnlTdG9yZUVycm9ycyIsInJlZmV0Y2giLCJmZXRjaFF1ZXJ5IiwiZmV0Y2hNb3JlIiwiZmV0Y2hNb3JlT3B0aW9ucyIsImNvbWJpbmVkT3B0aW9ucyIsInFpZCIsIm5vcm1hbCIsImZldGNoTW9yZVJlc3VsdCIsInVwZGF0ZVF1ZXJ5Iiwic3RvcFF1ZXJ5Iiwic3Vic2NyaWJlVG9Nb3JlIiwic3RhcnRHcmFwaFFMU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uRGF0YSIsInByZXZpb3VzIiwic2V0T3B0aW9ucyIsInBvbGxJbnRlcnZhbCIsInN0YXJ0UG9sbGluZyIsInN0b3BQb2xsaW5nIiwic2V0VmFyaWFibGVzIiwib2xkRmV0Y2hQb2xpY3kiLCJmZXRjaFJlc3VsdHMiLCJ0cnlGZXRjaCIsIm1hcEZuIiwiZGF0YVN0b3JlIiwibWFya1VwZGF0ZVF1ZXJ5UmVzdWx0IiwiYnJvYWRjYXN0UXVlcmllcyIsInN0b3BQb2xsaW5nUXVlcnkiLCJhc3NlcnROb3RDYWNoZUZpcnN0T3JPbmx5Iiwic3RhcnRQb2xsaW5nUXVlcnkiLCJhc3N1bWVJbW11dGFibGVSZXN1bHRzIiwic3ViT2JzZXJ2ZXIiLCJkZWZhdWx0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJFcnJvckNhbGxiYWNrIiwic2V0VXBRdWVyeSIsInRlYXJEb3duUXVlcnkiLCJhZGRPYnNlcnZhYmxlUXVlcnkiLCJpdGVyYXRlT2JzZXJ2ZXJzU2FmZWx5Iiwib2JzZXJ2ZVF1ZXJ5IiwiZ2V0TG9jYWxTdGF0ZSIsImFkZEV4cG9ydGVkVmFyaWFibGVzIiwicHJldmlvdXNWYXJpYWJsZXMiLCJzZXJ2ZXJRdWVyeSIsInJlbW92ZU9ic2VydmFibGVRdWVyeSIsIm9ic2VydmVyc1dpdGhNZXRob2QiLCJvYnMiLCJvYnNRdWVyeSIsImdldFN0b3JlIiwibXV0YXRpb25JZCIsImluaXRNdXRhdGlvbiIsIm11dGF0aW9uIiwibWFya011dGF0aW9uRXJyb3IiLCJtYXJrTXV0YXRpb25SZXN1bHQiLCJpbml0UXVlcnkiLCJwcmV2aW91c1F1ZXJ5IiwiY2xpZW50IiwicmVzb2x2ZXJzIiwiYWRkUmVzb2x2ZXJzIiwic2V0RnJhZ21lbnRNYXRjaGVyIiwicmVzb2x2ZXJHcm91cCIsInNldFJlc29sdmVycyIsImdldFJlc29sdmVycyIsInJ1blJlc29sdmVycyIsInJlbW90ZVJlc3VsdCIsIm9ubHlSdW5Gb3JjZWRSZXNvbHZlcnMiLCJyZXNvbHZlRG9jdW1lbnQiLCJsb2NhbFJlc3VsdCIsImdldEZyYWdtZW50TWF0Y2hlciIsImNsaWVudFF1ZXJ5IiwicHJlcGFyZUNvbnRleHQiLCJidWlsZFJvb3RWYWx1ZUZyb21DYWNoZSIsImV4cG9ydGVkVmFyaWFibGVzIiwic2hvdWxkRm9yY2VSZXNvbHZlcnMiLCJmb3JjZVJlc29sdmVycyIsImRlZmluaXRpb25PcGVyYXRpb24iLCJkZWZhdWx0T3BlcmF0aW9uVHlwZSIsInJlc29sdmVTZWxlY3Rpb25TZXQiLCJyZXN1bHRzVG9NZXJnZSIsInJlc29sdmVGaWVsZCIsImZyYWdtZW50UmVzdWx0IiwiYWxpYXNlZEZpZWxkTmFtZSIsImFsaWFzVXNlZCIsImRlZmF1bHRSZXN1bHQiLCJyZXN1bHRQcm9taXNlIiwicmVzb2x2ZXJUeXBlIiwicmVzb2x2ZXJNYXAiLCJyZXNvbHZlU3ViU2VsZWN0ZWRBcnJheSIsIm11bHRpcGxleCIsImFwb2xsb0NvbnRleHQiLCJxdWVyeURlZHVwbGljYXRpb24iLCJvbkJyb2FkY2FzdCIsInNzck1vZGUiLCJsb2NhbFN0YXRlIiwibXV0YXRpb25TdG9yZSIsIk11dGF0aW9uU3RvcmUiLCJxdWVyaWVzIiwiZmV0Y2hRdWVyeVJlamVjdEZucyIsInRyYW5zZm9ybUNhY2hlIiwiaW5GbGlnaHRMaW5rT2JzZXJ2YWJsZXMiLCJwb2xsaW5nSW5mb0J5UXVlcnlJZCIsImdldENhY2hlIiwic3RvcCIsIl9pbmZvIiwic3RvcFF1ZXJ5Tm9Ccm9hZGNhc3QiLCJtdXRhdGUiLCJvcHRpbWlzdGljUmVzcG9uc2UiLCJ1cGRhdGVRdWVyaWVzIiwicmVmZXRjaFF1ZXJpZXMiLCJhd2FpdFJlZmV0Y2hRdWVyaWVzIiwic2V0UXVlcnkiLCJnZXRWYXJpYWJsZXMiLCJnZW5lcmF0ZVVwZGF0ZVF1ZXJpZXNJbmZvIiwidXBkYXRlUXVlcmllc0J5TmFtZSIsIm9ic2VydmFibGVRdWVyeSIsIm1hcmtNdXRhdGlvbkluaXQiLCJ1cGRhdGVXaXRoUHJveHlGbiIsInN0b3JlUmVzdWx0IiwiZ2V0T2JzZXJ2YWJsZUZyb21MaW5rIiwibWFya011dGF0aW9uQ29tcGxldGUiLCJyZWZldGNoUXVlcnlQcm9taXNlcyIsInJlZmV0Y2hRdWVyeSIsInF1ZXJ5T3B0aW9ucyIsImZldGNoVHlwZSIsImZldGNoTW9yZUZvclF1ZXJ5SWQiLCJtZXRhZGF0YSIsIm5lZWRUb0ZldGNoIiwiaXNOZXR3b3JrT25seSIsInNob3VsZEZldGNoIiwicmVxdWVzdElkIiwiY2FuY2VsIiwidXBkYXRlUXVlcnlXYXRjaCIsImxhc3RSZXF1ZXN0SWQiLCJpbnZhbGlkYXRlZCIsImludmFsaWRhdGUiLCJzdG9yZVByZXZpb3VzVmFyaWFibGVzIiwiaXNQb2xsIiwicG9sbCIsImlzUmVmZXRjaCIsIm5ldHdvcmtSZXN1bHQiLCJmZXRjaFJlcXVlc3QiLCJnZXRRdWVyeSIsIm1hcmtRdWVyeUVycm9yIiwibWFya1F1ZXJ5UmVzdWx0Q2xpZW50IiwiaGFzRm9yY2VkUmVzb2x2ZXJzIiwibWFya1F1ZXJ5UmVzdWx0IiwicXVlcnlMaXN0ZW5lckZvck9ic2VydmVyIiwiaW52b2tlIiwibmV0d29ya1N0YXR1c0NoYW5nZWQiLCJzaG91bGROb3RpZnlJZkxvYWRpbmciLCJub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UiLCJoYXNHcmFwaFFMRXJyb3JzIiwiaXNNaXNzaW5nIiwiZXJyb3JTdGF0dXNDaGFuZ2VkIiwiZGlmZlJlc3VsdCIsInJlc3VsdEZyb21TdG9yZSIsImZvckxpbmsiLCJ0cmFuc2Zvcm1Gb3JMaW5rIiwiZGVmYXVsdFZhcnMiLCJ3YXRjaFF1ZXJ5IiwidHJhbnNmb3JtZWRPcHRpb25zIiwid2F0Y2hlZFF1ZXJ5Iiwic3RvcFF1ZXJ5SW5TdG9yZSIsInN0b3BRdWVyeUluU3RvcmVOb0Jyb2FkY2FzdCIsImFkZFF1ZXJ5TGlzdGVuZXIiLCJjbGVhclN0b3JlIiwicmVzZXRJZHMiLCJyZXNldFN0b3JlIiwicmVGZXRjaE9ic2VydmFibGVRdWVyaWVzIiwiaW5jbHVkZVN0YW5kYnkiLCJvYnNlcnZhYmxlUXVlcnlQcm9taXNlcyIsInN0YXJ0UXVlcnkiLCJtYWtlT2JzZXJ2YWJsZSIsIm1hcmtTdWJzY3JpcHRpb25SZXN1bHQiLCJnZXRDdXJyZW50UXVlcnlSZXN1bHQiLCJnZXRRdWVyeVdpdGhQcmV2aW91c1Jlc3VsdCIsInF1ZXJ5SWRPck9ic2VydmFibGUiLCJmb3VuZE9ic2VydmVhYmxlUXVlcnkiLCJkZWR1cGxpY2F0aW9uIiwiZm9yY2VGZXRjaCIsImFjdGl2ZU5leHRDb3VudCIsImNvbXBsZXRlZCIsImFzeW5jTWFwIiwiZXJyb3JzRnJvbVN0b3JlIiwiZnFyZklkIiwibmV3SW5mbyIsIm5ld0NvbnRleHQiLCJjaGVja0luRmxpZ2h0IiwiaW50ZXJ2YWwiLCJpbml0aWFsQ2FjaGUiLCJpZ25vcmVFcnJvcnMiLCJ3cml0ZVdpdGhFcnJvcnMiLCJvcmlnIiwibmV4dFF1ZXJ5UmVzdWx0IiwiY3VycmVudFF1ZXJ5UmVzdWx0IiwibXV0YXRpb25SZXN1bHQiLCJxdWVyeVZhcmlhYmxlcyIsImRlZmF1bHRPcHRpb25zIiwicmVzZXRTdG9yZUNhbGxiYWNrcyIsImNsZWFyU3RvcmVDYWxsYmFja3MiLCJzc3JGb3JjZUZldGNoRGVsYXkiLCJjb25uZWN0VG9EZXZUb29scyIsInR5cGVEZWZzIiwiZGlzYWJsZU5ldHdvcmtGZXRjaGVzIiwiX19BUE9MTE9fQ0xJRU5UX18iLCJjbGllbnRBd2FyZW5lc3NOYW1lIiwiY2xpZW50QXdhcmVuZXNzVmVyc2lvbiIsImRldlRvb2xzSG9va0NiIiwibXV0YXRpb25zIiwiZGF0YVdpdGhPcHRpbWlzdGljUmVzdWx0cyIsInJlYWRRdWVyeSIsInJlYWRGcmFnbWVudCIsIndyaXRlUXVlcnkiLCJ3cml0ZUZyYWdtZW50Iiwid3JpdGVEYXRhIiwiX19hY3Rpb25Ib29rRm9yRGV2VG9vbHMiLCJfX3JlcXVlc3RSYXciLCJpbml0UXVlcnlNYW5hZ2VyIiwib25SZXNldFN0b3JlIiwib25DbGVhclN0b3JlIiwic2VyaWFsaXplZFN0YXRlIiwic2V0TG9jYWxTdGF0ZUZyYWdtZW50TWF0Y2hlciIsImdldEFwb2xsb0NvbnRleHQiLCJEb2N1bWVudFR5cGUiLCJBcG9sbG9Db250ZXh0IiwiUXVlcnkiLCJNdXRhdGlvbiIsIkhlYWRlciIsImxvZ28iLCJsb2FkUXVpbGwiLCJleGlzdGluZ1NjcmlwdCIsIm9ubG9hZCIsIlF1aWxsRWRpdG9yIiwiZWRpdG9yIiwiaW5pdGlhbGl6ZVF1aWxsRWRpdG9yIiwiUXVpbGwiLCJ0b29sYmFyIiwidGhlbWUiLCJDdXJyZW50Q2F0ZWdvcnlDb250ZXh0IiwiQ3VycmVudENhdGVnb3J5UHJvdmlkZXIiLCJjdXJyZW50Q2F0ZWdvcnkiLCJzZXRDdXJyZW50Q2F0ZWdvcnkiLCJCbG9nTWVudUl0ZW0iLCJhY3RpdmUiLCJvcGVuVG9wQ2F0ZWdvcnkiLCJwcmV2U3RhdGUiLCJjYXRlZ29yeSIsInN1YkNhdGVnb3JpZXMiLCJzdWJDYXRlZ29yeSIsIkJsb2dDYXRlZ29yeU5hdmlnYXRvciIsImNhdGVnb3JpZXMiLCJwcmV2aW91c09wdGlvbnMiLCJnZXRPcHRpb25zIiwibmV3T3B0aW9ucyIsInN0b3JlUHJldmlvdXMiLCJpc0VxdWFsIiwicmVmcmVzaENsaWVudCIsImlzTmV3IiwidmVyaWZ5RG9jdW1lbnRUeXBlIiwiY2FjaGVkIiwib25OZXdEYXRhIiwicHJldmlvdXNEYXRhIiwiY3VycmVudE9ic2VydmFibGUiLCJydW5MYXp5IiwicnVuTGF6eVF1ZXJ5IiwibGF6eU9wdGlvbnMiLCJnZXRFeGVjdXRlUmVzdWx0IiwiZ2V0UXVlcnlSZXN1bHQiLCJzdGFydFF1ZXJ5U3Vic2NyaXB0aW9uIiwib2JzUmVmZXRjaCIsIm9ic0ZldGNoTW9yZSIsIm9ic1VwZGF0ZVF1ZXJ5Iiwib2JzU3RhcnRQb2xsaW5nIiwib2JzU3RvcFBvbGxpbmciLCJvYnNTdWJzY3JpYmVUb01vcmUiLCJza2lwIiwicmVtb3ZlUXVlcnlTdWJzY3JpcHRpb24iLCJ1cGRhdGVPYnNlcnZhYmxlUXVlcnkiLCJnZXRFeGVjdXRlU3NyUmVzdWx0IiwiZXhlY3V0ZUxhenkiLCJjYWxsZWQiLCJmZXRjaERhdGEiLCJzc3IiLCJhZnRlckV4ZWN1dGUiLCJoYW5kbGVFcnJvck9yQ29tcGxldGVkIiwic3NySW5pdGlhdGVkIiwicmVuZGVyUHJvbWlzZXMiLCJzc3JEaXNhYmxlZCIsImZldGNoRGlzYWJsZWQiLCJzc3JMb2FkaW5nIiwib2JzZXJ2YWJsZVF1ZXJ5RmllbGRzIiwiYWRkUXVlcnlQcm9taXNlIiwicHJlcGFyZU9ic2VydmFibGVRdWVyeU9wdGlvbnMiLCJyZWFjdENvbXBvbmVudCIsImluaXRpYWxpemVPYnNlcnZhYmxlUXVlcnkiLCJnZXRTU1JPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZVF1ZXJ5T3B0aW9ucyIsInJlZ2lzdGVyU1NST2JzZXJ2YWJsZSIsIm5ld09ic2VydmFibGVRdWVyeU9wdGlvbnMiLCJyZXN1YnNjcmliZVRvUXVlcnkiLCJwYXJ0aWFsUmVmZXRjaCIsIm9uQ29tcGxldGVkIiwidXNlQmFzZVF1ZXJ5IiwidGljayIsInVwZGF0ZWRPcHRpb25zIiwicXVlcnlEYXRhUmVmIiwicXVlcnlEYXRhIiwibWVtb0ZuIiwicXVlcnlSZXN1bHQiLCJzZXRSZXN1bHQiLCJydW5NdXRhdGlvbiIsIm11dGF0aW9uRnVuY3Rpb25PcHRpb25zIiwib25NdXRhdGlvblN0YXJ0IiwiZ2VuZXJhdGVOZXdNdXRhdGlvbklkIiwib25NdXRhdGlvbkNvbXBsZXRlZCIsIm9uTXV0YXRpb25FcnJvciIsIm1vc3RSZWNlbnRNdXRhdGlvbklkIiwibXV0YXRlT3B0aW9ucyIsIm11dGF0ZVZhcmlhYmxlcyIsIm11dGF0aW9uQ29udGV4dCIsImlnbm9yZVJlc3VsdHMiLCJ1cGRhdGVSZXN1bHQiLCJpc01vc3RSZWNlbnRNdXRhdGlvbiIsImluaXRpYWxpemUiLCJnZXRMb2FkaW5nUmVzdWx0Iiwic2hvdWxkUmVzdWJzY3JpYmUiLCJzdGFydFN1YnNjcmlwdGlvbiIsImVuZFN1YnNjcmlwdGlvbiIsInVwZGF0ZUN1cnJlbnREYXRhIiwidXBkYXRlRXJyb3IiLCJjb21wbGV0ZVN1YnNjcmlwdGlvbiIsIm9uU3Vic2NyaXB0aW9uRGF0YSIsIm9uU3Vic2NyaXB0aW9uQ29tcGxldGUiLCJxdWVyeVByb21pc2VzIiwicXVlcnlJbmZvVHJpZSIsImxvb2t1cFF1ZXJ5SW5mbyIsInF1ZXJ5SW5zdGFuY2UiLCJmaW5pc2giLCJoYXNQcm9taXNlcyIsImNvbnN1bWVBbmRBd2FpdFByb21pc2VzIiwicHJvbWlzZXMiLCJwcm9taXNlIiwidmFyTWFwIiwidmFyaWFibGVzU3RyaW5nIiwidXNlUXVlcnkiLCJtdXRhdGlvbkRhdGFSZWYiLCJtdXRhdGlvbkRhdGEiLCJzdWJzY3JpcHRpb25EYXRhUmVmIiwidXNlU3Vic2NyaXB0aW9uIiwiTG9hZGVyIiwiaGVhZGVySGVpZ2h0IiwiZm9vdGVySGVpZ2h0IiwiZnVsbCIsIm9mZnNldEhlaWdodCIsImlubmVySGVpZ2h0IiwiVHlwZWRRdWVyeSIsImRpc3BsYXlFcnJvciIsImRpc3BsYXlMb2FkZXIiLCJyZW5kZXJPbkVycm9yIiwiYWx3YXlzUmVuZGVyIiwibG9hZGVyRnVsbCIsImhhc0RhdGEiLCJleHAiLCJtYXliZSIsImxvYWRNb3JlIiwibWVyZ2VGdW5jIiwiZXh0cmFWYXJpYWJsZXMiLCJwcmV2aW91c1Jlc3VsdHMiLCJCbG9nc0ZvckNhdGVnb3J5UXVlcnkiLCJCbG9nQ29udGVudCIsInBhZ2VkQmxvZ3MiLCJlZGdlcyIsImJsb2dzRWxlbWVudCIsImJsb2ciLCJjYXRlZ29yeUlkIiwiYmxvZ3NGb3JDYXRlZ29yeSIsImJsb2dzIiwiQmxvZ0RhdGVTZWxlY3RvciIsIkZvb3RlciIsIlR1eCIsIkhvbWVQYWdlUXVlcnkiLCJIb21lUGFnZSIsIkFib3V0TWUiLCJhcmlhLWxhYmVsIiwiSW5NZW1vcnlDYWNoZSIsIkFwb2xsb0NsaWVudCIsIkh0dHBMaW5rIiwiQXBwIiwiUmVhY3RET00iXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxR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MUMsT0FBSyxFQUFDcG1FLEtBQUssS0FDaEIsa0JBQUMsR0FBRCxPQUVGLGtCQUFDLEVBQUQsQ0FBT0EsS0FBSyxVQUNWLGtCQUFDMGxILEdBQUQsT0FFRixrQkFBQyxFQUFELENBQU8xbEgsS0FBSyxXQUNWLGtCQUFDLEdBQUQsUUFHSixrQkFBQ3NsSCxHQUFELFMsU0NwQ1JVLElBQVMvcEYsT0FBTyxrQkFBQyxHQUFELE1BQVN0bEMsU0FBUytyRixlQUFlLFNBS2pEL2dEIiwiZmlsZSI6ImFwcC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTIyKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG5MaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2VcclxudGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGVcclxuTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuXHJcblRISVMgQ09ERSBJUyBQUk9WSURFRCBPTiBBTiAqQVMgSVMqIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcclxuS0lORCwgRUlUSEVSIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIFdJVEhPVVQgTElNSVRBVElPTiBBTlkgSU1QTElFRFxyXG5XQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgVElUTEUsIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLFxyXG5NRVJDSEFOVEFCTElUWSBPUiBOT04tSU5GUklOR0VNRU5ULlxyXG5cclxuU2VlIHRoZSBBcGFjaGUgVmVyc2lvbiAyLjAgTGljZW5zZSBmb3Igc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zXHJcbmFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG4gICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XHJcbiAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcclxuICAgIF9fYXNzaWduID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiBfX2Fzc2lnbih0KSB7XHJcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XHJcbiAgICAgICAgICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSkgdFtwXSA9IHNbcF07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xyXG4gICAgdmFyIHQgPSB7fTtcclxuICAgIGZvciAodmFyIHAgaW4gcykgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzLCBwKSAmJiBlLmluZGV4T2YocCkgPCAwKVxyXG4gICAgICAgIHRbcF0gPSBzW3BdO1xyXG4gICAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBwID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzKTsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxyXG4gICAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XHJcbiAgICAgICAgfVxyXG4gICAgcmV0dXJuIHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcclxuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XHJcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHsgZGVjb3JhdG9yKHRhcmdldCwga2V5LCBwYXJhbUluZGV4KTsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXRlcih0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XHJcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xyXG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcclxuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XHJcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcclxuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cclxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBleHBvcnRzKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmICghZXhwb3J0cy5oYXNPd25Qcm9wZXJ0eShwKSkgZXhwb3J0c1twXSA9IG1bcF07XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEdldChyZWNlaXZlciwgcHJpdmF0ZU1hcCkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIGdldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHJldHVybiBwcml2YXRlTWFwLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBwcml2YXRlTWFwLCB2YWx1ZSkge1xyXG4gICAgaWYgKCFwcml2YXRlTWFwLmhhcyhyZWNlaXZlcikpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiYXR0ZW1wdGVkIHRvIHNldCBwcml2YXRlIGZpZWxkIG9uIG5vbi1pbnN0YW5jZVwiKTtcclxuICAgIH1cclxuICAgIHByaXZhdGVNYXAuc2V0KHJlY2VpdmVyLCB2YWx1ZSk7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbn1cclxuIiwiaW1wb3J0IHtcbiAgRGlyZWN0aXZlTm9kZSxcbiAgRmllbGROb2RlLFxuICBJbnRWYWx1ZU5vZGUsXG4gIEZsb2F0VmFsdWVOb2RlLFxuICBTdHJpbmdWYWx1ZU5vZGUsXG4gIEJvb2xlYW5WYWx1ZU5vZGUsXG4gIE9iamVjdFZhbHVlTm9kZSxcbiAgTGlzdFZhbHVlTm9kZSxcbiAgRW51bVZhbHVlTm9kZSxcbiAgTnVsbFZhbHVlTm9kZSxcbiAgVmFyaWFibGVOb2RlLFxuICBJbmxpbmVGcmFnbWVudE5vZGUsXG4gIFZhbHVlTm9kZSxcbiAgU2VsZWN0aW9uTm9kZSxcbiAgTmFtZU5vZGUsXG59IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgc3RyaW5naWZ5IGZyb20gJ2Zhc3QtanNvbi1zdGFibGUtc3RyaW5naWZ5JztcbmltcG9ydCB7IEludmFyaWFudEVycm9yIH0gZnJvbSAndHMtaW52YXJpYW50JztcblxuZXhwb3J0IGludGVyZmFjZSBJZFZhbHVlIHtcbiAgdHlwZTogJ2lkJztcbiAgaWQ6IHN0cmluZztcbiAgZ2VuZXJhdGVkOiBib29sZWFuO1xuICB0eXBlbmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEpzb25WYWx1ZSB7XG4gIHR5cGU6ICdqc29uJztcbiAganNvbjogYW55O1xufVxuXG5leHBvcnQgdHlwZSBMaXN0VmFsdWUgPSBBcnJheTxudWxsIHwgSWRWYWx1ZT47XG5cbmV4cG9ydCB0eXBlIFN0b3JlVmFsdWUgPVxuICB8IG51bWJlclxuICB8IHN0cmluZ1xuICB8IHN0cmluZ1tdXG4gIHwgSWRWYWx1ZVxuICB8IExpc3RWYWx1ZVxuICB8IEpzb25WYWx1ZVxuICB8IG51bGxcbiAgfCB1bmRlZmluZWRcbiAgfCB2b2lkXG4gIHwgT2JqZWN0O1xuXG5leHBvcnQgdHlwZSBTY2FsYXJWYWx1ZSA9IFN0cmluZ1ZhbHVlTm9kZSB8IEJvb2xlYW5WYWx1ZU5vZGUgfCBFbnVtVmFsdWVOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTY2FsYXJWYWx1ZSh2YWx1ZTogVmFsdWVOb2RlKTogdmFsdWUgaXMgU2NhbGFyVmFsdWUge1xuICByZXR1cm4gWydTdHJpbmdWYWx1ZScsICdCb29sZWFuVmFsdWUnLCAnRW51bVZhbHVlJ10uaW5kZXhPZih2YWx1ZS5raW5kKSA+IC0xO1xufVxuXG5leHBvcnQgdHlwZSBOdW1iZXJWYWx1ZSA9IEludFZhbHVlTm9kZSB8IEZsb2F0VmFsdWVOb2RlO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJWYWx1ZSh2YWx1ZTogVmFsdWVOb2RlKTogdmFsdWUgaXMgTnVtYmVyVmFsdWUge1xuICByZXR1cm4gWydJbnRWYWx1ZScsICdGbG9hdFZhbHVlJ10uaW5kZXhPZih2YWx1ZS5raW5kKSA+IC0xO1xufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1ZhbHVlKHZhbHVlOiBWYWx1ZU5vZGUpOiB2YWx1ZSBpcyBTdHJpbmdWYWx1ZU5vZGUge1xuICByZXR1cm4gdmFsdWUua2luZCA9PT0gJ1N0cmluZ1ZhbHVlJztcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuVmFsdWUodmFsdWU6IFZhbHVlTm9kZSk6IHZhbHVlIGlzIEJvb2xlYW5WYWx1ZU5vZGUge1xuICByZXR1cm4gdmFsdWUua2luZCA9PT0gJ0Jvb2xlYW5WYWx1ZSc7XG59XG5cbmZ1bmN0aW9uIGlzSW50VmFsdWUodmFsdWU6IFZhbHVlTm9kZSk6IHZhbHVlIGlzIEludFZhbHVlTm9kZSB7XG4gIHJldHVybiB2YWx1ZS5raW5kID09PSAnSW50VmFsdWUnO1xufVxuXG5mdW5jdGlvbiBpc0Zsb2F0VmFsdWUodmFsdWU6IFZhbHVlTm9kZSk6IHZhbHVlIGlzIEZsb2F0VmFsdWVOb2RlIHtcbiAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdGbG9hdFZhbHVlJztcbn1cblxuZnVuY3Rpb24gaXNWYXJpYWJsZSh2YWx1ZTogVmFsdWVOb2RlKTogdmFsdWUgaXMgVmFyaWFibGVOb2RlIHtcbiAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdWYXJpYWJsZSc7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0VmFsdWUodmFsdWU6IFZhbHVlTm9kZSk6IHZhbHVlIGlzIE9iamVjdFZhbHVlTm9kZSB7XG4gIHJldHVybiB2YWx1ZS5raW5kID09PSAnT2JqZWN0VmFsdWUnO1xufVxuXG5mdW5jdGlvbiBpc0xpc3RWYWx1ZSh2YWx1ZTogVmFsdWVOb2RlKTogdmFsdWUgaXMgTGlzdFZhbHVlTm9kZSB7XG4gIHJldHVybiB2YWx1ZS5raW5kID09PSAnTGlzdFZhbHVlJztcbn1cblxuZnVuY3Rpb24gaXNFbnVtVmFsdWUodmFsdWU6IFZhbHVlTm9kZSk6IHZhbHVlIGlzIEVudW1WYWx1ZU5vZGUge1xuICByZXR1cm4gdmFsdWUua2luZCA9PT0gJ0VudW1WYWx1ZSc7XG59XG5cbmZ1bmN0aW9uIGlzTnVsbFZhbHVlKHZhbHVlOiBWYWx1ZU5vZGUpOiB2YWx1ZSBpcyBOdWxsVmFsdWVOb2RlIHtcbiAgcmV0dXJuIHZhbHVlLmtpbmQgPT09ICdOdWxsVmFsdWUnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKFxuICBhcmdPYmo6IGFueSxcbiAgbmFtZTogTmFtZU5vZGUsXG4gIHZhbHVlOiBWYWx1ZU5vZGUsXG4gIHZhcmlhYmxlcz86IE9iamVjdCxcbikge1xuICBpZiAoaXNJbnRWYWx1ZSh2YWx1ZSkgfHwgaXNGbG9hdFZhbHVlKHZhbHVlKSkge1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IE51bWJlcih2YWx1ZS52YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuVmFsdWUodmFsdWUpIHx8IGlzU3RyaW5nVmFsdWUodmFsdWUpKSB7XG4gICAgYXJnT2JqW25hbWUudmFsdWVdID0gdmFsdWUudmFsdWU7XG4gIH0gZWxzZSBpZiAoaXNPYmplY3RWYWx1ZSh2YWx1ZSkpIHtcbiAgICBjb25zdCBuZXN0ZWRBcmdPYmogPSB7fTtcbiAgICB2YWx1ZS5maWVsZHMubWFwKG9iaiA9PlxuICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKG5lc3RlZEFyZ09iaiwgb2JqLm5hbWUsIG9iai52YWx1ZSwgdmFyaWFibGVzKSxcbiAgICApO1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IG5lc3RlZEFyZ09iajtcbiAgfSBlbHNlIGlmIChpc1ZhcmlhYmxlKHZhbHVlKSkge1xuICAgIGNvbnN0IHZhcmlhYmxlVmFsdWUgPSAodmFyaWFibGVzIHx8ICh7fSBhcyBhbnkpKVt2YWx1ZS5uYW1lLnZhbHVlXTtcbiAgICBhcmdPYmpbbmFtZS52YWx1ZV0gPSB2YXJpYWJsZVZhbHVlO1xuICB9IGVsc2UgaWYgKGlzTGlzdFZhbHVlKHZhbHVlKSkge1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IHZhbHVlLnZhbHVlcy5tYXAobGlzdFZhbHVlID0+IHtcbiAgICAgIGNvbnN0IG5lc3RlZEFyZ0FycmF5T2JqID0ge307XG4gICAgICB2YWx1ZVRvT2JqZWN0UmVwcmVzZW50YXRpb24oXG4gICAgICAgIG5lc3RlZEFyZ0FycmF5T2JqLFxuICAgICAgICBuYW1lLFxuICAgICAgICBsaXN0VmFsdWUsXG4gICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICk7XG4gICAgICByZXR1cm4gKG5lc3RlZEFyZ0FycmF5T2JqIGFzIGFueSlbbmFtZS52YWx1ZV07XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNFbnVtVmFsdWUodmFsdWUpKSB7XG4gICAgYXJnT2JqW25hbWUudmFsdWVdID0gKHZhbHVlIGFzIEVudW1WYWx1ZU5vZGUpLnZhbHVlO1xuICB9IGVsc2UgaWYgKGlzTnVsbFZhbHVlKHZhbHVlKSkge1xuICAgIGFyZ09ialtuYW1lLnZhbHVlXSA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKFxuICAgICAgYFRoZSBpbmxpbmUgYXJndW1lbnQgXCIke25hbWUudmFsdWV9XCIgb2Yga2luZCBcIiR7KHZhbHVlIGFzIGFueSkua2luZH1cImAgK1xuICAgICAgICAnaXMgbm90IHN1cHBvcnRlZC4gVXNlIHZhcmlhYmxlcyBpbnN0ZWFkIG9mIGlubGluZSBhcmd1bWVudHMgdG8gJyArXG4gICAgICAgICdvdmVyY29tZSB0aGlzIGxpbWl0YXRpb24uJyxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdG9yZUtleU5hbWVGcm9tRmllbGQoXG4gIGZpZWxkOiBGaWVsZE5vZGUsXG4gIHZhcmlhYmxlcz86IE9iamVjdCxcbik6IHN0cmluZyB7XG4gIGxldCBkaXJlY3RpdmVzT2JqOiBhbnkgPSBudWxsO1xuICBpZiAoZmllbGQuZGlyZWN0aXZlcykge1xuICAgIGRpcmVjdGl2ZXNPYmogPSB7fTtcbiAgICBmaWVsZC5kaXJlY3RpdmVzLmZvckVhY2goZGlyZWN0aXZlID0+IHtcbiAgICAgIGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdID0ge307XG5cbiAgICAgIGlmIChkaXJlY3RpdmUuYXJndW1lbnRzKSB7XG4gICAgICAgIGRpcmVjdGl2ZS5hcmd1bWVudHMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PlxuICAgICAgICAgIHZhbHVlVG9PYmplY3RSZXByZXNlbnRhdGlvbihcbiAgICAgICAgICAgIGRpcmVjdGl2ZXNPYmpbZGlyZWN0aXZlLm5hbWUudmFsdWVdLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBsZXQgYXJnT2JqOiBhbnkgPSBudWxsO1xuICBpZiAoZmllbGQuYXJndW1lbnRzICYmIGZpZWxkLmFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICBhcmdPYmogPSB7fTtcbiAgICBmaWVsZC5hcmd1bWVudHMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PlxuICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGFyZ09iaiwgbmFtZSwgdmFsdWUsIHZhcmlhYmxlcyksXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBnZXRTdG9yZUtleU5hbWUoZmllbGQubmFtZS52YWx1ZSwgYXJnT2JqLCBkaXJlY3RpdmVzT2JqKTtcbn1cblxuZXhwb3J0IHR5cGUgRGlyZWN0aXZlcyA9IHtcbiAgW2RpcmVjdGl2ZU5hbWU6IHN0cmluZ106IHtcbiAgICBbYXJnTmFtZTogc3RyaW5nXTogYW55O1xuICB9O1xufTtcblxuY29uc3QgS05PV05fRElSRUNUSVZFUzogc3RyaW5nW10gPSBbXG4gICdjb25uZWN0aW9uJyxcbiAgJ2luY2x1ZGUnLFxuICAnc2tpcCcsXG4gICdjbGllbnQnLFxuICAncmVzdCcsXG4gICdleHBvcnQnLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JlS2V5TmFtZShcbiAgZmllbGROYW1lOiBzdHJpbmcsXG4gIGFyZ3M/OiBPYmplY3QsXG4gIGRpcmVjdGl2ZXM/OiBEaXJlY3RpdmVzLFxuKTogc3RyaW5nIHtcbiAgaWYgKFxuICAgIGRpcmVjdGl2ZXMgJiZcbiAgICBkaXJlY3RpdmVzWydjb25uZWN0aW9uJ10gJiZcbiAgICBkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2tleSddXG4gICkge1xuICAgIGlmIChcbiAgICAgIGRpcmVjdGl2ZXNbJ2Nvbm5lY3Rpb24nXVsnZmlsdGVyJ10gJiZcbiAgICAgIChkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2ZpbHRlciddIGFzIHN0cmluZ1tdKS5sZW5ndGggPiAwXG4gICAgKSB7XG4gICAgICBjb25zdCBmaWx0ZXJLZXlzID0gZGlyZWN0aXZlc1snY29ubmVjdGlvbiddWydmaWx0ZXInXVxuICAgICAgICA/IChkaXJlY3RpdmVzWydjb25uZWN0aW9uJ11bJ2ZpbHRlciddIGFzIHN0cmluZ1tdKVxuICAgICAgICA6IFtdO1xuICAgICAgZmlsdGVyS2V5cy5zb3J0KCk7XG5cbiAgICAgIGNvbnN0IHF1ZXJ5QXJncyA9IGFyZ3MgYXMgeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbiAgICAgIGNvbnN0IGZpbHRlcmVkQXJncyA9IHt9IGFzIHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gICAgICBmaWx0ZXJLZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgZmlsdGVyZWRBcmdzW2tleV0gPSBxdWVyeUFyZ3Nba2V5XTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYCR7ZGlyZWN0aXZlc1snY29ubmVjdGlvbiddWydrZXknXX0oJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgZmlsdGVyZWRBcmdzLFxuICAgICAgKX0pYDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRpcmVjdGl2ZXNbJ2Nvbm5lY3Rpb24nXVsna2V5J107XG4gICAgfVxuICB9XG5cbiAgbGV0IGNvbXBsZXRlRmllbGROYW1lOiBzdHJpbmcgPSBmaWVsZE5hbWU7XG5cbiAgaWYgKGFyZ3MpIHtcbiAgICAvLyBXZSBjYW4ndCB1c2UgYEpTT04uc3RyaW5naWZ5YCBoZXJlIHNpbmNlIGl0J3Mgbm9uLWRldGVybWluaXN0aWMsXG4gICAgLy8gYW5kIGNhbiBsZWFkIHRvIGRpZmZlcmVudCBzdG9yZSBrZXkgbmFtZXMgYmVpbmcgY3JlYXRlZCBldmVuIHRob3VnaFxuICAgIC8vIHRoZSBgYXJnc2Agb2JqZWN0IHVzZWQgZHVyaW5nIGNyZWF0aW9uIGhhcyB0aGUgc2FtZSBwcm9wZXJ0aWVzL3ZhbHVlcy5cbiAgICBjb25zdCBzdHJpbmdpZmllZEFyZ3M6IHN0cmluZyA9IHN0cmluZ2lmeShhcmdzKTtcbiAgICBjb21wbGV0ZUZpZWxkTmFtZSArPSBgKCR7c3RyaW5naWZpZWRBcmdzfSlgO1xuICB9XG5cbiAgaWYgKGRpcmVjdGl2ZXMpIHtcbiAgICBPYmplY3Qua2V5cyhkaXJlY3RpdmVzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoS05PV05fRElSRUNUSVZFUy5pbmRleE9mKGtleSkgIT09IC0xKSByZXR1cm47XG4gICAgICBpZiAoZGlyZWN0aXZlc1trZXldICYmIE9iamVjdC5rZXlzKGRpcmVjdGl2ZXNba2V5XSkubGVuZ3RoKSB7XG4gICAgICAgIGNvbXBsZXRlRmllbGROYW1lICs9IGBAJHtrZXl9KCR7SlNPTi5zdHJpbmdpZnkoZGlyZWN0aXZlc1trZXldKX0pYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbXBsZXRlRmllbGROYW1lICs9IGBAJHtrZXl9YDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBjb21wbGV0ZUZpZWxkTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyZ3VtZW50c09iamVjdEZyb21GaWVsZChcbiAgZmllbGQ6IEZpZWxkTm9kZSB8IERpcmVjdGl2ZU5vZGUsXG4gIHZhcmlhYmxlczogT2JqZWN0LFxuKTogT2JqZWN0IHtcbiAgaWYgKGZpZWxkLmFyZ3VtZW50cyAmJiBmaWVsZC5hcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgY29uc3QgYXJnT2JqOiBPYmplY3QgPSB7fTtcbiAgICBmaWVsZC5hcmd1bWVudHMuZm9yRWFjaCgoeyBuYW1lLCB2YWx1ZSB9KSA9PlxuICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKGFyZ09iaiwgbmFtZSwgdmFsdWUsIHZhcmlhYmxlcyksXG4gICAgKTtcbiAgICByZXR1cm4gYXJnT2JqO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXN1bHRLZXlOYW1lRnJvbUZpZWxkKGZpZWxkOiBGaWVsZE5vZGUpOiBzdHJpbmcge1xuICByZXR1cm4gZmllbGQuYWxpYXMgPyBmaWVsZC5hbGlhcy52YWx1ZSA6IGZpZWxkLm5hbWUudmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0ZpZWxkKHNlbGVjdGlvbjogU2VsZWN0aW9uTm9kZSk6IHNlbGVjdGlvbiBpcyBGaWVsZE5vZGUge1xuICByZXR1cm4gc2VsZWN0aW9uLmtpbmQgPT09ICdGaWVsZCc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lubGluZUZyYWdtZW50KFxuICBzZWxlY3Rpb246IFNlbGVjdGlvbk5vZGUsXG4pOiBzZWxlY3Rpb24gaXMgSW5saW5lRnJhZ21lbnROb2RlIHtcbiAgcmV0dXJuIHNlbGVjdGlvbi5raW5kID09PSAnSW5saW5lRnJhZ21lbnQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJZFZhbHVlKGlkT2JqZWN0OiBTdG9yZVZhbHVlKTogaWRPYmplY3QgaXMgSWRWYWx1ZSB7XG4gIHJldHVybiBpZE9iamVjdCAmJlxuICAgIChpZE9iamVjdCBhcyBJZFZhbHVlIHwgSnNvblZhbHVlKS50eXBlID09PSAnaWQnICYmXG4gICAgdHlwZW9mIChpZE9iamVjdCBhcyBJZFZhbHVlKS5nZW5lcmF0ZWQgPT09ICdib29sZWFuJztcbn1cblxuZXhwb3J0IHR5cGUgSWRDb25maWcgPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHR5cGVuYW1lOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdG9JZFZhbHVlKFxuICBpZENvbmZpZzogc3RyaW5nIHwgSWRDb25maWcsXG4gIGdlbmVyYXRlZCA9IGZhbHNlLFxuKTogSWRWYWx1ZSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ2lkJyxcbiAgICBnZW5lcmF0ZWQsXG4gICAgLi4uKHR5cGVvZiBpZENvbmZpZyA9PT0gJ3N0cmluZydcbiAgICAgID8geyBpZDogaWRDb25maWcsIHR5cGVuYW1lOiB1bmRlZmluZWQgfVxuICAgICAgOiBpZENvbmZpZyksXG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0pzb25WYWx1ZShqc29uT2JqZWN0OiBTdG9yZVZhbHVlKToganNvbk9iamVjdCBpcyBKc29uVmFsdWUge1xuICByZXR1cm4gKFxuICAgIGpzb25PYmplY3QgIT0gbnVsbCAmJlxuICAgIHR5cGVvZiBqc29uT2JqZWN0ID09PSAnb2JqZWN0JyAmJlxuICAgIChqc29uT2JqZWN0IGFzIElkVmFsdWUgfCBKc29uVmFsdWUpLnR5cGUgPT09ICdqc29uJ1xuICApO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0VmFsdWVGcm9tVmFyaWFibGUobm9kZTogVmFyaWFibGVOb2RlKSB7XG4gIHRocm93IG5ldyBJbnZhcmlhbnRFcnJvcihgVmFyaWFibGUgbm9kZXMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgdmFsdWVGcm9tTm9kZWApO1xufVxuXG5leHBvcnQgdHlwZSBWYXJpYWJsZVZhbHVlID0gKG5vZGU6IFZhcmlhYmxlTm9kZSkgPT4gYW55O1xuXG4vKipcbiAqIEV2YWx1YXRlIGEgVmFsdWVOb2RlIGFuZCB5aWVsZCBpdHMgdmFsdWUgaW4gaXRzIG5hdHVyYWwgSlMgZm9ybS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlRnJvbU5vZGUoXG4gIG5vZGU6IFZhbHVlTm9kZSxcbiAgb25WYXJpYWJsZTogVmFyaWFibGVWYWx1ZSA9IGRlZmF1bHRWYWx1ZUZyb21WYXJpYWJsZSxcbik6IGFueSB7XG4gIHN3aXRjaCAobm9kZS5raW5kKSB7XG4gICAgY2FzZSAnVmFyaWFibGUnOlxuICAgICAgcmV0dXJuIG9uVmFyaWFibGUobm9kZSk7XG4gICAgY2FzZSAnTnVsbFZhbHVlJzpcbiAgICAgIHJldHVybiBudWxsO1xuICAgIGNhc2UgJ0ludFZhbHVlJzpcbiAgICAgIHJldHVybiBwYXJzZUludChub2RlLnZhbHVlLCAxMCk7XG4gICAgY2FzZSAnRmxvYXRWYWx1ZSc6XG4gICAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLnZhbHVlKTtcbiAgICBjYXNlICdMaXN0VmFsdWUnOlxuICAgICAgcmV0dXJuIG5vZGUudmFsdWVzLm1hcCh2ID0+IHZhbHVlRnJvbU5vZGUodiwgb25WYXJpYWJsZSkpO1xuICAgIGNhc2UgJ09iamVjdFZhbHVlJzoge1xuICAgICAgY29uc3QgdmFsdWU6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fTtcbiAgICAgIGZvciAoY29uc3QgZmllbGQgb2Ygbm9kZS5maWVsZHMpIHtcbiAgICAgICAgdmFsdWVbZmllbGQubmFtZS52YWx1ZV0gPSB2YWx1ZUZyb21Ob2RlKGZpZWxkLnZhbHVlLCBvblZhcmlhYmxlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBub2RlLnZhbHVlO1xuICB9XG59XG4iLCIvLyBQcm92aWRlcyB0aGUgbWV0aG9kcyB0aGF0IGFsbG93IFF1ZXJ5TWFuYWdlciB0byBoYW5kbGUgdGhlIGBza2lwYCBhbmRcbi8vIGBpbmNsdWRlYCBkaXJlY3RpdmVzIHdpdGhpbiBHcmFwaFFMLlxuaW1wb3J0IHtcbiAgRmllbGROb2RlLFxuICBTZWxlY3Rpb25Ob2RlLFxuICBWYXJpYWJsZU5vZGUsXG4gIEJvb2xlYW5WYWx1ZU5vZGUsXG4gIERpcmVjdGl2ZU5vZGUsXG4gIERvY3VtZW50Tm9kZSxcbiAgQXJndW1lbnROb2RlLFxuICBWYWx1ZU5vZGUsXG59IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvdmlzaXRvcic7XG5cbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ3RzLWludmFyaWFudCc7XG5cbmltcG9ydCB7IGFyZ3VtZW50c09iamVjdEZyb21GaWVsZCB9IGZyb20gJy4vc3RvcmVVdGlscyc7XG5cbmV4cG9ydCB0eXBlIERpcmVjdGl2ZUluZm8gPSB7XG4gIFtmaWVsZE5hbWU6IHN0cmluZ106IHsgW2FyZ05hbWU6IHN0cmluZ106IGFueSB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpcmVjdGl2ZUluZm9Gcm9tRmllbGQoXG4gIGZpZWxkOiBGaWVsZE5vZGUsXG4gIHZhcmlhYmxlczogT2JqZWN0LFxuKTogRGlyZWN0aXZlSW5mbyB7XG4gIGlmIChmaWVsZC5kaXJlY3RpdmVzICYmIGZpZWxkLmRpcmVjdGl2ZXMubGVuZ3RoKSB7XG4gICAgY29uc3QgZGlyZWN0aXZlT2JqOiBEaXJlY3RpdmVJbmZvID0ge307XG4gICAgZmllbGQuZGlyZWN0aXZlcy5mb3JFYWNoKChkaXJlY3RpdmU6IERpcmVjdGl2ZU5vZGUpID0+IHtcbiAgICAgIGRpcmVjdGl2ZU9ialtkaXJlY3RpdmUubmFtZS52YWx1ZV0gPSBhcmd1bWVudHNPYmplY3RGcm9tRmllbGQoXG4gICAgICAgIGRpcmVjdGl2ZSxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZGlyZWN0aXZlT2JqO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkSW5jbHVkZShcbiAgc2VsZWN0aW9uOiBTZWxlY3Rpb25Ob2RlLFxuICB2YXJpYWJsZXM6IHsgW25hbWU6IHN0cmluZ106IGFueSB9ID0ge30sXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIGdldEluY2x1c2lvbkRpcmVjdGl2ZXMoXG4gICAgc2VsZWN0aW9uLmRpcmVjdGl2ZXMsXG4gICkuZXZlcnkoKHsgZGlyZWN0aXZlLCBpZkFyZ3VtZW50IH0pID0+IHtcbiAgICBsZXQgZXZhbGVkVmFsdWU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBpZiAoaWZBcmd1bWVudC52YWx1ZS5raW5kID09PSAnVmFyaWFibGUnKSB7XG4gICAgICBldmFsZWRWYWx1ZSA9IHZhcmlhYmxlc1soaWZBcmd1bWVudC52YWx1ZSBhcyBWYXJpYWJsZU5vZGUpLm5hbWUudmFsdWVdO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBldmFsZWRWYWx1ZSAhPT0gdm9pZCAwLFxuICAgICAgICBgSW52YWxpZCB2YXJpYWJsZSByZWZlcmVuY2VkIGluIEAke2RpcmVjdGl2ZS5uYW1lLnZhbHVlfSBkaXJlY3RpdmUuYCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2YWxlZFZhbHVlID0gKGlmQXJndW1lbnQudmFsdWUgYXMgQm9vbGVhblZhbHVlTm9kZSkudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gJ3NraXAnID8gIWV2YWxlZFZhbHVlIDogZXZhbGVkVmFsdWU7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTmFtZXMoZG9jOiBEb2N1bWVudE5vZGUpIHtcbiAgY29uc3QgbmFtZXM6IHN0cmluZ1tdID0gW107XG5cbiAgdmlzaXQoZG9jLCB7XG4gICAgRGlyZWN0aXZlKG5vZGUpIHtcbiAgICAgIG5hbWVzLnB1c2gobm9kZS5uYW1lLnZhbHVlKTtcbiAgICB9LFxuICB9KTtcblxuICByZXR1cm4gbmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNEaXJlY3RpdmVzKG5hbWVzOiBzdHJpbmdbXSwgZG9jOiBEb2N1bWVudE5vZGUpIHtcbiAgcmV0dXJuIGdldERpcmVjdGl2ZU5hbWVzKGRvYykuc29tZShcbiAgICAobmFtZTogc3RyaW5nKSA9PiBuYW1lcy5pbmRleE9mKG5hbWUpID4gLTEsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDbGllbnRFeHBvcnRzKGRvY3VtZW50OiBEb2N1bWVudE5vZGUpIHtcbiAgcmV0dXJuIChcbiAgICBkb2N1bWVudCAmJlxuICAgIGhhc0RpcmVjdGl2ZXMoWydjbGllbnQnXSwgZG9jdW1lbnQpICYmXG4gICAgaGFzRGlyZWN0aXZlcyhbJ2V4cG9ydCddLCBkb2N1bWVudClcbiAgKTtcbn1cblxuZXhwb3J0IHR5cGUgSW5jbHVzaW9uRGlyZWN0aXZlcyA9IEFycmF5PHtcbiAgZGlyZWN0aXZlOiBEaXJlY3RpdmVOb2RlO1xuICBpZkFyZ3VtZW50OiBBcmd1bWVudE5vZGU7XG59PjtcblxuZnVuY3Rpb24gaXNJbmNsdXNpb25EaXJlY3RpdmUoeyBuYW1lOiB7IHZhbHVlIH0gfTogRGlyZWN0aXZlTm9kZSk6IGJvb2xlYW4ge1xuICByZXR1cm4gdmFsdWUgPT09ICdza2lwJyB8fCB2YWx1ZSA9PT0gJ2luY2x1ZGUnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5jbHVzaW9uRGlyZWN0aXZlcyhcbiAgZGlyZWN0aXZlczogUmVhZG9ubHlBcnJheTxEaXJlY3RpdmVOb2RlPixcbik6IEluY2x1c2lvbkRpcmVjdGl2ZXMge1xuICByZXR1cm4gZGlyZWN0aXZlcyA/IGRpcmVjdGl2ZXMuZmlsdGVyKGlzSW5jbHVzaW9uRGlyZWN0aXZlKS5tYXAoZGlyZWN0aXZlID0+IHtcbiAgICBjb25zdCBkaXJlY3RpdmVBcmd1bWVudHMgPSBkaXJlY3RpdmUuYXJndW1lbnRzO1xuICAgIGNvbnN0IGRpcmVjdGl2ZU5hbWUgPSBkaXJlY3RpdmUubmFtZS52YWx1ZTtcblxuICAgIGludmFyaWFudChcbiAgICAgIGRpcmVjdGl2ZUFyZ3VtZW50cyAmJiBkaXJlY3RpdmVBcmd1bWVudHMubGVuZ3RoID09PSAxLFxuICAgICAgYEluY29ycmVjdCBudW1iZXIgb2YgYXJndW1lbnRzIGZvciB0aGUgQCR7ZGlyZWN0aXZlTmFtZX0gZGlyZWN0aXZlLmAsXG4gICAgKTtcblxuICAgIGNvbnN0IGlmQXJndW1lbnQgPSBkaXJlY3RpdmVBcmd1bWVudHNbMF07XG4gICAgaW52YXJpYW50KFxuICAgICAgaWZBcmd1bWVudC5uYW1lICYmIGlmQXJndW1lbnQubmFtZS52YWx1ZSA9PT0gJ2lmJyxcbiAgICAgIGBJbnZhbGlkIGFyZ3VtZW50IGZvciB0aGUgQCR7ZGlyZWN0aXZlTmFtZX0gZGlyZWN0aXZlLmAsXG4gICAgKTtcblxuICAgIGNvbnN0IGlmVmFsdWU6IFZhbHVlTm9kZSA9IGlmQXJndW1lbnQudmFsdWU7XG5cbiAgICAvLyBtZWFucyBpdCBoYXMgdG8gYmUgYSB2YXJpYWJsZSB2YWx1ZSBpZiB0aGlzIGlzIGEgdmFsaWQgQHNraXAgb3IgQGluY2x1ZGUgZGlyZWN0aXZlXG4gICAgaW52YXJpYW50KFxuICAgICAgaWZWYWx1ZSAmJlxuICAgICAgICAoaWZWYWx1ZS5raW5kID09PSAnVmFyaWFibGUnIHx8IGlmVmFsdWUua2luZCA9PT0gJ0Jvb2xlYW5WYWx1ZScpLFxuICAgICAgYEFyZ3VtZW50IGZvciB0aGUgQCR7ZGlyZWN0aXZlTmFtZX0gZGlyZWN0aXZlIG11c3QgYmUgYSB2YXJpYWJsZSBvciBhIGJvb2xlYW4gdmFsdWUuYCxcbiAgICApO1xuXG4gICAgcmV0dXJuIHsgZGlyZWN0aXZlLCBpZkFyZ3VtZW50IH07XG4gIH0pIDogW107XG59XG5cbiIsImltcG9ydCB7IERvY3VtZW50Tm9kZSwgRnJhZ21lbnREZWZpbml0aW9uTm9kZSB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgaW52YXJpYW50LCBJbnZhcmlhbnRFcnJvciB9IGZyb20gJ3RzLWludmFyaWFudCc7XG5cbi8qKlxuICogUmV0dXJucyBhIHF1ZXJ5IGRvY3VtZW50IHdoaWNoIGFkZHMgYSBzaW5nbGUgcXVlcnkgb3BlcmF0aW9uIHRoYXQgb25seVxuICogc3ByZWFkcyB0aGUgdGFyZ2V0IGZyYWdtZW50IGluc2lkZSBvZiBpdC5cbiAqXG4gKiBTbyBmb3IgZXhhbXBsZSBhIGRvY3VtZW50IG9mOlxuICpcbiAqIGBgYGdyYXBocWxcbiAqIGZyYWdtZW50IGZvbyBvbiBGb28geyBhIGIgYyB9XG4gKiBgYGBcbiAqXG4gKiBUdXJucyBpbnRvOlxuICpcbiAqIGBgYGdyYXBocWxcbiAqIHsgLi4uZm9vIH1cbiAqXG4gKiBmcmFnbWVudCBmb28gb24gRm9vIHsgYSBiIGMgfVxuICogYGBgXG4gKlxuICogVGhlIHRhcmdldCBmcmFnbWVudCB3aWxsIGVpdGhlciBiZSB0aGUgb25seSBmcmFnbWVudCBpbiB0aGUgZG9jdW1lbnQsIG9yIGFcbiAqIGZyYWdtZW50IHNwZWNpZmllZCBieSB0aGUgcHJvdmlkZWQgYGZyYWdtZW50TmFtZWAuIElmIHRoZXJlIGlzIG1vcmUgdGhhbiBvbmVcbiAqIGZyYWdtZW50LCBidXQgYSBgZnJhZ21lbnROYW1lYCB3YXMgbm90IGRlZmluZWQgdGhlbiBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50UXVlcnlEb2N1bWVudChcbiAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSxcbiAgZnJhZ21lbnROYW1lPzogc3RyaW5nLFxuKTogRG9jdW1lbnROb2RlIHtcbiAgbGV0IGFjdHVhbEZyYWdtZW50TmFtZSA9IGZyYWdtZW50TmFtZTtcblxuICAvLyBCdWlsZCBhbiBhcnJheSBvZiBhbGwgb3VyIGZyYWdtZW50IGRlZmluaXRpb25zIHRoYXQgd2lsbCBiZSB1c2VkIGZvclxuICAvLyB2YWxpZGF0aW9ucy4gV2UgYWxzbyBkbyBzb21lIHZhbGlkYXRpb25zIG9uIHRoZSBvdGhlciBkZWZpbml0aW9ucyBpbiB0aGVcbiAgLy8gZG9jdW1lbnQgd2hpbGUgYnVpbGRpbmcgdGhpcyBsaXN0LlxuICBjb25zdCBmcmFnbWVudHM6IEFycmF5PEZyYWdtZW50RGVmaW5pdGlvbk5vZGU+ID0gW107XG4gIGRvY3VtZW50LmRlZmluaXRpb25zLmZvckVhY2goZGVmaW5pdGlvbiA9PiB7XG4gICAgLy8gVGhyb3cgYW4gZXJyb3IgaWYgd2UgZW5jb3VudGVyIGFuIG9wZXJhdGlvbiBkZWZpbml0aW9uIGJlY2F1c2Ugd2Ugd2lsbFxuICAgIC8vIGRlZmluZSBvdXIgb3duIG9wZXJhdGlvbiBkZWZpbml0aW9uIGxhdGVyIG9uLlxuICAgIGlmIChkZWZpbml0aW9uLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKFxuICAgICAgICBgRm91bmQgYSAke2RlZmluaXRpb24ub3BlcmF0aW9ufSBvcGVyYXRpb24ke1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA/IGAgbmFtZWQgJyR7ZGVmaW5pdGlvbi5uYW1lLnZhbHVlfSdgIDogJydcbiAgICAgICAgfS4gYCArXG4gICAgICAgICAgJ05vIG9wZXJhdGlvbnMgYXJlIGFsbG93ZWQgd2hlbiB1c2luZyBhIGZyYWdtZW50IGFzIGEgcXVlcnkuIE9ubHkgZnJhZ21lbnRzIGFyZSBhbGxvd2VkLicsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBBZGQgb3VyIGRlZmluaXRpb24gdG8gdGhlIGZyYWdtZW50cyBhcnJheSBpZiBpdCBpcyBhIGZyYWdtZW50XG4gICAgLy8gZGVmaW5pdGlvbi5cbiAgICBpZiAoZGVmaW5pdGlvbi5raW5kID09PSAnRnJhZ21lbnREZWZpbml0aW9uJykge1xuICAgICAgZnJhZ21lbnRzLnB1c2goZGVmaW5pdGlvbik7XG4gICAgfVxuICB9KTtcblxuICAvLyBJZiB0aGUgdXNlciBkaWQgbm90IGdpdmUgdXMgYSBmcmFnbWVudCBuYW1lIHRoZW4gbGV0IHVzIHRyeSB0byBnZXQgYVxuICAvLyBuYW1lIGZyb20gYSBzaW5nbGUgZnJhZ21lbnQgaW4gdGhlIGRlZmluaXRpb24uXG4gIGlmICh0eXBlb2YgYWN0dWFsRnJhZ21lbnROYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIGludmFyaWFudChcbiAgICAgIGZyYWdtZW50cy5sZW5ndGggPT09IDEsXG4gICAgICBgRm91bmQgJHtcbiAgICAgICAgZnJhZ21lbnRzLmxlbmd0aFxuICAgICAgfSBmcmFnbWVudHMuIFxcYGZyYWdtZW50TmFtZVxcYCBtdXN0IGJlIHByb3ZpZGVkIHdoZW4gdGhlcmUgaXMgbm90IGV4YWN0bHkgMSBmcmFnbWVudC5gLFxuICAgICk7XG4gICAgYWN0dWFsRnJhZ21lbnROYW1lID0gZnJhZ21lbnRzWzBdLm5hbWUudmFsdWU7XG4gIH1cblxuICAvLyBHZW5lcmF0ZSBhIHF1ZXJ5IGRvY3VtZW50IHdpdGggYW4gb3BlcmF0aW9uIHRoYXQgc2ltcGx5IHNwcmVhZHMgdGhlXG4gIC8vIGZyYWdtZW50IGluc2lkZSBvZiBpdC5cbiAgY29uc3QgcXVlcnk6IERvY3VtZW50Tm9kZSA9IHtcbiAgICAuLi5kb2N1bWVudCxcbiAgICBkZWZpbml0aW9uczogW1xuICAgICAge1xuICAgICAgICBraW5kOiAnT3BlcmF0aW9uRGVmaW5pdGlvbicsXG4gICAgICAgIG9wZXJhdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgc2VsZWN0aW9uU2V0OiB7XG4gICAgICAgICAga2luZDogJ1NlbGVjdGlvblNldCcsXG4gICAgICAgICAgc2VsZWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBraW5kOiAnRnJhZ21lbnRTcHJlYWQnLFxuICAgICAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhY3R1YWxGcmFnbWVudE5hbWUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIF0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgLi4uZG9jdW1lbnQuZGVmaW5pdGlvbnMsXG4gICAgXSxcbiAgfTtcblxuICByZXR1cm4gcXVlcnk7XG59XG4iLCIvKipcbiAqIEFkZHMgdGhlIHByb3BlcnRpZXMgb2Ygb25lIG9yIG1vcmUgc291cmNlIG9iamVjdHMgdG8gYSB0YXJnZXQgb2JqZWN0LiBXb3JrcyBleGFjdGx5IGxpa2VcbiAqIGBPYmplY3QuYXNzaWduYCwgYnV0IGFzIGEgdXRpbGl0eSB0byBtYWludGFpbiBzdXBwb3J0IGZvciBJRSAxMS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9zdGFjay9hcG9sbG8tY2xpZW50L3B1bGwvMTAwOVxuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPEEsIEI+KGE6IEEsIGI6IEIpOiBBICYgQjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248QSwgQiwgQz4oYTogQSwgYjogQiwgYzogQyk6IEEgJiBCICYgQztcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248QSwgQiwgQywgRD4oYTogQSwgYjogQiwgYzogQywgZDogRCk6IEEgJiBCICYgQyAmIEQ7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPEEsIEIsIEMsIEQsIEU+KFxuICBhOiBBLFxuICBiOiBCLFxuICBjOiBDLFxuICBkOiBELFxuICBlOiBFLFxuKTogQSAmIEIgJiBDICYgRCAmIEU7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduKHRhcmdldDogYW55LCAuLi5zb3VyY2VzOiBBcnJheTxhbnk+KTogYW55O1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihcbiAgdGFyZ2V0OiB7IFtrZXk6IHN0cmluZ106IGFueSB9LFxuICAuLi5zb3VyY2VzOiBBcnJheTx7IFtrZXk6IHN0cmluZ106IGFueSB9PlxuKTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSB7XG4gIHNvdXJjZXMuZm9yRWFjaChzb3VyY2UgPT4ge1xuICAgIGlmICh0eXBlb2Ygc291cmNlID09PSAndW5kZWZpbmVkJyB8fCBzb3VyY2UgPT09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHRhcmdldDtcbn1cbiIsImltcG9ydCB7XG4gIERvY3VtZW50Tm9kZSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUsXG4gIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUsXG4gIFZhbHVlTm9kZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IGludmFyaWFudCwgSW52YXJpYW50RXJyb3IgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuXG5pbXBvcnQgeyBhc3NpZ24gfSBmcm9tICcuL3V0aWwvYXNzaWduJztcblxuaW1wb3J0IHsgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uLCBKc29uVmFsdWUgfSBmcm9tICcuL3N0b3JlVXRpbHMnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXV0YXRpb25EZWZpbml0aW9uKFxuICBkb2M6IERvY3VtZW50Tm9kZSxcbik6IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlIHtcbiAgY2hlY2tEb2N1bWVudChkb2MpO1xuXG4gIGxldCBtdXRhdGlvbkRlZjogT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfCBudWxsID0gZG9jLmRlZmluaXRpb25zLmZpbHRlcihcbiAgICBkZWZpbml0aW9uID0+XG4gICAgICBkZWZpbml0aW9uLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJyAmJlxuICAgICAgZGVmaW5pdGlvbi5vcGVyYXRpb24gPT09ICdtdXRhdGlvbicsXG4gIClbMF0gYXMgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGU7XG5cbiAgaW52YXJpYW50KG11dGF0aW9uRGVmLCAnTXVzdCBjb250YWluIGEgbXV0YXRpb24gZGVmaW5pdGlvbi4nKTtcblxuICByZXR1cm4gbXV0YXRpb25EZWY7XG59XG5cbi8vIENoZWNrcyB0aGUgZG9jdW1lbnQgZm9yIGVycm9ycyBhbmQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpZiB0aGVyZSBpcyBhbiBlcnJvci5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0RvY3VtZW50KGRvYzogRG9jdW1lbnROb2RlKSB7XG4gIGludmFyaWFudChcbiAgICBkb2MgJiYgZG9jLmtpbmQgPT09ICdEb2N1bWVudCcsXG4gICAgYEV4cGVjdGluZyBhIHBhcnNlZCBHcmFwaFFMIGRvY3VtZW50LiBQZXJoYXBzIHlvdSBuZWVkIHRvIHdyYXAgdGhlIHF1ZXJ5IFxcXG5zdHJpbmcgaW4gYSBcImdxbFwiIHRhZz8gaHR0cDovL2RvY3MuYXBvbGxvc3RhY2suY29tL2Fwb2xsby1jbGllbnQvY29yZS5odG1sI2dxbGAsXG4gICk7XG5cbiAgY29uc3Qgb3BlcmF0aW9ucyA9IGRvYy5kZWZpbml0aW9uc1xuICAgIC5maWx0ZXIoZCA9PiBkLmtpbmQgIT09ICdGcmFnbWVudERlZmluaXRpb24nKVxuICAgIC5tYXAoZGVmaW5pdGlvbiA9PiB7XG4gICAgICBpZiAoZGVmaW5pdGlvbi5raW5kICE9PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKFxuICAgICAgICAgIGBTY2hlbWEgdHlwZSBkZWZpbml0aW9ucyBub3QgYWxsb3dlZCBpbiBxdWVyaWVzLiBGb3VuZDogXCIke1xuICAgICAgICAgICAgZGVmaW5pdGlvbi5raW5kXG4gICAgICAgICAgfVwiYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbml0aW9uO1xuICAgIH0pO1xuXG4gIGludmFyaWFudChcbiAgICBvcGVyYXRpb25zLmxlbmd0aCA8PSAxLFxuICAgIGBBbWJpZ3VvdXMgR3JhcGhRTCBkb2N1bWVudDogY29udGFpbnMgJHtvcGVyYXRpb25zLmxlbmd0aH0gb3BlcmF0aW9uc2AsXG4gICk7XG5cbiAgcmV0dXJuIGRvYztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE9wZXJhdGlvbkRlZmluaXRpb24oXG4gIGRvYzogRG9jdW1lbnROb2RlLFxuKTogT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfCB1bmRlZmluZWQge1xuICBjaGVja0RvY3VtZW50KGRvYyk7XG4gIHJldHVybiBkb2MuZGVmaW5pdGlvbnMuZmlsdGVyKFxuICAgIGRlZmluaXRpb24gPT4gZGVmaW5pdGlvbi5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicsXG4gIClbMF0gYXMgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVyYXRpb25EZWZpbml0aW9uT3JEaWUoXG4gIGRvY3VtZW50OiBEb2N1bWVudE5vZGUsXG4pOiBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSB7XG4gIGNvbnN0IGRlZiA9IGdldE9wZXJhdGlvbkRlZmluaXRpb24oZG9jdW1lbnQpO1xuICBpbnZhcmlhbnQoZGVmLCBgR3JhcGhRTCBkb2N1bWVudCBpcyBtaXNzaW5nIGFuIG9wZXJhdGlvbmApO1xuICByZXR1cm4gZGVmO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3BlcmF0aW9uTmFtZShkb2M6IERvY3VtZW50Tm9kZSk6IHN0cmluZyB8IG51bGwge1xuICByZXR1cm4gKFxuICAgIGRvYy5kZWZpbml0aW9uc1xuICAgICAgLmZpbHRlcihcbiAgICAgICAgZGVmaW5pdGlvbiA9PlxuICAgICAgICAgIGRlZmluaXRpb24ua2luZCA9PT0gJ09wZXJhdGlvbkRlZmluaXRpb24nICYmIGRlZmluaXRpb24ubmFtZSxcbiAgICAgIClcbiAgICAgIC5tYXAoKHg6IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlKSA9PiB4Lm5hbWUudmFsdWUpWzBdIHx8IG51bGxcbiAgKTtcbn1cblxuLy8gUmV0dXJucyB0aGUgRnJhZ21lbnREZWZpbml0aW9ucyBmcm9tIGEgcGFydGljdWxhciBkb2N1bWVudCBhcyBhbiBhcnJheVxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50RGVmaW5pdGlvbnMoXG4gIGRvYzogRG9jdW1lbnROb2RlLFxuKTogRnJhZ21lbnREZWZpbml0aW9uTm9kZVtdIHtcbiAgcmV0dXJuIGRvYy5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgZGVmaW5pdGlvbiA9PiBkZWZpbml0aW9uLmtpbmQgPT09ICdGcmFnbWVudERlZmluaXRpb24nLFxuICApIGFzIEZyYWdtZW50RGVmaW5pdGlvbk5vZGVbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFF1ZXJ5RGVmaW5pdGlvbihkb2M6IERvY3VtZW50Tm9kZSk6IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlIHtcbiAgY29uc3QgcXVlcnlEZWYgPSBnZXRPcGVyYXRpb25EZWZpbml0aW9uKGRvYykgYXMgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGU7XG5cbiAgaW52YXJpYW50KFxuICAgIHF1ZXJ5RGVmICYmIHF1ZXJ5RGVmLm9wZXJhdGlvbiA9PT0gJ3F1ZXJ5JyxcbiAgICAnTXVzdCBjb250YWluIGEgcXVlcnkgZGVmaW5pdGlvbi4nLFxuICApO1xuXG4gIHJldHVybiBxdWVyeURlZjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZyYWdtZW50RGVmaW5pdGlvbihcbiAgZG9jOiBEb2N1bWVudE5vZGUsXG4pOiBGcmFnbWVudERlZmluaXRpb25Ob2RlIHtcbiAgaW52YXJpYW50KFxuICAgIGRvYy5raW5kID09PSAnRG9jdW1lbnQnLFxuICAgIGBFeHBlY3RpbmcgYSBwYXJzZWQgR3JhcGhRTCBkb2N1bWVudC4gUGVyaGFwcyB5b3UgbmVlZCB0byB3cmFwIHRoZSBxdWVyeSBcXFxuc3RyaW5nIGluIGEgXCJncWxcIiB0YWc/IGh0dHA6Ly9kb2NzLmFwb2xsb3N0YWNrLmNvbS9hcG9sbG8tY2xpZW50L2NvcmUuaHRtbCNncWxgLFxuICApO1xuXG4gIGludmFyaWFudChcbiAgICBkb2MuZGVmaW5pdGlvbnMubGVuZ3RoIDw9IDEsXG4gICAgJ0ZyYWdtZW50IG11c3QgaGF2ZSBleGFjdGx5IG9uZSBkZWZpbml0aW9uLicsXG4gICk7XG5cbiAgY29uc3QgZnJhZ21lbnREZWYgPSBkb2MuZGVmaW5pdGlvbnNbMF0gYXMgRnJhZ21lbnREZWZpbml0aW9uTm9kZTtcblxuICBpbnZhcmlhbnQoXG4gICAgZnJhZ21lbnREZWYua2luZCA9PT0gJ0ZyYWdtZW50RGVmaW5pdGlvbicsXG4gICAgJ011c3QgYmUgYSBmcmFnbWVudCBkZWZpbml0aW9uLicsXG4gICk7XG5cbiAgcmV0dXJuIGZyYWdtZW50RGVmIGFzIEZyYWdtZW50RGVmaW5pdGlvbk5vZGU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmlyc3Qgb3BlcmF0aW9uIGRlZmluaXRpb24gZm91bmQgaW4gdGhpcyBkb2N1bWVudC5cbiAqIElmIG5vIG9wZXJhdGlvbiBkZWZpbml0aW9uIGlzIGZvdW5kLCB0aGUgZmlyc3QgZnJhZ21lbnQgZGVmaW5pdGlvbiB3aWxsIGJlIHJldHVybmVkLlxuICogSWYgbm8gZGVmaW5pdGlvbnMgYXJlIGZvdW5kLCBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1haW5EZWZpbml0aW9uKFxuICBxdWVyeURvYzogRG9jdW1lbnROb2RlLFxuKTogT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfCBGcmFnbWVudERlZmluaXRpb25Ob2RlIHtcbiAgY2hlY2tEb2N1bWVudChxdWVyeURvYyk7XG5cbiAgbGV0IGZyYWdtZW50RGVmaW5pdGlvbjtcblxuICBmb3IgKGxldCBkZWZpbml0aW9uIG9mIHF1ZXJ5RG9jLmRlZmluaXRpb25zKSB7XG4gICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gJ09wZXJhdGlvbkRlZmluaXRpb24nKSB7XG4gICAgICBjb25zdCBvcGVyYXRpb24gPSAoZGVmaW5pdGlvbiBhcyBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSkub3BlcmF0aW9uO1xuICAgICAgaWYgKFxuICAgICAgICBvcGVyYXRpb24gPT09ICdxdWVyeScgfHxcbiAgICAgICAgb3BlcmF0aW9uID09PSAnbXV0YXRpb24nIHx8XG4gICAgICAgIG9wZXJhdGlvbiA9PT0gJ3N1YnNjcmlwdGlvbidcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gZGVmaW5pdGlvbiBhcyBPcGVyYXRpb25EZWZpbml0aW9uTm9kZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRlZmluaXRpb24ua2luZCA9PT0gJ0ZyYWdtZW50RGVmaW5pdGlvbicgJiYgIWZyYWdtZW50RGVmaW5pdGlvbikge1xuICAgICAgLy8gd2UgZG8gdGhpcyBiZWNhdXNlIHdlIHdhbnQgdG8gYWxsb3cgbXVsdGlwbGUgZnJhZ21lbnQgZGVmaW5pdGlvbnNcbiAgICAgIC8vIHRvIHByZWNlZGUgYW4gb3BlcmF0aW9uIGRlZmluaXRpb24uXG4gICAgICBmcmFnbWVudERlZmluaXRpb24gPSBkZWZpbml0aW9uIGFzIEZyYWdtZW50RGVmaW5pdGlvbk5vZGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGZyYWdtZW50RGVmaW5pdGlvbikge1xuICAgIHJldHVybiBmcmFnbWVudERlZmluaXRpb247XG4gIH1cblxuICB0aHJvdyBuZXcgSW52YXJpYW50RXJyb3IoXG4gICAgJ0V4cGVjdGVkIGEgcGFyc2VkIEdyYXBoUUwgcXVlcnkgd2l0aCBhIHF1ZXJ5LCBtdXRhdGlvbiwgc3Vic2NyaXB0aW9uLCBvciBhIGZyYWdtZW50LicsXG4gICk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBhbiBpbnRlcmZhY2UgdGhhdCBkZXNjcmliZXMgYSBtYXAgZnJvbSBmcmFnbWVudCBuYW1lcyB0byBmcmFnbWVudCBkZWZpbml0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBGcmFnbWVudE1hcCB7XG4gIFtmcmFnbWVudE5hbWU6IHN0cmluZ106IEZyYWdtZW50RGVmaW5pdGlvbk5vZGU7XG59XG5cbi8vIFV0aWxpdHkgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIGxpc3Qgb2YgZnJhZ21lbnQgZGVmaW5pdGlvbnMgYW5kIG1ha2VzIGEgaGFzaCBvdXQgb2YgdGhlbVxuLy8gdGhhdCBtYXBzIHRoZSBuYW1lIG9mIHRoZSBmcmFnbWVudCB0byB0aGUgZnJhZ21lbnQgZGVmaW5pdGlvbi5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGcmFnbWVudE1hcChcbiAgZnJhZ21lbnRzOiBGcmFnbWVudERlZmluaXRpb25Ob2RlW10gPSBbXSxcbik6IEZyYWdtZW50TWFwIHtcbiAgY29uc3Qgc3ltVGFibGU6IEZyYWdtZW50TWFwID0ge307XG4gIGZyYWdtZW50cy5mb3JFYWNoKGZyYWdtZW50ID0+IHtcbiAgICBzeW1UYWJsZVtmcmFnbWVudC5uYW1lLnZhbHVlXSA9IGZyYWdtZW50O1xuICB9KTtcblxuICByZXR1cm4gc3ltVGFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREZWZhdWx0VmFsdWVzKFxuICBkZWZpbml0aW9uOiBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSB8IHVuZGVmaW5lZCxcbik6IHsgW2tleTogc3RyaW5nXTogSnNvblZhbHVlIH0ge1xuICBpZiAoXG4gICAgZGVmaW5pdGlvbiAmJlxuICAgIGRlZmluaXRpb24udmFyaWFibGVEZWZpbml0aW9ucyAmJlxuICAgIGRlZmluaXRpb24udmFyaWFibGVEZWZpbml0aW9ucy5sZW5ndGhcbiAgKSB7XG4gICAgY29uc3QgZGVmYXVsdFZhbHVlcyA9IGRlZmluaXRpb24udmFyaWFibGVEZWZpbml0aW9uc1xuICAgICAgLmZpbHRlcigoeyBkZWZhdWx0VmFsdWUgfSkgPT4gZGVmYXVsdFZhbHVlKVxuICAgICAgLm1hcChcbiAgICAgICAgKHsgdmFyaWFibGUsIGRlZmF1bHRWYWx1ZSB9KTogeyBba2V5OiBzdHJpbmddOiBKc29uVmFsdWUgfSA9PiB7XG4gICAgICAgICAgY29uc3QgZGVmYXVsdFZhbHVlT2JqOiB7IFtrZXk6IHN0cmluZ106IEpzb25WYWx1ZSB9ID0ge307XG4gICAgICAgICAgdmFsdWVUb09iamVjdFJlcHJlc2VudGF0aW9uKFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlT2JqLFxuICAgICAgICAgICAgdmFyaWFibGUubmFtZSxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSBhcyBWYWx1ZU5vZGUsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVPYmo7XG4gICAgICAgIH0sXG4gICAgICApO1xuXG4gICAgcmV0dXJuIGFzc2lnbih7fSwgLi4uZGVmYXVsdFZhbHVlcyk7XG4gIH1cblxuICByZXR1cm4ge307XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbmFtZXMgb2YgYWxsIHZhcmlhYmxlcyBkZWNsYXJlZCBieSB0aGUgb3BlcmF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFyaWFibGVzSW5PcGVyYXRpb24oXG4gIG9wZXJhdGlvbjogT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUsXG4pOiBTZXQ8c3RyaW5nPiB7XG4gIGNvbnN0IG5hbWVzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGlmIChvcGVyYXRpb24udmFyaWFibGVEZWZpbml0aW9ucykge1xuICAgIGZvciAoY29uc3QgZGVmaW5pdGlvbiBvZiBvcGVyYXRpb24udmFyaWFibGVEZWZpbml0aW9ucykge1xuICAgICAgbmFtZXMuYWRkKGRlZmluaXRpb24udmFyaWFibGUubmFtZS52YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5hbWVzO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckluUGxhY2U8VD4oXG4gIGFycmF5OiBUW10sXG4gIHRlc3Q6IChlbGVtOiBUKSA9PiBib29sZWFuLFxuICBjb250ZXh0PzogYW55LFxuKTogVFtdIHtcbiAgbGV0IHRhcmdldCA9IDA7XG4gIGFycmF5LmZvckVhY2goZnVuY3Rpb24gKGVsZW0sIGkpIHtcbiAgICBpZiAodGVzdC5jYWxsKHRoaXMsIGVsZW0sIGksIGFycmF5KSkge1xuICAgICAgYXJyYXlbdGFyZ2V0KytdID0gZWxlbTtcbiAgICB9XG4gIH0sIGNvbnRleHQpO1xuICBhcnJheS5sZW5ndGggPSB0YXJnZXQ7XG4gIHJldHVybiBhcnJheTtcbn1cbiIsImltcG9ydCB7XG4gIERvY3VtZW50Tm9kZSxcbiAgU2VsZWN0aW9uTm9kZSxcbiAgU2VsZWN0aW9uU2V0Tm9kZSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUsXG4gIEZpZWxkTm9kZSxcbiAgRGlyZWN0aXZlTm9kZSxcbiAgRnJhZ21lbnREZWZpbml0aW9uTm9kZSxcbiAgQXJndW1lbnROb2RlLFxuICBGcmFnbWVudFNwcmVhZE5vZGUsXG4gIFZhcmlhYmxlRGVmaW5pdGlvbk5vZGUsXG4gIFZhcmlhYmxlTm9kZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyB2aXNpdCB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvdmlzaXRvcic7XG5cbmltcG9ydCB7XG4gIGNoZWNrRG9jdW1lbnQsXG4gIGdldE9wZXJhdGlvbkRlZmluaXRpb24sXG4gIGdldEZyYWdtZW50RGVmaW5pdGlvbixcbiAgZ2V0RnJhZ21lbnREZWZpbml0aW9ucyxcbiAgY3JlYXRlRnJhZ21lbnRNYXAsXG4gIEZyYWdtZW50TWFwLFxuICBnZXRNYWluRGVmaW5pdGlvbixcbn0gZnJvbSAnLi9nZXRGcm9tQVNUJztcbmltcG9ydCB7IGZpbHRlckluUGxhY2UgfSBmcm9tICcuL3V0aWwvZmlsdGVySW5QbGFjZSc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuaW1wb3J0IHsgaXNGaWVsZCwgaXNJbmxpbmVGcmFnbWVudCB9IGZyb20gJy4vc3RvcmVVdGlscyc7XG5cbmV4cG9ydCB0eXBlIFJlbW92ZU5vZGVDb25maWc8Tj4gPSB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHRlc3Q/OiAobm9kZTogTikgPT4gYm9vbGVhbjtcbiAgcmVtb3ZlPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIEdldE5vZGVDb25maWc8Tj4gPSB7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHRlc3Q/OiAobm9kZTogTikgPT4gYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIFJlbW92ZURpcmVjdGl2ZUNvbmZpZyA9IFJlbW92ZU5vZGVDb25maWc8RGlyZWN0aXZlTm9kZT47XG5leHBvcnQgdHlwZSBHZXREaXJlY3RpdmVDb25maWcgPSBHZXROb2RlQ29uZmlnPERpcmVjdGl2ZU5vZGU+O1xuZXhwb3J0IHR5cGUgUmVtb3ZlQXJndW1lbnRzQ29uZmlnID0gUmVtb3ZlTm9kZUNvbmZpZzxBcmd1bWVudE5vZGU+O1xuZXhwb3J0IHR5cGUgR2V0RnJhZ21lbnRTcHJlYWRDb25maWcgPSBHZXROb2RlQ29uZmlnPEZyYWdtZW50U3ByZWFkTm9kZT47XG5leHBvcnQgdHlwZSBSZW1vdmVGcmFnbWVudFNwcmVhZENvbmZpZyA9IFJlbW92ZU5vZGVDb25maWc8RnJhZ21lbnRTcHJlYWROb2RlPjtcbmV4cG9ydCB0eXBlIFJlbW92ZUZyYWdtZW50RGVmaW5pdGlvbkNvbmZpZyA9IFJlbW92ZU5vZGVDb25maWc8XG4gIEZyYWdtZW50RGVmaW5pdGlvbk5vZGVcbj47XG5leHBvcnQgdHlwZSBSZW1vdmVWYXJpYWJsZURlZmluaXRpb25Db25maWcgPSBSZW1vdmVOb2RlQ29uZmlnPFxuICBWYXJpYWJsZURlZmluaXRpb25Ob2RlXG4+O1xuXG5jb25zdCBUWVBFTkFNRV9GSUVMRDogRmllbGROb2RlID0ge1xuICBraW5kOiAnRmllbGQnLFxuICBuYW1lOiB7XG4gICAga2luZDogJ05hbWUnLFxuICAgIHZhbHVlOiAnX190eXBlbmFtZScsXG4gIH0sXG59O1xuXG5mdW5jdGlvbiBpc0VtcHR5KFxuICBvcDogT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUgfCBGcmFnbWVudERlZmluaXRpb25Ob2RlLFxuICBmcmFnbWVudHM6IEZyYWdtZW50TWFwLFxuKTogYm9vbGVhbiB7XG4gIHJldHVybiBvcC5zZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5ldmVyeShcbiAgICBzZWxlY3Rpb24gPT5cbiAgICAgIHNlbGVjdGlvbi5raW5kID09PSAnRnJhZ21lbnRTcHJlYWQnICYmXG4gICAgICBpc0VtcHR5KGZyYWdtZW50c1tzZWxlY3Rpb24ubmFtZS52YWx1ZV0sIGZyYWdtZW50cyksXG4gICk7XG59XG5cbmZ1bmN0aW9uIG51bGxJZkRvY0lzRW1wdHkoZG9jOiBEb2N1bWVudE5vZGUpIHtcbiAgcmV0dXJuIGlzRW1wdHkoXG4gICAgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2MpIHx8IGdldEZyYWdtZW50RGVmaW5pdGlvbihkb2MpLFxuICAgIGNyZWF0ZUZyYWdtZW50TWFwKGdldEZyYWdtZW50RGVmaW5pdGlvbnMoZG9jKSksXG4gIClcbiAgICA/IG51bGxcbiAgICA6IGRvYztcbn1cblxuZnVuY3Rpb24gZ2V0RGlyZWN0aXZlTWF0Y2hlcihcbiAgZGlyZWN0aXZlczogKFJlbW92ZURpcmVjdGl2ZUNvbmZpZyB8IEdldERpcmVjdGl2ZUNvbmZpZylbXSxcbikge1xuICByZXR1cm4gZnVuY3Rpb24gZGlyZWN0aXZlTWF0Y2hlcihkaXJlY3RpdmU6IERpcmVjdGl2ZU5vZGUpIHtcbiAgICByZXR1cm4gZGlyZWN0aXZlcy5zb21lKFxuICAgICAgZGlyID0+XG4gICAgICAgIChkaXIubmFtZSAmJiBkaXIubmFtZSA9PT0gZGlyZWN0aXZlLm5hbWUudmFsdWUpIHx8XG4gICAgICAgIChkaXIudGVzdCAmJiBkaXIudGVzdChkaXJlY3RpdmUpKSxcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChcbiAgZGlyZWN0aXZlczogUmVtb3ZlRGlyZWN0aXZlQ29uZmlnW10sXG4gIGRvYzogRG9jdW1lbnROb2RlLFxuKTogRG9jdW1lbnROb2RlIHwgbnVsbCB7XG4gIGNvbnN0IHZhcmlhYmxlc0luVXNlOiBSZWNvcmQ8c3RyaW5nLCBib29sZWFuPiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGxldCB2YXJpYWJsZXNUb1JlbW92ZTogUmVtb3ZlQXJndW1lbnRzQ29uZmlnW10gPSBbXTtcblxuICBjb25zdCBmcmFnbWVudFNwcmVhZHNJblVzZTogUmVjb3JkPHN0cmluZywgYm9vbGVhbj4gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBsZXQgZnJhZ21lbnRTcHJlYWRzVG9SZW1vdmU6IFJlbW92ZUZyYWdtZW50U3ByZWFkQ29uZmlnW10gPSBbXTtcblxuICBsZXQgbW9kaWZpZWREb2MgPSBudWxsSWZEb2NJc0VtcHR5KFxuICAgIHZpc2l0KGRvYywge1xuICAgICAgVmFyaWFibGU6IHtcbiAgICAgICAgZW50ZXIobm9kZSwgX2tleSwgcGFyZW50KSB7XG4gICAgICAgICAgLy8gU3RvcmUgZWFjaCB2YXJpYWJsZSB0aGF0J3MgcmVmZXJlbmNlZCBhcyBwYXJ0IG9mIGFuIGFyZ3VtZW50XG4gICAgICAgICAgLy8gKGV4Y2x1ZGluZyBvcGVyYXRpb24gZGVmaW5pdGlvbiB2YXJpYWJsZXMpLCBzbyB3ZSBrbm93IHdoaWNoXG4gICAgICAgICAgLy8gdmFyaWFibGVzIGFyZSBiZWluZyB1c2VkLiBJZiB3ZSBsYXRlciB3YW50IHRvIHJlbW92ZSBhIHZhcmlhYmxlXG4gICAgICAgICAgLy8gd2UnbGwgZmlzdCBjaGVjayB0byBzZWUgaWYgaXQncyBiZWluZyB1c2VkLCBiZWZvcmUgY29udGludWluZyB3aXRoXG4gICAgICAgICAgLy8gdGhlIHJlbW92YWwuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKHBhcmVudCBhcyBWYXJpYWJsZURlZmluaXRpb25Ob2RlKS5raW5kICE9PSAnVmFyaWFibGVEZWZpbml0aW9uJ1xuICAgICAgICAgICkge1xuICAgICAgICAgICAgdmFyaWFibGVzSW5Vc2Vbbm9kZS5uYW1lLnZhbHVlXSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgRmllbGQ6IHtcbiAgICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICAgIGlmIChkaXJlY3RpdmVzICYmIG5vZGUuZGlyZWN0aXZlcykge1xuICAgICAgICAgICAgLy8gSWYgYHJlbW92ZWAgaXMgc2V0IHRvIHRydWUgZm9yIGEgZGlyZWN0aXZlLCBhbmQgYSBkaXJlY3RpdmUgbWF0Y2hcbiAgICAgICAgICAgIC8vIGlzIGZvdW5kIGZvciBhIGZpZWxkLCByZW1vdmUgdGhlIGZpZWxkIGFzIHdlbGwuXG4gICAgICAgICAgICBjb25zdCBzaG91bGRSZW1vdmVGaWVsZCA9IGRpcmVjdGl2ZXMuc29tZShcbiAgICAgICAgICAgICAgZGlyZWN0aXZlID0+IGRpcmVjdGl2ZS5yZW1vdmUsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHNob3VsZFJlbW92ZUZpZWxkICYmXG4gICAgICAgICAgICAgIG5vZGUuZGlyZWN0aXZlcyAmJlxuICAgICAgICAgICAgICBub2RlLmRpcmVjdGl2ZXMuc29tZShnZXREaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZXMpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGlmIChub2RlLmFyZ3VtZW50cykge1xuICAgICAgICAgICAgICAgIC8vIFN0b3JlIGZpZWxkIGFyZ3VtZW50IHZhcmlhYmxlcyBzbyB0aGV5IGNhbiBiZSByZW1vdmVkXG4gICAgICAgICAgICAgICAgLy8gZnJvbSB0aGUgb3BlcmF0aW9uIGRlZmluaXRpb24uXG4gICAgICAgICAgICAgICAgbm9kZS5hcmd1bWVudHMuZm9yRWFjaChhcmcgPT4ge1xuICAgICAgICAgICAgICAgICAgaWYgKGFyZy52YWx1ZS5raW5kID09PSAnVmFyaWFibGUnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlc1RvUmVtb3ZlLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IChhcmcudmFsdWUgYXMgVmFyaWFibGVOb2RlKS5uYW1lLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChub2RlLnNlbGVjdGlvblNldCkge1xuICAgICAgICAgICAgICAgIC8vIFN0b3JlIGZyYWdtZW50IHNwcmVhZCBuYW1lcyBzbyB0aGV5IGNhbiBiZSByZW1vdmVkIGZyb20gdGhlXG4gICAgICAgICAgICAgICAgLy8gZG9jdWVtbnQuXG4gICAgICAgICAgICAgICAgZ2V0QWxsRnJhZ21lbnRTcHJlYWRzRnJvbVNlbGVjdGlvblNldChub2RlLnNlbGVjdGlvblNldCkuZm9yRWFjaChcbiAgICAgICAgICAgICAgICAgIGZyYWcgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudFNwcmVhZHNUb1JlbW92ZS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBmcmFnLm5hbWUudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBmaWVsZC5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgRnJhZ21lbnRTcHJlYWQ6IHtcbiAgICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICAgIC8vIEtlZXAgdHJhY2sgb2YgcmVmZXJlbmNlZCBmcmFnbWVudCBzcHJlYWRzLiBUaGlzIGlzIHVzZWQgdG9cbiAgICAgICAgICAvLyBkZXRlcm1pbmUgaWYgdG9wIGxldmVsIGZyYWdtZW50IGRlZmluaXRpb25zIHNob3VsZCBiZSByZW1vdmVkLlxuICAgICAgICAgIGZyYWdtZW50U3ByZWFkc0luVXNlW25vZGUubmFtZS52YWx1ZV0gPSB0cnVlO1xuICAgICAgICB9LFxuICAgICAgfSxcblxuICAgICAgRGlyZWN0aXZlOiB7XG4gICAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgICAvLyBJZiBhIG1hdGNoaW5nIGRpcmVjdGl2ZSBpcyBmb3VuZCwgcmVtb3ZlIGl0LlxuICAgICAgICAgIGlmIChnZXREaXJlY3RpdmVNYXRjaGVyKGRpcmVjdGl2ZXMpKG5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICApO1xuXG4gIC8vIElmIHdlJ3ZlIHJlbW92ZWQgZmllbGRzIHdpdGggYXJndW1lbnRzLCBtYWtlIHN1cmUgdGhlIGFzc29jaWF0ZWRcbiAgLy8gdmFyaWFibGVzIGFyZSBhbHNvIHJlbW92ZWQgZnJvbSB0aGUgcmVzdCBvZiB0aGUgZG9jdW1lbnQsIGFzIGxvbmcgYXMgdGhleVxuICAvLyBhcmVuJ3QgYmVpbmcgdXNlZCBlbHNld2hlcmUuXG4gIGlmIChcbiAgICBtb2RpZmllZERvYyAmJlxuICAgIGZpbHRlckluUGxhY2UodmFyaWFibGVzVG9SZW1vdmUsIHYgPT4gIXZhcmlhYmxlc0luVXNlW3YubmFtZV0pLmxlbmd0aFxuICApIHtcbiAgICBtb2RpZmllZERvYyA9IHJlbW92ZUFyZ3VtZW50c0Zyb21Eb2N1bWVudCh2YXJpYWJsZXNUb1JlbW92ZSwgbW9kaWZpZWREb2MpO1xuICB9XG5cbiAgLy8gSWYgd2UndmUgcmVtb3ZlZCBzZWxlY3Rpb24gc2V0cyB3aXRoIGZyYWdtZW50IHNwcmVhZHMsIG1ha2Ugc3VyZSB0aGVcbiAgLy8gYXNzb2NpYXRlZCBmcmFnbWVudCBkZWZpbml0aW9ucyBhcmUgYWxzbyByZW1vdmVkIGZyb20gdGhlIHJlc3Qgb2YgdGhlXG4gIC8vIGRvY3VtZW50LCBhcyBsb25nIGFzIHRoZXkgYXJlbid0IGJlaW5nIHVzZWQgZWxzZXdoZXJlLlxuICBpZiAoXG4gICAgbW9kaWZpZWREb2MgJiZcbiAgICBmaWx0ZXJJblBsYWNlKGZyYWdtZW50U3ByZWFkc1RvUmVtb3ZlLCBmcyA9PiAhZnJhZ21lbnRTcHJlYWRzSW5Vc2VbZnMubmFtZV0pXG4gICAgICAubGVuZ3RoXG4gICkge1xuICAgIG1vZGlmaWVkRG9jID0gcmVtb3ZlRnJhZ21lbnRTcHJlYWRGcm9tRG9jdW1lbnQoXG4gICAgICBmcmFnbWVudFNwcmVhZHNUb1JlbW92ZSxcbiAgICAgIG1vZGlmaWVkRG9jLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbW9kaWZpZWREb2M7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRUeXBlbmFtZVRvRG9jdW1lbnQoZG9jOiBEb2N1bWVudE5vZGUpOiBEb2N1bWVudE5vZGUge1xuICByZXR1cm4gdmlzaXQoY2hlY2tEb2N1bWVudChkb2MpLCB7XG4gICAgU2VsZWN0aW9uU2V0OiB7XG4gICAgICBlbnRlcihub2RlLCBfa2V5LCBwYXJlbnQpIHtcbiAgICAgICAgLy8gRG9uJ3QgYWRkIF9fdHlwZW5hbWUgdG8gT3BlcmF0aW9uRGVmaW5pdGlvbnMuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBwYXJlbnQgJiZcbiAgICAgICAgICAocGFyZW50IGFzIE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlKS5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbidcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTm8gY2hhbmdlcyBpZiBubyBzZWxlY3Rpb25zLlxuICAgICAgICBjb25zdCB7IHNlbGVjdGlvbnMgfSA9IG5vZGU7XG4gICAgICAgIGlmICghc2VsZWN0aW9ucykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHNlbGVjdGlvbnMgYWxyZWFkeSBoYXZlIGEgX190eXBlbmFtZSwgb3IgYXJlIHBhcnQgb2YgYW5cbiAgICAgICAgLy8gaW50cm9zcGVjdGlvbiBxdWVyeSwgZG8gbm90aGluZy5cbiAgICAgICAgY29uc3Qgc2tpcCA9IHNlbGVjdGlvbnMuc29tZShzZWxlY3Rpb24gPT4ge1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBpc0ZpZWxkKHNlbGVjdGlvbikgJiZcbiAgICAgICAgICAgIChzZWxlY3Rpb24ubmFtZS52YWx1ZSA9PT0gJ19fdHlwZW5hbWUnIHx8XG4gICAgICAgICAgICAgIHNlbGVjdGlvbi5uYW1lLnZhbHVlLmxhc3RJbmRleE9mKCdfXycsIDApID09PSAwKVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc2tpcCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHRoaXMgU2VsZWN0aW9uU2V0IGlzIEBleHBvcnQtZWQgYXMgYW4gaW5wdXQgdmFyaWFibGUsIGl0IHNob3VsZFxuICAgICAgICAvLyBub3QgaGF2ZSBhIF9fdHlwZW5hbWUgZmllbGQgKHNlZSBpc3N1ZSAjNDY5MSkuXG4gICAgICAgIGNvbnN0IGZpZWxkID0gcGFyZW50IGFzIEZpZWxkTm9kZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGlzRmllbGQoZmllbGQpICYmXG4gICAgICAgICAgZmllbGQuZGlyZWN0aXZlcyAmJlxuICAgICAgICAgIGZpZWxkLmRpcmVjdGl2ZXMuc29tZShkID0+IGQubmFtZS52YWx1ZSA9PT0gJ2V4cG9ydCcpXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IFNlbGVjdGlvblNldCB3aXRoIGEgX190eXBlbmFtZSBGaWVsZC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgIHNlbGVjdGlvbnM6IFsuLi5zZWxlY3Rpb25zLCBUWVBFTkFNRV9GSUVMRF0sXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgIH0sXG4gIH0pO1xufVxuXG5jb25zdCBjb25uZWN0aW9uUmVtb3ZlQ29uZmlnID0ge1xuICB0ZXN0OiAoZGlyZWN0aXZlOiBEaXJlY3RpdmVOb2RlKSA9PiB7XG4gICAgY29uc3Qgd2lsbFJlbW92ZSA9IGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSAnY29ubmVjdGlvbic7XG4gICAgaWYgKHdpbGxSZW1vdmUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIWRpcmVjdGl2ZS5hcmd1bWVudHMgfHxcbiAgICAgICAgIWRpcmVjdGl2ZS5hcmd1bWVudHMuc29tZShhcmcgPT4gYXJnLm5hbWUudmFsdWUgPT09ICdrZXknKVxuICAgICAgKSB7XG4gICAgICAgIGludmFyaWFudC53YXJuKFxuICAgICAgICAgICdSZW1vdmluZyBhbiBAY29ubmVjdGlvbiBkaXJlY3RpdmUgZXZlbiB0aG91Z2ggaXQgZG9lcyBub3QgaGF2ZSBhIGtleS4gJyArXG4gICAgICAgICAgICAnWW91IG1heSB3YW50IHRvIHVzZSB0aGUga2V5IHBhcmFtZXRlciB0byBzcGVjaWZ5IGEgc3RvcmUga2V5LicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdpbGxSZW1vdmU7XG4gIH0sXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlQ29ubmVjdGlvbkRpcmVjdGl2ZUZyb21Eb2N1bWVudChkb2M6IERvY3VtZW50Tm9kZSkge1xuICByZXR1cm4gcmVtb3ZlRGlyZWN0aXZlc0Zyb21Eb2N1bWVudChcbiAgICBbY29ubmVjdGlvblJlbW92ZUNvbmZpZ10sXG4gICAgY2hlY2tEb2N1bWVudChkb2MpLFxuICApO1xufVxuXG5mdW5jdGlvbiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb25TZXQoXG4gIGRpcmVjdGl2ZXM6IEdldERpcmVjdGl2ZUNvbmZpZ1tdLFxuICBzZWxlY3Rpb25TZXQ6IFNlbGVjdGlvblNldE5vZGUsXG4gIG5lc3RlZENoZWNrID0gdHJ1ZSxcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIHNlbGVjdGlvblNldCAmJlxuICAgIHNlbGVjdGlvblNldC5zZWxlY3Rpb25zICYmXG4gICAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuc29tZShzZWxlY3Rpb24gPT5cbiAgICAgIGhhc0RpcmVjdGl2ZXNJblNlbGVjdGlvbihkaXJlY3RpdmVzLCBzZWxlY3Rpb24sIG5lc3RlZENoZWNrKSxcbiAgICApXG4gICk7XG59XG5cbmZ1bmN0aW9uIGhhc0RpcmVjdGl2ZXNJblNlbGVjdGlvbihcbiAgZGlyZWN0aXZlczogR2V0RGlyZWN0aXZlQ29uZmlnW10sXG4gIHNlbGVjdGlvbjogU2VsZWN0aW9uTm9kZSxcbiAgbmVzdGVkQ2hlY2sgPSB0cnVlLFxuKTogYm9vbGVhbiB7XG4gIGlmICghaXNGaWVsZChzZWxlY3Rpb24pKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIXNlbGVjdGlvbi5kaXJlY3RpdmVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICBzZWxlY3Rpb24uZGlyZWN0aXZlcy5zb21lKGdldERpcmVjdGl2ZU1hdGNoZXIoZGlyZWN0aXZlcykpIHx8XG4gICAgKG5lc3RlZENoZWNrICYmXG4gICAgICBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb25TZXQoXG4gICAgICAgIGRpcmVjdGl2ZXMsXG4gICAgICAgIHNlbGVjdGlvbi5zZWxlY3Rpb25TZXQsXG4gICAgICAgIG5lc3RlZENoZWNrLFxuICAgICAgKSlcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpcmVjdGl2ZXNGcm9tRG9jdW1lbnQoXG4gIGRpcmVjdGl2ZXM6IEdldERpcmVjdGl2ZUNvbmZpZ1tdLFxuICBkb2M6IERvY3VtZW50Tm9kZSxcbik6IERvY3VtZW50Tm9kZSB7XG4gIGNoZWNrRG9jdW1lbnQoZG9jKTtcblxuICBsZXQgcGFyZW50UGF0aDogc3RyaW5nO1xuXG4gIHJldHVybiBudWxsSWZEb2NJc0VtcHR5KFxuICAgIHZpc2l0KGRvYywge1xuICAgICAgU2VsZWN0aW9uU2V0OiB7XG4gICAgICAgIGVudGVyKG5vZGUsIF9rZXksIF9wYXJlbnQsIHBhdGgpIHtcbiAgICAgICAgICBjb25zdCBjdXJyZW50UGF0aCA9IHBhdGguam9pbignLScpO1xuXG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXBhcmVudFBhdGggfHxcbiAgICAgICAgICAgIGN1cnJlbnRQYXRoID09PSBwYXJlbnRQYXRoIHx8XG4gICAgICAgICAgICAhY3VycmVudFBhdGguc3RhcnRzV2l0aChwYXJlbnRQYXRoKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgaWYgKG5vZGUuc2VsZWN0aW9ucykge1xuICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25zV2l0aERpcmVjdGl2ZXMgPSBub2RlLnNlbGVjdGlvbnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbiA9PiBoYXNEaXJlY3RpdmVzSW5TZWxlY3Rpb24oZGlyZWN0aXZlcywgc2VsZWN0aW9uKSxcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICBpZiAoaGFzRGlyZWN0aXZlc0luU2VsZWN0aW9uU2V0KGRpcmVjdGl2ZXMsIG5vZGUsIGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIHBhcmVudFBhdGggPSBjdXJyZW50UGF0aDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25zOiBzZWxlY3Rpb25zV2l0aERpcmVjdGl2ZXMsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pLFxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRBcmd1bWVudE1hdGNoZXIoY29uZmlnOiBSZW1vdmVBcmd1bWVudHNDb25maWdbXSkge1xuICByZXR1cm4gZnVuY3Rpb24gYXJndW1lbnRNYXRjaGVyKGFyZ3VtZW50OiBBcmd1bWVudE5vZGUpIHtcbiAgICByZXR1cm4gY29uZmlnLnNvbWUoXG4gICAgICAoYUNvbmZpZzogUmVtb3ZlQXJndW1lbnRzQ29uZmlnKSA9PlxuICAgICAgICBhcmd1bWVudC52YWx1ZSAmJlxuICAgICAgICBhcmd1bWVudC52YWx1ZS5raW5kID09PSAnVmFyaWFibGUnICYmXG4gICAgICAgIGFyZ3VtZW50LnZhbHVlLm5hbWUgJiZcbiAgICAgICAgKGFDb25maWcubmFtZSA9PT0gYXJndW1lbnQudmFsdWUubmFtZS52YWx1ZSB8fFxuICAgICAgICAgIChhQ29uZmlnLnRlc3QgJiYgYUNvbmZpZy50ZXN0KGFyZ3VtZW50KSkpLFxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVBcmd1bWVudHNGcm9tRG9jdW1lbnQoXG4gIGNvbmZpZzogUmVtb3ZlQXJndW1lbnRzQ29uZmlnW10sXG4gIGRvYzogRG9jdW1lbnROb2RlLFxuKTogRG9jdW1lbnROb2RlIHtcbiAgY29uc3QgYXJnTWF0Y2hlciA9IGdldEFyZ3VtZW50TWF0Y2hlcihjb25maWcpO1xuXG4gIHJldHVybiBudWxsSWZEb2NJc0VtcHR5KFxuICAgIHZpc2l0KGRvYywge1xuICAgICAgT3BlcmF0aW9uRGVmaW5pdGlvbjoge1xuICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLm5vZGUsXG4gICAgICAgICAgICAvLyBSZW1vdmUgbWF0Y2hpbmcgdG9wIGxldmVsIHZhcmlhYmxlcyBkZWZpbml0aW9ucy5cbiAgICAgICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IG5vZGUudmFyaWFibGVEZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgICAgICAgICAgIHZhckRlZiA9PlxuICAgICAgICAgICAgICAgICFjb25maWcuc29tZShhcmcgPT4gYXJnLm5hbWUgPT09IHZhckRlZi52YXJpYWJsZS5uYW1lLnZhbHVlKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgIH0sXG5cbiAgICAgIEZpZWxkOiB7XG4gICAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgICAvLyBJZiBgcmVtb3ZlYCBpcyBzZXQgdG8gdHJ1ZSBmb3IgYW4gYXJndW1lbnQsIGFuZCBhbiBhcmd1bWVudCBtYXRjaFxuICAgICAgICAgIC8vIGlzIGZvdW5kIGZvciBhIGZpZWxkLCByZW1vdmUgdGhlIGZpZWxkIGFzIHdlbGwuXG4gICAgICAgICAgY29uc3Qgc2hvdWxkUmVtb3ZlRmllbGQgPSBjb25maWcuc29tZShhcmdDb25maWcgPT4gYXJnQ29uZmlnLnJlbW92ZSk7XG5cbiAgICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlRmllbGQpIHtcbiAgICAgICAgICAgIGxldCBhcmdNYXRjaENvdW50ID0gMDtcbiAgICAgICAgICAgIG5vZGUuYXJndW1lbnRzLmZvckVhY2goYXJnID0+IHtcbiAgICAgICAgICAgICAgaWYgKGFyZ01hdGNoZXIoYXJnKSkge1xuICAgICAgICAgICAgICAgIGFyZ01hdGNoQ291bnQgKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoYXJnTWF0Y2hDb3VudCA9PT0gMSkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuXG4gICAgICBBcmd1bWVudDoge1xuICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIGFsbCBtYXRjaGluZyBhcmd1bWVudHMuXG4gICAgICAgICAgaWYgKGFyZ01hdGNoZXIobm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSksXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGcmFnbWVudFNwcmVhZEZyb21Eb2N1bWVudChcbiAgY29uZmlnOiBSZW1vdmVGcmFnbWVudFNwcmVhZENvbmZpZ1tdLFxuICBkb2M6IERvY3VtZW50Tm9kZSxcbik6IERvY3VtZW50Tm9kZSB7XG4gIGZ1bmN0aW9uIGVudGVyKFxuICAgIG5vZGU6IEZyYWdtZW50U3ByZWFkTm9kZSB8IEZyYWdtZW50RGVmaW5pdGlvbk5vZGUsXG4gICk6IG51bGwgfCB2b2lkIHtcbiAgICBpZiAoY29uZmlnLnNvbWUoZGVmID0+IGRlZi5uYW1lID09PSBub2RlLm5hbWUudmFsdWUpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbElmRG9jSXNFbXB0eShcbiAgICB2aXNpdChkb2MsIHtcbiAgICAgIEZyYWdtZW50U3ByZWFkOiB7IGVudGVyIH0sXG4gICAgICBGcmFnbWVudERlZmluaXRpb246IHsgZW50ZXIgfSxcbiAgICB9KSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0QWxsRnJhZ21lbnRTcHJlYWRzRnJvbVNlbGVjdGlvblNldChcbiAgc2VsZWN0aW9uU2V0OiBTZWxlY3Rpb25TZXROb2RlLFxuKTogRnJhZ21lbnRTcHJlYWROb2RlW10ge1xuICBjb25zdCBhbGxGcmFnbWVudHM6IEZyYWdtZW50U3ByZWFkTm9kZVtdID0gW107XG5cbiAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZm9yRWFjaChzZWxlY3Rpb24gPT4ge1xuICAgIGlmIChcbiAgICAgIChpc0ZpZWxkKHNlbGVjdGlvbikgfHwgaXNJbmxpbmVGcmFnbWVudChzZWxlY3Rpb24pKSAmJlxuICAgICAgc2VsZWN0aW9uLnNlbGVjdGlvblNldFxuICAgICkge1xuICAgICAgZ2V0QWxsRnJhZ21lbnRTcHJlYWRzRnJvbVNlbGVjdGlvblNldChzZWxlY3Rpb24uc2VsZWN0aW9uU2V0KS5mb3JFYWNoKFxuICAgICAgICBmcmFnID0+IGFsbEZyYWdtZW50cy5wdXNoKGZyYWcpLFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHNlbGVjdGlvbi5raW5kID09PSAnRnJhZ21lbnRTcHJlYWQnKSB7XG4gICAgICBhbGxGcmFnbWVudHMucHVzaChzZWxlY3Rpb24pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGFsbEZyYWdtZW50cztcbn1cblxuLy8gSWYgdGhlIGluY29taW5nIGRvY3VtZW50IGlzIGEgcXVlcnksIHJldHVybiBpdCBhcyBpcy4gT3RoZXJ3aXNlLCBidWlsZCBhXG4vLyBuZXcgZG9jdW1lbnQgY29udGFpbmluZyBhIHF1ZXJ5IG9wZXJhdGlvbiBiYXNlZCBvbiB0aGUgc2VsZWN0aW9uIHNldFxuLy8gb2YgdGhlIHByZXZpb3VzIG1haW4gb3BlcmF0aW9uLlxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkUXVlcnlGcm9tU2VsZWN0aW9uU2V0KFxuICBkb2N1bWVudDogRG9jdW1lbnROb2RlLFxuKTogRG9jdW1lbnROb2RlIHtcbiAgY29uc3QgZGVmaW5pdGlvbiA9IGdldE1haW5EZWZpbml0aW9uKGRvY3VtZW50KTtcbiAgY29uc3QgZGVmaW5pdGlvbk9wZXJhdGlvbiA9ICg8T3BlcmF0aW9uRGVmaW5pdGlvbk5vZGU+ZGVmaW5pdGlvbikub3BlcmF0aW9uO1xuXG4gIGlmIChkZWZpbml0aW9uT3BlcmF0aW9uID09PSAncXVlcnknKSB7XG4gICAgLy8gQWxyZWFkeSBhIHF1ZXJ5LCBzbyByZXR1cm4gdGhlIGV4aXN0aW5nIGRvY3VtZW50LlxuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgbmV3IHF1ZXJ5IHVzaW5nIHRoZSBzZWxlY3Rpb24gc2V0IG9mIHRoZSBtYWluIG9wZXJhdGlvbi5cbiAgY29uc3QgbW9kaWZpZWREb2MgPSB2aXNpdChkb2N1bWVudCwge1xuICAgIE9wZXJhdGlvbkRlZmluaXRpb246IHtcbiAgICAgIGVudGVyKG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgIG9wZXJhdGlvbjogJ3F1ZXJ5JyxcbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgfSxcbiAgfSk7XG4gIHJldHVybiBtb2RpZmllZERvYztcbn1cblxuLy8gUmVtb3ZlIGZpZWxkcyAvIHNlbGVjdGlvbiBzZXRzIHRoYXQgaW5jbHVkZSBhbiBAY2xpZW50IGRpcmVjdGl2ZS5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVDbGllbnRTZXRzRnJvbURvY3VtZW50KFxuICBkb2N1bWVudDogRG9jdW1lbnROb2RlLFxuKTogRG9jdW1lbnROb2RlIHwgbnVsbCB7XG4gIGNoZWNrRG9jdW1lbnQoZG9jdW1lbnQpO1xuXG4gIGxldCBtb2RpZmllZERvYyA9IHJlbW92ZURpcmVjdGl2ZXNGcm9tRG9jdW1lbnQoXG4gICAgW1xuICAgICAge1xuICAgICAgICB0ZXN0OiAoZGlyZWN0aXZlOiBEaXJlY3RpdmVOb2RlKSA9PiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gJ2NsaWVudCcsXG4gICAgICAgIHJlbW92ZTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgICBkb2N1bWVudCxcbiAgKTtcblxuICAvLyBBZnRlciBhIGZyYWdtZW50IGRlZmluaXRpb24gaGFzIGhhZCBpdHMgQGNsaWVudCByZWxhdGVkIGRvY3VtZW50XG4gIC8vIHNldHMgcmVtb3ZlZCwgaWYgdGhlIG9ubHkgZmllbGQgaXQgaGFzIGxlZnQgaXMgYSBfX3R5cGVuYW1lIGZpZWxkLFxuICAvLyByZW1vdmUgdGhlIGVudGlyZSBmcmFnbWVudCBvcGVyYXRpb24gdG8gcHJldmVudCBpdCBmcm9tIGJlaW5nIGZpcmVkXG4gIC8vIG9uIHRoZSBzZXJ2ZXIuXG4gIGlmIChtb2RpZmllZERvYykge1xuICAgIG1vZGlmaWVkRG9jID0gdmlzaXQobW9kaWZpZWREb2MsIHtcbiAgICAgIEZyYWdtZW50RGVmaW5pdGlvbjoge1xuICAgICAgICBlbnRlcihub2RlKSB7XG4gICAgICAgICAgaWYgKG5vZGUuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgICBjb25zdCBpc1R5cGVuYW1lT25seSA9IG5vZGUuc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZXZlcnkoXG4gICAgICAgICAgICAgIHNlbGVjdGlvbiA9PlxuICAgICAgICAgICAgICAgIGlzRmllbGQoc2VsZWN0aW9uKSAmJiBzZWxlY3Rpb24ubmFtZS52YWx1ZSA9PT0gJ19fdHlwZW5hbWUnLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChpc1R5cGVuYW1lT25seSkge1xuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG1vZGlmaWVkRG9jO1xufVxuIiwiZXhwb3J0IGNvbnN0IGNhblVzZVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAhKFxuICB0eXBlb2YgbmF2aWdhdG9yID09PSAnb2JqZWN0JyAmJlxuICBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJ1xuKTtcbiIsImNvbnN0IHsgdG9TdHJpbmcgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKlxuICogRGVlcGx5IGNsb25lcyBhIHZhbHVlIHRvIGNyZWF0ZSBhIG5ldyBpbnN0YW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNsb25lRGVlcDxUPih2YWx1ZTogVCk6IFQge1xuICByZXR1cm4gY2xvbmVEZWVwSGVscGVyKHZhbHVlLCBuZXcgTWFwKCkpO1xufVxuXG5mdW5jdGlvbiBjbG9uZURlZXBIZWxwZXI8VD4odmFsOiBULCBzZWVuOiBNYXA8YW55LCBhbnk+KTogVCB7XG4gIHN3aXRjaCAodG9TdHJpbmcuY2FsbCh2YWwpKSB7XG4gIGNhc2UgXCJbb2JqZWN0IEFycmF5XVwiOiB7XG4gICAgaWYgKHNlZW4uaGFzKHZhbCkpIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgIGNvbnN0IGNvcHk6IFQgJiBhbnlbXSA9ICh2YWwgYXMgYW55KS5zbGljZSgwKTtcbiAgICBzZWVuLnNldCh2YWwsIGNvcHkpO1xuICAgIGNvcHkuZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgIGNvcHlbaV0gPSBjbG9uZURlZXBIZWxwZXIoY2hpbGQsIHNlZW4pO1xuICAgIH0pO1xuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgY2FzZSBcIltvYmplY3QgT2JqZWN0XVwiOiB7XG4gICAgaWYgKHNlZW4uaGFzKHZhbCkpIHJldHVybiBzZWVuLmdldCh2YWwpO1xuICAgIC8vIEhpZ2ggZmlkZWxpdHkgcG9seWZpbGxzIG9mIE9iamVjdC5jcmVhdGUgYW5kIE9iamVjdC5nZXRQcm90b3R5cGVPZiBhcmVcbiAgICAvLyBwb3NzaWJsZSBpbiBhbGwgSlMgZW52aXJvbm1lbnRzLCBzbyB3ZSB3aWxsIGFzc3VtZSB0aGV5IGV4aXN0L3dvcmsuXG4gICAgY29uc3QgY29weSA9IE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbCkpO1xuICAgIHNlZW4uc2V0KHZhbCwgY29weSk7XG4gICAgT2JqZWN0LmtleXModmFsKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBjb3B5W2tleV0gPSBjbG9uZURlZXBIZWxwZXIoKHZhbCBhcyBhbnkpW2tleV0sIHNlZW4pO1xuICAgIH0pO1xuICAgIHJldHVybiBjb3B5O1xuICB9XG5cbiAgZGVmYXVsdDpcbiAgICByZXR1cm4gdmFsO1xuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gZ2V0RW52KCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYpIHtcbiAgICByZXR1cm4gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gIH1cblxuICAvLyBkZWZhdWx0IGVudmlyb25tZW50XG4gIHJldHVybiAnZGV2ZWxvcG1lbnQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbnYoZW52OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGdldEVudigpID09PSBlbnY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb2R1Y3Rpb24oKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc0VudigncHJvZHVjdGlvbicpID09PSB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNEZXZlbG9wbWVudCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIGlzRW52KCdkZXZlbG9wbWVudCcpID09PSB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZXN0KCk6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNFbnYoJ3Rlc3QnKSA9PT0gdHJ1ZTtcbn1cbiIsImltcG9ydCB7IEV4ZWN1dGlvblJlc3VsdCB9IGZyb20gJ2dyYXBocWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gdHJ5RnVuY3Rpb25PckxvZ0Vycm9yKGY6IEZ1bmN0aW9uKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGYoKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChjb25zb2xlLmVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdDogRXhlY3V0aW9uUmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQuZXJyb3JzICYmIHJlc3VsdC5lcnJvcnMubGVuZ3RoO1xufVxuIiwiaW1wb3J0IHsgaXNEZXZlbG9wbWVudCwgaXNUZXN0IH0gZnJvbSAnLi9lbnZpcm9ubWVudCc7XG5cbi8vIFRha2VuIChtb3N0bHkpIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3N1YnN0YWNrL2RlZXAtZnJlZXplIHRvIGF2b2lkXG4vLyBpbXBvcnQgaGFzc2xlcyB3aXRoIHJvbGx1cC5cbmZ1bmN0aW9uIGRlZXBGcmVlemUobzogYW55KSB7XG4gIE9iamVjdC5mcmVlemUobyk7XG5cbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobykuZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG4gICAgaWYgKFxuICAgICAgb1twcm9wXSAhPT0gbnVsbCAmJlxuICAgICAgKHR5cGVvZiBvW3Byb3BdID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb1twcm9wXSA9PT0gJ2Z1bmN0aW9uJykgJiZcbiAgICAgICFPYmplY3QuaXNGcm96ZW4ob1twcm9wXSlcbiAgICApIHtcbiAgICAgIGRlZXBGcmVlemUob1twcm9wXSk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlRGVlcEZyZWV6ZShvYmo6IGFueSkge1xuICBpZiAoaXNEZXZlbG9wbWVudCgpIHx8IGlzVGVzdCgpKSB7XG4gICAgLy8gUG9seWZpbGxlZCBTeW1ib2xzIHBvdGVudGlhbGx5IGNhdXNlIGluZmluaXRlIC8gdmVyeSBkZWVwIHJlY3Vyc2lvbiB3aGlsZSBkZWVwIGZyZWV6aW5nXG4gICAgLy8gd2hpY2ggaXMga25vd24gdG8gY3Jhc2ggSUUxMSAoaHR0cHM6Ly9naXRodWIuY29tL2Fwb2xsb2dyYXBocWwvYXBvbGxvLWNsaWVudC9pc3N1ZXMvMzA0MykuXG4gICAgY29uc3Qgc3ltYm9sSXNQb2x5ZmlsbGVkID1cbiAgICAgIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnJykgPT09ICdzdHJpbmcnO1xuXG4gICAgaWYgKCFzeW1ib2xJc1BvbHlmaWxsZWQpIHtcbiAgICAgIHJldHVybiBkZWVwRnJlZXplKG9iaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmo7XG59XG4iLCJjb25zdCB7IGhhc093blByb3BlcnR5IH0gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBUaGVzZSBtZXJnZURlZXAgYW5kIG1lcmdlRGVlcEFycmF5IHV0aWxpdGllcyBtZXJnZSBhbnkgbnVtYmVyIG9mIG9iamVjdHNcbi8vIHRvZ2V0aGVyLCBzaGFyaW5nIGFzIG11Y2ggbWVtb3J5IGFzIHBvc3NpYmxlIHdpdGggdGhlIHNvdXJjZSBvYmplY3RzLCB3aGlsZVxuLy8gcmVtYWluaW5nIGNhcmVmdWwgdG8gYXZvaWQgbW9kaWZ5aW5nIGFueSBzb3VyY2Ugb2JqZWN0cy5cblxuLy8gTG9naWNhbGx5LCB0aGUgcmV0dXJuIHR5cGUgb2YgbWVyZ2VEZWVwIHNob3VsZCBiZSB0aGUgaW50ZXJzZWN0aW9uIG9mXG4vLyBhbGwgdGhlIGFyZ3VtZW50IHR5cGVzLiBUaGUgYmluYXJ5IGNhbGwgc2lnbmF0dXJlIGlzIGJ5IGZhciB0aGUgbW9zdFxuLy8gY29tbW9uLCBidXQgd2Ugc3VwcG9ydCAwLSB0aHJvdWdoIDUtYXJ5IGFzIHdlbGwuIEFmdGVyIHRoYXQsIHRoZVxuLy8gcmVzdWx0aW5nIHR5cGUgaXMganVzdCB0aGUgaW5mZXJyZWQgYXJyYXkgZWxlbWVudCB0eXBlLiBOb3RlIHRvIG5lcmRzOlxuLy8gdGhlcmUgaXMgYSBtb3JlIGNsZXZlciB3YXkgb2YgZG9pbmcgdGhpcyB0aGF0IGNvbnZlcnRzIHRoZSB0dXBsZSB0eXBlXG4vLyBmaXJzdCB0byBhIHVuaW9uIHR5cGUgKGVhc3kgZW5vdWdoOiBUW251bWJlcl0pIGFuZCB0aGVuIGNvbnZlcnRzIHRoZVxuLy8gdW5pb24gdG8gYW4gaW50ZXJzZWN0aW9uIHR5cGUgdXNpbmcgZGlzdHJpYnV0aXZlIGNvbmRpdGlvbmFsIHR5cGVcbi8vIGluZmVyZW5jZSwgYnV0IHRoYXQgYXBwcm9hY2ggaGFzIHNldmVyYWwgZmF0YWwgZmxhd3MgKGJvb2xlYW4gYmVjb21lc1xuLy8gdHJ1ZSAmIGZhbHNlLCBhbmQgdGhlIGluZmVycmVkIHR5cGUgZW5kcyB1cCBhcyB1bmtub3duIGluIG1hbnkgY2FzZXMpLFxuLy8gaW4gYWRkaXRpb24gdG8gYmVpbmcgbmVhcmx5IGltcG9zc2libGUgdG8gZXhwbGFpbi91bmRlcnN0YW5kLlxuZXhwb3J0IHR5cGUgVHVwbGVUb0ludGVyc2VjdGlvbjxUIGV4dGVuZHMgYW55W10+ID1cbiAgVCBleHRlbmRzIFtpbmZlciBBXSA/IEEgOlxuICBUIGV4dGVuZHMgW2luZmVyIEEsIGluZmVyIEJdID8gQSAmIEIgOlxuICBUIGV4dGVuZHMgW2luZmVyIEEsIGluZmVyIEIsIGluZmVyIENdID8gQSAmIEIgJiBDIDpcbiAgVCBleHRlbmRzIFtpbmZlciBBLCBpbmZlciBCLCBpbmZlciBDLCBpbmZlciBEXSA/IEEgJiBCICYgQyAmIEQgOlxuICBUIGV4dGVuZHMgW2luZmVyIEEsIGluZmVyIEIsIGluZmVyIEMsIGluZmVyIEQsIGluZmVyIEVdID8gQSAmIEIgJiBDICYgRCAmIEUgOlxuICBUIGV4dGVuZHMgKGluZmVyIFUpW10gPyBVIDogYW55O1xuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWVwPFQgZXh0ZW5kcyBhbnlbXT4oXG4gIC4uLnNvdXJjZXM6IFRcbik6IFR1cGxlVG9JbnRlcnNlY3Rpb248VD4ge1xuICByZXR1cm4gbWVyZ2VEZWVwQXJyYXkoc291cmNlcyk7XG59XG5cbi8vIEluIGFsbW9zdCBhbnkgc2l0dWF0aW9uIHdoZXJlIHlvdSBjb3VsZCBzdWNjZWVkIGluIGdldHRpbmcgdGhlXG4vLyBUeXBlU2NyaXB0IGNvbXBpbGVyIHRvIGluZmVyIGEgdHVwbGUgdHlwZSBmb3IgdGhlIHNvdXJjZXMgYXJyYXksIHlvdVxuLy8gY291bGQganVzdCB1c2UgbWVyZ2VEZWVwIGluc3RlYWQgb2YgbWVyZ2VEZWVwQXJyYXksIHNvIGluc3RlYWQgb2Zcbi8vIHRyeWluZyB0byBjb252ZXJ0IFRbXSB0byBhbiBpbnRlcnNlY3Rpb24gdHlwZSB3ZSBqdXN0IGluZmVyIHRoZSBhcnJheVxuLy8gZWxlbWVudCB0eXBlLCB3aGljaCB3b3JrcyBwZXJmZWN0bHkgd2hlbiB0aGUgc291cmNlcyBhcnJheSBoYXMgYVxuLy8gY29uc2lzdGVudCBlbGVtZW50IHR5cGUuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VEZWVwQXJyYXk8VD4oc291cmNlczogVFtdKTogVCB7XG4gIGxldCB0YXJnZXQgPSBzb3VyY2VzWzBdIHx8IHt9IGFzIFQ7XG4gIGNvbnN0IGNvdW50ID0gc291cmNlcy5sZW5ndGg7XG4gIGlmIChjb3VudCA+IDEpIHtcbiAgICBjb25zdCBwYXN0Q29waWVzOiBhbnlbXSA9IFtdO1xuICAgIHRhcmdldCA9IHNoYWxsb3dDb3B5Rm9yTWVyZ2UodGFyZ2V0LCBwYXN0Q29waWVzKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgIHRhcmdldCA9IG1lcmdlSGVscGVyKHRhcmdldCwgc291cmNlc1tpXSwgcGFzdENvcGllcyk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KG9iajogYW55KTogb2JqIGlzIFJlY29yZDxzdHJpbmcgfCBudW1iZXIsIGFueT4ge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xufVxuXG5mdW5jdGlvbiBtZXJnZUhlbHBlcihcbiAgdGFyZ2V0OiBhbnksXG4gIHNvdXJjZTogYW55LFxuICBwYXN0Q29waWVzOiBhbnlbXSxcbikge1xuICBpZiAoaXNPYmplY3Qoc291cmNlKSAmJiBpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgLy8gSW4gY2FzZSB0aGUgdGFyZ2V0IGhhcyBiZWVuIGZyb3plbiwgbWFrZSBhbiBleHRlbnNpYmxlIGNvcHkgc28gdGhhdFxuICAgIC8vIHdlIGNhbiBtZXJnZSBwcm9wZXJ0aWVzIGludG8gdGhlIGNvcHkuXG4gICAgaWYgKE9iamVjdC5pc0V4dGVuc2libGUgJiYgIU9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KSkge1xuICAgICAgdGFyZ2V0ID0gc2hhbGxvd0NvcHlGb3JNZXJnZSh0YXJnZXQsIHBhc3RDb3BpZXMpO1xuICAgIH1cblxuICAgIE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChzb3VyY2VLZXkgPT4ge1xuICAgICAgY29uc3Qgc291cmNlVmFsdWUgPSBzb3VyY2Vbc291cmNlS2V5XTtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgc291cmNlS2V5KSkge1xuICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IHRhcmdldFtzb3VyY2VLZXldO1xuICAgICAgICBpZiAoc291cmNlVmFsdWUgIT09IHRhcmdldFZhbHVlKSB7XG4gICAgICAgICAgLy8gV2hlbiB0aGVyZSBpcyBhIGtleSBjb2xsaXNpb24sIHdlIG5lZWQgdG8gbWFrZSBhIHNoYWxsb3cgY29weSBvZlxuICAgICAgICAgIC8vIHRhcmdldFtzb3VyY2VLZXldIHNvIHRoZSBtZXJnZSBkb2VzIG5vdCBtb2RpZnkgYW55IHNvdXJjZSBvYmplY3RzLlxuICAgICAgICAgIC8vIFRvIGF2b2lkIG1ha2luZyB1bm5lY2Vzc2FyeSBjb3BpZXMsIHdlIHVzZSBhIHNpbXBsZSBhcnJheSB0byB0cmFja1xuICAgICAgICAgIC8vIHBhc3QgY29waWVzLCBzaW5jZSBpdCdzIHNhZmUgdG8gbW9kaWZ5IGNvcGllcyBjcmVhdGVkIGVhcmxpZXIgaW5cbiAgICAgICAgICAvLyB0aGUgbWVyZ2UuIFdlIHVzZSBhbiBhcnJheSBmb3IgcGFzdENvcGllcyBpbnN0ZWFkIG9mIGEgTWFwIG9yIFNldCxcbiAgICAgICAgICAvLyBzaW5jZSB0aGUgbnVtYmVyIG9mIGNvcGllcyBzaG91bGQgYmUgcmVsYXRpdmVseSBzbWFsbCwgYW5kIHNvbWVcbiAgICAgICAgICAvLyBNYXAvU2V0IHBvbHlmaWxscyBtb2RpZnkgdGhlaXIga2V5cy5cbiAgICAgICAgICB0YXJnZXRbc291cmNlS2V5XSA9IG1lcmdlSGVscGVyKFxuICAgICAgICAgICAgc2hhbGxvd0NvcHlGb3JNZXJnZSh0YXJnZXRWYWx1ZSwgcGFzdENvcGllcyksXG4gICAgICAgICAgICBzb3VyY2VWYWx1ZSxcbiAgICAgICAgICAgIHBhc3RDb3BpZXMsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gY29sbGlzaW9uLCB0aGUgdGFyZ2V0IGNhbiBzYWZlbHkgc2hhcmUgbWVtb3J5IHdpdGhcbiAgICAgICAgLy8gdGhlIHNvdXJjZSwgYW5kIHRoZSByZWN1cnNpb24gY2FuIHRlcm1pbmF0ZSBoZXJlLlxuICAgICAgICB0YXJnZXRbc291cmNlS2V5XSA9IHNvdXJjZVZhbHVlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIC8vIElmIHNvdXJjZSAob3IgdGFyZ2V0KSBpcyBub3QgYW4gb2JqZWN0LCBsZXQgc291cmNlIHJlcGxhY2UgdGFyZ2V0LlxuICByZXR1cm4gc291cmNlO1xufVxuXG5mdW5jdGlvbiBzaGFsbG93Q29weUZvck1lcmdlPFQ+KHZhbHVlOiBULCBwYXN0Q29waWVzOiBhbnlbXSk6IFQge1xuICBpZiAoXG4gICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgcGFzdENvcGllcy5pbmRleE9mKHZhbHVlKSA8IDBcbiAgKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9ICh2YWx1ZSBhcyBhbnkpLnNsaWNlKDApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IHtcbiAgICAgICAgX19wcm90b19fOiBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpLFxuICAgICAgICAuLi52YWx1ZSxcbiAgICAgIH07XG4gICAgfVxuICAgIHBhc3RDb3BpZXMucHVzaCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuIiwiaW1wb3J0IHsgaXNQcm9kdWN0aW9uLCBpc1Rlc3QgfSBmcm9tICcuL2Vudmlyb25tZW50JztcblxuY29uc3QgaGF2ZVdhcm5lZCA9IE9iamVjdC5jcmVhdGUoe30pO1xuXG4vKipcbiAqIFByaW50IGEgd2FybmluZyBvbmx5IG9uY2UgaW4gZGV2ZWxvcG1lbnQuXG4gKiBJbiBwcm9kdWN0aW9uIG5vIHdhcm5pbmdzIGFyZSBwcmludGVkLlxuICogSW4gdGVzdCBhbGwgd2FybmluZ3MgYXJlIHByaW50ZWQuXG4gKlxuICogQHBhcmFtIG1zZyBUaGUgd2FybmluZyBtZXNzYWdlXG4gKiBAcGFyYW0gdHlwZSB3YXJuIG9yIGVycm9yICh3aWxsIGNhbGwgY29uc29sZS53YXJuIG9yIGNvbnNvbGUuZXJyb3IpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YXJuT25jZUluRGV2ZWxvcG1lbnQobXNnOiBzdHJpbmcsIHR5cGUgPSAnd2FybicpIHtcbiAgaWYgKCFpc1Byb2R1Y3Rpb24oKSAmJiAhaGF2ZVdhcm5lZFttc2ddKSB7XG4gICAgaWYgKCFpc1Rlc3QoKSkge1xuICAgICAgaGF2ZVdhcm5lZFttc2ddID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdlcnJvcicpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKG1zZyk7XG4gICAgfVxuICB9XG59XG4iLCJjb25zdCBnZW5lcmljTWVzc2FnZSA9IFwiSW52YXJpYW50IFZpb2xhdGlvblwiO1xuY29uc3Qge1xuICBzZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIChvYmo6IGFueSwgcHJvdG86IGFueSkge1xuICAgIG9iai5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gb2JqO1xuICB9LFxufSA9IE9iamVjdCBhcyBhbnk7XG5cbmV4cG9ydCBjbGFzcyBJbnZhcmlhbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgZnJhbWVzVG9Qb3AgPSAxO1xuICBuYW1lID0gZ2VuZXJpY01lc3NhZ2U7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZyB8IG51bWJlciA9IGdlbmVyaWNNZXNzYWdlKSB7XG4gICAgc3VwZXIoXG4gICAgICB0eXBlb2YgbWVzc2FnZSA9PT0gXCJudW1iZXJcIlxuICAgICAgICA/IGAke2dlbmVyaWNNZXNzYWdlfTogJHttZXNzYWdlfSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2ludmFyaWFudC1wYWNrYWdlcylgXG4gICAgICAgIDogbWVzc2FnZVxuICAgICk7XG4gICAgc2V0UHJvdG90eXBlT2YodGhpcywgSW52YXJpYW50RXJyb3IucHJvdG90eXBlKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbjogYW55LCBtZXNzYWdlPzogc3RyaW5nIHwgbnVtYmVyKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBDb25zb2xlTWV0aG9kKG1ldGhvZDogXCJ3YXJuXCIgfCBcImVycm9yXCIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29uc29sZVttZXRob2RdLmFwcGx5KGNvbnNvbGUsIGFyZ3VtZW50cyBhcyBhbnkpO1xuICB9IGFzICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBpbnZhcmlhbnQge1xuICBleHBvcnQgY29uc3Qgd2FybiA9IHdyYXBDb25zb2xlTWV0aG9kKFwid2FyblwiKTtcbiAgZXhwb3J0IGNvbnN0IGVycm9yID0gd3JhcENvbnNvbGVNZXRob2QoXCJlcnJvclwiKTtcbn1cblxuLy8gQ29kZSB0aGF0IHVzZXMgdHMtaW52YXJpYW50IHdpdGggcm9sbHVwLXBsdWdpbi1pbnZhcmlhbnQgbWF5IHdhbnQgdG9cbi8vIGltcG9ydCB0aGlzIHByb2Nlc3Mgc3R1YiB0byBhdm9pZCBlcnJvcnMgZXZhbHVhdGluZyBwcm9jZXNzLmVudi5OT0RFX0VOVi5cbi8vIEhvd2V2ZXIsIGJlY2F1c2UgbW9zdCBFU00tdG8tQ0pTIGNvbXBpbGVycyB3aWxsIHJld3JpdGUgdGhlIHByb2Nlc3MgaW1wb3J0XG4vLyBhcyB0c0ludmFyaWFudC5wcm9jZXNzLCB3aGljaCBwcmV2ZW50cyBwcm9wZXIgcmVwbGFjZW1lbnQgYnkgbWluaWZpZXJzLCB3ZVxuLy8gYWxzbyBhdHRlbXB0IHRvIGRlZmluZSB0aGUgc3R1YiBnbG9iYWxseSB3aGVuIGl0IGlzIG5vdCBhbHJlYWR5IGRlZmluZWQuXG5sZXQgcHJvY2Vzc1N0dWI6IE5vZGVKUy5Qcm9jZXNzID0geyBlbnY6IHt9IH0gYXMgYW55O1xuZXhwb3J0IHsgcHJvY2Vzc1N0dWIgYXMgcHJvY2VzcyB9O1xuaWYgKHR5cGVvZiBwcm9jZXNzID09PSBcIm9iamVjdFwiKSB7XG4gIHByb2Nlc3NTdHViID0gcHJvY2Vzcztcbn0gZWxzZSB0cnkge1xuICAvLyBVc2luZyBGdW5jdGlvbiB0byBldmFsdWF0ZSB0aGlzIGFzc2lnbm1lbnQgaW4gZ2xvYmFsIHNjb3BlIGFsc28gZXNjYXBlc1xuICAvLyB0aGUgc3RyaWN0IG1vZGUgb2YgdGhlIGN1cnJlbnQgbW9kdWxlLCB0aGVyZWJ5IGFsbG93aW5nIHRoZSBhc3NpZ25tZW50LlxuICAvLyBJbnNwaXJlZCBieSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvcHVsbC8zNjkuXG4gIEZ1bmN0aW9uKFwic3R1YlwiLCBcInByb2Nlc3MgPSBzdHViXCIpKHByb2Nlc3NTdHViKTtcbn0gY2F0Y2ggKGF0TGVhc3RXZVRyaWVkKSB7XG4gIC8vIFRoZSBhc3NpZ25tZW50IGNhbiBmYWlsIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgaGVhdnktaGFuZGVkbHlcbiAgLy8gZm9yYmlkcyBGdW5jdGlvbiB1c2FnZS4gSW4gdGhvc2UgZW52aXJvbm1lbnRzLCBkZXZlbG9wZXJzIHNob3VsZCB0YWtlXG4gIC8vIGV4dHJhIGNhcmUgdG8gcmVwbGFjZSBwcm9jZXNzLmVudi5OT0RFX0VOViBpbiB0aGVpciBwcm9kdWN0aW9uIGJ1aWxkcyxcbiAgLy8gb3IgZGVmaW5lIGFuIGFwcHJvcHJpYXRlIGdsb2JhbC5wcm9jZXNzIHBvbHlmaWxsLlxufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudmlzaXQgPSB2aXNpdDtcbmV4cG9ydHMudmlzaXRJblBhcmFsbGVsID0gdmlzaXRJblBhcmFsbGVsO1xuZXhwb3J0cy5nZXRWaXNpdEZuID0gZ2V0VmlzaXRGbjtcbmV4cG9ydHMuQlJFQUsgPSBleHBvcnRzLlF1ZXJ5RG9jdW1lbnRLZXlzID0gdm9pZCAwO1xuXG52YXIgX2luc3BlY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9qc3V0aWxzL2luc3BlY3RcIikpO1xuXG52YXIgX2FzdCA9IHJlcXVpcmUoXCIuL2FzdFwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFF1ZXJ5RG9jdW1lbnRLZXlzID0ge1xuICBOYW1lOiBbXSxcbiAgRG9jdW1lbnQ6IFsnZGVmaW5pdGlvbnMnXSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbjogWyduYW1lJywgJ3ZhcmlhYmxlRGVmaW5pdGlvbnMnLCAnZGlyZWN0aXZlcycsICdzZWxlY3Rpb25TZXQnXSxcbiAgVmFyaWFibGVEZWZpbml0aW9uOiBbJ3ZhcmlhYmxlJywgJ3R5cGUnLCAnZGVmYXVsdFZhbHVlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgVmFyaWFibGU6IFsnbmFtZSddLFxuICBTZWxlY3Rpb25TZXQ6IFsnc2VsZWN0aW9ucyddLFxuICBGaWVsZDogWydhbGlhcycsICduYW1lJywgJ2FyZ3VtZW50cycsICdkaXJlY3RpdmVzJywgJ3NlbGVjdGlvblNldCddLFxuICBBcmd1bWVudDogWyduYW1lJywgJ3ZhbHVlJ10sXG4gIEZyYWdtZW50U3ByZWFkOiBbJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBJbmxpbmVGcmFnbWVudDogWyd0eXBlQ29uZGl0aW9uJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIEZyYWdtZW50RGVmaW5pdGlvbjogWyduYW1lJywgLy8gTm90ZTogZnJhZ21lbnQgdmFyaWFibGUgZGVmaW5pdGlvbnMgYXJlIGV4cGVyaW1lbnRhbCBhbmQgbWF5IGJlIGNoYW5nZWRcbiAgLy8gb3IgcmVtb3ZlZCBpbiB0aGUgZnV0dXJlLlxuICAndmFyaWFibGVEZWZpbml0aW9ucycsICd0eXBlQ29uZGl0aW9uJywgJ2RpcmVjdGl2ZXMnLCAnc2VsZWN0aW9uU2V0J10sXG4gIEludFZhbHVlOiBbXSxcbiAgRmxvYXRWYWx1ZTogW10sXG4gIFN0cmluZ1ZhbHVlOiBbXSxcbiAgQm9vbGVhblZhbHVlOiBbXSxcbiAgTnVsbFZhbHVlOiBbXSxcbiAgRW51bVZhbHVlOiBbXSxcbiAgTGlzdFZhbHVlOiBbJ3ZhbHVlcyddLFxuICBPYmplY3RWYWx1ZTogWydmaWVsZHMnXSxcbiAgT2JqZWN0RmllbGQ6IFsnbmFtZScsICd2YWx1ZSddLFxuICBEaXJlY3RpdmU6IFsnbmFtZScsICdhcmd1bWVudHMnXSxcbiAgTmFtZWRUeXBlOiBbJ25hbWUnXSxcbiAgTGlzdFR5cGU6IFsndHlwZSddLFxuICBOb25OdWxsVHlwZTogWyd0eXBlJ10sXG4gIFNjaGVtYURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnZGlyZWN0aXZlcycsICdvcGVyYXRpb25UeXBlcyddLFxuICBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbjogWyd0eXBlJ10sXG4gIFNjYWxhclR5cGVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBPYmplY3RUeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2ludGVyZmFjZXMnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXSxcbiAgRmllbGREZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnYXJndW1lbnRzJywgJ3R5cGUnLCAnZGlyZWN0aXZlcyddLFxuICBJbnB1dFZhbHVlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ3R5cGUnLCAnZGVmYXVsdFZhbHVlJywgJ2RpcmVjdGl2ZXMnXSxcbiAgSW50ZXJmYWNlVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdpbnRlcmZhY2VzJywgJ2RpcmVjdGl2ZXMnLCAnZmllbGRzJ10sXG4gIFVuaW9uVHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRGVmaW5pdGlvbjogWydkZXNjcmlwdGlvbicsICduYW1lJywgJ2RpcmVjdGl2ZXMnLCAndmFsdWVzJ10sXG4gIEVudW1WYWx1ZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJ10sXG4gIElucHV0T2JqZWN0VHlwZURlZmluaXRpb246IFsnZGVzY3JpcHRpb24nLCAnbmFtZScsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBEaXJlY3RpdmVEZWZpbml0aW9uOiBbJ2Rlc2NyaXB0aW9uJywgJ25hbWUnLCAnYXJndW1lbnRzJywgJ2xvY2F0aW9ucyddLFxuICBTY2hlbWFFeHRlbnNpb246IFsnZGlyZWN0aXZlcycsICdvcGVyYXRpb25UeXBlcyddLFxuICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcyddLFxuICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnaW50ZXJmYWNlcycsICdkaXJlY3RpdmVzJywgJ2ZpZWxkcyddLFxuICBVbmlvblR5cGVFeHRlbnNpb246IFsnbmFtZScsICdkaXJlY3RpdmVzJywgJ3R5cGVzJ10sXG4gIEVudW1UeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICd2YWx1ZXMnXSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiBbJ25hbWUnLCAnZGlyZWN0aXZlcycsICdmaWVsZHMnXVxufTtcbmV4cG9ydHMuUXVlcnlEb2N1bWVudEtleXMgPSBRdWVyeURvY3VtZW50S2V5cztcbnZhciBCUkVBSyA9IE9iamVjdC5mcmVlemUoe30pO1xuLyoqXG4gKiB2aXNpdCgpIHdpbGwgd2FsayB0aHJvdWdoIGFuIEFTVCB1c2luZyBhIGRlcHRoIGZpcnN0IHRyYXZlcnNhbCwgY2FsbGluZ1xuICogdGhlIHZpc2l0b3IncyBlbnRlciBmdW5jdGlvbiBhdCBlYWNoIG5vZGUgaW4gdGhlIHRyYXZlcnNhbCwgYW5kIGNhbGxpbmcgdGhlXG4gKiBsZWF2ZSBmdW5jdGlvbiBhZnRlciB2aXNpdGluZyB0aGF0IG5vZGUgYW5kIGFsbCBvZiBpdHMgY2hpbGQgbm9kZXMuXG4gKlxuICogQnkgcmV0dXJuaW5nIGRpZmZlcmVudCB2YWx1ZXMgZnJvbSB0aGUgZW50ZXIgYW5kIGxlYXZlIGZ1bmN0aW9ucywgdGhlXG4gKiBiZWhhdmlvciBvZiB0aGUgdmlzaXRvciBjYW4gYmUgYWx0ZXJlZCwgaW5jbHVkaW5nIHNraXBwaW5nIG92ZXIgYSBzdWItdHJlZSBvZlxuICogdGhlIEFTVCAoYnkgcmV0dXJuaW5nIGZhbHNlKSwgZWRpdGluZyB0aGUgQVNUIGJ5IHJldHVybmluZyBhIHZhbHVlIG9yIG51bGxcbiAqIHRvIHJlbW92ZSB0aGUgdmFsdWUsIG9yIHRvIHN0b3AgdGhlIHdob2xlIHRyYXZlcnNhbCBieSByZXR1cm5pbmcgQlJFQUsuXG4gKlxuICogV2hlbiB1c2luZyB2aXNpdCgpIHRvIGVkaXQgYW4gQVNULCB0aGUgb3JpZ2luYWwgQVNUIHdpbGwgbm90IGJlIG1vZGlmaWVkLCBhbmRcbiAqIGEgbmV3IHZlcnNpb24gb2YgdGhlIEFTVCB3aXRoIHRoZSBjaGFuZ2VzIGFwcGxpZWQgd2lsbCBiZSByZXR1cm5lZCBmcm9tIHRoZVxuICogdmlzaXQgZnVuY3Rpb24uXG4gKlxuICogICAgIGNvbnN0IGVkaXRlZEFTVCA9IHZpc2l0KGFzdCwge1xuICogICAgICAgZW50ZXIobm9kZSwga2V5LCBwYXJlbnQsIHBhdGgsIGFuY2VzdG9ycykge1xuICogICAgICAgICAvLyBAcmV0dXJuXG4gKiAgICAgICAgIC8vICAgdW5kZWZpbmVkOiBubyBhY3Rpb25cbiAqICAgICAgICAgLy8gICBmYWxzZTogc2tpcCB2aXNpdGluZyB0aGlzIG5vZGVcbiAqICAgICAgICAgLy8gICB2aXNpdG9yLkJSRUFLOiBzdG9wIHZpc2l0aW5nIGFsdG9nZXRoZXJcbiAqICAgICAgICAgLy8gICBudWxsOiBkZWxldGUgdGhpcyBub2RlXG4gKiAgICAgICAgIC8vICAgYW55IHZhbHVlOiByZXBsYWNlIHRoaXMgbm9kZSB3aXRoIHRoZSByZXR1cm5lZCB2YWx1ZVxuICogICAgICAgfSxcbiAqICAgICAgIGxlYXZlKG5vZGUsIGtleSwgcGFyZW50LCBwYXRoLCBhbmNlc3RvcnMpIHtcbiAqICAgICAgICAgLy8gQHJldHVyblxuICogICAgICAgICAvLyAgIHVuZGVmaW5lZDogbm8gYWN0aW9uXG4gKiAgICAgICAgIC8vICAgZmFsc2U6IG5vIGFjdGlvblxuICogICAgICAgICAvLyAgIHZpc2l0b3IuQlJFQUs6IHN0b3AgdmlzaXRpbmcgYWx0b2dldGhlclxuICogICAgICAgICAvLyAgIG51bGw6IGRlbGV0ZSB0aGlzIG5vZGVcbiAqICAgICAgICAgLy8gICBhbnkgdmFsdWU6IHJlcGxhY2UgdGhpcyBub2RlIHdpdGggdGhlIHJldHVybmVkIHZhbHVlXG4gKiAgICAgICB9XG4gKiAgICAgfSk7XG4gKlxuICogQWx0ZXJuYXRpdmVseSB0byBwcm92aWRpbmcgZW50ZXIoKSBhbmQgbGVhdmUoKSBmdW5jdGlvbnMsIGEgdmlzaXRvciBjYW5cbiAqIGluc3RlYWQgcHJvdmlkZSBmdW5jdGlvbnMgbmFtZWQgdGhlIHNhbWUgYXMgdGhlIGtpbmRzIG9mIEFTVCBub2Rlcywgb3JcbiAqIGVudGVyL2xlYXZlIHZpc2l0b3JzIGF0IGEgbmFtZWQga2V5LCBsZWFkaW5nIHRvIGZvdXIgcGVybXV0YXRpb25zIG9mXG4gKiB2aXNpdG9yIEFQSTpcbiAqXG4gKiAxKSBOYW1lZCB2aXNpdG9ycyB0cmlnZ2VyZWQgd2hlbiBlbnRlcmluZyBhIG5vZGUgYSBzcGVjaWZpYyBraW5kLlxuICpcbiAqICAgICB2aXNpdChhc3QsIHtcbiAqICAgICAgIEtpbmQobm9kZSkge1xuICogICAgICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgfVxuICogICAgIH0pXG4gKlxuICogMikgTmFtZWQgdmlzaXRvcnMgdGhhdCB0cmlnZ2VyIHVwb24gZW50ZXJpbmcgYW5kIGxlYXZpbmcgYSBub2RlIG9mXG4gKiAgICBhIHNwZWNpZmljIGtpbmQuXG4gKlxuICogICAgIHZpc2l0KGFzdCwge1xuICogICAgICAgS2luZDoge1xuICogICAgICAgICBlbnRlcihub2RlKSB7XG4gKiAgICAgICAgICAgLy8gZW50ZXIgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgICBsZWF2ZShub2RlKSB7XG4gKiAgICAgICAgICAgLy8gbGVhdmUgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pXG4gKlxuICogMykgR2VuZXJpYyB2aXNpdG9ycyB0aGF0IHRyaWdnZXIgdXBvbiBlbnRlcmluZyBhbmQgbGVhdmluZyBhbnkgbm9kZS5cbiAqXG4gKiAgICAgdmlzaXQoYXN0LCB7XG4gKiAgICAgICBlbnRlcihub2RlKSB7XG4gKiAgICAgICAgIC8vIGVudGVyIGFueSBub2RlXG4gKiAgICAgICB9LFxuICogICAgICAgbGVhdmUobm9kZSkge1xuICogICAgICAgICAvLyBsZWF2ZSBhbnkgbm9kZVxuICogICAgICAgfVxuICogICAgIH0pXG4gKlxuICogNCkgUGFyYWxsZWwgdmlzaXRvcnMgZm9yIGVudGVyaW5nIGFuZCBsZWF2aW5nIG5vZGVzIG9mIGEgc3BlY2lmaWMga2luZC5cbiAqXG4gKiAgICAgdmlzaXQoYXN0LCB7XG4gKiAgICAgICBlbnRlcjoge1xuICogICAgICAgICBLaW5kKG5vZGUpIHtcbiAqICAgICAgICAgICAvLyBlbnRlciB0aGUgXCJLaW5kXCIgbm9kZVxuICogICAgICAgICB9XG4gKiAgICAgICB9LFxuICogICAgICAgbGVhdmU6IHtcbiAqICAgICAgICAgS2luZChub2RlKSB7XG4gKiAgICAgICAgICAgLy8gbGVhdmUgdGhlIFwiS2luZFwiIG5vZGVcbiAqICAgICAgICAgfVxuICogICAgICAgfVxuICogICAgIH0pXG4gKi9cblxuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xuXG5mdW5jdGlvbiB2aXNpdChyb290LCB2aXNpdG9yKSB7XG4gIHZhciB2aXNpdG9yS2V5cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogUXVlcnlEb2N1bWVudEtleXM7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYtaW5pdCAqL1xuICB2YXIgc3RhY2sgPSB1bmRlZmluZWQ7XG4gIHZhciBpbkFycmF5ID0gQXJyYXkuaXNBcnJheShyb290KTtcbiAgdmFyIGtleXMgPSBbcm9vdF07XG4gIHZhciBpbmRleCA9IC0xO1xuICB2YXIgZWRpdHMgPSBbXTtcbiAgdmFyIG5vZGUgPSB1bmRlZmluZWQ7XG4gIHZhciBrZXkgPSB1bmRlZmluZWQ7XG4gIHZhciBwYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHZhciBwYXRoID0gW107XG4gIHZhciBhbmNlc3RvcnMgPSBbXTtcbiAgdmFyIG5ld1Jvb3QgPSByb290O1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVuZGVmLWluaXQgKi9cblxuICBkbyB7XG4gICAgaW5kZXgrKztcbiAgICB2YXIgaXNMZWF2aW5nID0gaW5kZXggPT09IGtleXMubGVuZ3RoO1xuICAgIHZhciBpc0VkaXRlZCA9IGlzTGVhdmluZyAmJiBlZGl0cy5sZW5ndGggIT09IDA7XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBrZXkgPSBhbmNlc3RvcnMubGVuZ3RoID09PSAwID8gdW5kZWZpbmVkIDogcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgbm9kZSA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IGFuY2VzdG9ycy5wb3AoKTtcblxuICAgICAgaWYgKGlzRWRpdGVkKSB7XG4gICAgICAgIGlmIChpbkFycmF5KSB7XG4gICAgICAgICAgbm9kZSA9IG5vZGUuc2xpY2UoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgY2xvbmUgPSB7fTtcblxuICAgICAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3Qka2V5czIgPSBPYmplY3Qua2V5cyhub2RlKTsgX2kyIDwgX09iamVjdCRrZXlzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICAgICAgICB2YXIgayA9IF9PYmplY3Qka2V5czJbX2kyXTtcbiAgICAgICAgICAgIGNsb25lW2tdID0gbm9kZVtrXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlID0gY2xvbmU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWRpdE9mZnNldCA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IGVkaXRzLmxlbmd0aDsgaWkrKykge1xuICAgICAgICAgIHZhciBlZGl0S2V5ID0gZWRpdHNbaWldWzBdO1xuICAgICAgICAgIHZhciBlZGl0VmFsdWUgPSBlZGl0c1tpaV1bMV07XG5cbiAgICAgICAgICBpZiAoaW5BcnJheSkge1xuICAgICAgICAgICAgZWRpdEtleSAtPSBlZGl0T2Zmc2V0O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbkFycmF5ICYmIGVkaXRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5zcGxpY2UoZWRpdEtleSwgMSk7XG4gICAgICAgICAgICBlZGl0T2Zmc2V0Kys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVbZWRpdEtleV0gPSBlZGl0VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gc3RhY2suaW5kZXg7XG4gICAgICBrZXlzID0gc3RhY2sua2V5cztcbiAgICAgIGVkaXRzID0gc3RhY2suZWRpdHM7XG4gICAgICBpbkFycmF5ID0gc3RhY2suaW5BcnJheTtcbiAgICAgIHN0YWNrID0gc3RhY2sucHJldjtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gcGFyZW50ID8gaW5BcnJheSA/IGluZGV4IDoga2V5c1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICBub2RlID0gcGFyZW50ID8gcGFyZW50W2tleV0gOiBuZXdSb290O1xuXG4gICAgICBpZiAobm9kZSA9PT0gbnVsbCB8fCBub2RlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgcGF0aC5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IHZvaWQgMDtcblxuICAgIGlmICghQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgaWYgKCEoMCwgX2FzdC5pc05vZGUpKG5vZGUpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgQVNUIE5vZGU6IFwiLmNvbmNhdCgoMCwgX2luc3BlY3QuZGVmYXVsdCkobm9kZSksIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB2aXNpdEZuID0gZ2V0VmlzaXRGbih2aXNpdG9yLCBub2RlLmtpbmQsIGlzTGVhdmluZyk7XG5cbiAgICAgIGlmICh2aXNpdEZuKSB7XG4gICAgICAgIHJlc3VsdCA9IHZpc2l0Rm4uY2FsbCh2aXNpdG9yLCBub2RlLCBrZXksIHBhcmVudCwgcGF0aCwgYW5jZXN0b3JzKTtcblxuICAgICAgICBpZiAocmVzdWx0ID09PSBCUkVBSykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoIWlzTGVhdmluZykge1xuICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZXN1bHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVkaXRzLnB1c2goW2tleSwgcmVzdWx0XSk7XG5cbiAgICAgICAgICBpZiAoIWlzTGVhdmluZykge1xuICAgICAgICAgICAgaWYgKCgwLCBfYXN0LmlzTm9kZSkocmVzdWx0KSkge1xuICAgICAgICAgICAgICBub2RlID0gcmVzdWx0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGF0aC5wb3AoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmIGlzRWRpdGVkKSB7XG4gICAgICBlZGl0cy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgICB9XG5cbiAgICBpZiAoaXNMZWF2aW5nKSB7XG4gICAgICBwYXRoLnBvcCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX3Zpc2l0b3JLZXlzJG5vZGUka2luO1xuXG4gICAgICBzdGFjayA9IHtcbiAgICAgICAgaW5BcnJheTogaW5BcnJheSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBrZXlzOiBrZXlzLFxuICAgICAgICBlZGl0czogZWRpdHMsXG4gICAgICAgIHByZXY6IHN0YWNrXG4gICAgICB9O1xuICAgICAgaW5BcnJheSA9IEFycmF5LmlzQXJyYXkobm9kZSk7XG4gICAgICBrZXlzID0gaW5BcnJheSA/IG5vZGUgOiAoX3Zpc2l0b3JLZXlzJG5vZGUka2luID0gdmlzaXRvcktleXNbbm9kZS5raW5kXSkgIT09IG51bGwgJiYgX3Zpc2l0b3JLZXlzJG5vZGUka2luICE9PSB2b2lkIDAgPyBfdmlzaXRvcktleXMkbm9kZSRraW4gOiBbXTtcbiAgICAgIGluZGV4ID0gLTE7XG4gICAgICBlZGl0cyA9IFtdO1xuXG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGFuY2VzdG9ycy5wdXNoKHBhcmVudCk7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudCA9IG5vZGU7XG4gICAgfVxuICB9IHdoaWxlIChzdGFjayAhPT0gdW5kZWZpbmVkKTtcblxuICBpZiAoZWRpdHMubGVuZ3RoICE9PSAwKSB7XG4gICAgbmV3Um9vdCA9IGVkaXRzW2VkaXRzLmxlbmd0aCAtIDFdWzFdO1xuICB9XG5cbiAgcmV0dXJuIG5ld1Jvb3Q7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgdmlzaXRvciBpbnN0YW5jZSB3aGljaCBkZWxlZ2F0ZXMgdG8gbWFueSB2aXNpdG9ycyB0byBydW4gaW5cbiAqIHBhcmFsbGVsLiBFYWNoIHZpc2l0b3Igd2lsbCBiZSB2aXNpdGVkIGZvciBlYWNoIG5vZGUgYmVmb3JlIG1vdmluZyBvbi5cbiAqXG4gKiBJZiBhIHByaW9yIHZpc2l0b3IgZWRpdHMgYSBub2RlLCBubyBmb2xsb3dpbmcgdmlzaXRvcnMgd2lsbCBzZWUgdGhhdCBub2RlLlxuICovXG5cblxuZnVuY3Rpb24gdmlzaXRJblBhcmFsbGVsKHZpc2l0b3JzKSB7XG4gIHZhciBza2lwcGluZyA9IG5ldyBBcnJheSh2aXNpdG9ycy5sZW5ndGgpO1xuICByZXR1cm4ge1xuICAgIGVudGVyOiBmdW5jdGlvbiBlbnRlcihub2RlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpc2l0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChza2lwcGluZ1tpXSA9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGZuID0gZ2V0VmlzaXRGbih2aXNpdG9yc1tpXSwgbm9kZS5raW5kLFxuICAgICAgICAgIC8qIGlzTGVhdmluZyAqL1xuICAgICAgICAgIGZhbHNlKTtcblxuICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZuLmFwcGx5KHZpc2l0b3JzW2ldLCBhcmd1bWVudHMpO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICBza2lwcGluZ1tpXSA9IG5vZGU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gQlJFQUspIHtcbiAgICAgICAgICAgICAgc2tpcHBpbmdbaV0gPSBCUkVBSztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGxlYXZlOiBmdW5jdGlvbiBsZWF2ZShub2RlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZpc2l0b3JzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChza2lwcGluZ1tpXSA9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGZuID0gZ2V0VmlzaXRGbih2aXNpdG9yc1tpXSwgbm9kZS5raW5kLFxuICAgICAgICAgIC8qIGlzTGVhdmluZyAqL1xuICAgICAgICAgIHRydWUpO1xuXG4gICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gZm4uYXBwbHkodmlzaXRvcnNbaV0sIGFyZ3VtZW50cyk7XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IEJSRUFLKSB7XG4gICAgICAgICAgICAgIHNraXBwaW5nW2ldID0gQlJFQUs7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIHJlc3VsdCAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoc2tpcHBpbmdbaV0gPT09IG5vZGUpIHtcbiAgICAgICAgICBza2lwcGluZ1tpXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG4vKipcbiAqIEdpdmVuIGEgdmlzaXRvciBpbnN0YW5jZSwgaWYgaXQgaXMgbGVhdmluZyBvciBub3QsIGFuZCBhIG5vZGUga2luZCwgcmV0dXJuXG4gKiB0aGUgZnVuY3Rpb24gdGhlIHZpc2l0b3IgcnVudGltZSBzaG91bGQgY2FsbC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZpc2l0Rm4odmlzaXRvciwga2luZCwgaXNMZWF2aW5nKSB7XG4gIHZhciBraW5kVmlzaXRvciA9IHZpc2l0b3Jba2luZF07XG5cbiAgaWYgKGtpbmRWaXNpdG9yKSB7XG4gICAgaWYgKCFpc0xlYXZpbmcgJiYgdHlwZW9mIGtpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IEtpbmQoKSB7fSB9XG4gICAgICByZXR1cm4ga2luZFZpc2l0b3I7XG4gICAgfVxuXG4gICAgdmFyIGtpbmRTcGVjaWZpY1Zpc2l0b3IgPSBpc0xlYXZpbmcgPyBraW5kVmlzaXRvci5sZWF2ZSA6IGtpbmRWaXNpdG9yLmVudGVyO1xuXG4gICAgaWYgKHR5cGVvZiBraW5kU3BlY2lmaWNWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyB7IEtpbmQ6IHsgZW50ZXIoKSB7fSwgbGVhdmUoKSB7fSB9IH1cbiAgICAgIHJldHVybiBraW5kU3BlY2lmaWNWaXNpdG9yO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgc3BlY2lmaWNWaXNpdG9yID0gaXNMZWF2aW5nID8gdmlzaXRvci5sZWF2ZSA6IHZpc2l0b3IuZW50ZXI7XG5cbiAgICBpZiAoc3BlY2lmaWNWaXNpdG9yKSB7XG4gICAgICBpZiAodHlwZW9mIHNwZWNpZmljVmlzaXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyB7IGVudGVyKCkge30sIGxlYXZlKCkge30gfVxuICAgICAgICByZXR1cm4gc3BlY2lmaWNWaXNpdG9yO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3BlY2lmaWNLaW5kVmlzaXRvciA9IHNwZWNpZmljVmlzaXRvcltraW5kXTtcblxuICAgICAgaWYgKHR5cGVvZiBzcGVjaWZpY0tpbmRWaXNpdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIHsgZW50ZXI6IHsgS2luZCgpIHt9IH0sIGxlYXZlOiB7IEtpbmQoKSB7fSB9IH1cbiAgICAgICAgcmV0dXJuIHNwZWNpZmljS2luZFZpc2l0b3I7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJjb25zdCB7IHRvU3RyaW5nLCBoYXNPd25Qcm9wZXJ0eSB9ID0gT2JqZWN0LnByb3RvdHlwZTtcbmNvbnN0IHByZXZpb3VzQ29tcGFyaXNvbnMgPSBuZXcgTWFwPG9iamVjdCwgU2V0PG9iamVjdD4+KCk7XG5cbi8qKlxuICogUGVyZm9ybXMgYSBkZWVwIGVxdWFsaXR5IGNoZWNrIG9uIHR3byBKYXZhU2NyaXB0IHZhbHVlcywgdG9sZXJhdGluZyBjeWNsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlcXVhbChhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICB0cnkge1xuICAgIHJldHVybiBjaGVjayhhLCBiKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwcmV2aW91c0NvbXBhcmlzb25zLmNsZWFyKCk7XG4gIH1cbn1cblxuLy8gQWxsb3cgZGVmYXVsdCBpbXBvcnRzIGFzIHdlbGwuXG5leHBvcnQgZGVmYXVsdCBlcXVhbDtcblxuZnVuY3Rpb24gY2hlY2soYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgLy8gSWYgdGhlIHR3byB2YWx1ZXMgYXJlIHN0cmljdGx5IGVxdWFsLCBvdXIgam9iIGlzIGVhc3kuXG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nIHJldHVybnMgYSByZXByZXNlbnRhdGlvbiBvZiB0aGUgcnVudGltZSB0eXBlIG9mXG4gIC8vIHRoZSBnaXZlbiB2YWx1ZSB0aGF0IGlzIGNvbnNpZGVyYWJseSBtb3JlIHByZWNpc2UgdGhhbiB0eXBlb2YuXG4gIGNvbnN0IGFUYWcgPSB0b1N0cmluZy5jYWxsKGEpO1xuICBjb25zdCBiVGFnID0gdG9TdHJpbmcuY2FsbChiKTtcblxuICAvLyBJZiB0aGUgcnVudGltZSB0eXBlcyBvZiBhIGFuZCBiIGFyZSBkaWZmZXJlbnQsIHRoZXkgY291bGQgbWF5YmUgYmUgZXF1YWxcbiAgLy8gdW5kZXIgc29tZSBpbnRlcnByZXRhdGlvbiBvZiBlcXVhbGl0eSwgYnV0IGZvciBzaW1wbGljaXR5IGFuZCBwZXJmb3JtYW5jZVxuICAvLyB3ZSBqdXN0IHJldHVybiBmYWxzZSBpbnN0ZWFkLlxuICBpZiAoYVRhZyAhPT0gYlRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN3aXRjaCAoYVRhZykge1xuICAgIGNhc2UgJ1tvYmplY3QgQXJyYXldJzpcbiAgICAgIC8vIEFycmF5cyBhcmUgYSBsb3QgbGlrZSBvdGhlciBvYmplY3RzLCBidXQgd2UgY2FuIGNoZWFwbHkgY29tcGFyZSB0aGVpclxuICAgICAgLy8gbGVuZ3RocyBhcyBhIHNob3J0LWN1dCBiZWZvcmUgY29tcGFyaW5nIHRoZWlyIGVsZW1lbnRzLlxuICAgICAgaWYgKGEubGVuZ3RoICE9PSBiLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRmFsbCB0aHJvdWdoIHRvIG9iamVjdCBjYXNlLi4uXG4gICAgY2FzZSAnW29iamVjdCBPYmplY3RdJzoge1xuICAgICAgaWYgKHByZXZpb3VzbHlDb21wYXJlZChhLCBiKSkgcmV0dXJuIHRydWU7XG5cbiAgICAgIGNvbnN0IGFLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICBjb25zdCBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgICAvLyBJZiBgYWAgYW5kIGBiYCBoYXZlIGEgZGlmZmVyZW50IG51bWJlciBvZiBlbnVtZXJhYmxlIGtleXMsIHRoZXlcbiAgICAgIC8vIG11c3QgYmUgZGlmZmVyZW50LlxuICAgICAgY29uc3Qga2V5Q291bnQgPSBhS2V5cy5sZW5ndGg7XG4gICAgICBpZiAoa2V5Q291bnQgIT09IGJLZXlzLmxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAvLyBOb3cgbWFrZSBzdXJlIHRoZXkgaGF2ZSB0aGUgc2FtZSBrZXlzLlxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBrZXlDb3VudDsgKytrKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChiLCBhS2V5c1trXSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gRmluYWxseSwgY2hlY2sgZGVlcCBlcXVhbGl0eSBvZiBhbGwgY2hpbGQgcHJvcGVydGllcy5cbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwga2V5Q291bnQ7ICsraykge1xuICAgICAgICBjb25zdCBrZXkgPSBhS2V5c1trXTtcbiAgICAgICAgaWYgKCFjaGVjayhhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgY2FzZSAnW29iamVjdCBFcnJvcl0nOlxuICAgICAgcmV0dXJuIGEubmFtZSA9PT0gYi5uYW1lICYmIGEubWVzc2FnZSA9PT0gYi5tZXNzYWdlO1xuXG4gICAgY2FzZSAnW29iamVjdCBOdW1iZXJdJzpcbiAgICAgIC8vIEhhbmRsZSBOYU4sIHdoaWNoIGlzICE9PSBpdHNlbGYuXG4gICAgICBpZiAoYSAhPT0gYSkgcmV0dXJuIGIgIT09IGI7XG4gICAgICAvLyBGYWxsIHRocm91Z2ggdG8gc2hhcmVkICthID09PSArYiBjYXNlLi4uXG4gICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICByZXR1cm4gK2EgPT09ICtiO1xuXG4gICAgY2FzZSAnW29iamVjdCBSZWdFeHBdJzpcbiAgICBjYXNlICdbb2JqZWN0IFN0cmluZ10nOlxuICAgICAgcmV0dXJuIGEgPT0gYCR7Yn1gO1xuXG4gICAgY2FzZSAnW29iamVjdCBNYXBdJzpcbiAgICBjYXNlICdbb2JqZWN0IFNldF0nOiB7XG4gICAgICBpZiAoYS5zaXplICE9PSBiLnNpemUpIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChwcmV2aW91c2x5Q29tcGFyZWQoYSwgYikpIHJldHVybiB0cnVlO1xuXG4gICAgICBjb25zdCBhSXRlcmF0b3IgPSBhLmVudHJpZXMoKTtcbiAgICAgIGNvbnN0IGlzTWFwID0gYVRhZyA9PT0gJ1tvYmplY3QgTWFwXSc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGNvbnN0IGluZm8gPSBhSXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoaW5mby5kb25lKSBicmVhaztcblxuICAgICAgICAvLyBJZiBhIGluc3RhbmNlb2YgU2V0LCBhVmFsdWUgPT09IGFLZXkuXG4gICAgICAgIGNvbnN0IFthS2V5LCBhVmFsdWVdID0gaW5mby52YWx1ZTtcblxuICAgICAgICAvLyBTbyB0aGlzIHdvcmtzIHRoZSBzYW1lIHdheSBmb3IgYm90aCBTZXQgYW5kIE1hcC5cbiAgICAgICAgaWYgKCFiLmhhcyhhS2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEhvd2V2ZXIsIHdlIGNhcmUgYWJvdXQgZGVlcCBlcXVhbGl0eSBvZiB2YWx1ZXMgb25seSB3aGVuIGRlYWxpbmdcbiAgICAgICAgLy8gd2l0aCBNYXAgc3RydWN0dXJlcy5cbiAgICAgICAgaWYgKGlzTWFwICYmICFjaGVjayhhVmFsdWUsIGIuZ2V0KGFLZXkpKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBPdGhlcndpc2UgdGhlIHZhbHVlcyBhcmUgbm90IGVxdWFsLlxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXZpb3VzbHlDb21wYXJlZChhOiBvYmplY3QsIGI6IG9iamVjdCk6IGJvb2xlYW4ge1xuICAvLyBUaG91Z2ggY3ljbGljIHJlZmVyZW5jZXMgY2FuIG1ha2UgYW4gb2JqZWN0IGdyYXBoIGFwcGVhciBpbmZpbml0ZSBmcm9tIHRoZVxuICAvLyBwZXJzcGVjdGl2ZSBvZiBhIGRlcHRoLWZpcnN0IHRyYXZlcnNhbCwgdGhlIGdyYXBoIHN0aWxsIGNvbnRhaW5zIGEgZmluaXRlXG4gIC8vIG51bWJlciBvZiBkaXN0aW5jdCBvYmplY3QgcmVmZXJlbmNlcy4gV2UgdXNlIHRoZSBwcmV2aW91c0NvbXBhcmlzb25zIGNhY2hlXG4gIC8vIHRvIGF2b2lkIGNvbXBhcmluZyB0aGUgc2FtZSBwYWlyIG9mIG9iamVjdCByZWZlcmVuY2VzIG1vcmUgdGhhbiBvbmNlLCB3aGljaFxuICAvLyBndWFyYW50ZWVzIHRlcm1pbmF0aW9uIChldmVuIGlmIHdlIGVuZCB1cCBjb21wYXJpbmcgZXZlcnkgb2JqZWN0IGluIG9uZVxuICAvLyBncmFwaCB0byBldmVyeSBvYmplY3QgaW4gdGhlIG90aGVyIGdyYXBoLCB3aGljaCBpcyBleHRyZW1lbHkgdW5saWtlbHkpLFxuICAvLyB3aGlsZSBzdGlsbCBhbGxvd2luZyB3ZWlyZCBpc29tb3JwaGljIHN0cnVjdHVyZXMgKGxpa2UgcmluZ3Mgd2l0aCBkaWZmZXJlbnRcbiAgLy8gbGVuZ3RocykgYSBjaGFuY2UgdG8gcGFzcyB0aGUgZXF1YWxpdHkgdGVzdC5cbiAgbGV0IGJTZXQgPSBwcmV2aW91c0NvbXBhcmlzb25zLmdldChhKTtcbiAgaWYgKGJTZXQpIHtcbiAgICAvLyBSZXR1cm4gdHJ1ZSBoZXJlIGJlY2F1c2Ugd2UgY2FuIGJlIHN1cmUgZmFsc2Ugd2lsbCBiZSByZXR1cm5lZCBzb21ld2hlcmVcbiAgICAvLyBlbHNlIGlmIHRoZSBvYmplY3RzIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICBpZiAoYlNldC5oYXMoYikpIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByZXZpb3VzQ29tcGFyaXNvbnMuc2V0KGEsIGJTZXQgPSBuZXcgU2V0KTtcbiAgfVxuICBiU2V0LmFkZChiKTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwidmFyIFBhcnNlciA9IHJlcXVpcmUoXCIuL1BhcnNlci5qc1wiKTtcbnZhciBEb21IYW5kbGVyID0gcmVxdWlyZShcImRvbWhhbmRsZXJcIik7XG5cbmZ1bmN0aW9uIGRlZmluZVByb3AobmFtZSwgdmFsdWUpIHtcbiAgICBkZWxldGUgbW9kdWxlLmV4cG9ydHNbbmFtZV07XG4gICAgbW9kdWxlLmV4cG9ydHNbbmFtZV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFBhcnNlcjogUGFyc2VyLFxuICAgIFRva2VuaXplcjogcmVxdWlyZShcIi4vVG9rZW5pemVyLmpzXCIpLFxuICAgIEVsZW1lbnRUeXBlOiByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIiksXG4gICAgRG9tSGFuZGxlcjogRG9tSGFuZGxlcixcbiAgICBnZXQgRmVlZEhhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFwiRmVlZEhhbmRsZXJcIiwgcmVxdWlyZShcIi4vRmVlZEhhbmRsZXIuanNcIikpO1xuICAgIH0sXG4gICAgZ2V0IFN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXCJTdHJlYW1cIiwgcmVxdWlyZShcIi4vU3RyZWFtLmpzXCIpKTtcbiAgICB9LFxuICAgIGdldCBXcml0YWJsZVN0cmVhbSgpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZVByb3AoXCJXcml0YWJsZVN0cmVhbVwiLCByZXF1aXJlKFwiLi9Xcml0YWJsZVN0cmVhbS5qc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgUHJveHlIYW5kbGVyKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIlByb3h5SGFuZGxlclwiLCByZXF1aXJlKFwiLi9Qcm94eUhhbmRsZXIuanNcIikpO1xuICAgIH0sXG4gICAgZ2V0IERvbVV0aWxzKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIkRvbVV0aWxzXCIsIHJlcXVpcmUoXCJkb211dGlsc1wiKSk7XG4gICAgfSxcbiAgICBnZXQgQ29sbGVjdGluZ0hhbmRsZXIoKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVQcm9wKFxuICAgICAgICAgICAgXCJDb2xsZWN0aW5nSGFuZGxlclwiLFxuICAgICAgICAgICAgcmVxdWlyZShcIi4vQ29sbGVjdGluZ0hhbmRsZXIuanNcIilcbiAgICAgICAgKTtcbiAgICB9LFxuICAgIC8vIEZvciBsZWdhY3kgc3VwcG9ydFxuICAgIERlZmF1bHRIYW5kbGVyOiBEb21IYW5kbGVyLFxuICAgIGdldCBSc3NIYW5kbGVyKCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lUHJvcChcIlJzc0hhbmRsZXJcIiwgdGhpcy5GZWVkSGFuZGxlcik7XG4gICAgfSxcbiAgICAvL2hlbHBlciBtZXRob2RzXG4gICAgcGFyc2VET006IGZ1bmN0aW9uKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBuZXcgRG9tSGFuZGxlcihvcHRpb25zKTtcbiAgICAgICAgbmV3IFBhcnNlcihoYW5kbGVyLCBvcHRpb25zKS5lbmQoZGF0YSk7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmRvbTtcbiAgICB9LFxuICAgIHBhcnNlRmVlZDogZnVuY3Rpb24oZmVlZCwgb3B0aW9ucykge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBtb2R1bGUuZXhwb3J0cy5GZWVkSGFuZGxlcihvcHRpb25zKTtcbiAgICAgICAgbmV3IFBhcnNlcihoYW5kbGVyLCBvcHRpb25zKS5lbmQoZmVlZCk7XG4gICAgICAgIHJldHVybiBoYW5kbGVyLmRvbTtcbiAgICB9LFxuICAgIGNyZWF0ZURvbVN0cmVhbTogZnVuY3Rpb24oY2IsIG9wdGlvbnMsIGVsZW1lbnRDYikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IG5ldyBEb21IYW5kbGVyKGNiLCBvcHRpb25zLCBlbGVtZW50Q2IpO1xuICAgICAgICByZXR1cm4gbmV3IFBhcnNlcihoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9LFxuICAgIC8vIExpc3Qgb2YgYWxsIGV2ZW50cyB0aGF0IHRoZSBwYXJzZXIgZW1pdHNcbiAgICBFVkVOVFM6IHtcbiAgICAgICAgLyogRm9ybWF0OiBldmVudG5hbWU6IG51bWJlciBvZiBhcmd1bWVudHMgKi9cbiAgICAgICAgYXR0cmlidXRlOiAyLFxuICAgICAgICBjZGF0YXN0YXJ0OiAwLFxuICAgICAgICBjZGF0YWVuZDogMCxcbiAgICAgICAgdGV4dDogMSxcbiAgICAgICAgcHJvY2Vzc2luZ2luc3RydWN0aW9uOiAyLFxuICAgICAgICBjb21tZW50OiAxLFxuICAgICAgICBjb21tZW50ZW5kOiAwLFxuICAgICAgICBjbG9zZXRhZzogMSxcbiAgICAgICAgb3BlbnRhZzogMixcbiAgICAgICAgb3BlbnRhZ25hbWU6IDEsXG4gICAgICAgIGVycm9yOiAxLFxuICAgICAgICBlbmQ6IDBcbiAgICB9XG59O1xuIiwiLy9UeXBlcyBvZiBlbGVtZW50cyBmb3VuZCBpbiB0aGUgRE9NXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0VGV4dDogXCJ0ZXh0XCIsIC8vVGV4dFxuXHREaXJlY3RpdmU6IFwiZGlyZWN0aXZlXCIsIC8vPD8gLi4uID8+XG5cdENvbW1lbnQ6IFwiY29tbWVudFwiLCAvLzwhLS0gLi4uIC0tPlxuXHRTY3JpcHQ6IFwic2NyaXB0XCIsIC8vPHNjcmlwdD4gdGFnc1xuXHRTdHlsZTogXCJzdHlsZVwiLCAvLzxzdHlsZT4gdGFnc1xuXHRUYWc6IFwidGFnXCIsIC8vQW55IHRhZ1xuXHRDREFUQTogXCJjZGF0YVwiLCAvLzwhW0NEQVRBWyAuLi4gXV0+XG5cdERvY3R5cGU6IFwiZG9jdHlwZVwiLFxuXG5cdGlzVGFnOiBmdW5jdGlvbihlbGVtKXtcblx0XHRyZXR1cm4gZWxlbS50eXBlID09PSBcInRhZ1wiIHx8IGVsZW0udHlwZSA9PT0gXCJzY3JpcHRcIiB8fCBlbGVtLnR5cGUgPT09IFwic3R5bGVcIjtcblx0fVxufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCJpZiAodHlwZW9mIE9iamVjdC5jcmVhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBpZiAoc3VwZXJDdG9yKSB7XG4gICAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgICAgY29uc3RydWN0b3I6IHtcbiAgICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gIH07XG59IGVsc2Uge1xuICAvLyBvbGQgc2Nob29sIHNoaW0gZm9yIG9sZCBicm93c2Vyc1xuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGlmIChzdXBlckN0b3IpIHtcbiAgICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgICAgY3Rvci5wcm90b3R5cGUgPSBuZXcgVGVtcEN0b3IoKVxuICAgICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gICAgfVxuICB9XG59XG4iLCJ2YXIgcGFyc2VyID0gcmVxdWlyZSgnZ3JhcGhxbC9sYW5ndWFnZS9wYXJzZXInKTtcblxudmFyIHBhcnNlID0gcGFyc2VyLnBhcnNlO1xuXG4vLyBTdHJpcCBpbnNpZ25pZmljYW50IHdoaXRlc3BhY2Vcbi8vIE5vdGUgdGhhdCB0aGlzIGNvdWxkIGRvIGEgbG90IG1vcmUsIHN1Y2ggYXMgcmVvcmRlciBmaWVsZHMgZXRjLlxuZnVuY3Rpb24gbm9ybWFsaXplKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL1tcXHMsXSsvZywgJyAnKS50cmltKCk7XG59XG5cbi8vIEEgbWFwIGRvY1N0cmluZyAtPiBncmFwaHFsIGRvY3VtZW50XG52YXIgZG9jQ2FjaGUgPSB7fTtcblxuLy8gQSBtYXAgZnJhZ21lbnROYW1lIC0+IFtub3JtYWxpemVkIHNvdXJjZV1cbnZhciBmcmFnbWVudFNvdXJjZU1hcCA9IHt9O1xuXG5mdW5jdGlvbiBjYWNoZUtleUZyb21Mb2MobG9jKSB7XG4gIHJldHVybiBub3JtYWxpemUobG9jLnNvdXJjZS5ib2R5LnN1YnN0cmluZyhsb2Muc3RhcnQsIGxvYy5lbmQpKTtcbn1cblxuLy8gRm9yIHRlc3RpbmcuXG5mdW5jdGlvbiByZXNldENhY2hlcygpIHtcbiAgZG9jQ2FjaGUgPSB7fTtcbiAgZnJhZ21lbnRTb3VyY2VNYXAgPSB7fTtcbn1cblxuLy8gVGFrZSBhIHVuc3RyaXBwZWQgcGFyc2VkIGRvY3VtZW50IChxdWVyeS9tdXRhdGlvbiBvciBldmVuIGZyYWdtZW50KSwgYW5kXG4vLyBjaGVjayBhbGwgZnJhZ21lbnQgZGVmaW5pdGlvbnMsIGNoZWNraW5nIGZvciBuYW1lLT5zb3VyY2UgdW5pcXVlbmVzcy5cbi8vIFdlIGFsc28gd2FudCB0byBtYWtlIHN1cmUgb25seSB1bmlxdWUgZnJhZ21lbnRzIGV4aXN0IGluIHRoZSBkb2N1bWVudC5cbnZhciBwcmludEZyYWdtZW50V2FybmluZ3MgPSB0cnVlO1xuZnVuY3Rpb24gcHJvY2Vzc0ZyYWdtZW50cyhhc3QpIHtcbiAgdmFyIGFzdEZyYWdtZW50TWFwID0ge307XG4gIHZhciBkZWZpbml0aW9ucyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYXN0LmRlZmluaXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGZyYWdtZW50RGVmaW5pdGlvbiA9IGFzdC5kZWZpbml0aW9uc1tpXTtcblxuICAgIGlmIChmcmFnbWVudERlZmluaXRpb24ua2luZCA9PT0gJ0ZyYWdtZW50RGVmaW5pdGlvbicpIHtcbiAgICAgIHZhciBmcmFnbWVudE5hbWUgPSBmcmFnbWVudERlZmluaXRpb24ubmFtZS52YWx1ZTtcbiAgICAgIHZhciBzb3VyY2VLZXkgPSBjYWNoZUtleUZyb21Mb2MoZnJhZ21lbnREZWZpbml0aW9uLmxvYyk7XG5cbiAgICAgIC8vIFdlIGtub3cgc29tZXRoaW5nIGFib3V0IHRoaXMgZnJhZ21lbnRcbiAgICAgIGlmIChmcmFnbWVudFNvdXJjZU1hcC5oYXNPd25Qcm9wZXJ0eShmcmFnbWVudE5hbWUpICYmICFmcmFnbWVudFNvdXJjZU1hcFtmcmFnbWVudE5hbWVdW3NvdXJjZUtleV0pIHtcblxuICAgICAgICAvLyB0aGlzIGlzIGEgcHJvYmxlbSBiZWNhdXNlIHRoZSBhcHAgZGV2ZWxvcGVyIGlzIHRyeWluZyB0byByZWdpc3RlciBhbm90aGVyIGZyYWdtZW50IHdpdGhcbiAgICAgICAgLy8gdGhlIHNhbWUgbmFtZSBhcyBvbmUgcHJldmlvdXNseSByZWdpc3RlcmVkLiBTbywgd2UgdGVsbCB0aGVtIGFib3V0IGl0LlxuICAgICAgICBpZiAocHJpbnRGcmFnbWVudFdhcm5pbmdzKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiV2FybmluZzogZnJhZ21lbnQgd2l0aCBuYW1lIFwiICsgZnJhZ21lbnROYW1lICsgXCIgYWxyZWFkeSBleGlzdHMuXFxuXCJcbiAgICAgICAgICAgICsgXCJncmFwaHFsLXRhZyBlbmZvcmNlcyBhbGwgZnJhZ21lbnQgbmFtZXMgYWNyb3NzIHlvdXIgYXBwbGljYXRpb24gdG8gYmUgdW5pcXVlOyByZWFkIG1vcmUgYWJvdXRcXG5cIlxuICAgICAgICAgICAgKyBcInRoaXMgaW4gdGhlIGRvY3M6IGh0dHA6Ly9kZXYuYXBvbGxvZGF0YS5jb20vY29yZS9mcmFnbWVudHMuaHRtbCN1bmlxdWUtbmFtZXNcIik7XG4gICAgICAgIH1cblxuICAgICAgICBmcmFnbWVudFNvdXJjZU1hcFtmcmFnbWVudE5hbWVdW3NvdXJjZUtleV0gPSB0cnVlO1xuXG4gICAgICB9IGVsc2UgaWYgKCFmcmFnbWVudFNvdXJjZU1hcC5oYXNPd25Qcm9wZXJ0eShmcmFnbWVudE5hbWUpKSB7XG4gICAgICAgIGZyYWdtZW50U291cmNlTWFwW2ZyYWdtZW50TmFtZV0gPSB7fTtcbiAgICAgICAgZnJhZ21lbnRTb3VyY2VNYXBbZnJhZ21lbnROYW1lXVtzb3VyY2VLZXldID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhc3RGcmFnbWVudE1hcFtzb3VyY2VLZXldKSB7XG4gICAgICAgIGFzdEZyYWdtZW50TWFwW3NvdXJjZUtleV0gPSB0cnVlO1xuICAgICAgICBkZWZpbml0aW9ucy5wdXNoKGZyYWdtZW50RGVmaW5pdGlvbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluaXRpb25zLnB1c2goZnJhZ21lbnREZWZpbml0aW9uKTtcbiAgICB9XG4gIH1cblxuICBhc3QuZGVmaW5pdGlvbnMgPSBkZWZpbml0aW9ucztcbiAgcmV0dXJuIGFzdDtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZUZyYWdtZW50V2FybmluZ3MoKSB7XG4gIHByaW50RnJhZ21lbnRXYXJuaW5ncyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzdHJpcExvYyhkb2MsIHJlbW92ZUxvY0F0VGhpc0xldmVsKSB7XG4gIHZhciBkb2NUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRvYyk7XG5cbiAgaWYgKGRvY1R5cGUgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICByZXR1cm4gZG9jLm1hcChmdW5jdGlvbiAoZCkge1xuICAgICAgcmV0dXJuIHN0cmlwTG9jKGQsIHJlbW92ZUxvY0F0VGhpc0xldmVsKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChkb2NUeXBlICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBpbnB1dC4nKTtcbiAgfVxuXG4gIC8vIFdlIGRvbid0IHdhbnQgdG8gcmVtb3ZlIHRoZSByb290IGxvYyBmaWVsZCBzbyB3ZSBjYW4gdXNlIGl0XG4gIC8vIGZvciBmcmFnbWVudCBzdWJzdGl0dXRpb24gKHNlZSBiZWxvdylcbiAgaWYgKHJlbW92ZUxvY0F0VGhpc0xldmVsICYmIGRvYy5sb2MpIHtcbiAgICBkZWxldGUgZG9jLmxvYztcbiAgfVxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2dyYXBocWwtdGFnL2lzc3Vlcy80MFxuICBpZiAoZG9jLmxvYykge1xuICAgIGRlbGV0ZSBkb2MubG9jLnN0YXJ0VG9rZW47XG4gICAgZGVsZXRlIGRvYy5sb2MuZW5kVG9rZW47XG4gIH1cblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRvYyk7XG4gIHZhciBrZXk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIHZhbHVlVHlwZTtcblxuICBmb3IgKGtleSBpbiBrZXlzKSB7XG4gICAgaWYgKGtleXMuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgdmFsdWUgPSBkb2Nba2V5c1trZXldXTtcbiAgICAgIHZhbHVlVHlwZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cbiAgICAgIGlmICh2YWx1ZVR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nIHx8IHZhbHVlVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgICBkb2Nba2V5c1trZXldXSA9IHN0cmlwTG9jKHZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gZG9jO1xufVxuXG52YXIgZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMgPSBmYWxzZTtcbmZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoZG9jKSB7XG4gIHZhciBjYWNoZUtleSA9IG5vcm1hbGl6ZShkb2MpO1xuXG4gIGlmIChkb2NDYWNoZVtjYWNoZUtleV0pIHtcbiAgICByZXR1cm4gZG9jQ2FjaGVbY2FjaGVLZXldO1xuICB9XG5cbiAgdmFyIHBhcnNlZCA9IHBhcnNlKGRvYywgeyBleHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlczogZXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMgfSk7XG4gIGlmICghcGFyc2VkIHx8IHBhcnNlZC5raW5kICE9PSAnRG9jdW1lbnQnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgYSB2YWxpZCBHcmFwaFFMIGRvY3VtZW50LicpO1xuICB9XG5cbiAgLy8gY2hlY2sgdGhhdCBhbGwgXCJuZXdcIiBmcmFnbWVudHMgaW5zaWRlIHRoZSBkb2N1bWVudHMgYXJlIGNvbnNpc3RlbnQgd2l0aFxuICAvLyBleGlzdGluZyBmcmFnbWVudHMgb2YgdGhlIHNhbWUgbmFtZVxuICBwYXJzZWQgPSBwcm9jZXNzRnJhZ21lbnRzKHBhcnNlZCk7XG4gIHBhcnNlZCA9IHN0cmlwTG9jKHBhcnNlZCwgZmFsc2UpO1xuICBkb2NDYWNoZVtjYWNoZUtleV0gPSBwYXJzZWQ7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn1cblxuZnVuY3Rpb24gZW5hYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXMoKSB7XG4gIGV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZGlzYWJsZUV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzKCkge1xuICBleHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlcyA9IGZhbHNlO1xufVxuXG4vLyBYWFggVGhpcyBzaG91bGQgZXZlbnR1YWxseSBkaXNhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIGludGVycG9sYXRpb24sIGxpa2UgUmVsYXkgZG9lc1xuZnVuY3Rpb24gZ3FsKC8qIGFyZ3VtZW50cyAqLykge1xuICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgdmFyIGxpdGVyYWxzID0gYXJnc1swXTtcblxuICAvLyBXZSBhbHdheXMgZ2V0IGxpdGVyYWxzWzBdIGFuZCB0aGVuIG1hdGNoaW5nIHBvc3QgbGl0ZXJhbHMgZm9yIGVhY2ggYXJnIGdpdmVuXG4gIHZhciByZXN1bHQgPSAodHlwZW9mKGxpdGVyYWxzKSA9PT0gXCJzdHJpbmdcIikgPyBsaXRlcmFscyA6IGxpdGVyYWxzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJncy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChhcmdzW2ldICYmIGFyZ3NbaV0ua2luZCAmJiBhcmdzW2ldLmtpbmQgPT09ICdEb2N1bWVudCcpIHtcbiAgICAgIHJlc3VsdCArPSBhcmdzW2ldLmxvYy5zb3VyY2UuYm9keTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ICs9IGFyZ3NbaV07XG4gICAgfVxuXG4gICAgcmVzdWx0ICs9IGxpdGVyYWxzW2ldO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlRG9jdW1lbnQocmVzdWx0KTtcbn1cblxuLy8gU3VwcG9ydCB0eXBlc2NyaXB0LCB3aGljaCBpc24ndCBhcyBuaWNlIGFzIEJhYmVsIGFib3V0IGRlZmF1bHQgZXhwb3J0c1xuZ3FsLmRlZmF1bHQgPSBncWw7XG5ncWwucmVzZXRDYWNoZXMgPSByZXNldENhY2hlcztcbmdxbC5kaXNhYmxlRnJhZ21lbnRXYXJuaW5ncyA9IGRpc2FibGVGcmFnbWVudFdhcm5pbmdzO1xuZ3FsLmVuYWJsZUV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzID0gZW5hYmxlRXhwZXJpbWVudGFsRnJhZ21lbnRWYXJpYWJsZXM7XG5ncWwuZGlzYWJsZUV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzID0gZGlzYWJsZUV4cGVyaW1lbnRhbEZyYWdtZW50VmFyaWFibGVzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdxbDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgYnRvYSkge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXIgc2luZ2xldG9uQ291bnRlciA9IDA7XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgc3R5bGU7XG4gIHZhciB1cGRhdGU7XG4gIHZhciByZW1vdmU7XG5cbiAgaWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG4gICAgdmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG4gICAgc3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSk7XG4gICAgdXBkYXRlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCBmYWxzZSk7XG4gICAgcmVtb3ZlID0gYXBwbHlUb1NpbmdsZXRvblRhZy5iaW5kKG51bGwsIHN0eWxlLCBzdHlsZUluZGV4LCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZSA9IGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXG4gICAgcmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcbiAgICB9O1xuICB9XG5cbiAgdXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTsgLy8gRm9yY2Ugc2luZ2xlLXRhZyBzb2x1dGlvbiBvbiBJRTYtOSwgd2hpY2ggaGFzIGEgaGFyZCBsaW1pdCBvbiB0aGUgIyBvZiA8c3R5bGU+XG4gIC8vIHRhZ3MgaXQgd2lsbCBhbGxvdyBvbiBhIHBhZ2VcblxuICBpZiAoIW9wdGlvbnMuc2luZ2xldG9uICYmIHR5cGVvZiBvcHRpb25zLnNpbmdsZXRvbiAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG4gIH1cblxuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG5ld0xpc3QpICE9PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRG9tW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRvbVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRvbS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1c2VTb3VyY2VNYXApIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCAnJ11dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSIsInZhciBnO1xuXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxuZyA9IChmdW5jdGlvbigpIHtcblx0cmV0dXJuIHRoaXM7XG59KSgpO1xuXG50cnkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcbn0gY2F0Y2ggKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XG59XG5cbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cbi8vIFdlIHJldHVybiB1bmRlZmluZWQsIGluc3RlYWQgb2Ygbm90aGluZyBoZXJlLCBzbyBpdCdzXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XG5cbm1vZHVsZS5leHBvcnRzID0gZztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc05vZGUgPSBpc05vZGU7XG5leHBvcnRzLlRva2VuID0gZXhwb3J0cy5Mb2NhdGlvbiA9IHZvaWQgMDtcblxudmFyIF9kZWZpbmVUb0pTT04gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuLi9qc3V0aWxzL2RlZmluZVRvSlNPTlwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29udGFpbnMgYSByYW5nZSBvZiBVVEYtOCBjaGFyYWN0ZXIgb2Zmc2V0cyBhbmQgdG9rZW4gcmVmZXJlbmNlcyB0aGF0XG4gKiBpZGVudGlmeSB0aGUgcmVnaW9uIG9mIHRoZSBzb3VyY2UgZnJvbSB3aGljaCB0aGUgQVNUIGRlcml2ZWQuXG4gKi9cbnZhciBMb2NhdGlvbiA9XG4vKipcbiAqIFRoZSBjaGFyYWN0ZXIgb2Zmc2V0IGF0IHdoaWNoIHRoaXMgTm9kZSBiZWdpbnMuXG4gKi9cblxuLyoqXG4gKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgZW5kcy5cbiAqL1xuXG4vKipcbiAqIFRoZSBUb2tlbiBhdCB3aGljaCB0aGlzIE5vZGUgYmVnaW5zLlxuICovXG5cbi8qKlxuICogVGhlIFRva2VuIGF0IHdoaWNoIHRoaXMgTm9kZSBlbmRzLlxuICovXG5cbi8qKlxuICogVGhlIFNvdXJjZSBkb2N1bWVudCB0aGUgQVNUIHJlcHJlc2VudHMuXG4gKi9cbmZ1bmN0aW9uIExvY2F0aW9uKHN0YXJ0VG9rZW4sIGVuZFRva2VuLCBzb3VyY2UpIHtcbiAgdGhpcy5zdGFydCA9IHN0YXJ0VG9rZW4uc3RhcnQ7XG4gIHRoaXMuZW5kID0gZW5kVG9rZW4uZW5kO1xuICB0aGlzLnN0YXJ0VG9rZW4gPSBzdGFydFRva2VuO1xuICB0aGlzLmVuZFRva2VuID0gZW5kVG9rZW47XG4gIHRoaXMuc291cmNlID0gc291cmNlO1xufTsgLy8gUHJpbnQgYSBzaW1wbGlmaWVkIGZvcm0gd2hlbiBhcHBlYXJpbmcgaW4gSlNPTi91dGlsLmluc3BlY3QuXG5cblxuZXhwb3J0cy5Mb2NhdGlvbiA9IExvY2F0aW9uO1xuKDAsIF9kZWZpbmVUb0pTT04uZGVmYXVsdCkoTG9jYXRpb24sIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGFydDogdGhpcy5zdGFydCxcbiAgICBlbmQ6IHRoaXMuZW5kXG4gIH07XG59KTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHJhbmdlIG9mIGNoYXJhY3RlcnMgcmVwcmVzZW50ZWQgYnkgYSBsZXhpY2FsIHRva2VuXG4gKiB3aXRoaW4gYSBTb3VyY2UuXG4gKi9cblxudmFyIFRva2VuID1cbi8qKlxuICogVGhlIGtpbmQgb2YgVG9rZW4uXG4gKi9cblxuLyoqXG4gKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGlzIE5vZGUgYmVnaW5zLlxuICovXG5cbi8qKlxuICogVGhlIGNoYXJhY3RlciBvZmZzZXQgYXQgd2hpY2ggdGhpcyBOb2RlIGVuZHMuXG4gKi9cblxuLyoqXG4gKiBUaGUgMS1pbmRleGVkIGxpbmUgbnVtYmVyIG9uIHdoaWNoIHRoaXMgVG9rZW4gYXBwZWFycy5cbiAqL1xuXG4vKipcbiAqIFRoZSAxLWluZGV4ZWQgY29sdW1uIG51bWJlciBhdCB3aGljaCB0aGlzIFRva2VuIGJlZ2lucy5cbiAqL1xuXG4vKipcbiAqIEZvciBub24tcHVuY3R1YXRpb24gdG9rZW5zLCByZXByZXNlbnRzIHRoZSBpbnRlcnByZXRlZCB2YWx1ZSBvZiB0aGUgdG9rZW4uXG4gKi9cblxuLyoqXG4gKiBUb2tlbnMgZXhpc3QgYXMgbm9kZXMgaW4gYSBkb3VibGUtbGlua2VkLWxpc3QgYW1vbmdzdCBhbGwgdG9rZW5zXG4gKiBpbmNsdWRpbmcgaWdub3JlZCB0b2tlbnMuIDxTT0Y+IGlzIGFsd2F5cyB0aGUgZmlyc3Qgbm9kZSBhbmQgPEVPRj5cbiAqIHRoZSBsYXN0LlxuICovXG5mdW5jdGlvbiBUb2tlbihraW5kLCBzdGFydCwgZW5kLCBsaW5lLCBjb2x1bW4sIHByZXYsIHZhbHVlKSB7XG4gIHRoaXMua2luZCA9IGtpbmQ7XG4gIHRoaXMuc3RhcnQgPSBzdGFydDtcbiAgdGhpcy5lbmQgPSBlbmQ7XG4gIHRoaXMubGluZSA9IGxpbmU7XG4gIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMucHJldiA9IHByZXY7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59OyAvLyBQcmludCBhIHNpbXBsaWZpZWQgZm9ybSB3aGVuIGFwcGVhcmluZyBpbiBKU09OL3V0aWwuaW5zcGVjdC5cblxuXG5leHBvcnRzLlRva2VuID0gVG9rZW47XG4oMCwgX2RlZmluZVRvSlNPTi5kZWZhdWx0KShUb2tlbiwgZnVuY3Rpb24gKCkge1xuICByZXR1cm4ge1xuICAgIGtpbmQ6IHRoaXMua2luZCxcbiAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICBsaW5lOiB0aGlzLmxpbmUsXG4gICAgY29sdW1uOiB0aGlzLmNvbHVtblxuICB9O1xufSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbmZ1bmN0aW9uIGlzTm9kZShtYXliZU5vZGUpIHtcbiAgcmV0dXJuIG1heWJlTm9kZSAhPSBudWxsICYmIHR5cGVvZiBtYXliZU5vZGUua2luZCA9PT0gJ3N0cmluZyc7XG59XG4vKipcbiAqIFRoZSBsaXN0IG9mIGFsbCBwb3NzaWJsZSBBU1Qgbm9kZSB0eXBlcy5cbiAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gcHJvY2Vzc05vZGVzO1xuXG52YXIgX2lzRW1wdHlUZXh0Tm9kZSA9IHJlcXVpcmUoJy4vdXRpbHMvaXNFbXB0eVRleHROb2RlJyk7XG5cbnZhciBfaXNFbXB0eVRleHROb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2lzRW1wdHlUZXh0Tm9kZSk7XG5cbnZhciBfY29udmVydE5vZGVUb0VsZW1lbnQgPSByZXF1aXJlKCcuL2NvbnZlcnROb2RlVG9FbGVtZW50Jyk7XG5cbnZhciBfY29udmVydE5vZGVUb0VsZW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udmVydE5vZGVUb0VsZW1lbnQpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIFByb2Nlc3NlcyB0aGUgbm9kZXMgZ2VuZXJhdGVkIGJ5IGh0bWxwYXJzZXIyIGFuZCBjb252ZXJ0IHRoZW0gYWxsIGludG8gUmVhY3QgZWxlbWVudHNcbiAqXG4gKiBAcGFyYW0ge09iamVjdFtdfSBub2RlcyBMaXN0IG9mIG5vZGVzIHRvIHByb2Nlc3NcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUcmFuc2Zvcm0gZnVuY3Rpb24gdG8gb3B0aW9uYWxseSBhcHBseSB0byBub2Rlc1xuICogQHJldHVybnMge1JlYWN0LkVsZW1lbnRbXX0gVGhlIGxpc3Qgb2YgcHJvY2Vzc2VkIFJlYWN0IGVsZW1lbnRzXG4gKi9cbmZ1bmN0aW9uIHByb2Nlc3NOb2Rlcyhub2RlcywgdHJhbnNmb3JtKSB7XG5cbiAgcmV0dXJuIG5vZGVzLmZpbHRlcihmdW5jdGlvbiAobm9kZSkge1xuICAgIHJldHVybiAhKDAsIF9pc0VtcHR5VGV4dE5vZGUyLmRlZmF1bHQpKG5vZGUpO1xuICB9KS5tYXAoZnVuY3Rpb24gKG5vZGUsIGluZGV4KSB7XG5cbiAgICAvLyByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIGlmIGFwcGxpY2FibGVcbiAgICB2YXIgdHJhbnNmb3JtZWQgPSB2b2lkIDA7XG4gICAgaWYgKHR5cGVvZiB0cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyYW5zZm9ybWVkID0gdHJhbnNmb3JtKG5vZGUsIGluZGV4KTtcbiAgICAgIGlmICh0cmFuc2Zvcm1lZCA9PT0gbnVsbCB8fCAhIXRyYW5zZm9ybWVkKSB7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBvdGhlcndpc2UgY29udmVydCB0aGUgbm9kZSBhcyBzdGFuZGFyZFxuICAgIHJldHVybiAoMCwgX2NvbnZlcnROb2RlVG9FbGVtZW50Mi5kZWZhdWx0KShub2RlLCBpbmRleCwgdHJhbnNmb3JtKTtcbiAgfSk7XG59IiwiZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0c0xvb3NlOyIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSwgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMsIG9wdGlvbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmosIG9wdHMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGRhdGEgPSBvYmogfHwge31cbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge31cbiAgICB2YXIgZW5jb2RlID0gb3B0aW9ucy5wcmV0dHkgPyBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgOiBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHZhciB2YWx1ZSA9IGRhdGFbdG9rZW4ubmFtZV1cbiAgICAgIHZhciBzZWdtZW50XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeFxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBiZSBkZWZpbmVkJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNhcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCByZXBlYXQsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHZhbHVlKSArICdgJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IGJlIGVtcHR5JylcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSlcblxuICAgICAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhbGwgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeShzZWdtZW50KSArICdgJylcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoICs9IChqID09PSAwID8gdG9rZW4ucHJlZml4IDogdG9rZW4uZGVsaW1pdGVyKSArIHNlZ21lbnRcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSlcblxuICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBtYXRjaCBcIicgKyB0b2tlbi5wYXR0ZXJuICsgJ1wiLCBidXQgcmVjZWl2ZWQgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICB9XG5cbiAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4ICsgc2VnbWVudFxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXC9cXFxcXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogRXNjYXBlIHRoZSBjYXB0dXJpbmcgZ3JvdXAgYnkgZXNjYXBpbmcgc3BlY2lhbCBjaGFyYWN0ZXJzIGFuZCBtZWFuaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gZ3JvdXBcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlR3JvdXAgKGdyb3VwKSB7XG4gIHJldHVybiBncm91cC5yZXBsYWNlKC8oWz0hOiRcXC8oKV0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEF0dGFjaCB0aGUga2V5cyBhcyBhIHByb3BlcnR5IG9mIHRoZSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcmVcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGF0dGFjaEtleXMgKHJlLCBrZXlzKSB7XG4gIHJlLmtleXMgPSBrZXlzXG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWlzLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGluc3BlY3Q7XG5cbnZhciBfbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxudmFyIE1BWF9BUlJBWV9MRU5HVEggPSAxMDtcbnZhciBNQVhfUkVDVVJTSVZFX0RFUFRIID0gMjtcbi8qKlxuICogVXNlZCB0byBwcmludCB2YWx1ZXMgaW4gZXJyb3IgbWVzc2FnZXMuXG4gKi9cblxuZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSkge1xuICByZXR1cm4gZm9ybWF0VmFsdWUodmFsdWUsIFtdKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpIHtcbiAgc3dpdGNoIChfdHlwZW9mKHZhbHVlKSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIHZhbHVlLm5hbWUgPyBcIltmdW5jdGlvbiBcIi5jb25jYXQodmFsdWUubmFtZSwgXCJdXCIpIDogJ1tmdW5jdGlvbl0nO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBwcmV2aW91c2x5U2VlblZhbHVlcykge1xuICBpZiAocHJldmlvdXNseVNlZW5WYWx1ZXMuaW5kZXhPZih2YWx1ZSkgIT09IC0xKSB7XG4gICAgcmV0dXJuICdbQ2lyY3VsYXJdJztcbiAgfVxuXG4gIHZhciBzZWVuVmFsdWVzID0gW10uY29uY2F0KHByZXZpb3VzbHlTZWVuVmFsdWVzLCBbdmFsdWVdKTtcbiAgdmFyIGN1c3RvbUluc3BlY3RGbiA9IGdldEN1c3RvbUZuKHZhbHVlKTtcblxuICBpZiAoY3VzdG9tSW5zcGVjdEZuICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyAkRmxvd0ZpeE1lKD49MC45MC4wKVxuICAgIHZhciBjdXN0b21WYWx1ZSA9IGN1c3RvbUluc3BlY3RGbi5jYWxsKHZhbHVlKTsgLy8gY2hlY2sgZm9yIGluZmluaXRlIHJlY3Vyc2lvblxuXG4gICAgaWYgKGN1c3RvbVZhbHVlICE9PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiBjdXN0b21WYWx1ZSA9PT0gJ3N0cmluZycgPyBjdXN0b21WYWx1ZSA6IGZvcm1hdFZhbHVlKGN1c3RvbVZhbHVlLCBzZWVuVmFsdWVzKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZm9ybWF0QXJyYXkodmFsdWUsIHNlZW5WYWx1ZXMpO1xuICB9XG5cbiAgcmV0dXJuIGZvcm1hdE9iamVjdCh2YWx1ZSwgc2VlblZhbHVlcyk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdChvYmplY3QsIHNlZW5WYWx1ZXMpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiAne30nO1xuICB9XG5cbiAgaWYgKHNlZW5WYWx1ZXMubGVuZ3RoID4gTUFYX1JFQ1VSU0lWRV9ERVBUSCkge1xuICAgIHJldHVybiAnWycgKyBnZXRPYmplY3RUYWcob2JqZWN0KSArICddJztcbiAgfVxuXG4gIHZhciBwcm9wZXJ0aWVzID0ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgIHZhciB2YWx1ZSA9IGZvcm1hdFZhbHVlKG9iamVjdFtrZXldLCBzZWVuVmFsdWVzKTtcbiAgICByZXR1cm4ga2V5ICsgJzogJyArIHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuICd7ICcgKyBwcm9wZXJ0aWVzLmpvaW4oJywgJykgKyAnIH0nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShhcnJheSwgc2VlblZhbHVlcykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdbXSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbQXJyYXldJztcbiAgfVxuXG4gIHZhciBsZW4gPSBNYXRoLm1pbihNQVhfQVJSQVlfTEVOR1RILCBhcnJheS5sZW5ndGgpO1xuICB2YXIgcmVtYWluaW5nID0gYXJyYXkubGVuZ3RoIC0gbGVuO1xuICB2YXIgaXRlbXMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaXRlbXMucHVzaChmb3JtYXRWYWx1ZShhcnJheVtpXSwgc2VlblZhbHVlcykpO1xuICB9XG5cbiAgaWYgKHJlbWFpbmluZyA9PT0gMSkge1xuICAgIGl0ZW1zLnB1c2goJy4uLiAxIG1vcmUgaXRlbScpO1xuICB9IGVsc2UgaWYgKHJlbWFpbmluZyA+IDEpIHtcbiAgICBpdGVtcy5wdXNoKFwiLi4uIFwiLmNvbmNhdChyZW1haW5pbmcsIFwiIG1vcmUgaXRlbXNcIikpO1xuICB9XG5cbiAgcmV0dXJuICdbJyArIGl0ZW1zLmpvaW4oJywgJykgKyAnXSc7XG59XG5cbmZ1bmN0aW9uIGdldEN1c3RvbUZuKG9iamVjdCkge1xuICB2YXIgY3VzdG9tSW5zcGVjdEZuID0gb2JqZWN0W1N0cmluZyhfbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbC5kZWZhdWx0KV07XG5cbiAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0Rm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gY3VzdG9tSW5zcGVjdEZuO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmplY3QuaW5zcGVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBvYmplY3QuaW5zcGVjdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RUYWcob2JqZWN0KSB7XG4gIHZhciB0YWcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqZWN0KS5yZXBsYWNlKC9eXFxbb2JqZWN0IC8sICcnKS5yZXBsYWNlKC9dJC8sICcnKTtcblxuICBpZiAodGFnID09PSAnT2JqZWN0JyAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIG5hbWUgPSBvYmplY3QuY29uc3RydWN0b3IubmFtZTtcblxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgJiYgbmFtZSAhPT0gJycpIHtcbiAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0YWc7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxNykgKi9cbnZhciBub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sLmZvciA9PT0gJ2Z1bmN0aW9uJyA/IFN5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgOiB1bmRlZmluZWQ7XG52YXIgX2RlZmF1bHQgPSBub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRldkFzc2VydDtcblxuZnVuY3Rpb24gZGV2QXNzZXJ0KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICB2YXIgYm9vbGVhbkNvbmRpdGlvbiA9IEJvb2xlYW4oY29uZGl0aW9uKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKHNlZSB0cmFuc2Zvcm1hdGlvbiBkb25lIGluICcuL3Jlc291cmNlcy9pbmxpbmVJbnZhcmlhbnQuanMnKSAqL1xuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnN5bnRheEVycm9yID0gc3ludGF4RXJyb3I7XG5cbnZhciBfR3JhcGhRTEVycm9yID0gcmVxdWlyZShcIi4vR3JhcGhRTEVycm9yXCIpO1xuXG4vKipcbiAqIFByb2R1Y2VzIGEgR3JhcGhRTEVycm9yIHJlcHJlc2VudGluZyBhIHN5bnRheCBlcnJvciwgY29udGFpbmluZyB1c2VmdWxcbiAqIGRlc2NyaXB0aXZlIGluZm9ybWF0aW9uIGFib3V0IHRoZSBzeW50YXggZXJyb3IncyBwb3NpdGlvbiBpbiB0aGUgc291cmNlLlxuICovXG5mdW5jdGlvbiBzeW50YXhFcnJvcihzb3VyY2UsIHBvc2l0aW9uLCBkZXNjcmlwdGlvbikge1xuICByZXR1cm4gbmV3IF9HcmFwaFFMRXJyb3IuR3JhcGhRTEVycm9yKFwiU3ludGF4IEVycm9yOiBcIi5jb25jYXQoZGVzY3JpcHRpb24pLCB1bmRlZmluZWQsIHNvdXJjZSwgW3Bvc2l0aW9uXSk7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuU1lNQk9MX1RPX1NUUklOR19UQUcgPSBleHBvcnRzLlNZTUJPTF9BU1lOQ19JVEVSQVRPUiA9IGV4cG9ydHMuU1lNQk9MX0lURVJBVE9SID0gdm9pZCAwO1xuLy8gSW4gRVMyMDE1IChvciBhIHBvbHlmaWxsZWQpIGVudmlyb25tZW50LCB0aGlzIHdpbGwgYmUgU3ltYm9sLml0ZXJhdG9yXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcpICovXG52YXIgU1lNQk9MX0lURVJBVE9SID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyA/IFN5bWJvbC5pdGVyYXRvciA6ICdAQGl0ZXJhdG9yJzsgLy8gSW4gRVMyMDE3IChvciBhIHBvbHlmaWxsZWQpIGVudmlyb25tZW50LCB0aGlzIHdpbGwgYmUgU3ltYm9sLmFzeW5jSXRlcmF0b3JcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2dyYXBocWwvZ3JhcGhxbC1qcy9pc3N1ZXMvMjMxNykgKi9cblxuZXhwb3J0cy5TWU1CT0xfSVRFUkFUT1IgPSBTWU1CT0xfSVRFUkFUT1I7XG52YXIgU1lNQk9MX0FTWU5DX0lURVJBVE9SID0gLy8gJEZsb3dGaXhNZSBGbG93IGRvZXNuJ3QgZGVmaW5lIGBTeW1ib2wuYXN5bmNJdGVyYXRvcmAgeWV0XG50eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nID8gU3ltYm9sLmFzeW5jSXRlcmF0b3IgOiAnQEBhc3luY0l0ZXJhdG9yJztcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IChTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcpICovXG5cbmV4cG9ydHMuU1lNQk9MX0FTWU5DX0lURVJBVE9SID0gU1lNQk9MX0FTWU5DX0lURVJBVE9SO1xudmFyIFNZTUJPTF9UT19TVFJJTkdfVEFHID0gLy8gJEZsb3dGaXhNZSBGbG93IGRvZXNuJ3QgZGVmaW5lIGBTeW1ib2wudG9TdHJpbmdUYWdgIHlldFxudHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyA/IFN5bWJvbC50b1N0cmluZ1RhZyA6ICdAQHRvU3RyaW5nVGFnJztcbmV4cG9ydHMuU1lNQk9MX1RPX1NUUklOR19UQUcgPSBTWU1CT0xfVE9fU1RSSU5HX1RBRztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRMb2NhdGlvbiA9IGdldExvY2F0aW9uO1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBsb2NhdGlvbiBpbiBhIFNvdXJjZS5cbiAqL1xuXG4vKipcbiAqIFRha2VzIGEgU291cmNlIGFuZCBhIFVURi04IGNoYXJhY3RlciBvZmZzZXQsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBsaW5lIGFuZCBjb2x1bW4gYXMgYSBTb3VyY2VMb2NhdGlvbi5cbiAqL1xuZnVuY3Rpb24gZ2V0TG9jYXRpb24oc291cmNlLCBwb3NpdGlvbikge1xuICB2YXIgbGluZVJlZ2V4cCA9IC9cXHJcXG58W1xcblxccl0vZztcbiAgdmFyIGxpbmUgPSAxO1xuICB2YXIgY29sdW1uID0gcG9zaXRpb24gKyAxO1xuICB2YXIgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IGxpbmVSZWdleHAuZXhlYyhzb3VyY2UuYm9keSkpICYmIG1hdGNoLmluZGV4IDwgcG9zaXRpb24pIHtcbiAgICBsaW5lICs9IDE7XG4gICAgY29sdW1uID0gcG9zaXRpb24gKyAxIC0gKG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbGluZTogbGluZSxcbiAgICBjb2x1bW46IGNvbHVtblxuICB9O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRva2VuS2luZCA9IHZvaWQgMDtcblxuLyoqXG4gKiBBbiBleHBvcnRlZCBlbnVtIGRlc2NyaWJpbmcgdGhlIGRpZmZlcmVudCBraW5kcyBvZiB0b2tlbnMgdGhhdCB0aGVcbiAqIGxleGVyIGVtaXRzLlxuICovXG52YXIgVG9rZW5LaW5kID0gT2JqZWN0LmZyZWV6ZSh7XG4gIFNPRjogJzxTT0Y+JyxcbiAgRU9GOiAnPEVPRj4nLFxuICBCQU5HOiAnIScsXG4gIERPTExBUjogJyQnLFxuICBBTVA6ICcmJyxcbiAgUEFSRU5fTDogJygnLFxuICBQQVJFTl9SOiAnKScsXG4gIFNQUkVBRDogJy4uLicsXG4gIENPTE9OOiAnOicsXG4gIEVRVUFMUzogJz0nLFxuICBBVDogJ0AnLFxuICBCUkFDS0VUX0w6ICdbJyxcbiAgQlJBQ0tFVF9SOiAnXScsXG4gIEJSQUNFX0w6ICd7JyxcbiAgUElQRTogJ3wnLFxuICBCUkFDRV9SOiAnfScsXG4gIE5BTUU6ICdOYW1lJyxcbiAgSU5UOiAnSW50JyxcbiAgRkxPQVQ6ICdGbG9hdCcsXG4gIFNUUklORzogJ1N0cmluZycsXG4gIEJMT0NLX1NUUklORzogJ0Jsb2NrU3RyaW5nJyxcbiAgQ09NTUVOVDogJ0NvbW1lbnQnXG59KTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHRva2VuIGtpbmRzIHZhbHVlcy5cbiAqL1xuXG5leHBvcnRzLlRva2VuS2luZCA9IFRva2VuS2luZDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWRlbnRCbG9ja1N0cmluZ1ZhbHVlID0gZGVkZW50QmxvY2tTdHJpbmdWYWx1ZTtcbmV4cG9ydHMuZ2V0QmxvY2tTdHJpbmdJbmRlbnRhdGlvbiA9IGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb247XG5leHBvcnRzLnByaW50QmxvY2tTdHJpbmcgPSBwcmludEJsb2NrU3RyaW5nO1xuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSB2YWx1ZSBvZiBhIGJsb2NrIHN0cmluZyBmcm9tIGl0cyBwYXJzZWQgcmF3IHZhbHVlLCBzaW1pbGFyIHRvXG4gKiBDb2ZmZWVTY3JpcHQncyBibG9jayBzdHJpbmcsIFB5dGhvbidzIGRvY3N0cmluZyB0cmltIG9yIFJ1YnkncyBzdHJpcF9oZXJlZG9jLlxuICpcbiAqIFRoaXMgaW1wbGVtZW50cyB0aGUgR3JhcGhRTCBzcGVjJ3MgQmxvY2tTdHJpbmdWYWx1ZSgpIHN0YXRpYyBhbGdvcml0aG0uXG4gKlxuICogQGludGVybmFsXG4gKi9cbmZ1bmN0aW9uIGRlZGVudEJsb2NrU3RyaW5nVmFsdWUocmF3U3RyaW5nKSB7XG4gIC8vIEV4cGFuZCBhIGJsb2NrIHN0cmluZydzIHJhdyB2YWx1ZSBpbnRvIGluZGVwZW5kZW50IGxpbmVzLlxuICB2YXIgbGluZXMgPSByYXdTdHJpbmcuc3BsaXQoL1xcclxcbnxbXFxuXFxyXS9nKTsgLy8gUmVtb3ZlIGNvbW1vbiBpbmRlbnRhdGlvbiBmcm9tIGFsbCBsaW5lcyBidXQgZmlyc3QuXG5cbiAgdmFyIGNvbW1vbkluZGVudCA9IGdldEJsb2NrU3RyaW5nSW5kZW50YXRpb24obGluZXMpO1xuXG4gIGlmIChjb21tb25JbmRlbnQgIT09IDApIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsaW5lc1tpXSA9IGxpbmVzW2ldLnNsaWNlKGNvbW1vbkluZGVudCk7XG4gICAgfVxuICB9IC8vIFJlbW92ZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBibGFuayBsaW5lcy5cblxuXG4gIHdoaWxlIChsaW5lcy5sZW5ndGggPiAwICYmIGlzQmxhbmsobGluZXNbMF0pKSB7XG4gICAgbGluZXMuc2hpZnQoKTtcbiAgfVxuXG4gIHdoaWxlIChsaW5lcy5sZW5ndGggPiAwICYmIGlzQmxhbmsobGluZXNbbGluZXMubGVuZ3RoIC0gMV0pKSB7XG4gICAgbGluZXMucG9wKCk7XG4gIH0gLy8gUmV0dXJuIGEgc3RyaW5nIG9mIHRoZSBsaW5lcyBqb2luZWQgd2l0aCBVKzAwMEEuXG5cblxuICByZXR1cm4gbGluZXMuam9pbignXFxuJyk7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cblxuZnVuY3Rpb24gZ2V0QmxvY2tTdHJpbmdJbmRlbnRhdGlvbihsaW5lcykge1xuICB2YXIgY29tbW9uSW5kZW50ID0gbnVsbDtcblxuICBmb3IgKHZhciBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGxpbmUgPSBsaW5lc1tpXTtcbiAgICB2YXIgaW5kZW50ID0gbGVhZGluZ1doaXRlc3BhY2UobGluZSk7XG5cbiAgICBpZiAoaW5kZW50ID09PSBsaW5lLmxlbmd0aCkge1xuICAgICAgY29udGludWU7IC8vIHNraXAgZW1wdHkgbGluZXNcbiAgICB9XG5cbiAgICBpZiAoY29tbW9uSW5kZW50ID09PSBudWxsIHx8IGluZGVudCA8IGNvbW1vbkluZGVudCkge1xuICAgICAgY29tbW9uSW5kZW50ID0gaW5kZW50O1xuXG4gICAgICBpZiAoY29tbW9uSW5kZW50ID09PSAwKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb21tb25JbmRlbnQgPT09IG51bGwgPyAwIDogY29tbW9uSW5kZW50O1xufVxuXG5mdW5jdGlvbiBsZWFkaW5nV2hpdGVzcGFjZShzdHIpIHtcbiAgdmFyIGkgPSAwO1xuXG4gIHdoaWxlIChpIDwgc3RyLmxlbmd0aCAmJiAoc3RyW2ldID09PSAnICcgfHwgc3RyW2ldID09PSAnXFx0JykpIHtcbiAgICBpKys7XG4gIH1cblxuICByZXR1cm4gaTtcbn1cblxuZnVuY3Rpb24gaXNCbGFuayhzdHIpIHtcbiAgcmV0dXJuIGxlYWRpbmdXaGl0ZXNwYWNlKHN0cikgPT09IHN0ci5sZW5ndGg7XG59XG4vKipcbiAqIFByaW50IGEgYmxvY2sgc3RyaW5nIGluIHRoZSBpbmRlbnRlZCBibG9jayBmb3JtIGJ5IGFkZGluZyBhIGxlYWRpbmcgYW5kXG4gKiB0cmFpbGluZyBibGFuayBsaW5lLiBIb3dldmVyLCBpZiBhIGJsb2NrIHN0cmluZyBzdGFydHMgd2l0aCB3aGl0ZXNwYWNlIGFuZCBpc1xuICogYSBzaW5nbGUtbGluZSwgYWRkaW5nIGEgbGVhZGluZyBibGFuayBsaW5lIHdvdWxkIHN0cmlwIHRoYXQgd2hpdGVzcGFjZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmZ1bmN0aW9uIHByaW50QmxvY2tTdHJpbmcodmFsdWUpIHtcbiAgdmFyIGluZGVudGF0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJztcbiAgdmFyIHByZWZlck11bHRpcGxlTGluZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICB2YXIgaXNTaW5nbGVMaW5lID0gdmFsdWUuaW5kZXhPZignXFxuJykgPT09IC0xO1xuICB2YXIgaGFzTGVhZGluZ1NwYWNlID0gdmFsdWVbMF0gPT09ICcgJyB8fCB2YWx1ZVswXSA9PT0gJ1xcdCc7XG4gIHZhciBoYXNUcmFpbGluZ1F1b3RlID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV0gPT09ICdcIic7XG4gIHZhciBwcmludEFzTXVsdGlwbGVMaW5lcyA9ICFpc1NpbmdsZUxpbmUgfHwgaGFzVHJhaWxpbmdRdW90ZSB8fCBwcmVmZXJNdWx0aXBsZUxpbmVzO1xuICB2YXIgcmVzdWx0ID0gJyc7IC8vIEZvcm1hdCBhIG11bHRpLWxpbmUgYmxvY2sgcXVvdGUgdG8gYWNjb3VudCBmb3IgbGVhZGluZyBzcGFjZS5cblxuICBpZiAocHJpbnRBc011bHRpcGxlTGluZXMgJiYgIShpc1NpbmdsZUxpbmUgJiYgaGFzTGVhZGluZ1NwYWNlKSkge1xuICAgIHJlc3VsdCArPSAnXFxuJyArIGluZGVudGF0aW9uO1xuICB9XG5cbiAgcmVzdWx0ICs9IGluZGVudGF0aW9uID8gdmFsdWUucmVwbGFjZSgvXFxuL2csICdcXG4nICsgaW5kZW50YXRpb24pIDogdmFsdWU7XG5cbiAgaWYgKHByaW50QXNNdWx0aXBsZUxpbmVzKSB7XG4gICAgcmVzdWx0ICs9ICdcXG4nO1xuICB9XG5cbiAgcmV0dXJuICdcIlwiXCInICsgcmVzdWx0LnJlcGxhY2UoL1wiXCJcIi9nLCAnXFxcXFwiXCJcIicpICsgJ1wiXCJcIic7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBjb252ZXJ0Tm9kZVRvRWxlbWVudDtcblxudmFyIF9lbGVtZW50VHlwZXMgPSByZXF1aXJlKCcuL2VsZW1lbnRUeXBlcycpO1xuXG52YXIgX2VsZW1lbnRUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9lbGVtZW50VHlwZXMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENvbnZlcnRzIGEgaHRtbHBhcnNlcjIgbm9kZSB0byBhIFJlYWN0IGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBUaGUgaHRtbHBhcnNlcjIgbm9kZSB0byBjb252ZXJ0XG4gKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4IG9mIHRoZSBjdXJyZW50IG5vZGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUcmFuc2Zvcm0gZnVuY3Rpb24gdG8gYXBwbHkgdG8gY2hpbGRyZW4gb2YgdGhlIG5vZGVcbiAqIEByZXR1cm5zIHtSZWFjdC5FbGVtZW50fVxuICovXG5mdW5jdGlvbiBjb252ZXJ0Tm9kZVRvRWxlbWVudChub2RlLCBpbmRleCwgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBfZWxlbWVudFR5cGVzMi5kZWZhdWx0W25vZGUudHlwZV0obm9kZSwgaW5kZXgsIHRyYW5zZm9ybSk7XG59IiwidmFyIFRva2VuaXplciA9IHJlcXVpcmUoXCIuL1Rva2VuaXplci5qc1wiKTtcblxuLypcblx0T3B0aW9uczpcblxuXHR4bWxNb2RlOiBEaXNhYmxlcyB0aGUgc3BlY2lhbCBiZWhhdmlvciBmb3Igc2NyaXB0L3N0eWxlIHRhZ3MgKGZhbHNlIGJ5IGRlZmF1bHQpXG5cdGxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzOiBjYWxsIC50b0xvd2VyQ2FzZSBmb3IgZWFjaCBhdHRyaWJ1dGUgbmFtZSAodHJ1ZSBpZiB4bWxNb2RlIGlzIGBmYWxzZWApXG5cdGxvd2VyQ2FzZVRhZ3M6IGNhbGwgLnRvTG93ZXJDYXNlIGZvciBlYWNoIHRhZyBuYW1lICh0cnVlIGlmIHhtbE1vZGUgaXMgYGZhbHNlYClcbiovXG5cbi8qXG5cdENhbGxiYWNrczpcblxuXHRvbmNkYXRhZW5kLFxuXHRvbmNkYXRhc3RhcnQsXG5cdG9uY2xvc2V0YWcsXG5cdG9uY29tbWVudCxcblx0b25jb21tZW50ZW5kLFxuXHRvbmVycm9yLFxuXHRvbm9wZW50YWcsXG5cdG9ucHJvY2Vzc2luZ2luc3RydWN0aW9uLFxuXHRvbnJlc2V0LFxuXHRvbnRleHRcbiovXG5cbnZhciBmb3JtVGFncyA9IHtcbiAgICBpbnB1dDogdHJ1ZSxcbiAgICBvcHRpb246IHRydWUsXG4gICAgb3B0Z3JvdXA6IHRydWUsXG4gICAgc2VsZWN0OiB0cnVlLFxuICAgIGJ1dHRvbjogdHJ1ZSxcbiAgICBkYXRhbGlzdDogdHJ1ZSxcbiAgICB0ZXh0YXJlYTogdHJ1ZVxufTtcblxudmFyIG9wZW5JbXBsaWVzQ2xvc2UgPSB7XG4gICAgdHI6IHsgdHI6IHRydWUsIHRoOiB0cnVlLCB0ZDogdHJ1ZSB9LFxuICAgIHRoOiB7IHRoOiB0cnVlIH0sXG4gICAgdGQ6IHsgdGhlYWQ6IHRydWUsIHRoOiB0cnVlLCB0ZDogdHJ1ZSB9LFxuICAgIGJvZHk6IHsgaGVhZDogdHJ1ZSwgbGluazogdHJ1ZSwgc2NyaXB0OiB0cnVlIH0sXG4gICAgbGk6IHsgbGk6IHRydWUgfSxcbiAgICBwOiB7IHA6IHRydWUgfSxcbiAgICBoMTogeyBwOiB0cnVlIH0sXG4gICAgaDI6IHsgcDogdHJ1ZSB9LFxuICAgIGgzOiB7IHA6IHRydWUgfSxcbiAgICBoNDogeyBwOiB0cnVlIH0sXG4gICAgaDU6IHsgcDogdHJ1ZSB9LFxuICAgIGg2OiB7IHA6IHRydWUgfSxcbiAgICBzZWxlY3Q6IGZvcm1UYWdzLFxuICAgIGlucHV0OiBmb3JtVGFncyxcbiAgICBvdXRwdXQ6IGZvcm1UYWdzLFxuICAgIGJ1dHRvbjogZm9ybVRhZ3MsXG4gICAgZGF0YWxpc3Q6IGZvcm1UYWdzLFxuICAgIHRleHRhcmVhOiBmb3JtVGFncyxcbiAgICBvcHRpb246IHsgb3B0aW9uOiB0cnVlIH0sXG4gICAgb3B0Z3JvdXA6IHsgb3B0Z3JvdXA6IHRydWUgfVxufTtcblxudmFyIHZvaWRFbGVtZW50cyA9IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgYXJlYTogdHJ1ZSxcbiAgICBiYXNlOiB0cnVlLFxuICAgIGJhc2Vmb250OiB0cnVlLFxuICAgIGJyOiB0cnVlLFxuICAgIGNvbDogdHJ1ZSxcbiAgICBjb21tYW5kOiB0cnVlLFxuICAgIGVtYmVkOiB0cnVlLFxuICAgIGZyYW1lOiB0cnVlLFxuICAgIGhyOiB0cnVlLFxuICAgIGltZzogdHJ1ZSxcbiAgICBpbnB1dDogdHJ1ZSxcbiAgICBpc2luZGV4OiB0cnVlLFxuICAgIGtleWdlbjogdHJ1ZSxcbiAgICBsaW5rOiB0cnVlLFxuICAgIG1ldGE6IHRydWUsXG4gICAgcGFyYW06IHRydWUsXG4gICAgc291cmNlOiB0cnVlLFxuICAgIHRyYWNrOiB0cnVlLFxuICAgIHdicjogdHJ1ZVxufTtcblxudmFyIGZvcmVpZ25Db250ZXh0RWxlbWVudHMgPSB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIG1hdGg6IHRydWUsXG4gICAgc3ZnOiB0cnVlXG59O1xudmFyIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzID0ge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICBtaTogdHJ1ZSxcbiAgICBtbzogdHJ1ZSxcbiAgICBtbjogdHJ1ZSxcbiAgICBtczogdHJ1ZSxcbiAgICBtdGV4dDogdHJ1ZSxcbiAgICBcImFubm90YXRpb24teG1sXCI6IHRydWUsXG4gICAgZm9yZWlnbk9iamVjdDogdHJ1ZSxcbiAgICBkZXNjOiB0cnVlLFxuICAgIHRpdGxlOiB0cnVlXG59O1xuXG52YXIgcmVfbmFtZUVuZCA9IC9cXHN8XFwvLztcblxuZnVuY3Rpb24gUGFyc2VyKGNicywgb3B0aW9ucykge1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIHRoaXMuX2NicyA9IGNicyB8fCB7fTtcblxuICAgIHRoaXMuX3RhZ25hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2F0dHJpYm5hbWUgPSBcIlwiO1xuICAgIHRoaXMuX2F0dHJpYnZhbHVlID0gXCJcIjtcbiAgICB0aGlzLl9hdHRyaWJzID0gbnVsbDtcbiAgICB0aGlzLl9zdGFjayA9IFtdO1xuICAgIHRoaXMuX2ZvcmVpZ25Db250ZXh0ID0gW107XG5cbiAgICB0aGlzLnN0YXJ0SW5kZXggPSAwO1xuICAgIHRoaXMuZW5kSW5kZXggPSBudWxsO1xuXG4gICAgdGhpcy5fbG93ZXJDYXNlVGFnTmFtZXMgPVxuICAgICAgICBcImxvd2VyQ2FzZVRhZ3NcIiBpbiB0aGlzLl9vcHRpb25zXG4gICAgICAgICAgICA/ICEhdGhpcy5fb3B0aW9ucy5sb3dlckNhc2VUYWdzXG4gICAgICAgICAgICA6ICF0aGlzLl9vcHRpb25zLnhtbE1vZGU7XG4gICAgdGhpcy5fbG93ZXJDYXNlQXR0cmlidXRlTmFtZXMgPVxuICAgICAgICBcImxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzXCIgaW4gdGhpcy5fb3B0aW9uc1xuICAgICAgICAgICAgPyAhIXRoaXMuX29wdGlvbnMubG93ZXJDYXNlQXR0cmlidXRlTmFtZXNcbiAgICAgICAgICAgIDogIXRoaXMuX29wdGlvbnMueG1sTW9kZTtcblxuICAgIGlmICh0aGlzLl9vcHRpb25zLlRva2VuaXplcikge1xuICAgICAgICBUb2tlbml6ZXIgPSB0aGlzLl9vcHRpb25zLlRva2VuaXplcjtcbiAgICB9XG4gICAgdGhpcy5fdG9rZW5pemVyID0gbmV3IFRva2VuaXplcih0aGlzLl9vcHRpb25zLCB0aGlzKTtcblxuICAgIGlmICh0aGlzLl9jYnMub25wYXJzZXJpbml0KSB0aGlzLl9jYnMub25wYXJzZXJpbml0KHRoaXMpO1xufVxuXG5yZXF1aXJlKFwiaW5oZXJpdHNcIikoUGFyc2VyLCByZXF1aXJlKFwiZXZlbnRzXCIpLkV2ZW50RW1pdHRlcik7XG5cblBhcnNlci5wcm90b3R5cGUuX3VwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24oaW5pdGlhbE9mZnNldCkge1xuICAgIGlmICh0aGlzLmVuZEluZGV4ID09PSBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLl90b2tlbml6ZXIuX3NlY3Rpb25TdGFydCA8PSBpbml0aWFsT2Zmc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0SW5kZXggPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGFydEluZGV4ID0gdGhpcy5fdG9rZW5pemVyLl9zZWN0aW9uU3RhcnQgLSBpbml0aWFsT2Zmc2V0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHRoaXMuc3RhcnRJbmRleCA9IHRoaXMuZW5kSW5kZXggKyAxO1xuICAgIHRoaXMuZW5kSW5kZXggPSB0aGlzLl90b2tlbml6ZXIuZ2V0QWJzb2x1dGVJbmRleCgpO1xufTtcblxuLy9Ub2tlbml6ZXIgZXZlbnQgaGFuZGxlcnNcblBhcnNlci5wcm90b3R5cGUub250ZXh0ID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKDEpO1xuICAgIHRoaXMuZW5kSW5kZXgtLTtcblxuICAgIGlmICh0aGlzLl9jYnMub250ZXh0KSB0aGlzLl9jYnMub250ZXh0KGRhdGEpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbm9wZW50YWduYW1lID0gZnVuY3Rpb24obmFtZSkge1xuICAgIGlmICh0aGlzLl9sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIHRoaXMuX3RhZ25hbWUgPSBuYW1lO1xuXG4gICAgaWYgKCF0aGlzLl9vcHRpb25zLnhtbE1vZGUgJiYgbmFtZSBpbiBvcGVuSW1wbGllc0Nsb3NlKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgICB2YXIgZWw7XG4gICAgICAgICAgICAoZWwgPSB0aGlzLl9zdGFja1t0aGlzLl9zdGFjay5sZW5ndGggLSAxXSkgaW5cbiAgICAgICAgICAgIG9wZW5JbXBsaWVzQ2xvc2VbbmFtZV07XG4gICAgICAgICAgICB0aGlzLm9uY2xvc2V0YWcoZWwpXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29wdGlvbnMueG1sTW9kZSB8fCAhKG5hbWUgaW4gdm9pZEVsZW1lbnRzKSkge1xuICAgICAgICB0aGlzLl9zdGFjay5wdXNoKG5hbWUpO1xuICAgICAgICBpZiAobmFtZSBpbiBmb3JlaWduQ29udGV4dEVsZW1lbnRzKSB0aGlzLl9mb3JlaWduQ29udGV4dC5wdXNoKHRydWUpO1xuICAgICAgICBlbHNlIGlmIChuYW1lIGluIGh0bWxJbnRlZ3JhdGlvbkVsZW1lbnRzKVxuICAgICAgICAgICAgdGhpcy5fZm9yZWlnbkNvbnRleHQucHVzaChmYWxzZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2Nicy5vbm9wZW50YWduYW1lKSB0aGlzLl9jYnMub25vcGVudGFnbmFtZShuYW1lKTtcbiAgICBpZiAodGhpcy5fY2JzLm9ub3BlbnRhZykgdGhpcy5fYXR0cmlicyA9IHt9O1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbm9wZW50YWdlbmQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigxKTtcblxuICAgIGlmICh0aGlzLl9hdHRyaWJzKSB7XG4gICAgICAgIGlmICh0aGlzLl9jYnMub25vcGVudGFnKVxuICAgICAgICAgICAgdGhpcy5fY2JzLm9ub3BlbnRhZyh0aGlzLl90YWduYW1lLCB0aGlzLl9hdHRyaWJzKTtcbiAgICAgICAgdGhpcy5fYXR0cmlicyA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICAhdGhpcy5fb3B0aW9ucy54bWxNb2RlICYmXG4gICAgICAgIHRoaXMuX2Nicy5vbmNsb3NldGFnICYmXG4gICAgICAgIHRoaXMuX3RhZ25hbWUgaW4gdm9pZEVsZW1lbnRzXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmNsb3NldGFnKHRoaXMuX3RhZ25hbWUpO1xuICAgIH1cblxuICAgIHRoaXMuX3RhZ25hbWUgPSBcIlwiO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmNsb3NldGFnID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHRoaXMuX3VwZGF0ZVBvc2l0aW9uKDEpO1xuXG4gICAgaWYgKHRoaXMuX2xvd2VyQ2FzZVRhZ05hbWVzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIFxuICAgIGlmIChuYW1lIGluIGZvcmVpZ25Db250ZXh0RWxlbWVudHMgfHwgbmFtZSBpbiBodG1sSW50ZWdyYXRpb25FbGVtZW50cykge1xuICAgICAgICB0aGlzLl9mb3JlaWduQ29udGV4dC5wb3AoKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIHRoaXMuX3N0YWNrLmxlbmd0aCAmJlxuICAgICAgICAoIShuYW1lIGluIHZvaWRFbGVtZW50cykgfHwgdGhpcy5fb3B0aW9ucy54bWxNb2RlKVxuICAgICkge1xuICAgICAgICB2YXIgcG9zID0gdGhpcy5fc3RhY2subGFzdEluZGV4T2YobmFtZSk7XG4gICAgICAgIGlmIChwb3MgIT09IC0xKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzLm9uY2xvc2V0YWcpIHtcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLl9zdGFjay5sZW5ndGggLSBwb3M7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHBvcy0tKSB0aGlzLl9jYnMub25jbG9zZXRhZyh0aGlzLl9zdGFjay5wb3AoKSk7XG4gICAgICAgICAgICB9IGVsc2UgdGhpcy5fc3RhY2subGVuZ3RoID0gcG9zO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwicFwiICYmICF0aGlzLl9vcHRpb25zLnhtbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMub25vcGVudGFnbmFtZShuYW1lKTtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlQ3VycmVudFRhZygpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5fb3B0aW9ucy54bWxNb2RlICYmIChuYW1lID09PSBcImJyXCIgfHwgbmFtZSA9PT0gXCJwXCIpKSB7XG4gICAgICAgIHRoaXMub25vcGVudGFnbmFtZShuYW1lKTtcbiAgICAgICAgdGhpcy5fY2xvc2VDdXJyZW50VGFnKCk7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbnNlbGZjbG9zaW5ndGFnID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKFxuICAgICAgICB0aGlzLl9vcHRpb25zLnhtbE1vZGUgfHxcbiAgICAgICAgdGhpcy5fb3B0aW9ucy5yZWNvZ25pemVTZWxmQ2xvc2luZyB8fFxuICAgICAgICB0aGlzLl9mb3JlaWduQ29udGV4dFt0aGlzLl9mb3JlaWduQ29udGV4dC5sZW5ndGggLSAxXVxuICAgICkge1xuICAgICAgICB0aGlzLl9jbG9zZUN1cnJlbnRUYWcoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9ub3BlbnRhZ2VuZCgpO1xuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUuX2Nsb3NlQ3VycmVudFRhZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBuYW1lID0gdGhpcy5fdGFnbmFtZTtcblxuICAgIHRoaXMub25vcGVudGFnZW5kKCk7XG5cbiAgICAvL3NlbGYtY2xvc2luZyB0YWdzIHdpbGwgYmUgb24gdGhlIHRvcCBvZiB0aGUgc3RhY2tcbiAgICAvLyhjaGVhcGVyIGNoZWNrIHRoYW4gaW4gb25jbG9zZXRhZylcbiAgICBpZiAodGhpcy5fc3RhY2tbdGhpcy5fc3RhY2subGVuZ3RoIC0gMV0gPT09IG5hbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nicy5vbmNsb3NldGFnKSB7XG4gICAgICAgICAgICB0aGlzLl9jYnMub25jbG9zZXRhZyhuYW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdGFjay5wb3AoKTtcbiAgICAgICAgXG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYm5hbWUgPSBmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKHRoaXMuX2xvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzKSB7XG4gICAgICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIHRoaXMuX2F0dHJpYm5hbWUgPSBuYW1lO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmRhdGEgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX2F0dHJpYnZhbHVlICs9IHZhbHVlO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmF0dHJpYmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9jYnMub25hdHRyaWJ1dGUpXG4gICAgICAgIHRoaXMuX2Nicy5vbmF0dHJpYnV0ZSh0aGlzLl9hdHRyaWJuYW1lLCB0aGlzLl9hdHRyaWJ2YWx1ZSk7XG4gICAgaWYgKFxuICAgICAgICB0aGlzLl9hdHRyaWJzICYmXG4gICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fYXR0cmlicywgdGhpcy5fYXR0cmlibmFtZSlcbiAgICApIHtcbiAgICAgICAgdGhpcy5fYXR0cmlic1t0aGlzLl9hdHRyaWJuYW1lXSA9IHRoaXMuX2F0dHJpYnZhbHVlO1xuICAgIH1cbiAgICB0aGlzLl9hdHRyaWJuYW1lID0gXCJcIjtcbiAgICB0aGlzLl9hdHRyaWJ2YWx1ZSA9IFwiXCI7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLl9nZXRJbnN0cnVjdGlvbk5hbWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciBpZHggPSB2YWx1ZS5zZWFyY2gocmVfbmFtZUVuZCksXG4gICAgICAgIG5hbWUgPSBpZHggPCAwID8gdmFsdWUgOiB2YWx1ZS5zdWJzdHIoMCwgaWR4KTtcblxuICAgIGlmICh0aGlzLl9sb3dlckNhc2VUYWdOYW1lcykge1xuICAgICAgICBuYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmRlY2xhcmF0aW9uID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKSB7XG4gICAgICAgIHZhciBuYW1lID0gdGhpcy5fZ2V0SW5zdHJ1Y3Rpb25OYW1lKHZhbHVlKTtcbiAgICAgICAgdGhpcy5fY2JzLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uKFwiIVwiICsgbmFtZSwgXCIhXCIgKyB2YWx1ZSk7XG4gICAgfVxufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbiA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2Nicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbikge1xuICAgICAgICB2YXIgbmFtZSA9IHRoaXMuX2dldEluc3RydWN0aW9uTmFtZSh2YWx1ZSk7XG4gICAgICAgIHRoaXMuX2Nicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbihcIj9cIiArIG5hbWUsIFwiP1wiICsgdmFsdWUpO1xuICAgIH1cbn07XG5cblBhcnNlci5wcm90b3R5cGUub25jb21tZW50ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbig0KTtcblxuICAgIGlmICh0aGlzLl9jYnMub25jb21tZW50KSB0aGlzLl9jYnMub25jb21tZW50KHZhbHVlKTtcbiAgICBpZiAodGhpcy5fY2JzLm9uY29tbWVudGVuZCkgdGhpcy5fY2JzLm9uY29tbWVudGVuZCgpO1xufTtcblxuUGFyc2VyLnByb3RvdHlwZS5vbmNkYXRhID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB0aGlzLl91cGRhdGVQb3NpdGlvbigxKTtcblxuICAgIGlmICh0aGlzLl9vcHRpb25zLnhtbE1vZGUgfHwgdGhpcy5fb3B0aW9ucy5yZWNvZ25pemVDREFUQSkge1xuICAgICAgICBpZiAodGhpcy5fY2JzLm9uY2RhdGFzdGFydCkgdGhpcy5fY2JzLm9uY2RhdGFzdGFydCgpO1xuICAgICAgICBpZiAodGhpcy5fY2JzLm9udGV4dCkgdGhpcy5fY2JzLm9udGV4dCh2YWx1ZSk7XG4gICAgICAgIGlmICh0aGlzLl9jYnMub25jZGF0YWVuZCkgdGhpcy5fY2JzLm9uY2RhdGFlbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uY29tbWVudChcIltDREFUQVtcIiArIHZhbHVlICsgXCJdXVwiKTtcbiAgICB9XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9uZXJyb3IpIHRoaXMuX2Nicy5vbmVycm9yKGVycik7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLm9uZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2Nicy5vbmNsb3NldGFnKSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuX3N0YWNrLmxlbmd0aDtcbiAgICAgICAgICAgIGkgPiAwO1xuICAgICAgICAgICAgdGhpcy5fY2JzLm9uY2xvc2V0YWcodGhpcy5fc3RhY2tbLS1pXSlcbiAgICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2Nicy5vbmVuZCkgdGhpcy5fY2JzLm9uZW5kKCk7XG59O1xuXG4vL1Jlc2V0cyB0aGUgcGFyc2VyIHRvIGEgYmxhbmsgc3RhdGUsIHJlYWR5IHRvIHBhcnNlIGEgbmV3IEhUTUwgZG9jdW1lbnRcblBhcnNlci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9ucmVzZXQpIHRoaXMuX2Nicy5vbnJlc2V0KCk7XG4gICAgdGhpcy5fdG9rZW5pemVyLnJlc2V0KCk7XG5cbiAgICB0aGlzLl90YWduYW1lID0gXCJcIjtcbiAgICB0aGlzLl9hdHRyaWJuYW1lID0gXCJcIjtcbiAgICB0aGlzLl9hdHRyaWJzID0gbnVsbDtcbiAgICB0aGlzLl9zdGFjayA9IFtdO1xuXG4gICAgaWYgKHRoaXMuX2Nicy5vbnBhcnNlcmluaXQpIHRoaXMuX2Nicy5vbnBhcnNlcmluaXQodGhpcyk7XG59O1xuXG4vL1BhcnNlcyBhIGNvbXBsZXRlIEhUTUwgZG9jdW1lbnQgYW5kIHB1c2hlcyBpdCB0byB0aGUgaGFuZGxlclxuUGFyc2VyLnByb3RvdHlwZS5wYXJzZUNvbXBsZXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICB0aGlzLmVuZChkYXRhKTtcbn07XG5cblBhcnNlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbihjaHVuaykge1xuICAgIHRoaXMuX3Rva2VuaXplci53cml0ZShjaHVuayk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgdGhpcy5fdG9rZW5pemVyLmVuZChjaHVuayk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fdG9rZW5pemVyLnBhdXNlKCk7XG59O1xuXG5QYXJzZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX3Rva2VuaXplci5yZXN1bWUoKTtcbn07XG5cbi8vYWxpYXMgZm9yIGJhY2t3YXJkcyBjb21wYXRcblBhcnNlci5wcm90b3R5cGUucGFyc2VDaHVuayA9IFBhcnNlci5wcm90b3R5cGUud3JpdGU7XG5QYXJzZXIucHJvdG90eXBlLmRvbmUgPSBQYXJzZXIucHJvdG90eXBlLmVuZDtcblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXI7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFRva2VuaXplcjtcblxudmFyIGRlY29kZUNvZGVQb2ludCA9IHJlcXVpcmUoXCJlbnRpdGllcy9saWIvZGVjb2RlX2NvZGVwb2ludC5qc1wiKTtcbnZhciBlbnRpdHlNYXAgPSByZXF1aXJlKFwiZW50aXRpZXMvbWFwcy9lbnRpdGllcy5qc29uXCIpO1xudmFyIGxlZ2FjeU1hcCA9IHJlcXVpcmUoXCJlbnRpdGllcy9tYXBzL2xlZ2FjeS5qc29uXCIpO1xudmFyIHhtbE1hcCA9IHJlcXVpcmUoXCJlbnRpdGllcy9tYXBzL3htbC5qc29uXCIpO1xuXG52YXIgaSA9IDA7XG5cbnZhciBURVhUID0gaSsrO1xudmFyIEJFRk9SRV9UQUdfTkFNRSA9IGkrKzsgLy9hZnRlciA8XG52YXIgSU5fVEFHX05BTUUgPSBpKys7XG52YXIgSU5fU0VMRl9DTE9TSU5HX1RBRyA9IGkrKztcbnZhciBCRUZPUkVfQ0xPU0lOR19UQUdfTkFNRSA9IGkrKztcbnZhciBJTl9DTE9TSU5HX1RBR19OQU1FID0gaSsrO1xudmFyIEFGVEVSX0NMT1NJTkdfVEFHX05BTUUgPSBpKys7XG5cbi8vYXR0cmlidXRlc1xudmFyIEJFRk9SRV9BVFRSSUJVVEVfTkFNRSA9IGkrKztcbnZhciBJTl9BVFRSSUJVVEVfTkFNRSA9IGkrKztcbnZhciBBRlRFUl9BVFRSSUJVVEVfTkFNRSA9IGkrKztcbnZhciBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFID0gaSsrO1xudmFyIElOX0FUVFJJQlVURV9WQUxVRV9EUSA9IGkrKzsgLy8gXCJcbnZhciBJTl9BVFRSSUJVVEVfVkFMVUVfU1EgPSBpKys7IC8vICdcbnZhciBJTl9BVFRSSUJVVEVfVkFMVUVfTlEgPSBpKys7XG5cbi8vZGVjbGFyYXRpb25zXG52YXIgQkVGT1JFX0RFQ0xBUkFUSU9OID0gaSsrOyAvLyAhXG52YXIgSU5fREVDTEFSQVRJT04gPSBpKys7XG5cbi8vcHJvY2Vzc2luZyBpbnN0cnVjdGlvbnNcbnZhciBJTl9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OID0gaSsrOyAvLyA/XG5cbi8vY29tbWVudHNcbnZhciBCRUZPUkVfQ09NTUVOVCA9IGkrKztcbnZhciBJTl9DT01NRU5UID0gaSsrO1xudmFyIEFGVEVSX0NPTU1FTlRfMSA9IGkrKztcbnZhciBBRlRFUl9DT01NRU5UXzIgPSBpKys7XG5cbi8vY2RhdGFcbnZhciBCRUZPUkVfQ0RBVEFfMSA9IGkrKzsgLy8gW1xudmFyIEJFRk9SRV9DREFUQV8yID0gaSsrOyAvLyBDXG52YXIgQkVGT1JFX0NEQVRBXzMgPSBpKys7IC8vIERcbnZhciBCRUZPUkVfQ0RBVEFfNCA9IGkrKzsgLy8gQVxudmFyIEJFRk9SRV9DREFUQV81ID0gaSsrOyAvLyBUXG52YXIgQkVGT1JFX0NEQVRBXzYgPSBpKys7IC8vIEFcbnZhciBJTl9DREFUQSA9IGkrKzsgLy8gW1xudmFyIEFGVEVSX0NEQVRBXzEgPSBpKys7IC8vIF1cbnZhciBBRlRFUl9DREFUQV8yID0gaSsrOyAvLyBdXG5cbi8vc3BlY2lhbCB0YWdzXG52YXIgQkVGT1JFX1NQRUNJQUwgPSBpKys7IC8vU1xudmFyIEJFRk9SRV9TUEVDSUFMX0VORCA9IGkrKzsgLy9TXG5cbnZhciBCRUZPUkVfU0NSSVBUXzEgPSBpKys7IC8vQ1xudmFyIEJFRk9SRV9TQ1JJUFRfMiA9IGkrKzsgLy9SXG52YXIgQkVGT1JFX1NDUklQVF8zID0gaSsrOyAvL0lcbnZhciBCRUZPUkVfU0NSSVBUXzQgPSBpKys7IC8vUFxudmFyIEJFRk9SRV9TQ1JJUFRfNSA9IGkrKzsgLy9UXG52YXIgQUZURVJfU0NSSVBUXzEgPSBpKys7IC8vQ1xudmFyIEFGVEVSX1NDUklQVF8yID0gaSsrOyAvL1JcbnZhciBBRlRFUl9TQ1JJUFRfMyA9IGkrKzsgLy9JXG52YXIgQUZURVJfU0NSSVBUXzQgPSBpKys7IC8vUFxudmFyIEFGVEVSX1NDUklQVF81ID0gaSsrOyAvL1RcblxudmFyIEJFRk9SRV9TVFlMRV8xID0gaSsrOyAvL1RcbnZhciBCRUZPUkVfU1RZTEVfMiA9IGkrKzsgLy9ZXG52YXIgQkVGT1JFX1NUWUxFXzMgPSBpKys7IC8vTFxudmFyIEJFRk9SRV9TVFlMRV80ID0gaSsrOyAvL0VcbnZhciBBRlRFUl9TVFlMRV8xID0gaSsrOyAvL1RcbnZhciBBRlRFUl9TVFlMRV8yID0gaSsrOyAvL1lcbnZhciBBRlRFUl9TVFlMRV8zID0gaSsrOyAvL0xcbnZhciBBRlRFUl9TVFlMRV80ID0gaSsrOyAvL0VcblxudmFyIEJFRk9SRV9FTlRJVFkgPSBpKys7IC8vJlxudmFyIEJFRk9SRV9OVU1FUklDX0VOVElUWSA9IGkrKzsgLy8jXG52YXIgSU5fTkFNRURfRU5USVRZID0gaSsrO1xudmFyIElOX05VTUVSSUNfRU5USVRZID0gaSsrO1xudmFyIElOX0hFWF9FTlRJVFkgPSBpKys7IC8vWFxuXG52YXIgaiA9IDA7XG5cbnZhciBTUEVDSUFMX05PTkUgPSBqKys7XG52YXIgU1BFQ0lBTF9TQ1JJUFQgPSBqKys7XG52YXIgU1BFQ0lBTF9TVFlMRSA9IGorKztcblxuZnVuY3Rpb24gd2hpdGVzcGFjZShjKSB7XG4gICAgcmV0dXJuIGMgPT09IFwiIFwiIHx8IGMgPT09IFwiXFxuXCIgfHwgYyA9PT0gXCJcXHRcIiB8fCBjID09PSBcIlxcZlwiIHx8IGMgPT09IFwiXFxyXCI7XG59XG5cbmZ1bmN0aW9uIGlmRWxzZVN0YXRlKHVwcGVyLCBTVUNDRVNTLCBGQUlMVVJFKSB7XG4gICAgdmFyIGxvd2VyID0gdXBwZXIudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICh1cHBlciA9PT0gbG93ZXIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBsb3dlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gU1VDQ0VTUztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBGQUlMVVJFO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKGMpIHtcbiAgICAgICAgICAgIGlmIChjID09PSBsb3dlciB8fCBjID09PSB1cHBlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gU1VDQ0VTUztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBGQUlMVVJFO1xuICAgICAgICAgICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKHVwcGVyLCBORVhUX1NUQVRFKSB7XG4gICAgdmFyIGxvd2VyID0gdXBwZXIudG9Mb3dlckNhc2UoKTtcblxuICAgIHJldHVybiBmdW5jdGlvbihjKSB7XG4gICAgICAgIGlmIChjID09PSBsb3dlciB8fCBjID09PSB1cHBlcikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBORVhUX1NUQVRFO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9UQUdfTkFNRTtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIFRva2VuaXplcihvcHRpb25zLCBjYnMpIHtcbiAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAwO1xuICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICB0aGlzLl9idWZmZXJPZmZzZXQgPSAwOyAvL2NoYXJzIHJlbW92ZWQgZnJvbSBfYnVmZmVyXG4gICAgdGhpcy5fYmFzZVN0YXRlID0gVEVYVDtcbiAgICB0aGlzLl9zcGVjaWFsID0gU1BFQ0lBTF9OT05FO1xuICAgIHRoaXMuX2NicyA9IGNicztcbiAgICB0aGlzLl9ydW5uaW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9lbmRlZCA9IGZhbHNlO1xuICAgIHRoaXMuX3htbE1vZGUgPSAhIShvcHRpb25zICYmIG9wdGlvbnMueG1sTW9kZSk7XG4gICAgdGhpcy5fZGVjb2RlRW50aXRpZXMgPSAhIShvcHRpb25zICYmIG9wdGlvbnMuZGVjb2RlRW50aXRpZXMpO1xufVxuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZVRleHQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPFwiKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbmRleCA+IHRoaXMuX3NlY3Rpb25TdGFydCkge1xuICAgICAgICAgICAgdGhpcy5fY2JzLm9udGV4dCh0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX1RBR19OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0aGlzLl9kZWNvZGVFbnRpdGllcyAmJlxuICAgICAgICB0aGlzLl9zcGVjaWFsID09PSBTUEVDSUFMX05PTkUgJiZcbiAgICAgICAgYyA9PT0gXCImXCJcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuX2luZGV4ID4gdGhpcy5fc2VjdGlvblN0YXJ0KSB7XG4gICAgICAgICAgICB0aGlzLl9jYnMub250ZXh0KHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYmFzZVN0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVRhZ05hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIjxcIikge1xuICAgICAgICB0aGlzLl9jYnMub250ZXh0KHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCI+XCIgfHwgdGhpcy5fc3BlY2lhbCAhPT0gU1BFQ0lBTF9OT05FIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIhXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfREVDTEFSQVRJT047XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwiP1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fUFJPQ0VTU0lOR19JTlNUUlVDVElPTjtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID1cbiAgICAgICAgICAgICF0aGlzLl94bWxNb2RlICYmIChjID09PSBcInNcIiB8fCBjID09PSBcIlNcIilcbiAgICAgICAgICAgICAgICA/IEJFRk9SRV9TUEVDSUFMXG4gICAgICAgICAgICAgICAgOiBJTl9UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJblRhZ05hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25vcGVudGFnbmFtZVwiKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDbG9zZWluZ1RhZ05hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKHdoaXRlc3BhY2UoYykpO1xuICAgIGVsc2UgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NwZWNpYWwgIT09IFNQRUNJQUxfTk9ORSkge1xuICAgICAgICBpZiAoYyA9PT0gXCJzXCIgfHwgYyA9PT0gXCJTXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX1NQRUNJQUxfRU5EO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ0xPU0lOR19UQUdfTkFNRTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkNsb3NlaW5nVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbmNsb3NldGFnXCIpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNsb3NlaW5nVGFnTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICAvL3NraXAgZXZlcnl0aGluZyB1bnRpbCBcIj5cIlxuICAgIGlmIChjID09PSBcIj5cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbm9wZW50YWdlbmQoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjID09PSBcIi9cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX1NFTEZfQ0xPU0lOR19UQUc7XG4gICAgfSBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluU2VsZkNsb3NpbmdUYWcgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnNlbGZjbG9zaW5ndGFnKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkF0dHJpYnV0ZU5hbWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPVwiIHx8IGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmlibmFtZSh0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAtMTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBBRlRFUl9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI9XCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfQVRUUklCVVRFX1ZBTFVFO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gXCIvXCIgfHwgYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH0gZWxzZSBpZiAoIXdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQVRUUklCVVRFX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4O1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09ICdcIicpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9BVFRSSUJVVEVfVkFMVUVfRFE7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2UgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQVRUUklCVVRFX1ZBTFVFX1NRO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmICghd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0FUVFJJQlVURV9WQUxVRV9OUTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vcmVjb25zdW1lIHRva2VuXG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkF0dHJpYnV0ZVZhbHVlRG91YmxlUXVvdGVzID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSAnXCInKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gXCImXCIpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9iYXNlU3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVTaW5nbGVRdW90ZXMgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fY2JzLm9uYXR0cmliZW5kKCk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0FUVFJJQlVURV9OQU1FO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fZGVjb2RlRW50aXRpZXMgJiYgYyA9PT0gXCImXCIpIHtcbiAgICAgICAgdGhpcy5fZW1pdFRva2VuKFwib25hdHRyaWJkYXRhXCIpO1xuICAgICAgICB0aGlzLl9iYXNlU3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfRU5USVRZO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleDtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVOb1F1b3RlcyA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAod2hpdGVzcGFjZShjKSB8fCBjID09PSBcIj5cIikge1xuICAgICAgICB0aGlzLl9lbWl0VG9rZW4oXCJvbmF0dHJpYmRhdGFcIik7XG4gICAgICAgIHRoaXMuX2Nicy5vbmF0dHJpYmVuZCgpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9BVFRSSUJVVEVfTkFNRTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX2RlY29kZUVudGl0aWVzICYmIGMgPT09IFwiJlwiKSB7XG4gICAgICAgIHRoaXMuX2VtaXRUb2tlbihcIm9uYXR0cmliZGF0YVwiKTtcbiAgICAgICAgdGhpcy5fYmFzZVN0YXRlID0gdGhpcy5fc3RhdGU7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gQkVGT1JFX0VOVElUWTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVEZWNsYXJhdGlvbiA9IGZ1bmN0aW9uKGMpIHtcbiAgICB0aGlzLl9zdGF0ZSA9XG4gICAgICAgIGMgPT09IFwiW1wiXG4gICAgICAgICAgICA/IEJFRk9SRV9DREFUQV8xXG4gICAgICAgICAgICA6IGMgPT09IFwiLVwiXG4gICAgICAgICAgICAgICAgPyBCRUZPUkVfQ09NTUVOVFxuICAgICAgICAgICAgICAgIDogSU5fREVDTEFSQVRJT047XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluRGVjbGFyYXRpb24gPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmRlY2xhcmF0aW9uKHRoaXMuX2dldFNlY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5Qcm9jZXNzaW5nSW5zdHJ1Y3Rpb24gPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnByb2Nlc3NpbmdpbnN0cnVjdGlvbih0aGlzLl9nZXRTZWN0aW9uKCkpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNvbW1lbnQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiLVwiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ09NTUVOVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fREVDTEFSQVRJT047XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbkNvbW1lbnQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiLVwiKSB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NPTU1FTlRfMTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJDb21tZW50MSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCItXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBBRlRFUl9DT01NRU5UXzI7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DT01NRU5UO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJDb21tZW50MiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgLy9yZW1vdmUgMiB0cmFpbGluZyBjaGFyc1xuICAgICAgICB0aGlzLl9jYnMub25jb21tZW50KFxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyLnN1YnN0cmluZyh0aGlzLl9zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4IC0gMilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBURVhUO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgfSBlbHNlIGlmIChjICE9PSBcIi1cIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NPTU1FTlQ7XG4gICAgfVxuICAgIC8vIGVsc2U6IHN0YXkgaW4gQUZURVJfQ09NTUVOVF8yIChgLS0tPmApXG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhMSA9IGlmRWxzZVN0YXRlKFxuICAgIFwiQ1wiLFxuICAgIEJFRk9SRV9DREFUQV8yLFxuICAgIElOX0RFQ0xBUkFUSU9OXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTIgPSBpZkVsc2VTdGF0ZShcbiAgICBcIkRcIixcbiAgICBCRUZPUkVfQ0RBVEFfMyxcbiAgICBJTl9ERUNMQVJBVElPTlxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlQ2RhdGEzID0gaWZFbHNlU3RhdGUoXG4gICAgXCJBXCIsXG4gICAgQkVGT1JFX0NEQVRBXzQsXG4gICAgSU5fREVDTEFSQVRJT05cbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZUNkYXRhNCA9IGlmRWxzZVN0YXRlKFxuICAgIFwiVFwiLFxuICAgIEJFRk9SRV9DREFUQV81LFxuICAgIElOX0RFQ0xBUkFUSU9OXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTUgPSBpZkVsc2VTdGF0ZShcbiAgICBcIkFcIixcbiAgICBCRUZPUkVfQ0RBVEFfNixcbiAgICBJTl9ERUNMQVJBVElPTlxuKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVDZGF0YTYgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiW1wiKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fQ0RBVEE7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0RFQ0xBUkFUSU9OO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlSW5DZGF0YSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCJdXCIpIHRoaXMuX3N0YXRlID0gQUZURVJfQ0RBVEFfMTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJDZGF0YTEgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiXVwiKSB0aGlzLl9zdGF0ZSA9IEFGVEVSX0NEQVRBXzI7XG4gICAgZWxzZSB0aGlzLl9zdGF0ZSA9IElOX0NEQVRBO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlckNkYXRhMiA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIpIHtcbiAgICAgICAgLy9yZW1vdmUgMiB0cmFpbGluZyBjaGFyc1xuICAgICAgICB0aGlzLl9jYnMub25jZGF0YShcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5zdWJzdHJpbmcodGhpcy5fc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCAtIDIpXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gVEVYVDtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXggKyAxO1xuICAgIH0gZWxzZSBpZiAoYyAhPT0gXCJdXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DREFUQTtcbiAgICB9XG4gICAgLy9lbHNlOiBzdGF5IGluIEFGVEVSX0NEQVRBXzIgKGBdXV0+YClcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3BlY2lhbCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCJjXCIgfHwgYyA9PT0gXCJDXCIpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBCRUZPUkVfU0NSSVBUXzE7XG4gICAgfSBlbHNlIGlmIChjID09PSBcInRcIiB8fCBjID09PSBcIlRcIikge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEJFRk9SRV9TVFlMRV8xO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gSU5fVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNwZWNpYWxFbmQgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKHRoaXMuX3NwZWNpYWwgPT09IFNQRUNJQUxfU0NSSVBUICYmIChjID09PSBcImNcIiB8fCBjID09PSBcIkNcIikpIHtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBBRlRFUl9TQ1JJUFRfMTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NwZWNpYWwgPT09IFNQRUNJQUxfU1RZTEUgJiYgKGMgPT09IFwidFwiIHx8IGMgPT09IFwiVFwiKSkge1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IEFGVEVSX1NUWUxFXzE7XG4gICAgfSBlbHNlIHRoaXMuX3N0YXRlID0gVEVYVDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU2NyaXB0MSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJSXCIsXG4gICAgQkVGT1JFX1NDUklQVF8yXG4pO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVCZWZvcmVTY3JpcHQyID0gY29uc3VtZVNwZWNpYWxOYW1lQ2hhcihcbiAgICBcIklcIixcbiAgICBCRUZPUkVfU0NSSVBUXzNcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNjcmlwdDMgPSBjb25zdW1lU3BlY2lhbE5hbWVDaGFyKFxuICAgIFwiUFwiLFxuICAgIEJFRk9SRV9TQ1JJUFRfNFxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU2NyaXB0NCA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJUXCIsXG4gICAgQkVGT1JFX1NDUklQVF81XG4pO1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVNjcmlwdDUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiL1wiIHx8IGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3BlY2lhbCA9IFNQRUNJQUxfU0NSSVBUO1xuICAgIH1cbiAgICB0aGlzLl9zdGF0ZSA9IElOX1RBR19OQU1FO1xuICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQxID0gaWZFbHNlU3RhdGUoXCJSXCIsIEFGVEVSX1NDUklQVF8yLCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQyID0gaWZFbHNlU3RhdGUoXCJJXCIsIEFGVEVSX1NDUklQVF8zLCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQzID0gaWZFbHNlU3RhdGUoXCJQXCIsIEFGVEVSX1NDUklQVF80LCBURVhUKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTY3JpcHQ0ID0gaWZFbHNlU3RhdGUoXCJUXCIsIEFGVEVSX1NDUklQVF81LCBURVhUKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclNjcmlwdDUgPSBmdW5jdGlvbihjKSB7XG4gICAgaWYgKGMgPT09IFwiPlwiIHx8IHdoaXRlc3BhY2UoYykpIHtcbiAgICAgICAgdGhpcy5fc3BlY2lhbCA9IFNQRUNJQUxfTk9ORTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSBJTl9DTE9TSU5HX1RBR19OQU1FO1xuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCAtIDY7XG4gICAgICAgIHRoaXMuX2luZGV4LS07IC8vcmVjb25zdW1lIHRoZSB0b2tlblxuICAgIH0gZWxzZSB0aGlzLl9zdGF0ZSA9IFRFWFQ7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVN0eWxlMSA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJZXCIsXG4gICAgQkVGT1JFX1NUWUxFXzJcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVN0eWxlMiA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJMXCIsXG4gICAgQkVGT1JFX1NUWUxFXzNcbik7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUJlZm9yZVN0eWxlMyA9IGNvbnN1bWVTcGVjaWFsTmFtZUNoYXIoXG4gICAgXCJFXCIsXG4gICAgQkVGT1JFX1NUWUxFXzRcbik7XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlU3R5bGU0ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIi9cIiB8fCBjID09PSBcIj5cIiB8fCB3aGl0ZXNwYWNlKGMpKSB7XG4gICAgICAgIHRoaXMuX3NwZWNpYWwgPSBTUEVDSUFMX1NUWUxFO1xuICAgIH1cbiAgICB0aGlzLl9zdGF0ZSA9IElOX1RBR19OQU1FO1xuICAgIHRoaXMuX2luZGV4LS07IC8vY29uc3VtZSB0aGUgdG9rZW4gYWdhaW5cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQWZ0ZXJTdHlsZTEgPSBpZkVsc2VTdGF0ZShcIllcIiwgQUZURVJfU1RZTEVfMiwgVEVYVCk7XG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUFmdGVyU3R5bGUyID0gaWZFbHNlU3RhdGUoXCJMXCIsIEFGVEVSX1NUWUxFXzMsIFRFWFQpO1xuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclN0eWxlMyA9IGlmRWxzZVN0YXRlKFwiRVwiLCBBRlRFUl9TVFlMRV80LCBURVhUKTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVBZnRlclN0eWxlNCA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI+XCIgfHwgd2hpdGVzcGFjZShjKSkge1xuICAgICAgICB0aGlzLl9zcGVjaWFsID0gU1BFQ0lBTF9OT05FO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9IElOX0NMT1NJTkdfVEFHX05BTUU7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCA9IHRoaXMuX2luZGV4IC0gNTtcbiAgICAgICAgdGhpcy5faW5kZXgtLTsgLy9yZWNvbnN1bWUgdGhlIHRva2VuXG4gICAgfSBlbHNlIHRoaXMuX3N0YXRlID0gVEVYVDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlRW50aXR5ID0gaWZFbHNlU3RhdGUoXG4gICAgXCIjXCIsXG4gICAgQkVGT1JFX05VTUVSSUNfRU5USVRZLFxuICAgIElOX05BTUVEX0VOVElUWVxuKTtcblRva2VuaXplci5wcm90b3R5cGUuX3N0YXRlQmVmb3JlTnVtZXJpY0VudGl0eSA9IGlmRWxzZVN0YXRlKFxuICAgIFwiWFwiLFxuICAgIElOX0hFWF9FTlRJVFksXG4gICAgSU5fTlVNRVJJQ19FTlRJVFlcbik7XG5cbi8vZm9yIGVudGl0aWVzIHRlcm1pbmF0ZWQgd2l0aCBhIHNlbWljb2xvblxuVG9rZW5pemVyLnByb3RvdHlwZS5fcGFyc2VOYW1lZEVudGl0eVN0cmljdCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vb2Zmc2V0ID0gMVxuICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuX2J1ZmZlci5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ICsgMSxcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG1hcCA9IHRoaXMuX3htbE1vZGUgPyB4bWxNYXAgOiBlbnRpdHlNYXA7XG5cbiAgICAgICAgaWYgKG1hcC5oYXNPd25Qcm9wZXJ0eShlbnRpdHkpKSB7XG4gICAgICAgICAgICB0aGlzLl9lbWl0UGFydGlhbChtYXBbZW50aXR5XSk7XG4gICAgICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSB0aGlzLl9pbmRleCArIDE7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vL3BhcnNlcyBsZWdhY3kgZW50aXRpZXMgKHdpdGhvdXQgdHJhaWxpbmcgc2VtaWNvbG9uKVxuVG9rZW5pemVyLnByb3RvdHlwZS5fcGFyc2VMZWdhY3lFbnRpdHkgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9zZWN0aW9uU3RhcnQgKyAxLFxuICAgICAgICBsaW1pdCA9IHRoaXMuX2luZGV4IC0gc3RhcnQ7XG5cbiAgICBpZiAobGltaXQgPiA2KSBsaW1pdCA9IDY7IC8vdGhlIG1heCBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDZcblxuICAgIHdoaWxlIChsaW1pdCA+PSAyKSB7XG4gICAgICAgIC8vdGhlIG1pbiBsZW5ndGggb2YgbGVnYWN5IGVudGl0aWVzIGlzIDJcbiAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuX2J1ZmZlci5zdWJzdHIoc3RhcnQsIGxpbWl0KTtcblxuICAgICAgICBpZiAobGVnYWN5TWFwLmhhc093blByb3BlcnR5KGVudGl0eSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VtaXRQYXJ0aWFsKGxlZ2FjeU1hcFtlbnRpdHldKTtcbiAgICAgICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCArPSBsaW1pdCArIDE7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW1pdC0tO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fc3RhdGVJbk5hbWVkRW50aXR5ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICB0aGlzLl9wYXJzZU5hbWVkRW50aXR5U3RyaWN0KCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgKyAxIDwgdGhpcy5faW5kZXggJiYgIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX3BhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKGMgPCBcImFcIiB8fCBjID4gXCJ6XCIpICYmXG4gICAgICAgIChjIDwgXCJBXCIgfHwgYyA+IFwiWlwiKSAmJlxuICAgICAgICAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIilcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuX3htbE1vZGUpO1xuICAgICAgICBlbHNlIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgKyAxID09PSB0aGlzLl9pbmRleCk7XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2Jhc2VTdGF0ZSAhPT0gVEVYVCkge1xuICAgICAgICAgICAgaWYgKGMgIT09IFwiPVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VOYW1lZEVudGl0eVN0cmljdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGFyc2VMZWdhY3lFbnRpdHkoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICB0aGlzLl9pbmRleC0tO1xuICAgIH1cbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2RlY29kZU51bWVyaWNFbnRpdHkgPSBmdW5jdGlvbihvZmZzZXQsIGJhc2UpIHtcbiAgICB2YXIgc2VjdGlvblN0YXJ0ID0gdGhpcy5fc2VjdGlvblN0YXJ0ICsgb2Zmc2V0O1xuXG4gICAgaWYgKHNlY3Rpb25TdGFydCAhPT0gdGhpcy5faW5kZXgpIHtcbiAgICAgICAgLy9wYXJzZSBlbnRpdHlcbiAgICAgICAgdmFyIGVudGl0eSA9IHRoaXMuX2J1ZmZlci5zdWJzdHJpbmcoc2VjdGlvblN0YXJ0LCB0aGlzLl9pbmRleCk7XG4gICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChlbnRpdHksIGJhc2UpO1xuXG4gICAgICAgIHRoaXMuX2VtaXRQYXJ0aWFsKGRlY29kZUNvZGVQb2ludChwYXJzZWQpKTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0ID0gdGhpcy5faW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0LS07XG4gICAgfVxuXG4gICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluTnVtZXJpY0VudGl0eSA9IGZ1bmN0aW9uKGMpIHtcbiAgICBpZiAoYyA9PT0gXCI7XCIpIHtcbiAgICAgICAgdGhpcy5fZGVjb2RlTnVtZXJpY0VudGl0eSgyLCAxMCk7XG4gICAgICAgIHRoaXMuX3NlY3Rpb25TdGFydCsrO1xuICAgIH0gZWxzZSBpZiAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIikge1xuICAgICAgICBpZiAoIXRoaXMuX3htbE1vZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMiwgMTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5faW5kZXgtLTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLl9zdGF0ZUluSGV4RW50aXR5ID0gZnVuY3Rpb24oYykge1xuICAgIGlmIChjID09PSBcIjtcIikge1xuICAgICAgICB0aGlzLl9kZWNvZGVOdW1lcmljRW50aXR5KDMsIDE2KTtcbiAgICAgICAgdGhpcy5fc2VjdGlvblN0YXJ0Kys7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgKGMgPCBcImFcIiB8fCBjID4gXCJmXCIpICYmXG4gICAgICAgIChjIDwgXCJBXCIgfHwgYyA+IFwiRlwiKSAmJlxuICAgICAgICAoYyA8IFwiMFwiIHx8IGMgPiBcIjlcIilcbiAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgICAgICB0aGlzLl9kZWNvZGVOdW1lcmljRW50aXR5KDMsIDE2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2luZGV4LS07XG4gICAgfVxufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCAwKSB7XG4gICAgICAgIHRoaXMuX2J1ZmZlciA9IFwiXCI7XG4gICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgdGhpcy5faW5kZXggPSAwO1xuICAgIH0gZWxzZSBpZiAodGhpcy5fcnVubmluZykge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IFRFWFQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgIT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2JzLm9udGV4dCh0aGlzLl9idWZmZXIuc3Vic3RyKHRoaXMuX3NlY3Rpb25TdGFydCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPT09IHRoaXMuX2luZGV4KSB7XG4gICAgICAgICAgICAvL3RoZSBzZWN0aW9uIGp1c3Qgc3RhcnRlZFxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gXCJcIjtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9pbmRleDtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vcmVtb3ZlIGV2ZXJ5dGhpbmcgdW5uZWNlc3NhcnlcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IHRoaXMuX2J1ZmZlci5zdWJzdHIodGhpcy5fc2VjdGlvblN0YXJ0KTtcbiAgICAgICAgICAgIHRoaXMuX2luZGV4IC09IHRoaXMuX3NlY3Rpb25TdGFydDtcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlck9mZnNldCArPSB0aGlzLl9zZWN0aW9uU3RhcnQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAwO1xuICAgIH1cbn07XG5cbi8vVE9ETyBtYWtlIGV2ZW50cyBjb25kaXRpb25hbFxuVG9rZW5pemVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgaWYgKHRoaXMuX2VuZGVkKSB0aGlzLl9jYnMub25lcnJvcihFcnJvcihcIi53cml0ZSgpIGFmdGVyIGRvbmUhXCIpKTtcblxuICAgIHRoaXMuX2J1ZmZlciArPSBjaHVuaztcbiAgICB0aGlzLl9wYXJzZSgpO1xufTtcblxuVG9rZW5pemVyLnByb3RvdHlwZS5fcGFyc2UgPSBmdW5jdGlvbigpIHtcbiAgICB3aGlsZSAodGhpcy5faW5kZXggPCB0aGlzLl9idWZmZXIubGVuZ3RoICYmIHRoaXMuX3J1bm5pbmcpIHtcbiAgICAgICAgdmFyIGMgPSB0aGlzLl9idWZmZXIuY2hhckF0KHRoaXMuX2luZGV4KTtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSBURVhUKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZVRleHQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVUYWdOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJblRhZ05hbWUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DTE9TSU5HX1RBR19OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNsb3NlaW5nVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fQ0xPU0lOR19UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkNsb3NlaW5nVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ0xPU0lOR19UQUdfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckNsb3NlaW5nVGFnTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fU0VMRl9DTE9TSU5HX1RBRykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJblNlbGZDbG9zaW5nVGFnKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQVRUUklCVVRFX05BTUUpIHtcblxuICAgICAgICAvKlxuXHRcdCpcdGF0dHJpYnV0ZXNcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVOYW1lKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9BVFRSSUJVVEVfTkFNRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkF0dHJpYnV0ZU5hbWUoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX0FUVFJJQlVURV9OQU1FKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQXR0cmlidXRlTmFtZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0FUVFJJQlVURV9WQUxVRSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVBdHRyaWJ1dGVWYWx1ZShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fQVRUUklCVVRFX1ZBTFVFX0RRKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQXR0cmlidXRlVmFsdWVEb3VibGVRdW90ZXMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX0FUVFJJQlVURV9WQUxVRV9TUSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkF0dHJpYnV0ZVZhbHVlU2luZ2xlUXVvdGVzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9BVFRSSUJVVEVfVkFMVUVfTlEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5BdHRyaWJ1dGVWYWx1ZU5vUXVvdGVzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfREVDTEFSQVRJT04pIHtcblxuICAgICAgICAvKlxuXHRcdCpcdGRlY2xhcmF0aW9uc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZURlY2xhcmF0aW9uKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9ERUNMQVJBVElPTikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkRlY2xhcmF0aW9uKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9QUk9DRVNTSU5HX0lOU1RSVUNUSU9OKSB7XG5cbiAgICAgICAgLypcblx0XHQqXHRwcm9jZXNzaW5nIGluc3RydWN0aW9uc1xuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluUHJvY2Vzc2luZ0luc3RydWN0aW9uKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ09NTUVOVCkge1xuXG4gICAgICAgIC8qXG5cdFx0Klx0Y29tbWVudHNcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDb21tZW50KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9DT01NRU5UKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluQ29tbWVudChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ09NTUVOVF8xKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ29tbWVudDEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX0NPTU1FTlRfMikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlckNvbW1lbnQyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ0RBVEFfMSkge1xuXG4gICAgICAgIC8qXG5cdFx0Klx0Y2RhdGFcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDZGF0YTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DREFUQV8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNkYXRhMihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NEQVRBXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2RhdGEzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfQ0RBVEFfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVDZGF0YTQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9DREFUQV81KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZUNkYXRhNShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX0NEQVRBXzYpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlQ2RhdGE2KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9DREFUQSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVJbkNkYXRhKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9DREFUQV8xKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ2RhdGExKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9DREFUQV8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyQ2RhdGEyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1BFQ0lBTCkge1xuXG4gICAgICAgIC8qXG5cdFx0KiBzcGVjaWFsIHRhZ3Ncblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTcGVjaWFsKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1BFQ0lBTF9FTkQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU3BlY2lhbEVuZChjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NDUklQVF8xKSB7XG5cbiAgICAgICAgLypcblx0XHQqIHNjcmlwdFxuXHRcdCovXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNjcmlwdDEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TQ1JJUFRfMikge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTY3JpcHQyKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU0NSSVBUXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU2NyaXB0MyhjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NDUklQVF80KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVNjcmlwdDQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TQ1JJUFRfNSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTY3JpcHQ1KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9TQ1JJUFRfMSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclNjcmlwdDEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NDUklQVF8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyU2NyaXB0MihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQUZURVJfU0NSSVBUXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTY3JpcHQzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBBRlRFUl9TQ1JJUFRfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVBZnRlclNjcmlwdDQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NDUklQVF81KSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUFmdGVyU2NyaXB0NShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NUWUxFXzEpIHtcblxuICAgICAgICAvKlxuXHRcdCogc3R5bGVcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTdHlsZTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9TVFlMRV8yKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUJlZm9yZVN0eWxlMihjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gQkVGT1JFX1NUWUxFXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQmVmb3JlU3R5bGUzKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBCRUZPUkVfU1RZTEVfNCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVTdHlsZTQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzEpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTEoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzIpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTIoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzMpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTMoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEFGVEVSX1NUWUxFXzQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlQWZ0ZXJTdHlsZTQoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9FTlRJVFkpIHtcblxuICAgICAgICAvKlxuXHRcdCogZW50aXRpZXNcblx0XHQqL1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVFbnRpdHkoYyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IEJFRk9SRV9OVU1FUklDX0VOVElUWSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGVCZWZvcmVOdW1lcmljRW50aXR5KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9OQU1FRF9FTlRJVFkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5OYW1lZEVudGl0eShjKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fTlVNRVJJQ19FTlRJVFkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlSW5OdW1lcmljRW50aXR5KGMpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9IRVhfRU5USVRZKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZUluSGV4RW50aXR5KGMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY2JzLm9uZXJyb3IoRXJyb3IoXCJ1bmtub3duIF9zdGF0ZVwiKSwgdGhpcy5fc3RhdGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faW5kZXgrKztcbiAgICB9XG5cbiAgICB0aGlzLl9jbGVhbnVwKCk7XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcnVubmluZyA9IGZhbHNlO1xufTtcblRva2VuaXplci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5fcnVubmluZyA9IHRydWU7XG5cbiAgICBpZiAodGhpcy5faW5kZXggPCB0aGlzLl9idWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9lbmRlZCkge1xuICAgICAgICB0aGlzLl9maW5pc2goKTtcbiAgICB9XG59O1xuXG5Ub2tlbml6ZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGNodW5rKSB7XG4gICAgaWYgKHRoaXMuX2VuZGVkKSB0aGlzLl9jYnMub25lcnJvcihFcnJvcihcIi5lbmQoKSBhZnRlciBkb25lIVwiKSk7XG4gICAgaWYgKGNodW5rKSB0aGlzLndyaXRlKGNodW5rKTtcblxuICAgIHRoaXMuX2VuZGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9ydW5uaW5nKSB0aGlzLl9maW5pc2goKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2ZpbmlzaCA9IGZ1bmN0aW9uKCkge1xuICAgIC8vaWYgdGhlcmUgaXMgcmVtYWluaW5nIGRhdGEsIGVtaXQgaXQgaW4gYSByZWFzb25hYmxlIHdheVxuICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9jYnMub25lbmQoKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2hhbmRsZVRyYWlsaW5nRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBkYXRhID0gdGhpcy5fYnVmZmVyLnN1YnN0cih0aGlzLl9zZWN0aW9uU3RhcnQpO1xuXG4gICAgaWYgKFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gSU5fQ0RBVEEgfHxcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IEFGVEVSX0NEQVRBXzEgfHxcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IEFGVEVSX0NEQVRBXzJcbiAgICApIHtcbiAgICAgICAgdGhpcy5fY2JzLm9uY2RhdGEoZGF0YSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IElOX0NPTU1FTlQgfHxcbiAgICAgICAgdGhpcy5fc3RhdGUgPT09IEFGVEVSX0NPTU1FTlRfMSB8fFxuICAgICAgICB0aGlzLl9zdGF0ZSA9PT0gQUZURVJfQ09NTUVOVF8yXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmNvbW1lbnQoZGF0YSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLl9zdGF0ZSA9PT0gSU5fTkFNRURfRU5USVRZICYmICF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgIHRoaXMuX3BhcnNlTGVnYWN5RW50aXR5KCk7XG4gICAgICAgIGlmICh0aGlzLl9zZWN0aW9uU3RhcnQgPCB0aGlzLl9pbmRleCkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB0aGlzLl9iYXNlU3RhdGU7XG4gICAgICAgICAgICB0aGlzLl9oYW5kbGVUcmFpbGluZ0RhdGEoKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09IElOX05VTUVSSUNfRU5USVRZICYmICF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMiwgMTApO1xuICAgICAgICBpZiAodGhpcy5fc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuX3N0YXRlID09PSBJTl9IRVhfRU5USVRZICYmICF0aGlzLl94bWxNb2RlKSB7XG4gICAgICAgIHRoaXMuX2RlY29kZU51bWVyaWNFbnRpdHkoMywgMTYpO1xuICAgICAgICBpZiAodGhpcy5fc2VjdGlvblN0YXJ0IDwgdGhpcy5faW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gdGhpcy5fYmFzZVN0YXRlO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlVHJhaWxpbmdEYXRhKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gSU5fVEFHX05BTUUgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IEJFRk9SRV9BVFRSSUJVVEVfTkFNRSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gQkVGT1JFX0FUVFJJQlVURV9WQUxVRSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gQUZURVJfQVRUUklCVVRFX05BTUUgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IElOX0FUVFJJQlVURV9OQU1FICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBJTl9BVFRSSUJVVEVfVkFMVUVfU1EgJiZcbiAgICAgICAgdGhpcy5fc3RhdGUgIT09IElOX0FUVFJJQlVURV9WQUxVRV9EUSAmJlxuICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gSU5fQVRUUklCVVRFX1ZBTFVFX05RICYmXG4gICAgICAgIHRoaXMuX3N0YXRlICE9PSBJTl9DTE9TSU5HX1RBR19OQU1FXG4gICAgKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbnRleHQoZGF0YSk7XG4gICAgfVxuICAgIC8vZWxzZSwgaWdub3JlIHJlbWFpbmluZyBkYXRhXG4gICAgLy9UT0RPIGFkZCBhIHdheSB0byByZW1vdmUgY3VycmVudCB0YWdcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpIHtcbiAgICBUb2tlbml6ZXIuY2FsbChcbiAgICAgICAgdGhpcyxcbiAgICAgICAgeyB4bWxNb2RlOiB0aGlzLl94bWxNb2RlLCBkZWNvZGVFbnRpdGllczogdGhpcy5fZGVjb2RlRW50aXRpZXMgfSxcbiAgICAgICAgdGhpcy5fY2JzXG4gICAgKTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuZ2V0QWJzb2x1dGVJbmRleCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9idWZmZXJPZmZzZXQgKyB0aGlzLl9pbmRleDtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2dldFNlY3Rpb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fYnVmZmVyLnN1YnN0cmluZyh0aGlzLl9zZWN0aW9uU3RhcnQsIHRoaXMuX2luZGV4KTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2VtaXRUb2tlbiA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB0aGlzLl9jYnNbbmFtZV0odGhpcy5fZ2V0U2VjdGlvbigpKTtcbiAgICB0aGlzLl9zZWN0aW9uU3RhcnQgPSAtMTtcbn07XG5cblRva2VuaXplci5wcm90b3R5cGUuX2VtaXRQYXJ0aWFsID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodGhpcy5fYmFzZVN0YXRlICE9PSBURVhUKSB7XG4gICAgICAgIHRoaXMuX2Nicy5vbmF0dHJpYmRhdGEodmFsdWUpOyAvL1RPRE8gaW1wbGVtZW50IHRoZSBuZXcgZXZlbnRcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jYnMub250ZXh0KHZhbHVlKTtcbiAgICB9XG59O1xuIiwidmFyIEVsZW1lbnRUeXBlID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xuXG52YXIgcmVfd2hpdGVzcGFjZSA9IC9cXHMrL2c7XG52YXIgTm9kZVByb3RvdHlwZSA9IHJlcXVpcmUoXCIuL2xpYi9ub2RlXCIpO1xudmFyIEVsZW1lbnRQcm90b3R5cGUgPSByZXF1aXJlKFwiLi9saWIvZWxlbWVudFwiKTtcblxuZnVuY3Rpb24gRG9tSGFuZGxlcihjYWxsYmFjaywgb3B0aW9ucywgZWxlbWVudENCKXtcblx0aWYodHlwZW9mIGNhbGxiYWNrID09PSBcIm9iamVjdFwiKXtcblx0XHRlbGVtZW50Q0IgPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMgPSBjYWxsYmFjaztcblx0XHRjYWxsYmFjayA9IG51bGw7XG5cdH0gZWxzZSBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gXCJmdW5jdGlvblwiKXtcblx0XHRlbGVtZW50Q0IgPSBvcHRpb25zO1xuXHRcdG9wdGlvbnMgPSBkZWZhdWx0T3B0cztcblx0fVxuXHR0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xuXHR0aGlzLl9vcHRpb25zID0gb3B0aW9ucyB8fCBkZWZhdWx0T3B0cztcblx0dGhpcy5fZWxlbWVudENCID0gZWxlbWVudENCO1xuXHR0aGlzLmRvbSA9IFtdO1xuXHR0aGlzLl9kb25lID0gZmFsc2U7XG5cdHRoaXMuX3RhZ1N0YWNrID0gW107XG5cdHRoaXMuX3BhcnNlciA9IHRoaXMuX3BhcnNlciB8fCBudWxsO1xufVxuXG4vL2RlZmF1bHQgb3B0aW9uc1xudmFyIGRlZmF1bHRPcHRzID0ge1xuXHRub3JtYWxpemVXaGl0ZXNwYWNlOiBmYWxzZSwgLy9SZXBsYWNlIGFsbCB3aGl0ZXNwYWNlIHdpdGggc2luZ2xlIHNwYWNlc1xuXHR3aXRoU3RhcnRJbmRpY2VzOiBmYWxzZSwgLy9BZGQgc3RhcnRJbmRleCBwcm9wZXJ0aWVzIHRvIG5vZGVzXG5cdHdpdGhFbmRJbmRpY2VzOiBmYWxzZSwgLy9BZGQgZW5kSW5kZXggcHJvcGVydGllcyB0byBub2Rlc1xufTtcblxuRG9tSGFuZGxlci5wcm90b3R5cGUub25wYXJzZXJpbml0ID0gZnVuY3Rpb24ocGFyc2VyKXtcblx0dGhpcy5fcGFyc2VyID0gcGFyc2VyO1xufTtcblxuLy9SZXNldHMgdGhlIGhhbmRsZXIgYmFjayB0byBzdGFydGluZyBzdGF0ZVxuRG9tSGFuZGxlci5wcm90b3R5cGUub25yZXNldCA9IGZ1bmN0aW9uKCl7XG5cdERvbUhhbmRsZXIuY2FsbCh0aGlzLCB0aGlzLl9jYWxsYmFjaywgdGhpcy5fb3B0aW9ucywgdGhpcy5fZWxlbWVudENCKTtcbn07XG5cbi8vU2lnbmFscyB0aGUgaGFuZGxlciB0aGF0IHBhcnNpbmcgaXMgZG9uZVxuRG9tSGFuZGxlci5wcm90b3R5cGUub25lbmQgPSBmdW5jdGlvbigpe1xuXHRpZih0aGlzLl9kb25lKSByZXR1cm47XG5cdHRoaXMuX2RvbmUgPSB0cnVlO1xuXHR0aGlzLl9wYXJzZXIgPSBudWxsO1xuXHR0aGlzLl9oYW5kbGVDYWxsYmFjayhudWxsKTtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLl9oYW5kbGVDYWxsYmFjayA9XG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbmVycm9yID0gZnVuY3Rpb24oZXJyb3Ipe1xuXHRpZih0eXBlb2YgdGhpcy5fY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0dGhpcy5fY2FsbGJhY2soZXJyb3IsIHRoaXMuZG9tKTtcblx0fSBlbHNlIHtcblx0XHRpZihlcnJvcikgdGhyb3cgZXJyb3I7XG5cdH1cbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9uY2xvc2V0YWcgPSBmdW5jdGlvbigpe1xuXHQvL2lmKHRoaXMuX3RhZ1N0YWNrLnBvcCgpLm5hbWUgIT09IG5hbWUpIHRoaXMuX2hhbmRsZUNhbGxiYWNrKEVycm9yKFwiVGFnbmFtZSBkaWRuJ3QgbWF0Y2ghXCIpKTtcblx0XG5cdHZhciBlbGVtID0gdGhpcy5fdGFnU3RhY2sucG9wKCk7XG5cblx0aWYodGhpcy5fb3B0aW9ucy53aXRoRW5kSW5kaWNlcyAmJiBlbGVtKXtcblx0XHRlbGVtLmVuZEluZGV4ID0gdGhpcy5fcGFyc2VyLmVuZEluZGV4O1xuXHR9XG5cblx0aWYodGhpcy5fZWxlbWVudENCKSB0aGlzLl9lbGVtZW50Q0IoZWxlbSk7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5fY3JlYXRlRG9tRWxlbWVudCA9IGZ1bmN0aW9uKHByb3BlcnRpZXMpe1xuXHRpZiAoIXRoaXMuX29wdGlvbnMud2l0aERvbUx2bDEpIHJldHVybiBwcm9wZXJ0aWVzO1xuXG5cdHZhciBlbGVtZW50O1xuXHRpZiAocHJvcGVydGllcy50eXBlID09PSBcInRhZ1wiKSB7XG5cdFx0ZWxlbWVudCA9IE9iamVjdC5jcmVhdGUoRWxlbWVudFByb3RvdHlwZSk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbWVudCA9IE9iamVjdC5jcmVhdGUoTm9kZVByb3RvdHlwZSk7XG5cdH1cblxuXHRmb3IgKHZhciBrZXkgaW4gcHJvcGVydGllcykge1xuXHRcdGlmIChwcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdGVsZW1lbnRba2V5XSA9IHByb3BlcnRpZXNba2V5XTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudDtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLl9hZGREb21FbGVtZW50ID0gZnVuY3Rpb24oZWxlbWVudCl7XG5cdHZhciBwYXJlbnQgPSB0aGlzLl90YWdTdGFja1t0aGlzLl90YWdTdGFjay5sZW5ndGggLSAxXTtcblx0dmFyIHNpYmxpbmdzID0gcGFyZW50ID8gcGFyZW50LmNoaWxkcmVuIDogdGhpcy5kb207XG5cdHZhciBwcmV2aW91c1NpYmxpbmcgPSBzaWJsaW5nc1tzaWJsaW5ncy5sZW5ndGggLSAxXTtcblxuXHRlbGVtZW50Lm5leHQgPSBudWxsO1xuXG5cdGlmKHRoaXMuX29wdGlvbnMud2l0aFN0YXJ0SW5kaWNlcyl7XG5cdFx0ZWxlbWVudC5zdGFydEluZGV4ID0gdGhpcy5fcGFyc2VyLnN0YXJ0SW5kZXg7XG5cdH1cblx0aWYodGhpcy5fb3B0aW9ucy53aXRoRW5kSW5kaWNlcyl7XG5cdFx0ZWxlbWVudC5lbmRJbmRleCA9IHRoaXMuX3BhcnNlci5lbmRJbmRleDtcblx0fVxuXG5cdGlmKHByZXZpb3VzU2libGluZyl7XG5cdFx0ZWxlbWVudC5wcmV2ID0gcHJldmlvdXNTaWJsaW5nO1xuXHRcdHByZXZpb3VzU2libGluZy5uZXh0ID0gZWxlbWVudDtcblx0fSBlbHNlIHtcblx0XHRlbGVtZW50LnByZXYgPSBudWxsO1xuXHR9XG5cblx0c2libGluZ3MucHVzaChlbGVtZW50KTtcblx0ZWxlbWVudC5wYXJlbnQgPSBwYXJlbnQgfHwgbnVsbDtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9ub3BlbnRhZyA9IGZ1bmN0aW9uKG5hbWUsIGF0dHJpYnMpe1xuXHR2YXIgcHJvcGVydGllcyA9IHtcblx0XHR0eXBlOiBuYW1lID09PSBcInNjcmlwdFwiID8gRWxlbWVudFR5cGUuU2NyaXB0IDogbmFtZSA9PT0gXCJzdHlsZVwiID8gRWxlbWVudFR5cGUuU3R5bGUgOiBFbGVtZW50VHlwZS5UYWcsXG5cdFx0bmFtZTogbmFtZSxcblx0XHRhdHRyaWJzOiBhdHRyaWJzLFxuXHRcdGNoaWxkcmVuOiBbXVxuXHR9O1xuXG5cdHZhciBlbGVtZW50ID0gdGhpcy5fY3JlYXRlRG9tRWxlbWVudChwcm9wZXJ0aWVzKTtcblxuXHR0aGlzLl9hZGREb21FbGVtZW50KGVsZW1lbnQpO1xuXG5cdHRoaXMuX3RhZ1N0YWNrLnB1c2goZWxlbWVudCk7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbnRleHQgPSBmdW5jdGlvbihkYXRhKXtcblx0Ly90aGUgaWdub3JlV2hpdGVzcGFjZSBpcyBvZmZpY2lhbGx5IGRyb3BwZWQsIGJ1dCBmb3Igbm93LFxuXHQvL2l0J3MgYW4gYWxpYXMgZm9yIG5vcm1hbGl6ZVdoaXRlc3BhY2Vcblx0dmFyIG5vcm1hbGl6ZSA9IHRoaXMuX29wdGlvbnMubm9ybWFsaXplV2hpdGVzcGFjZSB8fCB0aGlzLl9vcHRpb25zLmlnbm9yZVdoaXRlc3BhY2U7XG5cblx0dmFyIGxhc3RUYWc7XG5cblx0aWYoIXRoaXMuX3RhZ1N0YWNrLmxlbmd0aCAmJiB0aGlzLmRvbS5sZW5ndGggJiYgKGxhc3RUYWcgPSB0aGlzLmRvbVt0aGlzLmRvbS5sZW5ndGgtMV0pLnR5cGUgPT09IEVsZW1lbnRUeXBlLlRleHQpe1xuXHRcdGlmKG5vcm1hbGl6ZSl7XG5cdFx0XHRsYXN0VGFnLmRhdGEgPSAobGFzdFRhZy5kYXRhICsgZGF0YSkucmVwbGFjZShyZV93aGl0ZXNwYWNlLCBcIiBcIik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxhc3RUYWcuZGF0YSArPSBkYXRhO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRpZihcblx0XHRcdHRoaXMuX3RhZ1N0YWNrLmxlbmd0aCAmJlxuXHRcdFx0KGxhc3RUYWcgPSB0aGlzLl90YWdTdGFja1t0aGlzLl90YWdTdGFjay5sZW5ndGggLSAxXSkgJiZcblx0XHRcdChsYXN0VGFnID0gbGFzdFRhZy5jaGlsZHJlbltsYXN0VGFnLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuXHRcdFx0bGFzdFRhZy50eXBlID09PSBFbGVtZW50VHlwZS5UZXh0XG5cdFx0KXtcblx0XHRcdGlmKG5vcm1hbGl6ZSl7XG5cdFx0XHRcdGxhc3RUYWcuZGF0YSA9IChsYXN0VGFnLmRhdGEgKyBkYXRhKS5yZXBsYWNlKHJlX3doaXRlc3BhY2UsIFwiIFwiKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxhc3RUYWcuZGF0YSArPSBkYXRhO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZihub3JtYWxpemUpe1xuXHRcdFx0XHRkYXRhID0gZGF0YS5yZXBsYWNlKHJlX3doaXRlc3BhY2UsIFwiIFwiKTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzLl9jcmVhdGVEb21FbGVtZW50KHtcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0dHlwZTogRWxlbWVudFR5cGUuVGV4dFxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuX2FkZERvbUVsZW1lbnQoZWxlbWVudCk7XG5cdFx0fVxuXHR9XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbmNvbW1lbnQgPSBmdW5jdGlvbihkYXRhKXtcblx0dmFyIGxhc3RUYWcgPSB0aGlzLl90YWdTdGFja1t0aGlzLl90YWdTdGFjay5sZW5ndGggLSAxXTtcblxuXHRpZihsYXN0VGFnICYmIGxhc3RUYWcudHlwZSA9PT0gRWxlbWVudFR5cGUuQ29tbWVudCl7XG5cdFx0bGFzdFRhZy5kYXRhICs9IGRhdGE7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHByb3BlcnRpZXMgPSB7XG5cdFx0ZGF0YTogZGF0YSxcblx0XHR0eXBlOiBFbGVtZW50VHlwZS5Db21tZW50XG5cdH07XG5cblx0dmFyIGVsZW1lbnQgPSB0aGlzLl9jcmVhdGVEb21FbGVtZW50KHByb3BlcnRpZXMpO1xuXG5cdHRoaXMuX2FkZERvbUVsZW1lbnQoZWxlbWVudCk7XG5cdHRoaXMuX3RhZ1N0YWNrLnB1c2goZWxlbWVudCk7XG59O1xuXG5Eb21IYW5kbGVyLnByb3RvdHlwZS5vbmNkYXRhc3RhcnQgPSBmdW5jdGlvbigpe1xuXHR2YXIgcHJvcGVydGllcyA9IHtcblx0XHRjaGlsZHJlbjogW3tcblx0XHRcdGRhdGE6IFwiXCIsXG5cdFx0XHR0eXBlOiBFbGVtZW50VHlwZS5UZXh0XG5cdFx0fV0sXG5cdFx0dHlwZTogRWxlbWVudFR5cGUuQ0RBVEFcblx0fTtcblxuXHR2YXIgZWxlbWVudCA9IHRoaXMuX2NyZWF0ZURvbUVsZW1lbnQocHJvcGVydGllcyk7XG5cblx0dGhpcy5fYWRkRG9tRWxlbWVudChlbGVtZW50KTtcblx0dGhpcy5fdGFnU3RhY2sucHVzaChlbGVtZW50KTtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9uY29tbWVudGVuZCA9IERvbUhhbmRsZXIucHJvdG90eXBlLm9uY2RhdGFlbmQgPSBmdW5jdGlvbigpe1xuXHR0aGlzLl90YWdTdGFjay5wb3AoKTtcbn07XG5cbkRvbUhhbmRsZXIucHJvdG90eXBlLm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uID0gZnVuY3Rpb24obmFtZSwgZGF0YSl7XG5cdHZhciBlbGVtZW50ID0gdGhpcy5fY3JlYXRlRG9tRWxlbWVudCh7XG5cdFx0bmFtZTogbmFtZSxcblx0XHRkYXRhOiBkYXRhLFxuXHRcdHR5cGU6IEVsZW1lbnRUeXBlLkRpcmVjdGl2ZVxuXHR9KTtcblxuXHR0aGlzLl9hZGREb21FbGVtZW50KGVsZW1lbnQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEb21IYW5kbGVyO1xuIiwiLy8gVGhpcyBvYmplY3Qgd2lsbCBiZSB1c2VkIGFzIHRoZSBwcm90b3R5cGUgZm9yIE5vZGVzIHdoZW4gY3JlYXRpbmcgYVxuLy8gRE9NLUxldmVsLTEtY29tcGxpYW50IHN0cnVjdHVyZS5cbnZhciBOb2RlUHJvdG90eXBlID0gbW9kdWxlLmV4cG9ydHMgPSB7XG5cdGdldCBmaXJzdENoaWxkKCkge1xuXHRcdHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG5cdFx0cmV0dXJuIGNoaWxkcmVuICYmIGNoaWxkcmVuWzBdIHx8IG51bGw7XG5cdH0sXG5cdGdldCBsYXN0Q2hpbGQoKSB7XG5cdFx0dmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbjtcblx0XHRyZXR1cm4gY2hpbGRyZW4gJiYgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gfHwgbnVsbDtcblx0fSxcblx0Z2V0IG5vZGVUeXBlKCkge1xuXHRcdHJldHVybiBub2RlVHlwZXNbdGhpcy50eXBlXSB8fCBub2RlVHlwZXMuZWxlbWVudDtcblx0fVxufTtcblxudmFyIGRvbUx2bDEgPSB7XG5cdHRhZ05hbWU6IFwibmFtZVwiLFxuXHRjaGlsZE5vZGVzOiBcImNoaWxkcmVuXCIsXG5cdHBhcmVudE5vZGU6IFwicGFyZW50XCIsXG5cdHByZXZpb3VzU2libGluZzogXCJwcmV2XCIsXG5cdG5leHRTaWJsaW5nOiBcIm5leHRcIixcblx0bm9kZVZhbHVlOiBcImRhdGFcIlxufTtcblxudmFyIG5vZGVUeXBlcyA9IHtcblx0ZWxlbWVudDogMSxcblx0dGV4dDogMyxcblx0Y2RhdGE6IDQsXG5cdGNvbW1lbnQ6IDhcbn07XG5cbk9iamVjdC5rZXlzKGRvbUx2bDEpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdHZhciBzaG9ydGhhbmQgPSBkb21MdmwxW2tleV07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOb2RlUHJvdG90eXBlLCBrZXksIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXNbc2hvcnRoYW5kXSB8fCBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbih2YWwpIHtcblx0XHRcdHRoaXNbc2hvcnRoYW5kXSA9IHZhbDtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHR9KTtcbn0pO1xuIiwidmFyIERvbVV0aWxzID0gbW9kdWxlLmV4cG9ydHM7XG5cbltcblx0cmVxdWlyZShcIi4vbGliL3N0cmluZ2lmeVwiKSxcblx0cmVxdWlyZShcIi4vbGliL3RyYXZlcnNhbFwiKSxcblx0cmVxdWlyZShcIi4vbGliL21hbmlwdWxhdGlvblwiKSxcblx0cmVxdWlyZShcIi4vbGliL3F1ZXJ5aW5nXCIpLFxuXHRyZXF1aXJlKFwiLi9saWIvbGVnYWN5XCIpLFxuXHRyZXF1aXJlKFwiLi9saWIvaGVscGVyc1wiKVxuXS5mb3JFYWNoKGZ1bmN0aW9uKGV4dCl7XG5cdE9iamVjdC5rZXlzKGV4dCkuZm9yRWFjaChmdW5jdGlvbihrZXkpe1xuXHRcdERvbVV0aWxzW2tleV0gPSBleHRba2V5XS5iaW5kKERvbVV0aWxzKTtcblx0fSk7XG59KTtcbiIsIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGVudGl0aWVzX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2VudGl0aWVzLmpzb25cIikpO1xudmFyIGxlZ2FjeV9qc29uXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbWFwcy9sZWdhY3kuanNvblwiKSk7XG52YXIgeG1sX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL3htbC5qc29uXCIpKTtcbnZhciBkZWNvZGVfY29kZXBvaW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vZGVjb2RlX2NvZGVwb2ludFwiKSk7XG5leHBvcnRzLmRlY29kZVhNTCA9IGdldFN0cmljdERlY29kZXIoeG1sX2pzb25fMS5kZWZhdWx0KTtcbmV4cG9ydHMuZGVjb2RlSFRNTFN0cmljdCA9IGdldFN0cmljdERlY29kZXIoZW50aXRpZXNfanNvbl8xLmRlZmF1bHQpO1xuZnVuY3Rpb24gZ2V0U3RyaWN0RGVjb2RlcihtYXApIHtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1hcCkuam9pbihcInxcIik7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihtYXApO1xuICAgIGtleXMgKz0gXCJ8I1t4WF1bXFxcXGRhLWZBLUZdK3wjXFxcXGQrXCI7XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMgKyBcIik7XCIsIFwiZ1wiKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShyZSwgcmVwbGFjZSk7IH07XG59XG52YXIgc29ydGVyID0gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIChhIDwgYiA/IDEgOiAtMSk7IH07XG5leHBvcnRzLmRlY29kZUhUTUwgPSAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBsZWdhY3kgPSBPYmplY3Qua2V5cyhsZWdhY3lfanNvbl8xLmRlZmF1bHQpLnNvcnQoc29ydGVyKTtcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudGl0aWVzX2pzb25fMS5kZWZhdWx0KS5zb3J0KHNvcnRlcik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobGVnYWN5W2pdID09PSBrZXlzW2ldKSB7XG4gICAgICAgICAgICBrZXlzW2ldICs9IFwiOz9cIjtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGtleXNbaV0gKz0gXCI7XCI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHJlID0gbmV3IFJlZ0V4cChcIiYoPzpcIiArIGtleXMuam9pbihcInxcIikgKyBcInwjW3hYXVtcXFxcZGEtZkEtRl0rOz98I1xcXFxkKzs/KVwiLCBcImdcIik7XG4gICAgdmFyIHJlcGxhY2UgPSBnZXRSZXBsYWNlcihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG4gICAgZnVuY3Rpb24gcmVwbGFjZXIoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuc3Vic3RyKC0xKSAhPT0gXCI7XCIpXG4gICAgICAgICAgICBzdHIgKz0gXCI7XCI7XG4gICAgICAgIHJldHVybiByZXBsYWNlKHN0cik7XG4gICAgfVxuICAgIC8vVE9ETyBjb25zaWRlciBjcmVhdGluZyBhIG1lcmdlZCBtYXBcbiAgICByZXR1cm4gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHN0cikucmVwbGFjZShyZSwgcmVwbGFjZXIpO1xuICAgIH07XG59KSgpO1xuZnVuY3Rpb24gZ2V0UmVwbGFjZXIobWFwKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gICAgICAgIGlmIChzdHIuY2hhckF0KDEpID09PSBcIiNcIikge1xuICAgICAgICAgICAgaWYgKHN0ci5jaGFyQXQoMikgPT09IFwiWFwiIHx8IHN0ci5jaGFyQXQoMikgPT09IFwieFwiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZV9jb2RlcG9pbnRfMS5kZWZhdWx0KHBhcnNlSW50KHN0ci5zdWJzdHIoMyksIDE2KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVjb2RlX2NvZGVwb2ludF8xLmRlZmF1bHQocGFyc2VJbnQoc3RyLnN1YnN0cigyKSwgMTApKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwW3N0ci5zbGljZSgxLCAtMSldO1xuICAgIH07XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4bWxfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMveG1sLmpzb25cIikpO1xudmFyIGludmVyc2VYTUwgPSBnZXRJbnZlcnNlT2JqKHhtbF9qc29uXzEuZGVmYXVsdCk7XG52YXIgeG1sUmVwbGFjZXIgPSBnZXRJbnZlcnNlUmVwbGFjZXIoaW52ZXJzZVhNTCk7XG5leHBvcnRzLmVuY29kZVhNTCA9IGdldEludmVyc2UoaW52ZXJzZVhNTCwgeG1sUmVwbGFjZXIpO1xudmFyIGVudGl0aWVzX2pzb25fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9tYXBzL2VudGl0aWVzLmpzb25cIikpO1xudmFyIGludmVyc2VIVE1MID0gZ2V0SW52ZXJzZU9iaihlbnRpdGllc19qc29uXzEuZGVmYXVsdCk7XG52YXIgaHRtbFJlcGxhY2VyID0gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2VIVE1MKTtcbmV4cG9ydHMuZW5jb2RlSFRNTCA9IGdldEludmVyc2UoaW52ZXJzZUhUTUwsIGh0bWxSZXBsYWNlcik7XG5mdW5jdGlvbiBnZXRJbnZlcnNlT2JqKG9iaikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopXG4gICAgICAgIC5zb3J0KClcbiAgICAgICAgLnJlZHVjZShmdW5jdGlvbiAoaW52ZXJzZSwgbmFtZSkge1xuICAgICAgICBpbnZlcnNlW29ialtuYW1lXV0gPSBcIiZcIiArIG5hbWUgKyBcIjtcIjtcbiAgICAgICAgcmV0dXJuIGludmVyc2U7XG4gICAgfSwge30pO1xufVxuZnVuY3Rpb24gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2UpIHtcbiAgICB2YXIgc2luZ2xlID0gW107XG4gICAgdmFyIG11bHRpcGxlID0gW107XG4gICAgT2JqZWN0LmtleXMoaW52ZXJzZSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICByZXR1cm4gay5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gLy8gQWRkIHZhbHVlIHRvIHNpbmdsZSBhcnJheVxuICAgICAgICAgICAgICAgIHNpbmdsZS5wdXNoKFwiXFxcXFwiICsgaylcbiAgICAgICAgICAgIDogLy8gQWRkIHZhbHVlIHRvIG11bHRpcGxlIGFycmF5XG4gICAgICAgICAgICAgICAgbXVsdGlwbGUucHVzaChrKTtcbiAgICB9KTtcbiAgICAvL1RPRE8gYWRkIHJhbmdlc1xuICAgIG11bHRpcGxlLnVuc2hpZnQoXCJbXCIgKyBzaW5nbGUuam9pbihcIlwiKSArIFwiXVwiKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChtdWx0aXBsZS5qb2luKFwifFwiKSwgXCJnXCIpO1xufVxudmFyIHJlTm9uQVNDSUkgPSAvW15cXDAtXFx4N0ZdL2c7XG52YXIgcmVBc3RyYWxTeW1ib2xzID0gL1tcXHVEODAwLVxcdURCRkZdW1xcdURDMDAtXFx1REZGRl0vZztcbmZ1bmN0aW9uIHNpbmdsZUNoYXJSZXBsYWNlcihjKSB7XG4gICAgcmV0dXJuIFwiJiN4XCIgKyBjXG4gICAgICAgIC5jaGFyQ29kZUF0KDApXG4gICAgICAgIC50b1N0cmluZygxNilcbiAgICAgICAgLnRvVXBwZXJDYXNlKCkgKyBcIjtcIjtcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGFzdHJhbFJlcGxhY2VyKGMsIF8pIHtcbiAgICAvLyBodHRwOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nI3N1cnJvZ2F0ZS1mb3JtdWxhZVxuICAgIHZhciBoaWdoID0gYy5jaGFyQ29kZUF0KDApO1xuICAgIHZhciBsb3cgPSBjLmNoYXJDb2RlQXQoMSk7XG4gICAgdmFyIGNvZGVQb2ludCA9IChoaWdoIC0gMHhkODAwKSAqIDB4NDAwICsgbG93IC0gMHhkYzAwICsgMHgxMDAwMDtcbiAgICByZXR1cm4gXCImI3hcIiArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArIFwiO1wiO1xufVxuZnVuY3Rpb24gZ2V0SW52ZXJzZShpbnZlcnNlLCByZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICByZXR1cm4gZGF0YVxuICAgICAgICAgICAgLnJlcGxhY2UocmUsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBpbnZlcnNlW25hbWVdOyB9KVxuICAgICAgICAgICAgLnJlcGxhY2UocmVBc3RyYWxTeW1ib2xzLCBhc3RyYWxSZXBsYWNlcilcbiAgICAgICAgICAgIC5yZXBsYWNlKHJlTm9uQVNDSUksIHNpbmdsZUNoYXJSZXBsYWNlcik7XG4gICAgfTtcbn1cbnZhciByZVhtbENoYXJzID0gZ2V0SW52ZXJzZVJlcGxhY2VyKGludmVyc2VYTUwpO1xuZnVuY3Rpb24gZXNjYXBlKGRhdGEpIHtcbiAgICByZXR1cm4gZGF0YVxuICAgICAgICAucmVwbGFjZShyZVhtbENoYXJzLCBzaW5nbGVDaGFyUmVwbGFjZXIpXG4gICAgICAgIC5yZXBsYWNlKHJlQXN0cmFsU3ltYm9scywgYXN0cmFsUmVwbGFjZXIpXG4gICAgICAgIC5yZXBsYWNlKHJlTm9uQVNDSUksIHNpbmdsZUNoYXJSZXBsYWNlcik7XG59XG5leHBvcnRzLmVzY2FwZSA9IGVzY2FwZTtcbiIsIm1vZHVsZS5leHBvcnRzID0gU3RyZWFtO1xuXG52YXIgUGFyc2VyID0gcmVxdWlyZShcIi4vUGFyc2VyLmpzXCIpO1xudmFyIFdyaXRhYmxlU3RyZWFtID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKS5Xcml0YWJsZTtcbnZhciBTdHJpbmdEZWNvZGVyID0gcmVxdWlyZShcInN0cmluZ19kZWNvZGVyXCIpLlN0cmluZ0RlY29kZXI7XG52YXIgQnVmZmVyID0gcmVxdWlyZShcImJ1ZmZlclwiKS5CdWZmZXI7XG5cbmZ1bmN0aW9uIFN0cmVhbShjYnMsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGFyc2VyID0gKHRoaXMuX3BhcnNlciA9IG5ldyBQYXJzZXIoY2JzLCBvcHRpb25zKSk7XG4gICAgdmFyIGRlY29kZXIgPSAodGhpcy5fZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKCkpO1xuXG4gICAgV3JpdGFibGVTdHJlYW0uY2FsbCh0aGlzLCB7IGRlY29kZVN0cmluZ3M6IGZhbHNlIH0pO1xuXG4gICAgdGhpcy5vbmNlKFwiZmluaXNoXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICBwYXJzZXIuZW5kKGRlY29kZXIuZW5kKCkpO1xuICAgIH0pO1xufVxuXG5yZXF1aXJlKFwiaW5oZXJpdHNcIikoU3RyZWFtLCBXcml0YWJsZVN0cmVhbSk7XG5cblN0cmVhbS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICAgIGlmIChjaHVuayBpbnN0YW5jZW9mIEJ1ZmZlcikgY2h1bmsgPSB0aGlzLl9kZWNvZGVyLndyaXRlKGNodW5rKTtcbiAgICB0aGlzLl9wYXJzZXIud3JpdGUoY2h1bmspO1xuICAgIGNiKCk7XG59O1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzO1xuXG52YXIgX2h0bWxBdHRyaWJ1dGVzVG9SZWFjdCA9IHJlcXVpcmUoJy4vaHRtbEF0dHJpYnV0ZXNUb1JlYWN0Jyk7XG5cbnZhciBfaHRtbEF0dHJpYnV0ZXNUb1JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h0bWxBdHRyaWJ1dGVzVG9SZWFjdCk7XG5cbnZhciBfaW5saW5lU3R5bGVUb09iamVjdCA9IHJlcXVpcmUoJy4vaW5saW5lU3R5bGVUb09iamVjdCcpO1xuXG52YXIgX2lubGluZVN0eWxlVG9PYmplY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5saW5lU3R5bGVUb09iamVjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogR2VuZXJhdGVzIHByb3BzIGZvciBhIFJlYWN0IGVsZW1lbnQgZnJvbSBhbiBvYmplY3Qgb2YgSFRNTCBhdHRyaWJ1dGVzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJpYnV0ZXMgVGhlIEhUTUwgYXR0cmlidXRlc1xuICogQHBhcmFtIHtTdHJpbmd9IGtleSBUaGUga2V5IHRvIGdpdmUgdGhlIHJlYWN0IGVsZW1lbnRcbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzKGF0dHJpYnV0ZXMsIGtleSkge1xuXG4gIC8vIGdlbmVyYXRlIHByb3BzXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCAoMCwgX2h0bWxBdHRyaWJ1dGVzVG9SZWFjdDIuZGVmYXVsdCkoYXR0cmlidXRlcyksIHsga2V5OiBrZXkgfSk7XG5cbiAgLy8gaWYgdGhlcmUgaXMgYW4gaW5saW5lL3N0cmluZyBzdHlsZSBwcm9wIHRoZW4gY29udmVydCBpdCB0byBhIFJlYWN0IHN0eWxlIG9iamVjdFxuICAvLyBvdGhlcndpc2UsIGl0IGlzIGludmFsaWQgYW5kIG9taXR0ZWRcbiAgaWYgKHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ3N0cmluZycgfHwgcHJvcHMuc3R5bGUgaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICBwcm9wcy5zdHlsZSA9ICgwLCBfaW5saW5lU3R5bGVUb09iamVjdDIuZGVmYXVsdCkocHJvcHMuc3R5bGUpO1xuICB9IGVsc2Uge1xuICAgIGRlbGV0ZSBwcm9wcy5zdHlsZTtcbiAgfVxuXG4gIHJldHVybiBwcm9wcztcbn0iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWU7XG52YXIgVkFMSURfVEFHX1JFR0VYID0gL15bYS16QS1aXVthLXpBLVo6X1xcLlxcLVxcZF0qJC87XG5cbnZhciBuYW1lQ2FjaGUgPSB7fTtcblxuZnVuY3Rpb24gaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZSh0YWdOYW1lKSB7XG4gIGlmICghbmFtZUNhY2hlLmhhc093blByb3BlcnR5KHRhZ05hbWUpKSB7XG4gICAgbmFtZUNhY2hlW3RhZ05hbWVdID0gVkFMSURfVEFHX1JFR0VYLnRlc3QodGFnTmFtZSk7XG4gIH1cbiAgcmV0dXJuIG5hbWVDYWNoZVt0YWdOYW1lXTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJleHBvcnQgY29uc3QgcGFnaW5nU2l6ZSA9IDU7XG5leHBvcnQgY29uc3QgYXBpVXJsID0gcHJvY2Vzcy5lbnYuQVBJX1VSSTsiLCIvLyBAZmxvd1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGdsb2JhbFtrZXldID0gKGdsb2JhbFtrZXldIHx8IDApICsgMTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvT2JzZXJ2YWJsZS5qcycpLk9ic2VydmFibGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGRhdGEsIG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIG9wdHMgPSB7fTtcbiAgICBpZiAodHlwZW9mIG9wdHMgPT09ICdmdW5jdGlvbicpIG9wdHMgPSB7IGNtcDogb3B0cyB9O1xuICAgIHZhciBjeWNsZXMgPSAodHlwZW9mIG9wdHMuY3ljbGVzID09PSAnYm9vbGVhbicpID8gb3B0cy5jeWNsZXMgOiBmYWxzZTtcblxuICAgIHZhciBjbXAgPSBvcHRzLmNtcCAmJiAoZnVuY3Rpb24gKGYpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgICAgICB2YXIgYW9iaiA9IHsga2V5OiBhLCB2YWx1ZTogbm9kZVthXSB9O1xuICAgICAgICAgICAgICAgIHZhciBib2JqID0geyBrZXk6IGIsIHZhbHVlOiBub2RlW2JdIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGYoYW9iaiwgYm9iaik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH0pKG9wdHMuY21wKTtcblxuICAgIHZhciBzZWVuID0gW107XG4gICAgcmV0dXJuIChmdW5jdGlvbiBzdHJpbmdpZnkgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgJiYgbm9kZS50b0pTT04gJiYgdHlwZW9mIG5vZGUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBub2RlID0gbm9kZS50b0pTT04oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChub2RlID09PSB1bmRlZmluZWQpIHJldHVybjtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlID09ICdudW1iZXInKSByZXR1cm4gaXNGaW5pdGUobm9kZSkgPyAnJyArIG5vZGUgOiAnbnVsbCc7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSAhPT0gJ29iamVjdCcpIHJldHVybiBKU09OLnN0cmluZ2lmeShub2RlKTtcblxuICAgICAgICB2YXIgaSwgb3V0O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgICAgICAgb3V0ID0gJ1snO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSkgb3V0ICs9ICcsJztcbiAgICAgICAgICAgICAgICBvdXQgKz0gc3RyaW5naWZ5KG5vZGVbaV0pIHx8ICdudWxsJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXQgKyAnXSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobm9kZSA9PT0gbnVsbCkgcmV0dXJuICdudWxsJztcblxuICAgICAgICBpZiAoc2Vlbi5pbmRleE9mKG5vZGUpICE9PSAtMSkge1xuICAgICAgICAgICAgaWYgKGN5Y2xlcykgcmV0dXJuIEpTT04uc3RyaW5naWZ5KCdfX2N5Y2xlX18nKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0NvbnZlcnRpbmcgY2lyY3VsYXIgc3RydWN0dXJlIHRvIEpTT04nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWVuSW5kZXggPSBzZWVuLnB1c2gobm9kZSkgLSAxO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG5vZGUpLnNvcnQoY21wICYmIGNtcChub2RlKSk7XG4gICAgICAgIG91dCA9ICcnO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBzdHJpbmdpZnkobm9kZVtrZXldKTtcblxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAob3V0KSBvdXQgKz0gJywnO1xuICAgICAgICAgICAgb3V0ICs9IEpTT04uc3RyaW5naWZ5KGtleSkgKyAnOicgKyB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBzZWVuLnNwbGljZShzZWVuSW5kZXgsIDEpO1xuICAgICAgICByZXR1cm4gJ3snICsgb3V0ICsgJ30nO1xuICAgIH0pKGRhdGEpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuaHRtbHBhcnNlcjIgPSBleHBvcnRzLmNvbnZlcnROb2RlVG9FbGVtZW50ID0gZXhwb3J0cy5wcm9jZXNzTm9kZXMgPSB1bmRlZmluZWQ7XG5cbnZhciBfcHJvY2Vzc05vZGVzID0gcmVxdWlyZSgnLi9wcm9jZXNzTm9kZXMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwcm9jZXNzTm9kZXMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9jZXNzTm9kZXMpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2NvbnZlcnROb2RlVG9FbGVtZW50ID0gcmVxdWlyZSgnLi9jb252ZXJ0Tm9kZVRvRWxlbWVudCcpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NvbnZlcnROb2RlVG9FbGVtZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29udmVydE5vZGVUb0VsZW1lbnQpLmRlZmF1bHQ7XG4gIH1cbn0pO1xuXG52YXIgX2h0bWxwYXJzZXIgPSByZXF1aXJlKCdodG1scGFyc2VyMicpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2h0bWxwYXJzZXIyJywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaHRtbHBhcnNlcikuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfSHRtbFBhcnNlciA9IHJlcXVpcmUoJy4vSHRtbFBhcnNlcicpO1xuXG52YXIgX0h0bWxQYXJzZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSHRtbFBhcnNlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9IdG1sUGFyc2VyMi5kZWZhdWx0OyIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wcmludCA9IHByaW50O1xuXG52YXIgX3Zpc2l0b3IgPSByZXF1aXJlKFwiLi92aXNpdG9yXCIpO1xuXG52YXIgX2Jsb2NrU3RyaW5nID0gcmVxdWlyZShcIi4vYmxvY2tTdHJpbmdcIik7XG5cbi8qKlxuICogQ29udmVydHMgYW4gQVNUIGludG8gYSBzdHJpbmcsIHVzaW5nIG9uZSBzZXQgb2YgcmVhc29uYWJsZVxuICogZm9ybWF0dGluZyBydWxlcy5cbiAqL1xuZnVuY3Rpb24gcHJpbnQoYXN0KSB7XG4gIHJldHVybiAoMCwgX3Zpc2l0b3IudmlzaXQpKGFzdCwge1xuICAgIGxlYXZlOiBwcmludERvY0FTVFJlZHVjZXJcbiAgfSk7XG59IC8vIFRPRE86IHByb3ZpZGUgYmV0dGVyIHR5cGUgY292ZXJhZ2UgaW4gZnV0dXJlXG5cblxudmFyIHByaW50RG9jQVNUUmVkdWNlciA9IHtcbiAgTmFtZTogZnVuY3Rpb24gTmFtZShub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudmFsdWU7XG4gIH0sXG4gIFZhcmlhYmxlOiBmdW5jdGlvbiBWYXJpYWJsZShub2RlKSB7XG4gICAgcmV0dXJuICckJyArIG5vZGUubmFtZTtcbiAgfSxcbiAgLy8gRG9jdW1lbnRcbiAgRG9jdW1lbnQ6IGZ1bmN0aW9uIERvY3VtZW50KG5vZGUpIHtcbiAgICByZXR1cm4gam9pbihub2RlLmRlZmluaXRpb25zLCAnXFxuXFxuJykgKyAnXFxuJztcbiAgfSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uRGVmaW5pdGlvbihub2RlKSB7XG4gICAgdmFyIG9wID0gbm9kZS5vcGVyYXRpb247XG4gICAgdmFyIG5hbWUgPSBub2RlLm5hbWU7XG4gICAgdmFyIHZhckRlZnMgPSB3cmFwKCcoJywgam9pbihub2RlLnZhcmlhYmxlRGVmaW5pdGlvbnMsICcsICcpLCAnKScpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gam9pbihub2RlLmRpcmVjdGl2ZXMsICcgJyk7XG4gICAgdmFyIHNlbGVjdGlvblNldCA9IG5vZGUuc2VsZWN0aW9uU2V0OyAvLyBBbm9ueW1vdXMgcXVlcmllcyB3aXRoIG5vIGRpcmVjdGl2ZXMgb3IgdmFyaWFibGUgZGVmaW5pdGlvbnMgY2FuIHVzZVxuICAgIC8vIHRoZSBxdWVyeSBzaG9ydCBmb3JtLlxuXG4gICAgcmV0dXJuICFuYW1lICYmICFkaXJlY3RpdmVzICYmICF2YXJEZWZzICYmIG9wID09PSAncXVlcnknID8gc2VsZWN0aW9uU2V0IDogam9pbihbb3AsIGpvaW4oW25hbWUsIHZhckRlZnNdKSwgZGlyZWN0aXZlcywgc2VsZWN0aW9uU2V0XSwgJyAnKTtcbiAgfSxcbiAgVmFyaWFibGVEZWZpbml0aW9uOiBmdW5jdGlvbiBWYXJpYWJsZURlZmluaXRpb24oX3JlZikge1xuICAgIHZhciB2YXJpYWJsZSA9IF9yZWYudmFyaWFibGUsXG4gICAgICAgIHR5cGUgPSBfcmVmLnR5cGUsXG4gICAgICAgIGRlZmF1bHRWYWx1ZSA9IF9yZWYuZGVmYXVsdFZhbHVlLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZi5kaXJlY3RpdmVzO1xuICAgIHJldHVybiB2YXJpYWJsZSArICc6ICcgKyB0eXBlICsgd3JhcCgnID0gJywgZGVmYXVsdFZhbHVlKSArIHdyYXAoJyAnLCBqb2luKGRpcmVjdGl2ZXMsICcgJykpO1xuICB9LFxuICBTZWxlY3Rpb25TZXQ6IGZ1bmN0aW9uIFNlbGVjdGlvblNldChfcmVmMikge1xuICAgIHZhciBzZWxlY3Rpb25zID0gX3JlZjIuc2VsZWN0aW9ucztcbiAgICByZXR1cm4gYmxvY2soc2VsZWN0aW9ucyk7XG4gIH0sXG4gIEZpZWxkOiBmdW5jdGlvbiBGaWVsZChfcmVmMykge1xuICAgIHZhciBhbGlhcyA9IF9yZWYzLmFsaWFzLFxuICAgICAgICBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgYXJncyA9IF9yZWYzLmFyZ3VtZW50cyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzLmRpcmVjdGl2ZXMsXG4gICAgICAgIHNlbGVjdGlvblNldCA9IF9yZWYzLnNlbGVjdGlvblNldDtcbiAgICByZXR1cm4gam9pbihbd3JhcCgnJywgYWxpYXMsICc6ICcpICsgbmFtZSArIHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHNlbGVjdGlvblNldF0sICcgJyk7XG4gIH0sXG4gIEFyZ3VtZW50OiBmdW5jdGlvbiBBcmd1bWVudChfcmVmNCkge1xuICAgIHZhciBuYW1lID0gX3JlZjQubmFtZSxcbiAgICAgICAgdmFsdWUgPSBfcmVmNC52YWx1ZTtcbiAgICByZXR1cm4gbmFtZSArICc6ICcgKyB2YWx1ZTtcbiAgfSxcbiAgLy8gRnJhZ21lbnRzXG4gIEZyYWdtZW50U3ByZWFkOiBmdW5jdGlvbiBGcmFnbWVudFNwcmVhZChfcmVmNSkge1xuICAgIHZhciBuYW1lID0gX3JlZjUubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWY1LmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuICcuLi4nICsgbmFtZSArIHdyYXAoJyAnLCBqb2luKGRpcmVjdGl2ZXMsICcgJykpO1xuICB9LFxuICBJbmxpbmVGcmFnbWVudDogZnVuY3Rpb24gSW5saW5lRnJhZ21lbnQoX3JlZjYpIHtcbiAgICB2YXIgdHlwZUNvbmRpdGlvbiA9IF9yZWY2LnR5cGVDb25kaXRpb24sXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmNi5kaXJlY3RpdmVzLFxuICAgICAgICBzZWxlY3Rpb25TZXQgPSBfcmVmNi5zZWxlY3Rpb25TZXQ7XG4gICAgcmV0dXJuIGpvaW4oWycuLi4nLCB3cmFwKCdvbiAnLCB0eXBlQ29uZGl0aW9uKSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBzZWxlY3Rpb25TZXRdLCAnICcpO1xuICB9LFxuICBGcmFnbWVudERlZmluaXRpb246IGZ1bmN0aW9uIEZyYWdtZW50RGVmaW5pdGlvbihfcmVmNykge1xuICAgIHZhciBuYW1lID0gX3JlZjcubmFtZSxcbiAgICAgICAgdHlwZUNvbmRpdGlvbiA9IF9yZWY3LnR5cGVDb25kaXRpb24sXG4gICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnMgPSBfcmVmNy52YXJpYWJsZURlZmluaXRpb25zLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjcuZGlyZWN0aXZlcyxcbiAgICAgICAgc2VsZWN0aW9uU2V0ID0gX3JlZjcuc2VsZWN0aW9uU2V0O1xuICAgIHJldHVybiAoLy8gTm90ZTogZnJhZ21lbnQgdmFyaWFibGUgZGVmaW5pdGlvbnMgYXJlIGV4cGVyaW1lbnRhbCBhbmQgbWF5IGJlIGNoYW5nZWRcbiAgICAgIC8vIG9yIHJlbW92ZWQgaW4gdGhlIGZ1dHVyZS5cbiAgICAgIFwiZnJhZ21lbnQgXCIuY29uY2F0KG5hbWUpLmNvbmNhdCh3cmFwKCcoJywgam9pbih2YXJpYWJsZURlZmluaXRpb25zLCAnLCAnKSwgJyknKSwgXCIgXCIpICsgXCJvbiBcIi5jb25jYXQodHlwZUNvbmRpdGlvbiwgXCIgXCIpLmNvbmNhdCh3cmFwKCcnLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksICcgJykpICsgc2VsZWN0aW9uU2V0XG4gICAgKTtcbiAgfSxcbiAgLy8gVmFsdWVcbiAgSW50VmFsdWU6IGZ1bmN0aW9uIEludFZhbHVlKF9yZWY4KSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjgudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBGbG9hdFZhbHVlOiBmdW5jdGlvbiBGbG9hdFZhbHVlKF9yZWY5KSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjkudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBTdHJpbmdWYWx1ZTogZnVuY3Rpb24gU3RyaW5nVmFsdWUoX3JlZjEwLCBrZXkpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmMTAudmFsdWUsXG4gICAgICAgIGlzQmxvY2tTdHJpbmcgPSBfcmVmMTAuYmxvY2s7XG4gICAgcmV0dXJuIGlzQmxvY2tTdHJpbmcgPyAoMCwgX2Jsb2NrU3RyaW5nLnByaW50QmxvY2tTdHJpbmcpKHZhbHVlLCBrZXkgPT09ICdkZXNjcmlwdGlvbicgPyAnJyA6ICcgICcpIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICB9LFxuICBCb29sZWFuVmFsdWU6IGZ1bmN0aW9uIEJvb2xlYW5WYWx1ZShfcmVmMTEpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmMTEudmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgfSxcbiAgTnVsbFZhbHVlOiBmdW5jdGlvbiBOdWxsVmFsdWUoKSB7XG4gICAgcmV0dXJuICdudWxsJztcbiAgfSxcbiAgRW51bVZhbHVlOiBmdW5jdGlvbiBFbnVtVmFsdWUoX3JlZjEyKSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjEyLnZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcbiAgTGlzdFZhbHVlOiBmdW5jdGlvbiBMaXN0VmFsdWUoX3JlZjEzKSB7XG4gICAgdmFyIHZhbHVlcyA9IF9yZWYxMy52YWx1ZXM7XG4gICAgcmV0dXJuICdbJyArIGpvaW4odmFsdWVzLCAnLCAnKSArICddJztcbiAgfSxcbiAgT2JqZWN0VmFsdWU6IGZ1bmN0aW9uIE9iamVjdFZhbHVlKF9yZWYxNCkge1xuICAgIHZhciBmaWVsZHMgPSBfcmVmMTQuZmllbGRzO1xuICAgIHJldHVybiAneycgKyBqb2luKGZpZWxkcywgJywgJykgKyAnfSc7XG4gIH0sXG4gIE9iamVjdEZpZWxkOiBmdW5jdGlvbiBPYmplY3RGaWVsZChfcmVmMTUpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYxNS5uYW1lLFxuICAgICAgICB2YWx1ZSA9IF9yZWYxNS52YWx1ZTtcbiAgICByZXR1cm4gbmFtZSArICc6ICcgKyB2YWx1ZTtcbiAgfSxcbiAgLy8gRGlyZWN0aXZlXG4gIERpcmVjdGl2ZTogZnVuY3Rpb24gRGlyZWN0aXZlKF9yZWYxNikge1xuICAgIHZhciBuYW1lID0gX3JlZjE2Lm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMTYuYXJndW1lbnRzO1xuICAgIHJldHVybiAnQCcgKyBuYW1lICsgd3JhcCgnKCcsIGpvaW4oYXJncywgJywgJyksICcpJyk7XG4gIH0sXG4gIC8vIFR5cGVcbiAgTmFtZWRUeXBlOiBmdW5jdGlvbiBOYW1lZFR5cGUoX3JlZjE3KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMTcubmFtZTtcbiAgICByZXR1cm4gbmFtZTtcbiAgfSxcbiAgTGlzdFR5cGU6IGZ1bmN0aW9uIExpc3RUeXBlKF9yZWYxOCkge1xuICAgIHZhciB0eXBlID0gX3JlZjE4LnR5cGU7XG4gICAgcmV0dXJuICdbJyArIHR5cGUgKyAnXSc7XG4gIH0sXG4gIE5vbk51bGxUeXBlOiBmdW5jdGlvbiBOb25OdWxsVHlwZShfcmVmMTkpIHtcbiAgICB2YXIgdHlwZSA9IF9yZWYxOS50eXBlO1xuICAgIHJldHVybiB0eXBlICsgJyEnO1xuICB9LFxuICAvLyBUeXBlIFN5c3RlbSBEZWZpbml0aW9uc1xuICBTY2hlbWFEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjIwKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBfcmVmMjAuZGlyZWN0aXZlcyxcbiAgICAgICAgb3BlcmF0aW9uVHlwZXMgPSBfcmVmMjAub3BlcmF0aW9uVHlwZXM7XG4gICAgcmV0dXJuIGpvaW4oWydzY2hlbWEnLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKG9wZXJhdGlvblR5cGVzKV0sICcgJyk7XG4gIH0pLFxuICBPcGVyYXRpb25UeXBlRGVmaW5pdGlvbjogZnVuY3Rpb24gT3BlcmF0aW9uVHlwZURlZmluaXRpb24oX3JlZjIxKSB7XG4gICAgdmFyIG9wZXJhdGlvbiA9IF9yZWYyMS5vcGVyYXRpb24sXG4gICAgICAgIHR5cGUgPSBfcmVmMjEudHlwZTtcbiAgICByZXR1cm4gb3BlcmF0aW9uICsgJzogJyArIHR5cGU7XG4gIH0sXG4gIFNjYWxhclR5cGVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjIyKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjIubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyMi5kaXJlY3RpdmVzO1xuICAgIHJldHVybiBqb2luKFsnc2NhbGFyJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKTtcbiAgfSksXG4gIE9iamVjdFR5cGVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjIzKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjMubmFtZSxcbiAgICAgICAgaW50ZXJmYWNlcyA9IF9yZWYyMy5pbnRlcmZhY2VzLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjIzLmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYyMy5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWyd0eXBlJywgbmFtZSwgd3JhcCgnaW1wbGVtZW50cyAnLCBqb2luKGludGVyZmFjZXMsICcgJiAnKSksIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgYmxvY2soZmllbGRzKV0sICcgJyk7XG4gIH0pLFxuICBGaWVsZERlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjQpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyNC5uYW1lLFxuICAgICAgICBhcmdzID0gX3JlZjI0LmFyZ3VtZW50cyxcbiAgICAgICAgdHlwZSA9IF9yZWYyNC50eXBlLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI0LmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIG5hbWUgKyAoaGFzTXVsdGlsaW5lSXRlbXMoYXJncykgPyB3cmFwKCcoXFxuJywgaW5kZW50KGpvaW4oYXJncywgJ1xcbicpKSwgJ1xcbiknKSA6IHdyYXAoJygnLCBqb2luKGFyZ3MsICcsICcpLCAnKScpKSArICc6ICcgKyB0eXBlICsgd3JhcCgnICcsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSk7XG4gIH0pLFxuICBJbnB1dFZhbHVlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYyNSkge1xuICAgIHZhciBuYW1lID0gX3JlZjI1Lm5hbWUsXG4gICAgICAgIHR5cGUgPSBfcmVmMjUudHlwZSxcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gX3JlZjI1LmRlZmF1bHRWYWx1ZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYyNS5kaXJlY3RpdmVzO1xuICAgIHJldHVybiBqb2luKFtuYW1lICsgJzogJyArIHR5cGUsIHdyYXAoJz0gJywgZGVmYXVsdFZhbHVlKSwgam9pbihkaXJlY3RpdmVzLCAnICcpXSwgJyAnKTtcbiAgfSksXG4gIEludGVyZmFjZVR5cGVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjI2KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMjYubmFtZSxcbiAgICAgICAgaW50ZXJmYWNlcyA9IF9yZWYyNi5pbnRlcmZhY2VzLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI2LmRpcmVjdGl2ZXMsXG4gICAgICAgIGZpZWxkcyA9IF9yZWYyNi5maWVsZHM7XG4gICAgcmV0dXJuIGpvaW4oWydpbnRlcmZhY2UnLCBuYW1lLCB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJyAmICcpKSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfSksXG4gIFVuaW9uVHlwZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjcpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyNy5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI3LmRpcmVjdGl2ZXMsXG4gICAgICAgIHR5cGVzID0gX3JlZjI3LnR5cGVzO1xuICAgIHJldHVybiBqb2luKFsndW5pb24nLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIHR5cGVzICYmIHR5cGVzLmxlbmd0aCAhPT0gMCA/ICc9ICcgKyBqb2luKHR5cGVzLCAnIHwgJykgOiAnJ10sICcgJyk7XG4gIH0pLFxuICBFbnVtVHlwZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjgpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyOC5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI4LmRpcmVjdGl2ZXMsXG4gICAgICAgIHZhbHVlcyA9IF9yZWYyOC52YWx1ZXM7XG4gICAgcmV0dXJuIGpvaW4oWydlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKTtcbiAgfSksXG4gIEVudW1WYWx1ZURlZmluaXRpb246IGFkZERlc2NyaXB0aW9uKGZ1bmN0aW9uIChfcmVmMjkpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYyOS5uYW1lLFxuICAgICAgICBkaXJlY3RpdmVzID0gX3JlZjI5LmRpcmVjdGl2ZXM7XG4gICAgcmV0dXJuIGpvaW4oW25hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKV0sICcgJyk7XG4gIH0pLFxuICBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uOiBhZGREZXNjcmlwdGlvbihmdW5jdGlvbiAoX3JlZjMwKSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzAubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzMC5kaXJlY3RpdmVzLFxuICAgICAgICBmaWVsZHMgPSBfcmVmMzAuZmllbGRzO1xuICAgIHJldHVybiBqb2luKFsnaW5wdXQnLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyksIGJsb2NrKGZpZWxkcyldLCAnICcpO1xuICB9KSxcbiAgRGlyZWN0aXZlRGVmaW5pdGlvbjogYWRkRGVzY3JpcHRpb24oZnVuY3Rpb24gKF9yZWYzMSkge1xuICAgIHZhciBuYW1lID0gX3JlZjMxLm5hbWUsXG4gICAgICAgIGFyZ3MgPSBfcmVmMzEuYXJndW1lbnRzLFxuICAgICAgICByZXBlYXRhYmxlID0gX3JlZjMxLnJlcGVhdGFibGUsXG4gICAgICAgIGxvY2F0aW9ucyA9IF9yZWYzMS5sb2NhdGlvbnM7XG4gICAgcmV0dXJuICdkaXJlY3RpdmUgQCcgKyBuYW1lICsgKGhhc011bHRpbGluZUl0ZW1zKGFyZ3MpID8gd3JhcCgnKFxcbicsIGluZGVudChqb2luKGFyZ3MsICdcXG4nKSksICdcXG4pJykgOiB3cmFwKCcoJywgam9pbihhcmdzLCAnLCAnKSwgJyknKSkgKyAocmVwZWF0YWJsZSA/ICcgcmVwZWF0YWJsZScgOiAnJykgKyAnIG9uICcgKyBqb2luKGxvY2F0aW9ucywgJyB8ICcpO1xuICB9KSxcbiAgU2NoZW1hRXh0ZW5zaW9uOiBmdW5jdGlvbiBTY2hlbWFFeHRlbnNpb24oX3JlZjMyKSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBfcmVmMzIuZGlyZWN0aXZlcyxcbiAgICAgICAgb3BlcmF0aW9uVHlwZXMgPSBfcmVmMzIub3BlcmF0aW9uVHlwZXM7XG4gICAgcmV0dXJuIGpvaW4oWydleHRlbmQgc2NoZW1hJywgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhvcGVyYXRpb25UeXBlcyldLCAnICcpO1xuICB9LFxuICBTY2FsYXJUeXBlRXh0ZW5zaW9uOiBmdW5jdGlvbiBTY2FsYXJUeXBlRXh0ZW5zaW9uKF9yZWYzMykge1xuICAgIHZhciBuYW1lID0gX3JlZjMzLm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzMuZGlyZWN0aXZlcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCBzY2FsYXInLCBuYW1lLCBqb2luKGRpcmVjdGl2ZXMsICcgJyldLCAnICcpO1xuICB9LFxuICBPYmplY3RUeXBlRXh0ZW5zaW9uOiBmdW5jdGlvbiBPYmplY3RUeXBlRXh0ZW5zaW9uKF9yZWYzNCkge1xuICAgIHZhciBuYW1lID0gX3JlZjM0Lm5hbWUsXG4gICAgICAgIGludGVyZmFjZXMgPSBfcmVmMzQuaW50ZXJmYWNlcyxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzNC5kaXJlY3RpdmVzLFxuICAgICAgICBmaWVsZHMgPSBfcmVmMzQuZmllbGRzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIHR5cGUnLCBuYW1lLCB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJyAmICcpKSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfSxcbiAgSW50ZXJmYWNlVHlwZUV4dGVuc2lvbjogZnVuY3Rpb24gSW50ZXJmYWNlVHlwZUV4dGVuc2lvbihfcmVmMzUpIHtcbiAgICB2YXIgbmFtZSA9IF9yZWYzNS5uYW1lLFxuICAgICAgICBpbnRlcmZhY2VzID0gX3JlZjM1LmludGVyZmFjZXMsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzUuZGlyZWN0aXZlcyxcbiAgICAgICAgZmllbGRzID0gX3JlZjM1LmZpZWxkcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCBpbnRlcmZhY2UnLCBuYW1lLCB3cmFwKCdpbXBsZW1lbnRzICcsIGpvaW4oaW50ZXJmYWNlcywgJyAmICcpKSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfSxcbiAgVW5pb25UeXBlRXh0ZW5zaW9uOiBmdW5jdGlvbiBVbmlvblR5cGVFeHRlbnNpb24oX3JlZjM2KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzYubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzNi5kaXJlY3RpdmVzLFxuICAgICAgICB0eXBlcyA9IF9yZWYzNi50eXBlcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCB1bmlvbicsIG5hbWUsIGpvaW4oZGlyZWN0aXZlcywgJyAnKSwgdHlwZXMgJiYgdHlwZXMubGVuZ3RoICE9PSAwID8gJz0gJyArIGpvaW4odHlwZXMsICcgfCAnKSA6ICcnXSwgJyAnKTtcbiAgfSxcbiAgRW51bVR5cGVFeHRlbnNpb246IGZ1bmN0aW9uIEVudW1UeXBlRXh0ZW5zaW9uKF9yZWYzNykge1xuICAgIHZhciBuYW1lID0gX3JlZjM3Lm5hbWUsXG4gICAgICAgIGRpcmVjdGl2ZXMgPSBfcmVmMzcuZGlyZWN0aXZlcyxcbiAgICAgICAgdmFsdWVzID0gX3JlZjM3LnZhbHVlcztcbiAgICByZXR1cm4gam9pbihbJ2V4dGVuZCBlbnVtJywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayh2YWx1ZXMpXSwgJyAnKTtcbiAgfSxcbiAgSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uOiBmdW5jdGlvbiBJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24oX3JlZjM4KSB7XG4gICAgdmFyIG5hbWUgPSBfcmVmMzgubmFtZSxcbiAgICAgICAgZGlyZWN0aXZlcyA9IF9yZWYzOC5kaXJlY3RpdmVzLFxuICAgICAgICBmaWVsZHMgPSBfcmVmMzguZmllbGRzO1xuICAgIHJldHVybiBqb2luKFsnZXh0ZW5kIGlucHV0JywgbmFtZSwgam9pbihkaXJlY3RpdmVzLCAnICcpLCBibG9jayhmaWVsZHMpXSwgJyAnKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gYWRkRGVzY3JpcHRpb24oY2IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgcmV0dXJuIGpvaW4oW25vZGUuZGVzY3JpcHRpb24sIGNiKG5vZGUpXSwgJ1xcbicpO1xuICB9O1xufVxuLyoqXG4gKiBHaXZlbiBtYXliZUFycmF5LCBwcmludCBhbiBlbXB0eSBzdHJpbmcgaWYgaXQgaXMgbnVsbCBvciBlbXB0eSwgb3RoZXJ3aXNlXG4gKiBwcmludCBhbGwgaXRlbXMgdG9nZXRoZXIgc2VwYXJhdGVkIGJ5IHNlcGFyYXRvciBpZiBwcm92aWRlZFxuICovXG5cblxuZnVuY3Rpb24gam9pbihtYXliZUFycmF5KSB7XG4gIHZhciBfbWF5YmVBcnJheSRmaWx0ZXIkam87XG5cbiAgdmFyIHNlcGFyYXRvciA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG4gIHJldHVybiAoX21heWJlQXJyYXkkZmlsdGVyJGpvID0gbWF5YmVBcnJheSA9PT0gbnVsbCB8fCBtYXliZUFycmF5ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBtYXliZUFycmF5LmZpbHRlcihmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiB4O1xuICB9KS5qb2luKHNlcGFyYXRvcikpICE9PSBudWxsICYmIF9tYXliZUFycmF5JGZpbHRlciRqbyAhPT0gdm9pZCAwID8gX21heWJlQXJyYXkkZmlsdGVyJGpvIDogJyc7XG59XG4vKipcbiAqIEdpdmVuIGFycmF5LCBwcmludCBlYWNoIGl0ZW0gb24gaXRzIG93biBsaW5lLCB3cmFwcGVkIGluIGFuXG4gKiBpbmRlbnRlZCBcInsgfVwiIGJsb2NrLlxuICovXG5cblxuZnVuY3Rpb24gYmxvY2soYXJyYXkpIHtcbiAgcmV0dXJuIGFycmF5ICYmIGFycmF5Lmxlbmd0aCAhPT0gMCA/ICd7XFxuJyArIGluZGVudChqb2luKGFycmF5LCAnXFxuJykpICsgJ1xcbn0nIDogJyc7XG59XG4vKipcbiAqIElmIG1heWJlU3RyaW5nIGlzIG5vdCBudWxsIG9yIGVtcHR5LCB0aGVuIHdyYXAgd2l0aCBzdGFydCBhbmQgZW5kLCBvdGhlcndpc2VcbiAqIHByaW50IGFuIGVtcHR5IHN0cmluZy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHdyYXAoc3RhcnQsIG1heWJlU3RyaW5nKSB7XG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICcnO1xuICByZXR1cm4gbWF5YmVTdHJpbmcgPyBzdGFydCArIG1heWJlU3RyaW5nICsgZW5kIDogJyc7XG59XG5cbmZ1bmN0aW9uIGluZGVudChtYXliZVN0cmluZykge1xuICByZXR1cm4gbWF5YmVTdHJpbmcgJiYgJyAgJyArIG1heWJlU3RyaW5nLnJlcGxhY2UoL1xcbi9nLCAnXFxuICAnKTtcbn1cblxuZnVuY3Rpb24gaXNNdWx0aWxpbmUoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuaW5kZXhPZignXFxuJykgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBoYXNNdWx0aWxpbmVJdGVtcyhtYXliZUFycmF5KSB7XG4gIHJldHVybiBtYXliZUFycmF5ICYmIG1heWJlQXJyYXkuc29tZShpc011bHRpbGluZSk7XG59XG4iLCIvLyBUaGlzIG9wdGlvbmFsIGNvZGUgaXMgdXNlZCB0byByZWdpc3RlciBhIHNlcnZpY2Ugd29ya2VyLlxuLy8gcmVnaXN0ZXIoKSBpcyBub3QgY2FsbGVkIGJ5IGRlZmF1bHQuXG5cbi8vIFRoaXMgbGV0cyB0aGUgYXBwIGxvYWQgZmFzdGVyIG9uIHN1YnNlcXVlbnQgdmlzaXRzIGluIHByb2R1Y3Rpb24sIGFuZCBnaXZlc1xuLy8gaXQgb2ZmbGluZSBjYXBhYmlsaXRpZXMuIEhvd2V2ZXIsIGl0IGFsc28gbWVhbnMgdGhhdCBkZXZlbG9wZXJzIChhbmQgdXNlcnMpXG4vLyB3aWxsIG9ubHkgc2VlIGRlcGxveWVkIHVwZGF0ZXMgb24gc3Vic2VxdWVudCB2aXNpdHMgdG8gYSBwYWdlLCBhZnRlciBhbGwgdGhlXG4vLyBleGlzdGluZyB0YWJzIG9wZW4gb24gdGhlIHBhZ2UgaGF2ZSBiZWVuIGNsb3NlZCwgc2luY2UgcHJldmlvdXNseSBjYWNoZWRcbi8vIHJlc291cmNlcyBhcmUgdXBkYXRlZCBpbiB0aGUgYmFja2dyb3VuZC5cblxuLy8gVG8gbGVhcm4gbW9yZSBhYm91dCB0aGUgYmVuZWZpdHMgb2YgdGhpcyBtb2RlbCBhbmQgaW5zdHJ1Y3Rpb25zIG9uIGhvdyB0b1xuLy8gb3B0LWluLCByZWFkIGh0dHBzOi8vYml0Lmx5L0NSQS1QV0FcblxuY29uc3QgaXNMb2NhbGhvc3QgPSBCb29sZWFuKFxuICB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUgPT09ICdsb2NhbGhvc3QnIHx8XG4gICAgLy8gWzo6MV0gaXMgdGhlIElQdjYgbG9jYWxob3N0IGFkZHJlc3MuXG4gICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnWzo6MV0nIHx8XG4gICAgLy8gMTI3LjAuMC4wLzggYXJlIGNvbnNpZGVyZWQgbG9jYWxob3N0IGZvciBJUHY0LlxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5tYXRjaChcbiAgICAgIC9eMTI3KD86XFwuKD86MjVbMC01XXwyWzAtNF1bMC05XXxbMDFdP1swLTldWzAtOV0/KSl7M30kL1xuICAgIClcbik7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlcihjb25maWcpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgJiYgJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgIC8vIFRoZSBVUkwgY29uc3RydWN0b3IgaXMgYXZhaWxhYmxlIGluIGFsbCBicm93c2VycyB0aGF0IHN1cHBvcnQgU1cuXG4gICAgY29uc3QgcHVibGljVXJsID0gbmV3IFVSTChwcm9jZXNzLmVudi5QVUJMSUNfVVJMLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgaWYgKHB1YmxpY1VybC5vcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICAgIC8vIE91ciBzZXJ2aWNlIHdvcmtlciB3b24ndCB3b3JrIGlmIFBVQkxJQ19VUkwgaXMgb24gYSBkaWZmZXJlbnQgb3JpZ2luXG4gICAgICAvLyBmcm9tIHdoYXQgb3VyIHBhZ2UgaXMgc2VydmVkIG9uLiBUaGlzIG1pZ2h0IGhhcHBlbiBpZiBhIENETiBpcyB1c2VkIHRvXG4gICAgICAvLyBzZXJ2ZSBhc3NldHM7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMjM3NFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgY29uc3Qgc3dVcmwgPSBgJHtwcm9jZXNzLmVudi5QVUJMSUNfVVJMfS9zZXJ2aWNlLXdvcmtlci5qc2A7XG5cbiAgICAgIGlmIChpc0xvY2FsaG9zdCkge1xuICAgICAgICAvLyBUaGlzIGlzIHJ1bm5pbmcgb24gbG9jYWxob3N0LiBMZXQncyBjaGVjayBpZiBhIHNlcnZpY2Ugd29ya2VyIHN0aWxsIGV4aXN0cyBvciBub3QuXG4gICAgICAgIGNoZWNrVmFsaWRTZXJ2aWNlV29ya2VyKHN3VXJsLCBjb25maWcpO1xuXG4gICAgICAgIC8vIEFkZCBzb21lIGFkZGl0aW9uYWwgbG9nZ2luZyB0byBsb2NhbGhvc3QsIHBvaW50aW5nIGRldmVsb3BlcnMgdG8gdGhlXG4gICAgICAgIC8vIHNlcnZpY2Ugd29ya2VyL1BXQSBkb2N1bWVudGF0aW9uLlxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKCgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICAgICdUaGlzIHdlYiBhcHAgaXMgYmVpbmcgc2VydmVkIGNhY2hlLWZpcnN0IGJ5IGEgc2VydmljZSAnICtcbiAgICAgICAgICAgICAgJ3dvcmtlci4gVG8gbGVhcm4gbW9yZSwgdmlzaXQgaHR0cHM6Ly9iaXQubHkvQ1JBLVBXQSdcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIElzIG5vdCBsb2NhbGhvc3QuIEp1c3QgcmVnaXN0ZXIgc2VydmljZSB3b3JrZXJcbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBjb25maWcpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyVmFsaWRTVyhzd1VybCwgY29uZmlnKSB7XG4gIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyXG4gICAgLnJlZ2lzdGVyKHN3VXJsKVxuICAgIC50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICByZWdpc3RyYXRpb24ub251cGRhdGVmb3VuZCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5zdGFsbGluZ1dvcmtlciA9IHJlZ2lzdHJhdGlvbi5pbnN0YWxsaW5nO1xuICAgICAgICBpZiAoaW5zdGFsbGluZ1dvcmtlciA9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGluc3RhbGxpbmdXb3JrZXIub25zdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICBpZiAoaW5zdGFsbGluZ1dvcmtlci5zdGF0ZSA9PT0gJ2luc3RhbGxlZCcpIHtcbiAgICAgICAgICAgIGlmIChuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5jb250cm9sbGVyKSB7XG4gICAgICAgICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIHRoZSB1cGRhdGVkIHByZWNhY2hlZCBjb250ZW50IGhhcyBiZWVuIGZldGNoZWQsXG4gICAgICAgICAgICAgIC8vIGJ1dCB0aGUgcHJldmlvdXMgc2VydmljZSB3b3JrZXIgd2lsbCBzdGlsbCBzZXJ2ZSB0aGUgb2xkZXJcbiAgICAgICAgICAgICAgLy8gY29udGVudCB1bnRpbCBhbGwgY2xpZW50IHRhYnMgYXJlIGNsb3NlZC5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgJ05ldyBjb250ZW50IGlzIGF2YWlsYWJsZSBhbmQgd2lsbCBiZSB1c2VkIHdoZW4gYWxsICcgK1xuICAgICAgICAgICAgICAgICAgJ3RhYnMgZm9yIHRoaXMgcGFnZSBhcmUgY2xvc2VkLiBTZWUgaHR0cHM6Ly9iaXQubHkvQ1JBLVBXQS4nXG4gICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBjYWxsYmFja1xuICAgICAgICAgICAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5vblVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5vblVwZGF0ZShyZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50LCBldmVyeXRoaW5nIGhhcyBiZWVuIHByZWNhY2hlZC5cbiAgICAgICAgICAgICAgLy8gSXQncyB0aGUgcGVyZmVjdCB0aW1lIHRvIGRpc3BsYXkgYVxuICAgICAgICAgICAgICAvLyBcIkNvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS5cIiBtZXNzYWdlLlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ29udGVudCBpcyBjYWNoZWQgZm9yIG9mZmxpbmUgdXNlLicpO1xuXG4gICAgICAgICAgICAgIC8vIEV4ZWN1dGUgY2FsbGJhY2tcbiAgICAgICAgICAgICAgaWYgKGNvbmZpZyAmJiBjb25maWcub25TdWNjZXNzKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLm9uU3VjY2VzcyhyZWdpc3RyYXRpb24pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9KVxuICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgc2VydmljZSB3b3JrZXIgcmVnaXN0cmF0aW9uOicsIGVycm9yKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIoc3dVcmwsIGNvbmZpZykge1xuICAvLyBDaGVjayBpZiB0aGUgc2VydmljZSB3b3JrZXIgY2FuIGJlIGZvdW5kLiBJZiBpdCBjYW4ndCByZWxvYWQgdGhlIHBhZ2UuXG4gIGZldGNoKHN3VXJsLCB7XG4gICAgaGVhZGVyczogeyAnU2VydmljZS1Xb3JrZXInOiAnc2NyaXB0JyB9LFxuICB9KVxuICAgIC50aGVuKHJlc3BvbnNlID0+IHtcbiAgICAgIC8vIEVuc3VyZSBzZXJ2aWNlIHdvcmtlciBleGlzdHMsIGFuZCB0aGF0IHdlIHJlYWxseSBhcmUgZ2V0dGluZyBhIEpTIGZpbGUuXG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDQgfHxcbiAgICAgICAgKGNvbnRlbnRUeXBlICE9IG51bGwgJiYgY29udGVudFR5cGUuaW5kZXhPZignamF2YXNjcmlwdCcpID09PSAtMSlcbiAgICAgICkge1xuICAgICAgICAvLyBObyBzZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvYmFibHkgYSBkaWZmZXJlbnQgYXBwLiBSZWxvYWQgdGhlIHBhZ2UuXG4gICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgICByZWdpc3RyYXRpb24udW5yZWdpc3RlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9jZWVkIGFzIG5vcm1hbC5cbiAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsLCBjb25maWcpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLmNhdGNoKCgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAnTm8gaW50ZXJuZXQgY29ubmVjdGlvbiBmb3VuZC4gQXBwIGlzIHJ1bm5pbmcgaW4gb2ZmbGluZSBtb2RlLidcbiAgICAgICk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICBpZiAoJ3NlcnZpY2VXb3JrZXInIGluIG5hdmlnYXRvcikge1xuICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5XG4gICAgICAudGhlbihyZWdpc3RyYXRpb24gPT4ge1xuICAgICAgICByZWdpc3RyYXRpb24udW5yZWdpc3RlcigpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IubWVzc2FnZSk7XG4gICAgICB9KTtcbiAgfVxufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO1xuZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGspe2RhPSExO2VhPW51bGw7YmEuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGw9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7ZmF8fChmYT0hMCxoYT1sKX19dmFyIGxhPW51bGwsbWE9bnVsbCxuYT1udWxsO1xuZnVuY3Rpb24gb2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PW5hKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9dmFyIHBhPW51bGwscWE9e307XG5mdW5jdGlvbiByYSgpe2lmKHBhKWZvcih2YXIgYSBpbiBxYSl7dmFyIGI9cWFbYV0sYz1wYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIXNhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO3NhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYodGEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7dGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHVhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiB1YShhLGIsYyl7aWYodmFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO3ZhW2FdPWI7d2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgc2E9W10sdGE9e30sdmE9e30sd2E9e307ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIXFhLmhhc093blByb3BlcnR5KGMpfHxxYVtjXSE9PWQpe2lmKHFhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtxYVtjXT1kO2I9ITB9fWImJnJhKCl9dmFyIHlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSx6YT1udWxsLEFhPW51bGwsQmE9bnVsbDtcbmZ1bmN0aW9uIENhKGEpe2lmKGE9bWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB6YSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPWxhKGIpLHphKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERhKGEpe0FhP0JhP0JhLnB1c2goYSk6QmE9W2FdOkFhPWF9ZnVuY3Rpb24gRWEoKXtpZihBYSl7dmFyIGE9QWEsYj1CYTtCYT1BYT1udWxsO0NhKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylDYShiW2FdKX19ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYShhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEhhKCl7fXZhciBJYT1GYSxKYT0hMSxLYT0hMTtmdW5jdGlvbiBMYSgpe2lmKG51bGwhPT1BYXx8bnVsbCE9PUJhKUhhKCksRWEoKX1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihLYSlyZXR1cm4gYShiLGMpO0thPSEwO3RyeXtyZXR1cm4gSWEoYSxiLGMpfWZpbmFsbHl7S2E9ITEsTGEoKX19dmFyIE5hPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxPYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFBhPXt9LFFhPXt9O1xuZnVuY3Rpb24gUmEoYSl7aWYoT2EuY2FsbChRYSxhKSlyZXR1cm4hMDtpZihPYS5jYWxsKFBhLGEpKXJldHVybiExO2lmKE5hLnRlc3QoYSkpcmV0dXJuIFFhW2FdPSEwO1BhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIFNhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8U2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgQz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtDW2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgVWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBWYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxcblZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkMueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgV2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoV2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG5mdW5jdGlvbiBYYShhLGIsYyxkKXt2YXIgZT1DLmhhc093blByb3BlcnR5KGIpP0NbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChUYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/UmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciBZYT0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRhPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZiPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamI9RT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGxiPUU/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLG1iPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBuYihhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bWImJmFbbWJdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24gb2IoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBwYihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhiOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGliOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGViOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYjp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamI6cmV0dXJuIHBiKGEudHlwZSk7Y2FzZSBsYjpyZXR1cm4gcGIoYS5yZW5kZXIpO2Nhc2Uga2I6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBwYihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxYihhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9cGIoYS50eXBlKTtjPW51bGw7ZCYmKGM9cGIoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxuZnVuY3Rpb24gcmIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHNiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB0YihhKXt2YXIgYj1zYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geGIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXRiKGEpKX1mdW5jdGlvbiB5YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9c2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiB6YihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1yYihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmWGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENiKGEsYil7QmIoYSxiKTt2YXIgYz1yYihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYihhLGIudHlwZSxyYihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEViKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gRmIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2IoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrcmIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEliKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpyYihjKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPXJiKGIudmFsdWUpLGQ9cmIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBMYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBNYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBOYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIE9iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9OYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBQYixRYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1NYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtQYj1QYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtQYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1QYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRiPXthbmltYXRpb25lbmQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFViPXt9LFZiPXt9O1xueWEmJihWYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdiKGEpe2lmKFViW2FdKXJldHVybiBVYlthXTtpZighVGJbYV0pcmV0dXJuIGE7dmFyIGI9VGJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmIpcmV0dXJuIFViW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGI9V2IoXCJhbmltYXRpb25lbmRcIiksWWI9V2IoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmI9V2IoXCJhbmltYXRpb25zdGFydFwiKSwkYj1XYihcInRyYW5zaXRpb25lbmRcIiksYWM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJjPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIGNjKGEpe3ZhciBiPWJjLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgTWFwLGJjLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGRjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGVjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoZGMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZGMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZmMoZSksYTtpZihmPT09ZClyZXR1cm4gZmMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoYyhhKXthPWdjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gaWMoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gamMoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGtjPW51bGw7XG5mdW5jdGlvbiBsYyhhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspb2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmb2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIG1jKGEpe251bGwhPT1hJiYoa2M9aWMoa2MsYSkpO2E9a2M7a2M9bnVsbDtpZihhKXtqYyhhLGxjKTtpZihrYyl0aHJvdyBFcnJvcih1KDk1KSk7aWYoZmEpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fX1cbmZ1bmN0aW9uIG5jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBvYyhhKXtpZigheWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIHBjPVtdO2Z1bmN0aW9uIHFjKGEpe2EudG9wTGV2ZWxUeXBlPW51bGw7YS5uYXRpdmVFdmVudD1udWxsO2EudGFyZ2V0SW5zdD1udWxsO2EuYW5jZXN0b3JzLmxlbmd0aD0wOzEwPnBjLmxlbmd0aCYmcGMucHVzaChhKX1cbmZ1bmN0aW9uIHJjKGEsYixjLGQpe2lmKHBjLmxlbmd0aCl7dmFyIGU9cGMucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9ZDtlLm5hdGl2ZUV2ZW50PWI7ZS50YXJnZXRJbnN0PWM7cmV0dXJuIGV9cmV0dXJue3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119fVxuZnVuY3Rpb24gc2MoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPXRjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPW5jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7dmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFnczswPT09YyYmKGd8PTY0KTtmb3IodmFyIGg9bnVsbCxrPTA7azxzYS5sZW5ndGg7aysrKXt2YXIgbD1zYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPVxuaWMoaCxsKSl9bWMoaCl9fWZ1bmN0aW9uIHVjKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6dmMoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOnZjKGIsXCJmb2N1c1wiLCEwKTt2YyhiLFwiYmx1clwiLCEwKTtjLnNldChcImJsdXJcIixudWxsKTtjLnNldChcImZvY3VzXCIsbnVsbCk7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOm9jKGEpJiZ2YyhiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5zZXQoYSxudWxsKX19XG52YXIgd2MseGMseWMsemM9ITEsQWM9W10sQmM9bnVsbCxDYz1udWxsLERjPW51bGwsRWM9bmV3IE1hcCxGYz1uZXcgTWFwLEdjPVtdLEhjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksSWM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gSmMoYSxiKXt2YXIgYz1jYyhiKTtIYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pO0ljLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSl9ZnVuY3Rpb24gS2MoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmUsY29udGFpbmVyOmR9fVxuZnVuY3Rpb24gTGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpCYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Q2M9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6RGM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOkVjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkZjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fWZ1bmN0aW9uIE1jKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9S2MoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9TmMoYiksbnVsbCE9PWImJnhjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIE9jKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBCYz1NYyhCYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gQ2M9TWMoQ2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIERjPU1jKERjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7RWMuc2V0KGYsTWMoRWMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLEZjLnNldChmLE1jKEZjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFBjKGEpe3ZhciBiPXRjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZGMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZWMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe3ljKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBRYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1OYyhiKTtudWxsIT09YyYmeGMoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIFNjKGEsYixjKXtRYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gVGMoKXtmb3IoemM9ITE7MDxBYy5sZW5ndGg7KXt2YXIgYT1BY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9TmMoYS5ibG9ja2VkT24pO251bGwhPT1hJiZ3YyhhKTticmVha312YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpBYy5zaGlmdCgpfW51bGwhPT1CYyYmUWMoQmMpJiYoQmM9bnVsbCk7bnVsbCE9PUNjJiZRYyhDYykmJihDYz1udWxsKTtudWxsIT09RGMmJlFjKERjKSYmKERjPW51bGwpO0VjLmZvckVhY2goU2MpO0ZjLmZvckVhY2goU2MpfWZ1bmN0aW9uIFVjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCx6Y3x8KHpjPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFRjKSkpfVxuZnVuY3Rpb24gVmMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gVWMoYixhKX1pZigwPEFjLmxlbmd0aCl7VWMoQWNbMF0sYSk7Zm9yKHZhciBjPTE7YzxBYy5sZW5ndGg7YysrKXt2YXIgZD1BY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUJjJiZVYyhCYyxhKTtudWxsIT09Q2MmJlVjKENjLGEpO251bGwhPT1EYyYmVWMoRGMsYSk7RWMuZm9yRWFjaChiKTtGYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxHYy5sZW5ndGg7YysrKWQ9R2NbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPEdjLmxlbmd0aCYmKGM9R2NbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUGMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZHYy5zaGlmdCgpfVxudmFyIFdjPXt9LFljPW5ldyBNYXAsWmM9bmV3IE1hcCwkYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixYYixcImFuaW1hdGlvbkVuZFwiLFliLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsWmIsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXG5cInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwkYixcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gYWQoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV0sZj1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtmPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpmLGNhcHR1cmVkOmYrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbZF0sZXZlbnRQcmlvcml0eTpifTtaYy5zZXQoZCxiKTtZYy5zZXQoZCxmKTtXY1tlXT1mfX1cbmFkKFwiYmx1ciBibHVyIGNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzIGZvY3VzIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksMCk7XG5hZChcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTthZCgkYywyKTtmb3IodmFyIGJkPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxjZD0wO2NkPGJkLmxlbmd0aDtjZCsrKVpjLnNldChiZFtjZF0sMCk7XG52YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBGKGEsYil7dmMoYixhLCExKX1mdW5jdGlvbiB2YyhhLGIsYyl7dmFyIGQ9WmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1kPzI6ZCl7Y2FzZSAwOmQ9Z2QuYmluZChudWxsLGIsMSxhKTticmVhaztjYXNlIDE6ZD1oZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2RlZmF1bHQ6ZD1pZC5iaW5kKG51bGwsYiwxLGEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7SmF8fEhhKCk7dmFyIGU9aWQsZj1KYTtKYT0hMDt0cnl7R2EoZSxhLGIsYyxkKX1maW5hbGx5eyhKYT1mKXx8TGEoKX19ZnVuY3Rpb24gaGQoYSxiLGMsZCl7ZWQoZGQsaWQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGlkKGEsYixjLGQpe2lmKGZkKWlmKDA8QWMubGVuZ3RoJiYtMTxIYy5pbmRleE9mKGEpKWE9S2MobnVsbCxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2V7dmFyIGU9UmMoYSxiLGMsZCk7aWYobnVsbD09PWUpTGMoYSxkKTtlbHNlIGlmKC0xPEhjLmluZGV4T2YoYSkpYT1LYyhlLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZSBpZighT2MoZSxhLGIsYyxkKSl7TGMoYSxkKTthPXJjKGEsZCxudWxsLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfX19fVxuZnVuY3Rpb24gUmMoYSxiLGMsZCl7Yz1uYyhkKTtjPXRjKGMpO2lmKG51bGwhPT1jKXt2YXIgZT1kYyhjKTtpZihudWxsPT09ZSljPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2M9ZWMoZSk7aWYobnVsbCE9PWMpcmV0dXJuIGM7Yz1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7Yz1udWxsfWVsc2UgZSE9PWMmJihjPW51bGwpfX1hPXJjKGEsZCxjLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfXJldHVybiBudWxsfVxudmFyIGpkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGtkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhqZCkuZm9yRWFjaChmdW5jdGlvbihhKXtrZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2pkW2JdPWpkW2FdfSl9KTtmdW5jdGlvbiBsZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8amQuaGFzT3duUHJvcGVydHkoYSkmJmpkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG1kKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPWxkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIG5kPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBvZChhLGIpe2lmKGIpe2lmKG5kW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gcGQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBxZD1NYi5odG1sO2Z1bmN0aW9uIHJkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWNjKGEpO2I9d2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspdWMoYltkXSxhLGMpfWZ1bmN0aW9uIHNkKCl7fVxuZnVuY3Rpb24gdGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIHVkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiB2ZChhLGIpe3ZhciBjPXVkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXVkKGMpfX1cbmZ1bmN0aW9uIHdkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/d2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIHhkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPXRkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPXRkKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24geWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgemQ9XCIkXCIsQWQ9XCIvJFwiLEJkPVwiJD9cIixDZD1cIiQhXCIsRGQ9bnVsbCxFZD1udWxsO2Z1bmN0aW9uIEZkKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIEdkKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgSGQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsSWQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIEpkKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gS2QoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09emR8fGM9PT1DZHx8Yz09PUJkKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09QWQmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBMZD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxNZD1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xkLE5kPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGQsT2Q9XCJfX3JlYWN0Q29udGFpbmVyZSRcIitMZDtcbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWFbTWRdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW09kXXx8Y1tNZF0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1LZChhKTtudWxsIT09YTspe2lmKGM9YVtNZF0pcmV0dXJuIGM7YT1LZChhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTmMoYSl7YT1hW01kXXx8YVtPZF07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIFBkKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIFFkKGEpe3JldHVybiBhW05kXXx8bnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWxhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxcbmIsdHlwZW9mIGMpKTtyZXR1cm4gY31mdW5jdGlvbiBUZChhLGIsYyl7aWYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFVkKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmQoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVRkKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspVGQoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBWZChhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFdkKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmQoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFhkKGEpe2pjKGEsVWQpfXZhciBZZD1udWxsLFpkPW51bGwsJGQ9bnVsbDtcbmZ1bmN0aW9uIGFlKCl7aWYoJGQpcmV0dXJuICRkO3ZhciBhLGI9WmQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gJGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBiZSgpe3JldHVybiEwfWZ1bmN0aW9uIGNlKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBHKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9iZTpjZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWNlO3JldHVybiB0aGlzfVxubihHLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWJlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWJlfSxpc1BlcnNpc3RlbnQ6Y2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Y2U7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtHLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkcuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7ZGUoYyk7cmV0dXJuIGN9O2RlKEcpO2Z1bmN0aW9uIGVlKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gZmUoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gZGUoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9ZWU7YS5yZWxlYXNlPWZlfXZhciBnZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaGU9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGllPVs5LDEzLDI3LDMyXSxqZT15YSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csa2U9bnVsbDt5YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoa2U9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBsZT15YSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWtlLG1lPXlhJiYoIWplfHxrZSYmODxrZSYmMTE+PWtlKSxuZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxvZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxwZT0hMTtcbmZ1bmN0aW9uIHFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09aWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiByZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBzZT0hMTtmdW5jdGlvbiB0ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcmUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3BlPSEwO3JldHVybiBuZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1uZSYmcGU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdWUoYSxiKXtpZihzZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhamUmJnFlKGEsYik/KGE9YWUoKSwkZD1aZD1ZZD1udWxsLHNlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBtZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgdmU9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihqZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1vZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1vZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9b2UuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIHNlP3FlKGEsYykmJihmPW9lLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9b2UuY29tcG9zaXRpb25TdGFydCk7Zj8obWUmJlwia29cIiE9PWMubG9jYWxlJiYoc2V8fGYhPT1vZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1vZS5jb21wb3NpdGlvbkVuZCYmc2UmJihlPWFlKCkpOihZZD1kLFpkPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LHNlPSEwKSksZj1nZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPXJlKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxYZChmKSxlPWYpOmU9bnVsbDsoYT1sZT90ZShhLGMpOnVlKGEsYykpPyhiPWhlLmdldFBvb2xlZChvZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWGQoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sd2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24geGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF3ZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgeWU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gemUoYSxiLGMpe2E9Ry5nZXRQb29sZWQoeWUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtEYShjKTtYZChhKTtyZXR1cm4gYX12YXIgQWU9bnVsbCxCZT1udWxsO2Z1bmN0aW9uIENlKGEpe21jKGEpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPVBkKGEpO2lmKHliKGIpKXJldHVybiBhfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEZlPSExO3lhJiYoRmU9b2MoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBHZSgpe0FlJiYoQWUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpLEJlPUFlPW51bGwpfWZ1bmN0aW9uIEhlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZEZShCZSkpaWYoYT16ZShCZSxhLG5jKGEpKSxKYSltYyhhKTtlbHNle0phPSEwO3RyeXtGYShDZSxhKX1maW5hbGx5e0phPSExLExhKCl9fX1mdW5jdGlvbiBJZShhLGIsYyl7XCJmb2N1c1wiPT09YT8oR2UoKSxBZT1iLEJlPWMsQWUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpKTpcImJsdXJcIj09PWEmJkdlKCl9ZnVuY3Rpb24gSmUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gRGUoQmUpfWZ1bmN0aW9uIEtlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gRGUoYil9ZnVuY3Rpb24gTGUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gRGUoYil9XG52YXIgTWU9e2V2ZW50VHlwZXM6eWUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpGZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/UGQoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1FZTtlbHNlIGlmKHhlKGUpKWlmKEZlKWc9TGU7ZWxzZXtnPUplO3ZhciBoPUllfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1LZSk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gemUoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxOZT1HLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksXG5PZT17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGUoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZVthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFFlKCl7cmV0dXJuIFBlfVxudmFyIFJlPTAsU2U9MCxUZT0hMSxVZT0hMSxWZT1OZS5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9UmU7UmU9YS5zY3JlZW5YO3JldHVybiBUZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFRlPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9U2U7U2U9YS5zY3JlZW5ZO3JldHVybiBVZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFVlPSEwLDApfX0pLFdlPVZlLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxYZT17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sWWU9e2V2ZW50VHlwZXM6WGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7Zj1kLndpbmRvdz09PWQ/ZDooZj1kLm93bmVyRG9jdW1lbnQpP2YuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT90YyhiKTpudWxsLG51bGwhPT1iKXt2YXIgaD1kYyhiKTtpZihiIT09aHx8NSE9PWIudGFnJiY2IT09Yi50YWcpYj1udWxsfX1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09XG5hKXt2YXIgaz1WZTt2YXIgbD1YZS5tb3VzZUxlYXZlO3ZhciBtPVhlLm1vdXNlRW50ZXI7dmFyIHA9XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWs9V2UsbD1YZS5wb2ludGVyTGVhdmUsbT1YZS5wb2ludGVyRW50ZXIscD1cInBvaW50ZXJcIjthPW51bGw9PWc/ZjpQZChnKTtmPW51bGw9PWI/ZjpQZChiKTtsPWsuZ2V0UG9vbGVkKGwsZyxjLGQpO2wudHlwZT1wK1wibGVhdmVcIjtsLnRhcmdldD1hO2wucmVsYXRlZFRhcmdldD1mO2M9ay5nZXRQb29sZWQobSxiLGMsZCk7Yy50eXBlPXArXCJlbnRlclwiO2MudGFyZ2V0PWY7Yy5yZWxhdGVkVGFyZ2V0PWE7ZD1nO3A9YjtpZihkJiZwKWE6e2s9ZDttPXA7Zz0wO2ZvcihhPWs7YTthPVJkKGEpKWcrKzthPTA7Zm9yKGI9bTtiO2I9UmQoYikpYSsrO2Zvcig7MDxnLWE7KWs9UmQoayksZy0tO2Zvcig7MDxhLWc7KW09UmQobSksYS0tO2Zvcig7Zy0tOyl7aWYoaz09PW18fGs9PT1tLmFsdGVybmF0ZSlicmVhayBhO1xuaz1SZChrKTttPVJkKG0pfWs9bnVsbH1lbHNlIGs9bnVsbDttPWs7Zm9yKGs9W107ZCYmZCE9PW07KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztrLnB1c2goZCk7ZD1SZChkKX1mb3IoZD1bXTtwJiZwIT09bTspe2c9cC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2QucHVzaChwKTtwPVJkKHApfWZvcihwPTA7cDxrLmxlbmd0aDtwKyspVmQoa1twXSxcImJ1YmJsZWRcIixsKTtmb3IocD1kLmxlbmd0aDswPHAtLTspVmQoZFtwXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuIDA9PT0oZSY2NCk/W2xdOltsLGNdfX07ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciAkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpaZSxhZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gYmYoYSxiKXtpZigkZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWFmLmNhbGwoYixjW2RdKXx8ISRlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgY2Y9eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWY9bnVsbCxmZj1udWxsLGdmPW51bGwsaGY9ITE7XG5mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhmfHxudWxsPT1lZnx8ZWYhPT10ZChjKSlyZXR1cm4gbnVsbDtjPWVmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJnlkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdmJiZiZihnZixjKT9udWxsOihnZj1jLGE9Ry5nZXRQb29sZWQoZGYuc2VsZWN0LGZmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWYsWGQoYSksYSl9XG52YXIga2Y9e2V2ZW50VHlwZXM6ZGYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUsZil7ZT1mfHwoZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpO2lmKCEoZj0hZSkpe2E6e2U9Y2MoZSk7Zj13YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGQoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZih4ZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZj1lLGZmPWIsZ2Y9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdmPWZmPWVmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGY9ITEsamYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2YpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBqZihjLGQpfXJldHVybiBudWxsfX0sbGY9Ry5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG1mPUcuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksbmY9TmUuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBvZihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBwZj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0scWY9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHJmPU5lLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1wZlthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/cWZbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29mKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29mKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksc2Y9VmUuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHRmPU5lLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlfSksdWY9Ry5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksdmY9VmUuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx3Zj17ZXZlbnRUeXBlczpXYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVljLmdldChhKTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9mKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1yZjticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9bmY7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1cblZlO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9c2Y7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT10ZjticmVhaztjYXNlIFhiOmNhc2UgWWI6Y2FzZSBaYjphPWxmO2JyZWFrO2Nhc2UgJGI6YT11ZjticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1OZTticmVhaztjYXNlIFwid2hlZWxcIjphPXZmO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9bWY7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1cbldlO2JyZWFrO2RlZmF1bHQ6YT1HfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WGQoYik7cmV0dXJuIGJ9fTtpZihwYSl0aHJvdyBFcnJvcih1KDEwMSkpO3BhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3JhKCk7dmFyIHhmPU5jO2xhPVFkO21hPXhmO25hPVBkO3hhKHtTaW1wbGVFdmVudFBsdWdpbjp3ZixFbnRlckxlYXZlRXZlbnRQbHVnaW46WWUsQ2hhbmdlRXZlbnRQbHVnaW46TWUsU2VsZWN0RXZlbnRQbHVnaW46a2YsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp2ZX0pO3ZhciB5Zj1bXSx6Zj0tMTtmdW5jdGlvbiBIKGEpezA+emZ8fChhLmN1cnJlbnQ9eWZbemZdLHlmW3pmXT1udWxsLHpmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3pmKys7eWZbemZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQWY9e30sSj17Y3VycmVudDpBZn0sSz17Y3VycmVudDohMX0sQmY9QWY7ZnVuY3Rpb24gQ2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBBZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBEZigpe0goSyk7SChKKX1mdW5jdGlvbiBFZihhLGIsYyl7aWYoSi5jdXJyZW50IT09QWYpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYik7SShLLGMpfWZ1bmN0aW9uIEZmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgscGIoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEdmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxBZjtCZj1KLmN1cnJlbnQ7SShKLGEpO0koSyxLLmN1cnJlbnQpO3JldHVybiEwfVxuZnVuY3Rpb24gSGYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYT1GZihhLGIsQmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKEspLEgoSiksSShKLGEpKTpIKEspO0koSyxjKX1cbnZhciBJZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxKZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssS2Y9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxMZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxNZj1yLnVuc3RhYmxlX25vdyxOZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLE9mPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksUGY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxRZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFJmPXIudW5zdGFibGVfTG93UHJpb3JpdHksU2Y9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksVGY9e30sVWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxWZj12b2lkIDAhPT1MZj9MZjpmdW5jdGlvbigpe30sV2Y9bnVsbCxYZj1udWxsLFlmPSExLFpmPU1mKCksJGY9MUU0PlpmP01mOmZ1bmN0aW9uKCl7cmV0dXJuIE1mKCktWmZ9O1xuZnVuY3Rpb24gYWcoKXtzd2l0Y2goTmYoKSl7Y2FzZSBPZjpyZXR1cm4gOTk7Y2FzZSBQZjpyZXR1cm4gOTg7Y2FzZSBRZjpyZXR1cm4gOTc7Y2FzZSBSZjpyZXR1cm4gOTY7Y2FzZSBTZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gYmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIE9mO2Nhc2UgOTg6cmV0dXJuIFBmO2Nhc2UgOTc6cmV0dXJuIFFmO2Nhc2UgOTY6cmV0dXJuIFJmO2Nhc2UgOTU6cmV0dXJuIFNmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGNnKGEsYil7YT1iZyhhKTtyZXR1cm4gSWYoYSxiKX1mdW5jdGlvbiBkZyhhLGIsYyl7YT1iZyhhKTtyZXR1cm4gSmYoYSxiLGMpfWZ1bmN0aW9uIGVnKGEpe251bGw9PT1XZj8oV2Y9W2FdLFhmPUpmKE9mLGZnKSk6V2YucHVzaChhKTtyZXR1cm4gVGZ9ZnVuY3Rpb24gZ2coKXtpZihudWxsIT09WGYpe3ZhciBhPVhmO1hmPW51bGw7S2YoYSl9ZmcoKX1cbmZ1bmN0aW9uIGZnKCl7aWYoIVlmJiZudWxsIT09V2Ype1lmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVdmO2NnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtXZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1XZiYmKFdmPVdmLnNsaWNlKGErMSkpLEpmKE9mLGdnKSxjO31maW5hbGx5e1lmPSExfX19ZnVuY3Rpb24gaGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gaWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIGpnPXtjdXJyZW50Om51bGx9LGtnPW51bGwsbGc9bnVsbCxtZz1udWxsO2Z1bmN0aW9uIG5nKCl7bWc9bGc9a2c9bnVsbH1cbmZ1bmN0aW9uIG9nKGEpe3ZhciBiPWpnLmN1cnJlbnQ7SChqZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBwZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBxZyhhLGIpe2tnPWE7bWc9bGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYocmc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gc2coYSxiKXtpZihtZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpbWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PWxnKXtpZihudWxsPT09a2cpdGhyb3cgRXJyb3IodSgzMDgpKTtsZz1iO2tnLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgbGc9bGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHRnPSExO2Z1bmN0aW9uIHVnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsYmFzZVF1ZXVlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxiYXNlUXVldWU6YS5iYXNlUXVldWUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gd2coYSxiKXthPXtleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfTtyZXR1cm4gYS5uZXh0PWF9ZnVuY3Rpb24geGcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZ2ZyhjLGEpO2E9YS51cGRhdGVRdWV1ZTtjPWEuYmFzZVF1ZXVlO251bGw9PT1jPyhhLmJhc2VRdWV1ZT1iLm5leHQ9YixiLm5leHQ9Yik6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpfVxuZnVuY3Rpb24gemcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt0Zz0hMTt2YXIgZj1lLmJhc2VRdWV1ZSxnPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWcpe2lmKG51bGwhPT1mKXt2YXIgaD1mLm5leHQ7Zi5uZXh0PWcubmV4dDtnLm5leHQ9aH1mPWc7ZS5zaGFyZWQucGVuZGluZz1udWxsO2g9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJihoPWgudXBkYXRlUXVldWUsbnVsbCE9PWgmJihoLmJhc2VRdWV1ZT1nKSl9aWYobnVsbCE9PWYpe2g9Zi5uZXh0O3ZhciBrPWUuYmFzZVN0YXRlLGw9MCxtPW51bGwscD1udWxsLHg9bnVsbDtpZihudWxsIT09aCl7dmFyIHo9aDtkb3tnPXouZXhwaXJhdGlvblRpbWU7aWYoZzxkKXt2YXIgY2E9e2V4cGlyYXRpb25UaW1lOnouZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT14PyhwPXg9XG5jYSxtPWspOng9eC5uZXh0PWNhO2c+bCYmKGw9Zyl9ZWxzZXtudWxsIT09eCYmKHg9eC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfSk7QWcoZyx6LnN1c3BlbnNlQ29uZmlnKTthOnt2YXIgRD1hLHQ9ejtnPWI7Y2E9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpEPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRCl7az1ELmNhbGwoY2EsayxnKTticmVhayBhfWs9RDticmVhayBhO2Nhc2UgMzpELmVmZmVjdFRhZz1ELmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6RD10LnBheWxvYWQ7Zz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgRD9ELmNhbGwoY2EsayxnKTpEO2lmKG51bGw9PT1nfHx2b2lkIDA9PT1nKWJyZWFrIGE7az1uKHt9LGssZyk7YnJlYWsgYTtjYXNlIDI6dGc9ITB9fW51bGwhPT16LmNhbGxiYWNrJiZcbihhLmVmZmVjdFRhZ3w9MzIsZz1lLmVmZmVjdHMsbnVsbD09PWc/ZS5lZmZlY3RzPVt6XTpnLnB1c2goeikpfXo9ei5uZXh0O2lmKG51bGw9PT16fHx6PT09aClpZihnPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWcpYnJlYWs7ZWxzZSB6PWYubmV4dD1nLm5leHQsZy5uZXh0PWgsZS5iYXNlUXVldWU9Zj1nLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKX1udWxsPT09eD9tPWs6eC5uZXh0PXA7ZS5iYXNlU3RhdGU9bTtlLmJhc2VRdWV1ZT14O0JnKGwpO2EuZXhwaXJhdGlvblRpbWU9bDthLm1lbW9pemVkU3RhdGU9a319XG5mdW5jdGlvbiBDZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWU7ZT1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkKXRocm93IEVycm9yKHUoMTkxLGQpKTtkLmNhbGwoZSl9fX12YXIgRGc9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsRWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gRmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5leHBpcmF0aW9uVGltZSYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEpnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9kYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2coKSxkPURnLnN1c3BlbnNlO1xuYz1IZyhjLGEsZCk7ZD13ZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3hnKGEsZCk7SWcoYSxjKX19O2Z1bmN0aW9uIEtnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWJmKGMsZCl8fCFiZihlLGYpOiEwfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3ZhciBkPSExLGU9QWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2coZik6KGU9TChiKT9CZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9DZihhLGUpOkFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Smc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZzt1ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnKGYpOihmPUwoYik/QmY6Si5jdXJyZW50LGUuY29udGV4dD1DZihhLGYpKTt6ZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksemcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBPZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBRZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gUmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9U2coYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVVnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVBnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9VmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVdnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGM9VWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRhOnJldHVybiBiPVZnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihPZyhiKXx8XG5uYihiKSlyZXR1cm4gYj1XZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtRZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoT2coYyl8fG5iKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtRZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoT2coZCl8fG5iKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtRZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIGNhKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCxtPWcseT1nPTAsQT1udWxsO251bGwhPT1tJiZ5PGgubGVuZ3RoO3krKyl7bS5pbmRleD55PyhBPW0sbT1udWxsKTpBPW0uc2libGluZzt2YXIgcT14KGUsbSxoW3ldLGspO2lmKG51bGw9PT1xKXtudWxsPT09bSYmKG09QSk7YnJlYWt9YSYmXG5tJiZudWxsPT09cS5hbHRlcm5hdGUmJmIoZSxtKTtnPWYocSxnLHkpO251bGw9PT10P2w9cTp0LnNpYmxpbmc9cTt0PXE7bT1BfWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7eTxoLmxlbmd0aDt5KyspbT1wKGUsaFt5XSxrKSxudWxsIT09bSYmKGc9ZihtLGcseSksbnVsbD09PXQ/bD1tOnQuc2libGluZz1tLHQ9bSk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3k8aC5sZW5ndGg7eSsrKUE9eihtLGUseSxoW3ldLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09QS5rZXk/eTpBLmtleSksZz1mKEEsZyx5KSxudWxsPT09dD9sPUE6dC5zaWJsaW5nPUEsdD1BKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEQoZSxnLGgsbCl7dmFyIGs9bmIoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspdGhyb3cgRXJyb3IodSgxNTApKTtoPWsuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09az1udWxsLHQ9Zyx5PWc9MCxBPW51bGwscT1oLm5leHQoKTtudWxsIT09dCYmIXEuZG9uZTt5KysscT1oLm5leHQoKSl7dC5pbmRleD55PyhBPXQsdD1udWxsKTpBPXQuc2libGluZzt2YXIgRD14KGUsdCxxLnZhbHVlLGwpO2lmKG51bGw9PT1EKXtudWxsPT09dCYmKHQ9QSk7YnJlYWt9YSYmdCYmbnVsbD09PUQuYWx0ZXJuYXRlJiZiKGUsdCk7Zz1mKEQsZyx5KTtudWxsPT09bT9rPUQ6bS5zaWJsaW5nPUQ7bT1EO3Q9QX1pZihxLmRvbmUpcmV0dXJuIGMoZSx0KSxrO2lmKG51bGw9PT10KXtmb3IoOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT1wKGUscS52YWx1ZSxsKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGt9Zm9yKHQ9ZChlLHQpOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT16KHQsZSx5LHEudmFsdWUsbCksbnVsbCE9PXEmJihhJiZudWxsIT09XG5xLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PXEua2V5P3k6cS5rZXkpLGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4ga31yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT1hYil7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxcbmsuc2libGluZyk7ZD1lKGssZi5wcm9wcyk7ZC5yZWY9UGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYj8oZD1XZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPVxuZC5zaWJsaW5nfWQ9VmcoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VGcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoT2coZikpcmV0dXJuIGNhKGEsZCxmLGgpO2lmKG5iKGYpKXJldHVybiBEKGEsZCxmLGgpO2wmJlFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBYZz1SZyghMCksWWc9UmcoITEpLFpnPXt9LCRnPXtjdXJyZW50OlpnfSxhaD17Y3VycmVudDpaZ30sYmg9e2N1cnJlbnQ6Wmd9O1xuZnVuY3Rpb24gY2goYSl7aWYoYT09PVpnKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZGgoYSxiKXtJKGJoLGIpO0koYWgsYSk7SSgkZyxaZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpPYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9T2IoYixhKX1IKCRnKTtJKCRnLGIpfWZ1bmN0aW9uIGVoKCl7SCgkZyk7SChhaCk7SChiaCl9ZnVuY3Rpb24gZmgoYSl7Y2goYmguY3VycmVudCk7dmFyIGI9Y2goJGcuY3VycmVudCk7dmFyIGM9T2IoYixhLnR5cGUpO2IhPT1jJiYoSShhaCxhKSxJKCRnLGMpKX1mdW5jdGlvbiBnaChhKXthaC5jdXJyZW50PT09YSYmKEgoJGcpLEgoYWgpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIGhoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PUJkfHxjLmRhdGE9PT1DZCkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiBpaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBqaD1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGtoPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGxoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsbWg9ITE7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIG5oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoISRlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7bGg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IuZXhwaXJhdGlvblRpbWU9MDtqaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP3BoOnFoO2E9YyhkLGUpO2lmKGIuZXhwaXJhdGlvblRpbWU9PT1saCl7Zj0wO2Rve2IuZXhwaXJhdGlvblRpbWU9MDtpZighKDI1PmYpKXRocm93IEVycm9yKHUoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7amguY3VycmVudD1yaDthPWMoZCxlKX13aGlsZShiLmV4cGlyYXRpb25UaW1lPT09bGgpfWpoLmN1cnJlbnQ9c2g7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtsaD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYoYil0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBhfVxuZnVuY3Rpb24gdGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gdWgoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIHZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gd2goYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsuZXhwaXJhdGlvblRpbWU7aWYobDxsaCl7dmFyIG09e2V4cGlyYXRpb25UaW1lOmsuZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1tLGY9ZCk6aD1oLm5leHQ9bTtsPk4uZXhwaXJhdGlvblRpbWUmJlxuKE4uZXhwaXJhdGlvblRpbWU9bCxCZyhsKSl9ZWxzZSBudWxsIT09aCYmKGg9aC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxBZyhsLGsuc3VzcGVuc2VDb25maWcpLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nOyRlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiB4aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7JGUoZixiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIHloKGEpe3ZhciBiPXRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOnZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEJoKCl7cmV0dXJuIHVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBDaChhLGIsYyxkKXt2YXIgZT10aCgpO04uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIERoKGEsYixjLGQpe3ZhciBlPXVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmgoZCxnLmRlcHMpKXtBaChiLGMsZixkKTtyZXR1cm59fU4uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIEVoKGEsYil7cmV0dXJuIENoKDUxNiw0LGEsYil9ZnVuY3Rpb24gRmgoYSxiKXtyZXR1cm4gRGgoNTE2LDQsYSxiKX1mdW5jdGlvbiBHaChhLGIpe3JldHVybiBEaCg0LDIsYSxiKX1cbmZ1bmN0aW9uIEhoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gSWgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBEaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gSmgoKXt9ZnVuY3Rpb24gS2goYSxiKXt0aCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIExoKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gTWgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gTmgoYSxiLGMpe3ZhciBkPWFnKCk7Y2coOTg+ZD85ODpkLGZ1bmN0aW9uKCl7YSghMCl9KTtjZyg5NzxkPzk3OmQsZnVuY3Rpb24oKXt2YXIgZD1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSghMSksYygpfWZpbmFsbHl7a2guc3VzcGVuc2U9ZH19KX1cbmZ1bmN0aW9uIHpoKGEsYixjKXt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT17ZXhwaXJhdGlvblRpbWU6ZCxzdXNwZW5zZUNvbmZpZzplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBmPWIucGVuZGluZztudWxsPT09Zj9lLm5leHQ9ZTooZS5uZXh0PWYubmV4dCxmLm5leHQ9ZSk7Yi5wZW5kaW5nPWU7Zj1hLmFsdGVybmF0ZTtpZihhPT09Tnx8bnVsbCE9PWYmJmY9PT1OKW1oPSEwLGUuZXhwaXJhdGlvblRpbWU9bGgsTi5leHBpcmF0aW9uVGltZT1saDtlbHNle2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWZ8fDA9PT1mLmV4cGlyYXRpb25UaW1lKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmVhZ2VyUmVkdWNlcj1mO2UuZWFnZXJTdGF0ZT1oO2lmKCRlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31JZyhhLFxuZCl9fVxudmFyIHNoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxwaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6S2gsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIENoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIENoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxcbmJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10aCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTp5aCx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eWgoYSksZD1jWzBdLGU9Y1sxXTtFaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9XG5jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXloKCExKSxjPWJbMF07Yj1iWzFdO3JldHVybltLaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxxaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOndoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB3aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz13aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbndoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxyaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOnhoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB4aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz14aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj14aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLFxuYixhKSxbYixhXSksY119fSxPaD1udWxsLFBoPW51bGwsUWg9ITE7ZnVuY3Rpb24gUmgoYSxiKXt2YXIgYz1TaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gVGgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFVoKGEpe2lmKFFoKXt2YXIgYj1QaDtpZihiKXt2YXIgYz1iO2lmKCFUaChhLGIpKXtiPUpkKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhVGgoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPUpkKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLFFoPSExLE9oPWF9fWZ1bmN0aW9uIFZoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtPaD1hfVxuZnVuY3Rpb24gV2goYSl7aWYoYSE9PU9oKXJldHVybiExO2lmKCFRaClyZXR1cm4gVmgoYSksUWg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFHZChiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9UGg7YjspUmgoYSxiKSxiPUpkKGIubmV4dFNpYmxpbmcpO1ZoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09QWQpe2lmKDA9PT1iKXtQaD1KZChhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT16ZCYmYyE9PUNkJiZjIT09QmR8fGIrK31hPWEubmV4dFNpYmxpbmd9UGg9bnVsbH19ZWxzZSBQaD1PaD9KZChhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9V2EuUmVhY3RDdXJyZW50T3duZXIscmc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1lnKGIsbnVsbCxjLGQpOlhnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtxZyhiLGUpO2Q9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpiZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1TZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmJmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHJnPSExLGU8Zik/KGIuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSwkaChhLGIsZikpOmRpKGEsYixjLGQsZil9ZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBkaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/QmY6Si5jdXJyZW50O2Y9Q2YoYixmKTtxZyhiLGUpO2M9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO3FnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxMZyhiLGMsZCksTmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCk7dGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9eDt6ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXRnfHxLZyhiLGMsaCxkLHgsayxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSx2ZyhhLGIpLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmlnKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCksdGc9ITEsaz1iLm1lbW9pemVkU3RhdGUsZy5zdGF0ZT1rLHpnKGIsZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09dGd8fEtnKGIsYyxoLGQsayx4LGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6XG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGdpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGdpKGEsYixjLGQsZSxmKXtlaShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmSGYoYixjLCExKSwkaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtZaC5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1YZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVhnKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJkhmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9FZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZFZihhLGIuY29udGV4dCwhMSk7ZGgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIGlpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24gamkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJlVoKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVlnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPVNnKGQsZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1jO3JldHVybiBkfWM9WGcoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9XG5jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1YZyhiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIGtpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTtwZyhhLnJldHVybixiKX1mdW5jdGlvbiBsaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJmtpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKWtpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aGgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtsaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1oaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9bGkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmxpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmQmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1TZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBuaSxvaSxwaSxxaTtcbm5pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7Y2goJGcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpiKGcsZik7ZD16YihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2IoZyxmKTtkPUdiKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9c2QpfW9kKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmcmQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hO2lmKGIudXBkYXRlUXVldWU9ZSliLmVmZmVjdFRhZ3w9NH19O1xucWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmVmZmVjdFRhZ3w9NCl9O2Z1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAzOnJldHVybiBlaCgpLEgoSyksSChKKSxjPWIuc3RhdGVOb2RlLGMucGVuZGluZ0NvbnRleHQmJihjLmNvbnRleHQ9Yy5wZW5kaW5nQ29udGV4dCxjLnBlbmRpbmdDb250ZXh0PW51bGwpLG51bGwhPT1hJiZudWxsIT09YS5jaGlsZHx8IVdoKGIpfHwoYi5lZmZlY3RUYWd8PTQpLG9pKGIpLG51bGw7Y2FzZSA1OmdoKGIpO2M9Y2goYmguY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlwaShhLGIsZSxkLGMpLGEucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbnJldHVybiBudWxsfWE9Y2goJGcuY3VycmVudCk7aWYoV2goYikpe2Q9Yi5zdGF0ZU5vZGU7ZT1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTWRdPWI7ZFtOZF09Zjtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxhYy5sZW5ndGg7YSsrKUYoYWNbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoZCxmKTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoZCxmKSxGKFwiaW52YWxpZFwiLGQpLHJkKGMsXCJvbkNoYW5nZVwiKX1vZChlLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoYT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJihhPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6dmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJnJkKGMsZyl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGQpO0ViKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoZCk7TGIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJlxuKGQub25jbGljaz1zZCl9Yz1hO2IudXBkYXRlUXVldWU9YztudWxsIT09YyYmKGIuZWZmZWN0VGFnfD00KX1lbHNle2c9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7YT09PXFkJiYoYT1OYihlKSk7YT09PXFkP1wic2NyaXB0XCI9PT1lPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsZSk7YVtNZF09YjthW05kXT1kO25pKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXBkKGUsZCk7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmEpO2g9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWMubGVuZ3RoO2grKylGKGFjW2hdLGEpO2g9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsYSk7RihcInN1Ym1pdFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoYSxkKTtoPXpiKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9R2IoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2g9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihhLFxuZCk7aD1JYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1kfW9kKGUsaCk7dmFyIGs9aDtmb3IoZiBpbiBrKWlmKGsuaGFzT3duUHJvcGVydHkoZikpe3ZhciBsPWtbZl07XCJzdHlsZVwiPT09Zj9tZChhLGwpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmUWIoYSxsKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/KFwidGV4dGFyZWFcIiE9PWV8fFwiXCIhPT1sKSYmUmIoYSxsKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJlJiKGEsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYodmEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9bCYmcmQoYyxmKTpudWxsIT1sJiZYYShhLGYsbCxnKSl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGEpO0ViKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihhKTtMYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrcmIoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtjPWQudmFsdWU7bnVsbCE9Yz9IYihhLCEhZC5tdWx0aXBsZSxjLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmSGIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKGEub25jbGljaz1zZCl9RmQoZSxkKSYmKGIuZWZmZWN0VGFnfD00KX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5jPWNoKGJoLmN1cnJlbnQpO2NoKCRnLmN1cnJlbnQpO1doKGIpPyhjPWIuc3RhdGVOb2RlLGQ9Yi5tZW1vaXplZFByb3BzLGNbTWRdPWIsYy5ub2RlVmFsdWUhPT1kJiYoYi5lZmZlY3RUYWd8PTQpKTooYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGNbTWRdPWIsYi5zdGF0ZU5vZGU9Yyl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWMsYjtjPW51bGwhPT1kO2Q9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZXaChiKTooZT1hLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZSxjfHxudWxsPT09ZXx8KGU9YS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoZj1iLmZpcnN0RWZmZWN0LG51bGwhPT1mPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWYpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1cbmUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKSk7aWYoYyYmIWQmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpUz09PXRpJiYoUz11aSk7ZWxzZXtpZihTPT09dGl8fFM9PT11aSlTPXZpOzAhPT13aSYmbnVsbCE9PVQmJih4aShULFUpLHlpKFQsd2kpKX1pZihjfHxkKWIuZWZmZWN0VGFnfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxvaShiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAxOTpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2U9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zj1kLnJlbmRlcmluZztpZihudWxsPT09ZilpZihlKXJpKGQsITEpO2Vsc2V7aWYoUyE9PXRpfHxudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyZcbjY0KSlmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7YT1oaChmKTtpZihudWxsIT09YSl7Yi5lZmZlY3RUYWd8PTY0O3JpKGQsITEpO2U9YS51cGRhdGVRdWV1ZTtudWxsIT09ZSYmKGIudXBkYXRlUXVldWU9ZSxiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtmb3IoZD1iLmNoaWxkO251bGwhPT1kOyllPWQsZj1jLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxhPWUuYWx0ZXJuYXRlLG51bGw9PT1hPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZSxcbmUuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWEuY2hpbGQsZS5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxmPWEuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksZD1kLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWY9Zi5zaWJsaW5nfX1lbHNle2lmKCFlKWlmKGE9aGgoZiksbnVsbCE9PWEpe2lmKGIuZWZmZWN0VGFnfD02NCxlPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCkscmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFmLmFsdGVybmF0ZSlyZXR1cm4gYj1cbmIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqJGYoKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5kLnRhaWxFeHBpcmF0aW9uJiYxPGMmJihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxyaShkLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1jLTEpO2QuaXNCYWNrd2FyZHM/KGYuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zik6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1mOmIuY2hpbGQ9ZixkLmxhc3Q9Zil9cmV0dXJuIG51bGwhPT1kLnRhaWw/KDA9PT1kLnRhaWxFeHBpcmF0aW9uJiYoZC50YWlsRXhwaXJhdGlvbj0kZigpKzUwMCksYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9JGYoKSxjLnNpYmxpbmc9bnVsbCxiPU0uY3VycmVudCxJKE0sZT9iJjF8MjpiJjEpLGMpOm51bGx9dGhyb3cgRXJyb3IodSgxNTYsXG5iLnRhZykpO31mdW5jdGlvbiB6aShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkRmKCk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzplaCgpO0goSyk7SChKKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZ2goYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE0pLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChNKSxudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQWkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpxYihiKX19XG52YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1xYihjKSk7bnVsbCE9PWMmJnBiKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJnBiKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIERpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtFaShhLGMpfX1mdW5jdGlvbiBGaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtFaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBHaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzppZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBIaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmRlc3Ryb3k7Yy5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1kJiZkKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19XG5mdW5jdGlvbiBKaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SWkoMyxjKTtyZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczppZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1iPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkNnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9Q2coYyxiLGEpfXJldHVybjtcbmNhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyY0JiZGZChjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJlZjKGMpKSkpO3JldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEtpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGkmJkxpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7Y2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe0VpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpGaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZEaShiLGMpO2JyZWFrO2Nhc2UgNTpGaShiKTticmVhaztjYXNlIDQ6TWkoYSxiLGMpfX1cbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDtudWxsIT09YiYmTmkoYil9ZnVuY3Rpb24gT2koYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBQaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihPaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoUmIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE9pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9RaShhLGMsYik6UmkoYSxjLGIpfVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXNkKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUmkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihSaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVJpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIE1pKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoS2koaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoS2koYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjpIaSgzLGIpO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tOZF09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQmIoYyxkKTtwZChhLGUpO2I9cGQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP21kKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9RYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/UmIoYyxoKTpYYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6Q2IoYyxkKTticmVhaztcbmNhc2UgXCJ0ZXh0YXJlYVwiOktiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SGIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0hiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpIYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLFZjKGIuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP1xuZD0hMTooZD0hMCxjPWIuY2hpbGQsVGk9JGYoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PWxkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPVxuZjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhaztmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31VaShiKTtyZXR1cm47Y2FzZSAxOTpVaShiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9ZnVuY3Rpb24gVWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQmkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1WaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbnZhciBXaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBYaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1lpfHwoWWk9ITAsWmk9ZCk7Q2koYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiAkaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtDaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09YWo/YWo9bmV3IFNldChbdGhpc10pOmFqLmFkZCh0aGlzKSxDaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBiaj1NYXRoLmNlaWwsY2o9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaj1XYS5SZWFjdEN1cnJlbnRPd25lcixWPTAsZWo9OCxmaj0xNixnaj0zMix0aT0wLGhqPTEsaWo9Mix1aT0zLHZpPTQsamo9NSxXPVYsVD1udWxsLFg9bnVsbCxVPTAsUz10aSxraj1udWxsLGxqPTEwNzM3NDE4MjMsbWo9MTA3Mzc0MTgyMyxuaj1udWxsLHdpPTAsb2o9ITEsVGk9MCxwaj01MDAsWT1udWxsLFlpPSExLFppPW51bGwsYWo9bnVsbCxxaj0hMSxyaj1udWxsLHNqPTkwLHRqPW51bGwsdWo9MCx2aj1udWxsLHdqPTA7ZnVuY3Rpb24gR2coKXtyZXR1cm4oVyYoZmp8Z2opKSE9PVY/MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKTowIT09d2o/d2o6d2o9MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKX1cbmZ1bmN0aW9uIEhnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9YWcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFcmZmopIT09VilyZXR1cm4gVTtpZihudWxsIT09YylhPWhnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWhnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9aGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1UJiZhPT09VSYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gSWcoYSxiKXtpZig1MDx1ail0aHJvdyB1aj0wLHZqPW51bGwsRXJyb3IodSgxODUpKTthPXhqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWFnKCk7MTA3Mzc0MTgyMz09PWI/KFcmZWopIT09ViYmKFcmKGZqfGdqKSk9PT1WP3lqKGEpOihaKGEpLFc9PT1WJiZnZygpKTpaKGEpOyhXJjQpPT09Vnx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09dGo/dGo9bmV3IE1hcChbW2EsYl1dKTooYz10ai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnRqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24geGooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFQ9PT1lJiYoQmcoYiksUz09PXZpJiZ4aShlLFUpKSx5aShlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFBaihhLGIpKXJldHVybiBiO3ZhciBjPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDthPWM+YT9jOmE7cmV0dXJuIDI+PWEmJmIhPT1hPzA6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1lZyh5ai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9emooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPUdnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVRmJiZLZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/ZWcoeWouYmluZChudWxsLGEpKTpkZyhkLEJqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS0kZigpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gQmooYSxiKXt3aj0wO2lmKGIpcmV0dXJuIGI9R2coKSxDaihhLGIpLFooYSksbnVsbDt2YXIgYz16aihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZjPT09VXx8RWooYSxjKTtpZihudWxsIT09WCl7dmFyIGQ9VztXfD1majt2YXIgZT1GaigpO2RvIHRyeXtHaigpO2JyZWFrfWNhdGNoKGgpe0hqKGEsaCl9d2hpbGUoMSk7bmcoKTtXPWQ7Y2ouY3VycmVudD1lO2lmKFM9PT1oail0aHJvdyBiPWtqLEVqKGEsYykseGkoYSxjKSxaKGEpLGI7aWYobnVsbD09PVgpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVMsVD1udWxsLGQpe2Nhc2UgdGk6Y2FzZSBoajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2UgaWo6Q2ooYSwyPGM/MjpjKTticmVhaztjYXNlIHVpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYoMTA3Mzc0MTgyMz09PWxqJiYoZT1UaStwai0kZigpLDEwPGUpKXtpZihvail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9fWY9emooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZSk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSB2aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZihvaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfWU9emooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PW1qP2Q9MTAqKDEwNzM3NDE4MjEtbWopLSRmKCk6MTA3Mzc0MTgyMz09PWxqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1saiktNUUzLGU9JGYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha31KaihhKTticmVhaztjYXNlIGpqOmlmKDEwNzM3NDE4MjMhPT1saiYmbnVsbCE9PW5qKXtmPWxqO3ZhciBnPW5qO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPSRmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7eGkoYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUpqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIEJqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZiPT09VXx8RWooYSxiKTtpZihudWxsIT09WCl7dmFyIGM9VztXfD1majt2YXIgZD1GaigpO2RvIHRyeXtLaigpO2JyZWFrfWNhdGNoKGUpe0hqKGEsZSl9d2hpbGUoMSk7bmcoKTtXPWM7Y2ouY3VycmVudD1kO2lmKFM9PT1oail0aHJvdyBjPWtqLEVqKGEsYikseGkoYSxiKSxaKGEpLGM7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1Q9bnVsbDtKaihhKTtaKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIExqKCl7aWYobnVsbCE9PXRqKXt2YXIgYT10ajt0aj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe0NqKGMsYSk7WihjKX0pO2dnKCl9fVxuZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1mdW5jdGlvbiBOaihhLGIpe3ZhciBjPVc7VyY9LTI7V3w9ZWo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1cbmZ1bmN0aW9uIEVqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLElkKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkRmKCk7YnJlYWs7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2JyZWFrO2Nhc2UgNTpnaChkKTticmVhaztjYXNlIDQ6ZWgoKTticmVhaztjYXNlIDEzOkgoTSk7YnJlYWs7Y2FzZSAxOTpIKE0pO2JyZWFrO2Nhc2UgMTA6b2coZCl9Yz1jLnJldHVybn1UPWE7WD1TZyhhLmN1cnJlbnQsbnVsbCk7VT1iO1M9dGk7a2o9bnVsbDttaj1saj0xMDczNzQxODIzO25qPW51bGw7d2k9MDtvaj0hMX1cbmZ1bmN0aW9uIEhqKGEsYil7ZG97dHJ5e25nKCk7amguY3VycmVudD1zaDtpZihtaClmb3IodmFyIGM9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1jOyl7dmFyIGQ9Yy5xdWV1ZTtudWxsIT09ZCYmKGQucGVuZGluZz1udWxsKTtjPWMubmV4dH1saD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYobnVsbD09PVh8fG51bGw9PT1YLnJldHVybilyZXR1cm4gUz1oaixraj1iLFg9bnVsbDthOnt2YXIgZT1hLGY9WC5yZXR1cm4sZz1YLGg9YjtiPVU7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5maXJzdEVmZmVjdD1nLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09aCYmXCJvYmplY3RcIj09PXR5cGVvZiBoJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC50aGVuKXt2YXIgaz1oO2lmKDA9PT0oZy5tb2RlJjIpKXt2YXIgbD1nLmFsdGVybmF0ZTtsPyhnLnVwZGF0ZVF1ZXVlPWwudXBkYXRlUXVldWUsZy5tZW1vaXplZFN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxnLmV4cGlyYXRpb25UaW1lPWwuZXhwaXJhdGlvblRpbWUpOihnLnVwZGF0ZVF1ZXVlPVxubnVsbCxnLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIG09MCE9PShNLmN1cnJlbnQmMSkscD1mO2Rve3ZhciB4O2lmKHg9MTM9PT1wLnRhZyl7dmFyIHo9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT16KXg9bnVsbCE9PXouZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBjYT1wLm1lbW9pemVkUHJvcHM7eD12b2lkIDA9PT1jYS5mYWxsYmFjaz8hMTohMCE9PWNhLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOm0/ITE6ITB9fWlmKHgpe3ZhciBEPXAudXBkYXRlUXVldWU7aWYobnVsbD09PUQpe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7cC51cGRhdGVRdWV1ZT10fWVsc2UgRC5hZGQoayk7aWYoMD09PShwLm1vZGUmMikpe3AuZWZmZWN0VGFnfD02NDtnLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWcudGFnKWlmKG51bGw9PT1nLmFsdGVybmF0ZSlnLnRhZz0xNztlbHNle3ZhciB5PXdnKDEwNzM3NDE4MjMsbnVsbCk7eS50YWc9Mjt4ZyhnLHkpfWcuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztcbmJyZWFrIGF9aD12b2lkIDA7Zz1iO3ZhciBBPWUucGluZ0NhY2hlO251bGw9PT1BPyhBPWUucGluZ0NhY2hlPW5ldyBXaSxoPW5ldyBTZXQsQS5zZXQoayxoKSk6KGg9QS5nZXQoayksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxBLnNldChrLGgpKSk7aWYoIWguaGFzKGcpKXtoLmFkZChnKTt2YXIgcT1Pai5iaW5kKG51bGwsZSxrLGcpO2sudGhlbihxLHEpfXAuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2g9RXJyb3IoKHBiKGcudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitxYihnKSl9UyE9PVxuamomJihTPWlqKTtoPUFpKGgsZyk7cD1mO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOms9aDtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIEI9WGkocCxrLGIpO3lnKHAsQik7YnJlYWsgYTtjYXNlIDE6az1oO3ZhciB3PXAudHlwZSx1Yj1wLnN0YXRlTm9kZTtpZigwPT09KHAuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXViJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdWIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXModWIpKSkpe3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgdmI9JGkocCxrLGIpO3lnKHAsdmIpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVg9UGooWCl9Y2F0Y2goWGMpe2I9WGM7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBGaigpe3ZhciBhPWNqLmN1cnJlbnQ7Y2ouY3VycmVudD1zaDtyZXR1cm4gbnVsbD09PWE/c2g6YX1mdW5jdGlvbiBBZyhhLGIpe2E8bGomJjI8YSYmKGxqPWEpO251bGwhPT1iJiZhPG1qJiYyPGEmJihtaj1hLG5qPWIpfWZ1bmN0aW9uIEJnKGEpe2E+d2kmJih3aT1hKX1mdW5jdGlvbiBLaigpe2Zvcig7bnVsbCE9PVg7KVg9UWooWCl9ZnVuY3Rpb24gR2ooKXtmb3IoO251bGwhPT1YJiYhVWYoKTspWD1RaihYKX1mdW5jdGlvbiBRaihhKXt2YXIgYj1SaihhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9UGooYSkpO2RqLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBqKGEpe1g9YTtkb3t2YXIgYj1YLmFsdGVybmF0ZTthPVgucmV0dXJuO2lmKDA9PT0oWC5lZmZlY3RUYWcmMjA0OCkpe2I9c2koYixYLFUpO2lmKDE9PT1VfHwxIT09WC5jaGlsZEV4cGlyYXRpb25UaW1lKXtmb3IodmFyIGM9MCxkPVguY2hpbGQ7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lLGY9ZC5jaGlsZEV4cGlyYXRpb25UaW1lO2U+YyYmKGM9ZSk7Zj5jJiYoYz1mKTtkPWQuc2libGluZ31YLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxudWxsIT09WC5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVguZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1YLmxhc3RFZmZlY3QpLDE8WC5lZmZlY3RUYWcmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WDphLmZpcnN0RWZmZWN0PVgsYS5sYXN0RWZmZWN0PVgpKX1lbHNle2I9emkoWCk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVguc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtYPWF9d2hpbGUobnVsbCE9PVgpO1M9PT10aSYmKFM9amopO3JldHVybiBudWxsfWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gSmooYSl7dmFyIGI9YWcoKTtjZyg5OSxTai5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaihhLGIpe2RvIERqKCk7d2hpbGUobnVsbCE9PXJqKTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUlqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVQmJihYPVQ9bnVsbCxVPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVc7V3w9Z2o7ZGouY3VycmVudD1udWxsO0RkPWZkO3ZhciBnPXhkKCk7aWYoeWQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaCh3Yil7aD1udWxsO2JyZWFrIGF9dmFyIHA9MCx4PS0xLHo9LTEsY2E9MCxEPTAsdD1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3QhPT1ofHwwIT09bCYmMyE9PXQubm9kZVR5cGV8fCh4PXArbCk7dCE9PW18fDAhPT1rJiYzIT09dC5ub2RlVHlwZXx8KHo9cCtrKTszPT09dC5ub2RlVHlwZSYmKHArPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXQuZmlyc3RDaGlsZCkpYnJlYWs7eT10O3Q9QX1mb3IoOzspe2lmKHQ9PT1nKWJyZWFrIGI7eT09PWgmJisrY2E9PT1sJiYoeD1wKTt5PT09bSYmKytEPT09ayYmKHo9cCk7aWYobnVsbCE9PShBPXQubmV4dFNpYmxpbmcpKWJyZWFrO3Q9eTt5PXQucGFyZW50Tm9kZX10PUF9aD0tMT09PXh8fC0xPT09ej9udWxsOntzdGFydDp4LGVuZDp6fX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO0VkPXthY3RpdmVFbGVtZW50RGV0YWNoZWQ6bnVsbCxmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO1k9ZTtkbyB0cnl7VGooKX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBxPVkuZWZmZWN0VGFnO3EmMTYmJlJiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgQj1ZLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHc9Qi5yZWY7bnVsbCE9PXcmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdz93KG51bGwpOncuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTAzOCl7Y2FzZSAyOlBpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj1cbi0xMDI1O1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLE1pKGcsbCxoKSxOaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3c9RWQ7Qj14ZCgpO3E9dy5mb2N1c2VkRWxlbTtoPXcuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PXEmJnEmJnEub3duZXJEb2N1bWVudCYmd2QocS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PWgmJnlkKHEpJiYoQj1oLnN0YXJ0LHc9aC5lbmQsdm9pZCAwPT09dyYmKHc9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD1CLHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHcscS52YWx1ZS5sZW5ndGgpKToodz0oQj1xLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQi5kZWZhdWx0Vmlld3x8d2luZG93LHcuZ2V0U2VsZWN0aW9uJiZcbih3PXcuZ2V0U2VsZWN0aW9uKCksbD1xLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF3LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9dmQocSxnKSxtPXZkKHEsaCksbCYmbSYmKDEhPT13LnJhbmdlQ291bnR8fHcuYW5jaG9yTm9kZSE9PWwubm9kZXx8dy5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8dy5mb2N1c05vZGUhPT1tLm5vZGV8fHcuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJihCPUIuY3JlYXRlUmFuZ2UoKSxCLnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdy5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHcuYWRkUmFuZ2UoQiksdy5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KEIuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdy5hZGRSYW5nZShCKSkpKSkpO0I9W107Zm9yKHc9cTt3PXcucGFyZW50Tm9kZTspMT09PXcubm9kZVR5cGUmJkIucHVzaCh7ZWxlbWVudDp3LGxlZnQ6dy5zY3JvbGxMZWZ0LFxudG9wOncuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8Qi5sZW5ndGg7cSsrKXc9QltxXSx3LmVsZW1lbnQuc2Nyb2xsTGVmdD13LmxlZnQsdy5lbGVtZW50LnNjcm9sbFRvcD13LnRvcH1mZD0hIURkO0VkPURkPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocT1hO251bGwhPT1ZOyl7dmFyIHViPVkuZWZmZWN0VGFnO3ViJjM2JiZKaShxLFkuYWx0ZXJuYXRlLFkpO2lmKHViJjEyOCl7Qj12b2lkIDA7dmFyIHZiPVkucmVmO2lmKG51bGwhPT12Yil7dmFyIFhjPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OkI9WGM7YnJlYWs7ZGVmYXVsdDpCPVhjfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB2Yj92YihCKTp2Yi5jdXJyZW50PUJ9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1cbm51bGw7VmYoKTtXPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihxailxaj0hMSxyaj1hLHNqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihhaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dmo/dWorKzoodWo9MCx2aj1hKTp1aj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBVaiYmVWooYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihZaSl0aHJvdyBZaT0hMSxhPVppLFppPW51bGwsYTtpZigoVyZlaikhPT1WKXJldHVybiBudWxsO2dnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gVGooKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJkdpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxxanx8KHFqPSEwLGRnKDk3LGZ1bmN0aW9uKCl7RGooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBEaigpe2lmKDkwIT09c2ope3ZhciBhPTk3PHNqPzk3OnNqO3NqPTkwO3JldHVybiBjZyhhLFZqKX19ZnVuY3Rpb24gVmooKXtpZihudWxsPT09cmopcmV0dXJuITE7dmFyIGE9cmo7cmo9bnVsbDtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1XO1d8PWdqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpIaSg1LGMpLElpKDUsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7RWkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9Vz1iO2dnKCk7cmV0dXJuITB9XG5mdW5jdGlvbiBXaihhLGIsYyl7Yj1BaShjLGIpO2I9WGkoYSxiLDEwNzM3NDE4MjMpO3hnKGEsYik7YT14aihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfWZ1bmN0aW9uIEVpKGEsYil7aWYoMz09PWEudGFnKVdqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7V2ooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXMoZCkpKXthPUFpKGIsYSk7YT0kaShjLGEsMTA3Mzc0MTgyMyk7eGcoYyxhKTtjPXhqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gT2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtUPT09YSYmVT09PWM/Uz09PXZpfHxTPT09dWkmJjEwNzM3NDE4MjM9PT1saiYmJGYoKS1UaTxwaj9FaihhLFUpOm9qPSEwOkFqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxaKGEpKSl9ZnVuY3Rpb24gVmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1HZygpLGI9SGcoYixhLG51bGwpKTthPXhqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIFJqO1xuUmo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudClyZz0hMDtlbHNle2lmKGQ8Yyl7cmc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6aGkoYik7WGgoKTticmVhaztjYXNlIDU6ZmgoYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkdmKGIpO2JyZWFrO2Nhc2UgNDpkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7ZT1iLnR5cGUuX2NvbnRleHQ7SShqZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG5pZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTSxNLmN1cnJlbnQmMSk7Yj0kaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gbWkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiAkaChhLGIsYyl9cmc9ITF9fWVsc2Ugcmc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9Q2YoYixKLmN1cnJlbnQpO3FnKGIsYyk7ZT1vaChudWxsLFxuYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEwoZCkpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3VnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZGZyhiLGQsZyxhKTtlLnVwZGF0ZXI9Smc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtOZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6YTp7ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9XG5udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7b2IoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7ZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1YaihlKTthPWlnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1maShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVpoKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWkobnVsbCxiLGUsaWcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGZpKGEsYixkLGUsYyk7XG5jYXNlIDM6aGkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2Q9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt2ZyhhLGIpO3pnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpWGgoKSxiPSRoKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlQaD1KZChiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLE9oPWIsZT1RaD0hMDtpZihlKWZvcihjPVlnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxYaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGZoKGIpLG51bGw9PT1hJiZVaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxubnVsbCxnPWUuY2hpbGRyZW4sR2QoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkdkKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZVaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGppKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVhnKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLFpoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShqZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPSRlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9JGgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PVxuayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9d2coYyxudWxsKSxsLnRhZz0yLHhnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTtwZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPVxuZ31SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHFnKGIsYyksZT1zZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9aWcoZSxiLnBlbmRpbmdQcm9wcyksZj1pZyhlLnR5cGUsZiksYWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGNpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsR2YoYikpOmE9ITEscWcoYixjKSxMZyhiLGQsZSksTmcoYixkLGUsYyksZ2kobnVsbCxcbmIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIFVqPW51bGwsTGk9bnVsbDtmdW5jdGlvbiBZaihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtVaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtMaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFpqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gU2goYSxiLGMsZCl7cmV0dXJuIG5ldyBaaihhLGIsYyxkKX1cbmZ1bmN0aW9uIGJpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWGooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYilyZXR1cm4gMTE7aWYoYT09PWpiKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9U2goYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBVZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuIFdnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmI6Zz04O2V8PTc7YnJlYWs7Y2FzZSBiYjpnPTg7ZXw9MTticmVhaztjYXNlIGNiOnJldHVybiBhPVNoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2IsYS50eXBlPWNiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGI6cmV0dXJuIGE9U2goMTMsYyxiLGUpLGEudHlwZT1oYixhLmVsZW1lbnRUeXBlPWhiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWI6cmV0dXJuIGE9U2goMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWIsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRiOmc9XG4xMDticmVhayBhO2Nhc2UgZWI6Zz05O2JyZWFrIGE7Y2FzZSBnYjpnPTExO2JyZWFrIGE7Y2FzZSBqYjpnPTE0O2JyZWFrIGE7Y2FzZSBrYjpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgbGI6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9U2goZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBXZyhhLGIsYyxkKXthPVNoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBUZyhhLGIsYyl7YT1TaCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBWZyhhLGIsYyl7Yj1TaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBBaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIHlpKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gQ2ooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiBiayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZygpLGc9RGcuc3VzcGVuc2U7Zj1IZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihkYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUZmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUFmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9d2coZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt4ZyhlLGIpO0lnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gY2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBkayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gZWsoYSxiKXtkayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZGsoYSxiKX1cbmZ1bmN0aW9uIGZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBhayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDt1ZyhlKTthW09kXT1kLmN1cnJlbnQ7YyYmMCE9PWImJkpjKGEsOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfWZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7YmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07ZmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87YmsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW09kXT1udWxsfSl9O1xuZnVuY3Rpb24gZ2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGhrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgZmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBpayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2guY2FsbChhKX19YmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1oayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtrLmNhbGwoYSl9fU5qKGZ1bmN0aW9uKCl7YmsoYixnLGEsZSl9KX1yZXR1cm4gY2soZyl9ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbndjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWhnKEdnKCksMTUwLDEwMCk7SWcoYSxiKTtlayhhLGIpfX07eGM9ZnVuY3Rpb24oYSl7MTM9PT1hLnRhZyYmKElnKGEsMyksZWsoYSwzKSl9O3ljPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUdnKCk7Yj1IZyhiLGEsbnVsbCk7SWcoYSxiKTtlayhhLGIpfX07XG56YT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1RZChkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7eWIoZCk7Q2IoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZhPU1qO1xuR2E9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1XO1d8PTQ7dHJ5e3JldHVybiBjZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtXPWYsVz09PVYmJmdnKCl9fTtIYT1mdW5jdGlvbigpeyhXJigxfGZqfGdqKSk9PT1WJiYoTGooKSxEaigpKX07SWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XO1d8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX07ZnVuY3Rpb24ga2soYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gamsoYSxiLG51bGwsYyl9dmFyIGxrPXtFdmVudHM6W05jLFBkLFFkLHhhLHRhLFhkLGZ1bmN0aW9uKGEpe2pjKGEsV2QpfSxEYSxFYSxpZCxtYyxEaix7Y3VycmVudDohMX1dfTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBZaihuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMy4xXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWxrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPWtrO2V4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1oYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O1xuZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBjZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtXPWMsZ2coKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCEwLGMpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCExLGMpfTtcbmV4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZ2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE5qKGZ1bmN0aW9uKCl7aWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW09kXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9TWo7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2soYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFnayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIGlrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCJ2YXIgYXBpID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIik7XG4gICAgICAgICAgICB2YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2luZGV4LnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJib2R5e21hcmdpbjowO2ZvbnQtZmFtaWx5Oi1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgJ1NlZ29lIFVJJywgJ1JvYm90bycsICdPeHlnZW4nLCAnVWJ1bnR1JywgJ0NhbnRhcmVsbCcsICdGaXJhIFNhbnMnLCAnRHJvaWQgU2FucycsICdIZWx2ZXRpY2EgTmV1ZScsIHNhbnMtc2VyaWY7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDstbW96LW9zeC1mb250LXNtb290aGluZzpncmF5c2NhbGV9Y29kZXtmb250LWZhbWlseTpzb3VyY2UtY29kZS1wcm8sIE1lbmxvLCBNb25hY28sIENvbnNvbGFzLCAnQ291cmllciBOZXcnLCBtb25vc3BhY2V9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsInZhciBhcGkgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKTtcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vQXBwLnNjc3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRlbnQgPSBjb250ZW50Ll9fZXNNb2R1bGUgPyBjb250ZW50LmRlZmF1bHQgOiBjb250ZW50O1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbiAgICAgICAgICAgIH1cblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIi8vIEltcG9ydHNcbnZhciBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKTtcbmV4cG9ydHMgPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuaGVhZGVye2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6IzFiMWUyMztkaXNwbGF5OmZsZXh9LmhlYWRlciAubG9nb3t3aWR0aDoyMHZ3O2hlaWdodDphdXRvfS5oZWFkZXIgLmhlYWRlcl9fcmlnaHR7YWxpZ24taXRlbXM6Y2VudGVyO2ZsZXg6MTtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmQ7bGlzdC1zdHlsZS10eXBlOm5vbmU7ZGlzcGxheTpmbGV4O21hcmdpbi1yaWdodDoxMHZ3fS5oZWFkZXIgLmhlYWRlcl9fcmlnaHQ+Knt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7cGFkZGluZzoxMHB4fS5oZWFkZXIgLmhlYWRlcl9fcmlnaHQgbGk+YXtkaXNwbGF5OmlubGluZS1ibG9jaztjb2xvcjp3aGl0ZX0uaGVhZGVyIC5oZWFkZXJfX3JpZ2h0IC5oZWFkZXJfX3JpZ2h0X19uZXdibG9ne2JvcmRlcjpub25lO2NvbG9yOndoaXRlO2JhY2tncm91bmQtY29sb3I6IzFiMWUyM30uZm9vdGVye3Bvc2l0aW9uOmZpeGVkO2JvdHRvbTowO2hlaWdodDo1dnc7ei1pbmRleDoyfS5mb290ZXIgLmZvb3Rlcl9fdHV4e2hlaWdodDoxMDAlO3RyYW5zZm9ybTpyb3RhdGUoLTI1ZGVnKX0uYmxvZ19fbmF2aWdhdG9ye2JvcmRlci1yaWdodDoxcHggc29saWQgI2E2YjVhYTtiYWNrZ3JvdW5kLWNvbG9yOiNlZmY1ZjE7cGFkZGluZy1yaWdodDoyMHB4fS5ibG9nX19uYXZpZ2F0b3IgdWwuYmxvZ19fY2F0ZWdvcnkgbGl7ZGlzcGxheTpub25lfS5ibG9nX19uYXZpZ2F0b3IgdWwuYmxvZ19fY2F0ZWdvcnkuYWN0aXZlIGxpe2Rpc3BsYXk6YmxvY2s7cGFkZGluZy1sZWZ0OjIwcHg7cGFkZGluZy10b3A6OHB4O3BhZGRpbmctYm90dG9tOjhweH0uYmxvZ0NvbnRlbnR7ZmxleC1ncm93OjJ9LmJsb2dDb250ZW50IC5zdW1tYXJpZXNfX2Jsb2Nre3BhZGRpbmctdG9wOjMwcHg7ZGlzcGxheTpmbGV4O2ZsZXgtd3JhcDp3cmFwO2xpbmUtaGVpZ2h0OjE1MHB4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmJsb2dDb250ZW50IC5zdW1tYXJpZXNfX2Jsb2NrIC5ibG9nZmlsZV9fc3VtbWFyeXtkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7aGVpZ2h0OjEwdnc7d2lkdGg6NDAlO2JvcmRlcjoxcHggc29saWQgIzdlOTI5MTt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDpub3JtYWw7dmVydGljYWwtYWxpZ246YmFzZWxpbmU7bWFyZ2luOjI1cHggMjVweDtiYWNrZ3JvdW5kLWNvbG9yOiNmN2Y5ZjZ9LmJsb2dEYXRlU2VsZWN0b3J7Ym9yZGVyLWxlZnQ6MXB4IHNvbGlkICNhNmI1YWE7YmFja2dyb3VuZC1jb2xvcjojZWZmNWYxfWh0bWwsYm9keXtoZWlnaHQ6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Zm9udC1mYW1pbHk6J1JvYm90bycsICdIZWx2ZXRpY2EnLCAnQXJpYWwnLCBzYW5zLXNlcmlmO2ZvbnQtc2l6ZToxOHB4O2xpbmUtaGVpZ2h0OjEuNnJlbX11bHtsaXN0LXN0eWxlLXR5cGU6bm9uZTtjdXJzb3I6cG9pbnRlcn0jcm9vdHtoZWlnaHQ6MTAwJX0ucHJvZmlsZXtoZWlnaHQ6MjB2d30ucGFnZV9fYmxvZ3tkaXNwbGF5OmZsZXh9LkFwcHt0ZXh0LWFsaWduOmNlbnRlcn0uQXBwLWxvZ297aGVpZ2h0OjQwdm1pbjtwb2ludGVyLWV2ZW50czpub25lfUBtZWRpYSAocHJlZmVycy1yZWR1Y2VkLW1vdGlvbjogbm8tcHJlZmVyZW5jZSl7LkFwcC1sb2dve2FuaW1hdGlvbjpBcHAtbG9nby1zcGluIGluZmluaXRlIDIwcyBsaW5lYXJ9fS5BcHAtaGVhZGVye2JhY2tncm91bmQtY29sb3I6IzI4MmMzNDttaW4taGVpZ2h0OjEwMHZoO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7Zm9udC1zaXplOmNhbGMoMTBweCArIDJ2bWluKTtjb2xvcjp3aGl0ZX0uQXBwLWxpbmt7Y29sb3I6IzYxZGFmYn1Aa2V5ZnJhbWVzIEFwcC1sb2dvLXNwaW57ZnJvbXt0cmFuc2Zvcm06cm90YXRlKDBkZWcpfXRve3RyYW5zZm9ybTpyb3RhdGUoMzYwZGVnKX19XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XG5leHBvcnRzLnBhcnNlVmFsdWUgPSBwYXJzZVZhbHVlO1xuZXhwb3J0cy5wYXJzZVR5cGUgPSBwYXJzZVR5cGU7XG5cbnZhciBfaW5zcGVjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvaW5zcGVjdFwiKSk7XG5cbnZhciBfZGV2QXNzZXJ0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vanN1dGlscy9kZXZBc3NlcnRcIikpO1xuXG52YXIgX3N5bnRheEVycm9yID0gcmVxdWlyZShcIi4uL2Vycm9yL3N5bnRheEVycm9yXCIpO1xuXG52YXIgX2tpbmRzID0gcmVxdWlyZShcIi4va2luZHNcIik7XG5cbnZhciBfc291cmNlID0gcmVxdWlyZShcIi4vc291cmNlXCIpO1xuXG52YXIgX2RpcmVjdGl2ZUxvY2F0aW9uID0gcmVxdWlyZShcIi4vZGlyZWN0aXZlTG9jYXRpb25cIik7XG5cbnZhciBfdG9rZW5LaW5kID0gcmVxdWlyZShcIi4vdG9rZW5LaW5kXCIpO1xuXG52YXIgX2xleGVyID0gcmVxdWlyZShcIi4vbGV4ZXJcIik7XG5cbnZhciBfYXN0ID0gcmVxdWlyZShcIi4vYXN0XCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIEdpdmVuIGEgR3JhcGhRTCBzb3VyY2UsIHBhcnNlcyBpdCBpbnRvIGEgRG9jdW1lbnQuXG4gKiBUaHJvd3MgR3JhcGhRTEVycm9yIGlmIGEgc3ludGF4IGVycm9yIGlzIGVuY291bnRlcmVkLlxuICovXG5mdW5jdGlvbiBwYXJzZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoc291cmNlLCBvcHRpb25zKTtcbiAgcmV0dXJuIHBhcnNlci5wYXJzZURvY3VtZW50KCk7XG59XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBHcmFwaFFMIHZhbHVlIChleC4gYFs0Ml1gKSwgcGFyc2UgdGhlIEFTVCBmb3JcbiAqIHRoYXQgdmFsdWUuXG4gKiBUaHJvd3MgR3JhcGhRTEVycm9yIGlmIGEgc3ludGF4IGVycm9yIGlzIGVuY291bnRlcmVkLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIHdpdGhpbiB0b29scyB0aGF0IG9wZXJhdGUgdXBvbiBHcmFwaFFMIFZhbHVlcyBkaXJlY3RseSBhbmRcbiAqIGluIGlzb2xhdGlvbiBvZiBjb21wbGV0ZSBHcmFwaFFMIGRvY3VtZW50cy5cbiAqXG4gKiBDb25zaWRlciBwcm92aWRpbmcgdGhlIHJlc3VsdHMgdG8gdGhlIHV0aWxpdHkgZnVuY3Rpb246IHZhbHVlRnJvbUFTVCgpLlxuICovXG5cblxuZnVuY3Rpb24gcGFyc2VWYWx1ZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoc291cmNlLCBvcHRpb25zKTtcbiAgcGFyc2VyLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLlNPRik7XG4gIHZhciB2YWx1ZSA9IHBhcnNlci5wYXJzZVZhbHVlTGl0ZXJhbChmYWxzZSk7XG4gIHBhcnNlci5leHBlY3RUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5FT0YpO1xuICByZXR1cm4gdmFsdWU7XG59XG4vKipcbiAqIEdpdmVuIGEgc3RyaW5nIGNvbnRhaW5pbmcgYSBHcmFwaFFMIFR5cGUgKGV4LiBgW0ludCFdYCksIHBhcnNlIHRoZSBBU1QgZm9yXG4gKiB0aGF0IHR5cGUuXG4gKiBUaHJvd3MgR3JhcGhRTEVycm9yIGlmIGEgc3ludGF4IGVycm9yIGlzIGVuY291bnRlcmVkLlxuICpcbiAqIFRoaXMgaXMgdXNlZnVsIHdpdGhpbiB0b29scyB0aGF0IG9wZXJhdGUgdXBvbiBHcmFwaFFMIFR5cGVzIGRpcmVjdGx5IGFuZFxuICogaW4gaXNvbGF0aW9uIG9mIGNvbXBsZXRlIEdyYXBoUUwgZG9jdW1lbnRzLlxuICpcbiAqIENvbnNpZGVyIHByb3ZpZGluZyB0aGUgcmVzdWx0cyB0byB0aGUgdXRpbGl0eSBmdW5jdGlvbjogdHlwZUZyb21BU1QoKS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlVHlwZShzb3VyY2UsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnNlciA9IG5ldyBQYXJzZXIoc291cmNlLCBvcHRpb25zKTtcbiAgcGFyc2VyLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLlNPRik7XG4gIHZhciB0eXBlID0gcGFyc2VyLnBhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICBwYXJzZXIuZXhwZWN0VG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuRU9GKTtcbiAgcmV0dXJuIHR5cGU7XG59XG5cbnZhciBQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXJzZXIoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIHNvdXJjZU9iaiA9IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnID8gbmV3IF9zb3VyY2UuU291cmNlKHNvdXJjZSkgOiBzb3VyY2U7XG4gICAgc291cmNlT2JqIGluc3RhbmNlb2YgX3NvdXJjZS5Tb3VyY2UgfHwgKDAsIF9kZXZBc3NlcnQuZGVmYXVsdCkoMCwgXCJNdXN0IHByb3ZpZGUgU291cmNlLiBSZWNlaXZlZDogXCIuY29uY2F0KCgwLCBfaW5zcGVjdC5kZWZhdWx0KShzb3VyY2VPYmopLCBcIi5cIikpO1xuICAgIHRoaXMuX2xleGVyID0gbmV3IF9sZXhlci5MZXhlcihzb3VyY2VPYmopO1xuICAgIHRoaXMuX29wdGlvbnMgPSBvcHRpb25zO1xuICB9XG4gIC8qKlxuICAgKiBDb252ZXJ0cyBhIG5hbWUgbGV4IHRva2VuIGludG8gYSBuYW1lIHBhcnNlIG5vZGUuXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnBhcnNlTmFtZSA9IGZ1bmN0aW9uIHBhcnNlTmFtZSgpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLk5BTUUpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5OQU1FLFxuICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICB9O1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIERvY3VtZW50IHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIERvY3VtZW50IDogRGVmaW5pdGlvbitcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEb2N1bWVudCA9IGZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkRPQ1VNRU5ULFxuICAgICAgZGVmaW5pdGlvbnM6IHRoaXMubWFueShfdG9rZW5LaW5kLlRva2VuS2luZC5TT0YsIHRoaXMucGFyc2VEZWZpbml0aW9uLCBfdG9rZW5LaW5kLlRva2VuS2luZC5FT0YpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEZWZpbml0aW9uIDpcbiAgICogICAtIEV4ZWN1dGFibGVEZWZpbml0aW9uXG4gICAqICAgLSBUeXBlU3lzdGVtRGVmaW5pdGlvblxuICAgKiAgIC0gVHlwZVN5c3RlbUV4dGVuc2lvblxuICAgKlxuICAgKiBFeGVjdXRhYmxlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBPcGVyYXRpb25EZWZpbml0aW9uXG4gICAqICAgLSBGcmFnbWVudERlZmluaXRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VEZWZpbml0aW9uKCkge1xuICAgIGlmICh0aGlzLnBlZWsoX3Rva2VuS2luZC5Ub2tlbktpbmQuTkFNRSkpIHtcbiAgICAgIHN3aXRjaCAodGhpcy5fbGV4ZXIudG9rZW4udmFsdWUpIHtcbiAgICAgICAgY2FzZSAncXVlcnknOlxuICAgICAgICBjYXNlICdtdXRhdGlvbic6XG4gICAgICAgIGNhc2UgJ3N1YnNjcmlwdGlvbic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcGVyYXRpb25EZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnZnJhZ21lbnQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRnJhZ21lbnREZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnc2NoZW1hJzpcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgIGNhc2UgJ2ludGVyZmFjZSc6XG4gICAgICAgIGNhc2UgJ3VuaW9uJzpcbiAgICAgICAgY2FzZSAnZW51bSc6XG4gICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgY2FzZSAnZGlyZWN0aXZlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnZXh0ZW5kJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVR5cGVTeXN0ZW1FeHRlbnNpb24oKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucGVlayhfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9MKSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VPcGVyYXRpb25EZWZpbml0aW9uKCk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBlZWtEZXNjcmlwdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uKCk7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgT3BlcmF0aW9ucyBzZWN0aW9uLlxuXG4gIC8qKlxuICAgKiBPcGVyYXRpb25EZWZpbml0aW9uIDpcbiAgICogIC0gU2VsZWN0aW9uU2V0XG4gICAqICAtIE9wZXJhdGlvblR5cGUgTmFtZT8gVmFyaWFibGVEZWZpbml0aW9ucz8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlT3BlcmF0aW9uRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIGlmICh0aGlzLnBlZWsoX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfTCkpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9QRVJBVElPTl9ERUZJTklUSU9OLFxuICAgICAgICBvcGVyYXRpb246ICdxdWVyeScsXG4gICAgICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogW10sXG4gICAgICAgIGRpcmVjdGl2ZXM6IFtdLFxuICAgICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIG9wZXJhdGlvbiA9IHRoaXMucGFyc2VPcGVyYXRpb25UeXBlKCk7XG4gICAgdmFyIG5hbWU7XG5cbiAgICBpZiAodGhpcy5wZWVrKF90b2tlbktpbmQuVG9rZW5LaW5kLk5BTUUpKSB7XG4gICAgICBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuT1BFUkFUSU9OX0RFRklOSVRJT04sXG4gICAgICBvcGVyYXRpb246IG9wZXJhdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YXJpYWJsZURlZmluaXRpb25zOiB0aGlzLnBhcnNlVmFyaWFibGVEZWZpbml0aW9ucygpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9wZXJhdGlvblR5cGUgOiBvbmUgb2YgcXVlcnkgbXV0YXRpb24gc3Vic2NyaXB0aW9uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT3BlcmF0aW9uVHlwZSA9IGZ1bmN0aW9uIHBhcnNlT3BlcmF0aW9uVHlwZSgpIHtcbiAgICB2YXIgb3BlcmF0aW9uVG9rZW4gPSB0aGlzLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLk5BTUUpO1xuXG4gICAgc3dpdGNoIChvcGVyYXRpb25Ub2tlbi52YWx1ZSkge1xuICAgICAgY2FzZSAncXVlcnknOlxuICAgICAgICByZXR1cm4gJ3F1ZXJ5JztcblxuICAgICAgY2FzZSAnbXV0YXRpb24nOlxuICAgICAgICByZXR1cm4gJ211dGF0aW9uJztcblxuICAgICAgY2FzZSAnc3Vic2NyaXB0aW9uJzpcbiAgICAgICAgcmV0dXJuICdzdWJzY3JpcHRpb24nO1xuICAgIH1cblxuICAgIHRocm93IHRoaXMudW5leHBlY3RlZChvcGVyYXRpb25Ub2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIFZhcmlhYmxlRGVmaW5pdGlvbnMgOiAoIFZhcmlhYmxlRGVmaW5pdGlvbisgKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMgPSBmdW5jdGlvbiBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KF90b2tlbktpbmQuVG9rZW5LaW5kLlBBUkVOX0wsIHRoaXMucGFyc2VWYXJpYWJsZURlZmluaXRpb24sIF90b2tlbktpbmQuVG9rZW5LaW5kLlBBUkVOX1IpO1xuICB9XG4gIC8qKlxuICAgKiBWYXJpYWJsZURlZmluaXRpb24gOiBWYXJpYWJsZSA6IFR5cGUgRGVmYXVsdFZhbHVlPyBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VWYXJpYWJsZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZVZhcmlhYmxlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuVkFSSUFCTEVfREVGSU5JVElPTixcbiAgICAgIHZhcmlhYmxlOiB0aGlzLnBhcnNlVmFyaWFibGUoKSxcbiAgICAgIHR5cGU6ICh0aGlzLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkNPTE9OKSwgdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKSksXG4gICAgICBkZWZhdWx0VmFsdWU6IHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5FUVVBTFMpID8gdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbCh0cnVlKSA6IHVuZGVmaW5lZCxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBWYXJpYWJsZSA6ICQgTmFtZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVZhcmlhYmxlID0gZnVuY3Rpb24gcGFyc2VWYXJpYWJsZSgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkRPTExBUik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLlZBUklBQkxFLFxuICAgICAgbmFtZTogdGhpcy5wYXJzZU5hbWUoKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0aW9uU2V0IDogeyBTZWxlY3Rpb24rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTZWxlY3Rpb25TZXQgPSBmdW5jdGlvbiBwYXJzZVNlbGVjdGlvblNldCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuU0VMRUNUSU9OX1NFVCxcbiAgICAgIHNlbGVjdGlvbnM6IHRoaXMubWFueShfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9MLCB0aGlzLnBhcnNlU2VsZWN0aW9uLCBfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9SKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogU2VsZWN0aW9uIDpcbiAgICogICAtIEZpZWxkXG4gICAqICAgLSBGcmFnbWVudFNwcmVhZFxuICAgKiAgIC0gSW5saW5lRnJhZ21lbnRcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTZWxlY3Rpb24gPSBmdW5jdGlvbiBwYXJzZVNlbGVjdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5wZWVrKF90b2tlbktpbmQuVG9rZW5LaW5kLlNQUkVBRCkgPyB0aGlzLnBhcnNlRnJhZ21lbnQoKSA6IHRoaXMucGFyc2VGaWVsZCgpO1xuICB9XG4gIC8qKlxuICAgKiBGaWVsZCA6IEFsaWFzPyBOYW1lIEFyZ3VtZW50cz8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0P1xuICAgKlxuICAgKiBBbGlhcyA6IE5hbWUgOlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZpZWxkID0gZnVuY3Rpb24gcGFyc2VGaWVsZCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgbmFtZU9yQWxpYXMgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBhbGlhcztcbiAgICB2YXIgbmFtZTtcblxuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQ09MT04pKSB7XG4gICAgICBhbGlhcyA9IG5hbWVPckFsaWFzO1xuICAgICAgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5hbWUgPSBuYW1lT3JBbGlhcztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuRklFTEQsXG4gICAgICBhbGlhczogYWxpYXMsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKGZhbHNlKSxcbiAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgIHNlbGVjdGlvblNldDogdGhpcy5wZWVrKF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX0wpID8gdGhpcy5wYXJzZVNlbGVjdGlvblNldCgpIDogdW5kZWZpbmVkLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBBcmd1bWVudHNbQ29uc3RdIDogKCBBcmd1bWVudFs/Q29uc3RdKyApXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlQXJndW1lbnRzID0gZnVuY3Rpb24gcGFyc2VBcmd1bWVudHMoaXNDb25zdCkge1xuICAgIHZhciBpdGVtID0gaXNDb25zdCA/IHRoaXMucGFyc2VDb25zdEFyZ3VtZW50IDogdGhpcy5wYXJzZUFyZ3VtZW50O1xuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShfdG9rZW5LaW5kLlRva2VuS2luZC5QQVJFTl9MLCBpdGVtLCBfdG9rZW5LaW5kLlRva2VuS2luZC5QQVJFTl9SKTtcbiAgfVxuICAvKipcbiAgICogQXJndW1lbnRbQ29uc3RdIDogTmFtZSA6IFZhbHVlWz9Db25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VBcmd1bWVudCA9IGZ1bmN0aW9uIHBhcnNlQXJndW1lbnQoKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQ09MT04pO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5BUkdVTUVOVCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbChmYWxzZSksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlQ29uc3RBcmd1bWVudCA9IGZ1bmN0aW9uIHBhcnNlQ29uc3RBcmd1bWVudCgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuQVJHVU1FTlQsXG4gICAgICBuYW1lOiB0aGlzLnBhcnNlTmFtZSgpLFxuICAgICAgdmFsdWU6ICh0aGlzLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkNPTE9OKSwgdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbCh0cnVlKSksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgRnJhZ21lbnRzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIENvcnJlc3BvbmRzIHRvIGJvdGggRnJhZ21lbnRTcHJlYWQgYW5kIElubGluZUZyYWdtZW50IGluIHRoZSBzcGVjLlxuICAgKlxuICAgKiBGcmFnbWVudFNwcmVhZCA6IC4uLiBGcmFnbWVudE5hbWUgRGlyZWN0aXZlcz9cbiAgICpcbiAgICogSW5saW5lRnJhZ21lbnQgOiAuLi4gVHlwZUNvbmRpdGlvbj8gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRnJhZ21lbnQgPSBmdW5jdGlvbiBwYXJzZUZyYWdtZW50KCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuU1BSRUFEKTtcbiAgICB2YXIgaGFzVHlwZUNvbmRpdGlvbiA9IHRoaXMuZXhwZWN0T3B0aW9uYWxLZXl3b3JkKCdvbicpO1xuXG4gICAgaWYgKCFoYXNUeXBlQ29uZGl0aW9uICYmIHRoaXMucGVlayhfdG9rZW5LaW5kLlRva2VuS2luZC5OQU1FKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogX2tpbmRzLktpbmQuRlJBR01FTlRfU1BSRUFELFxuICAgICAgICBuYW1lOiB0aGlzLnBhcnNlRnJhZ21lbnROYW1lKCksXG4gICAgICAgIGRpcmVjdGl2ZXM6IHRoaXMucGFyc2VEaXJlY3RpdmVzKGZhbHNlKSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLklOTElORV9GUkFHTUVOVCxcbiAgICAgIHR5cGVDb25kaXRpb246IGhhc1R5cGVDb25kaXRpb24gPyB0aGlzLnBhcnNlTmFtZWRUeXBlKCkgOiB1bmRlZmluZWQsXG4gICAgICBkaXJlY3RpdmVzOiB0aGlzLnBhcnNlRGlyZWN0aXZlcyhmYWxzZSksXG4gICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRnJhZ21lbnREZWZpbml0aW9uIDpcbiAgICogICAtIGZyYWdtZW50IEZyYWdtZW50TmFtZSBvbiBUeXBlQ29uZGl0aW9uIERpcmVjdGl2ZXM/IFNlbGVjdGlvblNldFxuICAgKlxuICAgKiBUeXBlQ29uZGl0aW9uIDogTmFtZWRUeXBlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRnJhZ21lbnREZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VGcmFnbWVudERlZmluaXRpb24oKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpb25zO1xuXG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdmcmFnbWVudCcpOyAvLyBFeHBlcmltZW50YWwgc3VwcG9ydCBmb3IgZGVmaW5pbmcgdmFyaWFibGVzIHdpdGhpbiBmcmFnbWVudHMgY2hhbmdlc1xuICAgIC8vIHRoZSBncmFtbWFyIG9mIEZyYWdtZW50RGVmaW5pdGlvbjpcbiAgICAvLyAgIC0gZnJhZ21lbnQgRnJhZ21lbnROYW1lIFZhcmlhYmxlRGVmaW5pdGlvbnM/IG9uIFR5cGVDb25kaXRpb24gRGlyZWN0aXZlcz8gU2VsZWN0aW9uU2V0XG5cbiAgICBpZiAoKChfdGhpcyRfb3B0aW9ucyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJF9vcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRfb3B0aW9ucy5leHBlcmltZW50YWxGcmFnbWVudFZhcmlhYmxlcykgPT09IHRydWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgICAgIG5hbWU6IHRoaXMucGFyc2VGcmFnbWVudE5hbWUoKSxcbiAgICAgICAgdmFyaWFibGVEZWZpbml0aW9uczogdGhpcy5wYXJzZVZhcmlhYmxlRGVmaW5pdGlvbnMoKSxcbiAgICAgICAgdHlwZUNvbmRpdGlvbjogKHRoaXMuZXhwZWN0S2V5d29yZCgnb24nKSwgdGhpcy5wYXJzZU5hbWVkVHlwZSgpKSxcbiAgICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgICBzZWxlY3Rpb25TZXQ6IHRoaXMucGFyc2VTZWxlY3Rpb25TZXQoKSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkZSQUdNRU5UX0RFRklOSVRJT04sXG4gICAgICBuYW1lOiB0aGlzLnBhcnNlRnJhZ21lbnROYW1lKCksXG4gICAgICB0eXBlQ29uZGl0aW9uOiAodGhpcy5leHBlY3RLZXl3b3JkKCdvbicpLCB0aGlzLnBhcnNlTmFtZWRUeXBlKCkpLFxuICAgICAgZGlyZWN0aXZlczogdGhpcy5wYXJzZURpcmVjdGl2ZXMoZmFsc2UpLFxuICAgICAgc2VsZWN0aW9uU2V0OiB0aGlzLnBhcnNlU2VsZWN0aW9uU2V0KCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEZyYWdtZW50TmFtZSA6IE5hbWUgYnV0IG5vdCBgb25gXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRnJhZ21lbnROYW1lID0gZnVuY3Rpb24gcGFyc2VGcmFnbWVudE5hbWUoKSB7XG4gICAgaWYgKHRoaXMuX2xleGVyLnRva2VuLnZhbHVlID09PSAnb24nKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wYXJzZU5hbWUoKTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBWYWx1ZXMgc2VjdGlvbi5cblxuICAvKipcbiAgICogVmFsdWVbQ29uc3RdIDpcbiAgICogICAtIFt+Q29uc3RdIFZhcmlhYmxlXG4gICAqICAgLSBJbnRWYWx1ZVxuICAgKiAgIC0gRmxvYXRWYWx1ZVxuICAgKiAgIC0gU3RyaW5nVmFsdWVcbiAgICogICAtIEJvb2xlYW5WYWx1ZVxuICAgKiAgIC0gTnVsbFZhbHVlXG4gICAqICAgLSBFbnVtVmFsdWVcbiAgICogICAtIExpc3RWYWx1ZVs/Q29uc3RdXG4gICAqICAgLSBPYmplY3RWYWx1ZVs/Q29uc3RdXG4gICAqXG4gICAqIEJvb2xlYW5WYWx1ZSA6IG9uZSBvZiBgdHJ1ZWAgYGZhbHNlYFxuICAgKlxuICAgKiBOdWxsVmFsdWUgOiBgbnVsbGBcbiAgICpcbiAgICogRW51bVZhbHVlIDogTmFtZSBidXQgbm90IGB0cnVlYCwgYGZhbHNlYCBvciBgbnVsbGBcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VWYWx1ZUxpdGVyYWwgPSBmdW5jdGlvbiBwYXJzZVZhbHVlTGl0ZXJhbChpc0NvbnN0KSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBzd2l0Y2ggKHRva2VuLmtpbmQpIHtcbiAgICAgIGNhc2UgX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0tFVF9MOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUxpc3QoaXNDb25zdCk7XG5cbiAgICAgIGNhc2UgX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfTDpcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3QoaXNDb25zdCk7XG5cbiAgICAgIGNhc2UgX3Rva2VuS2luZC5Ub2tlbktpbmQuSU5UOlxuICAgICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiBfa2luZHMuS2luZC5JTlQsXG4gICAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICAgIGxvYzogdGhpcy5sb2ModG9rZW4pXG4gICAgICAgIH07XG5cbiAgICAgIGNhc2UgX3Rva2VuS2luZC5Ub2tlbktpbmQuRkxPQVQ6XG4gICAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkZMT0FULFxuICAgICAgICAgIHZhbHVlOiB0b2tlbi52YWx1ZSxcbiAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICB9O1xuXG4gICAgICBjYXNlIF90b2tlbktpbmQuVG9rZW5LaW5kLlNUUklORzpcbiAgICAgIGNhc2UgX3Rva2VuS2luZC5Ub2tlbktpbmQuQkxPQ0tfU1RSSU5HOlxuICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZ0xpdGVyYWwoKTtcblxuICAgICAgY2FzZSBfdG9rZW5LaW5kLlRva2VuS2luZC5OQU1FOlxuICAgICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgICAgc3dpdGNoICh0b2tlbi52YWx1ZSkge1xuICAgICAgICAgIGNhc2UgJ3RydWUnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogX2tpbmRzLktpbmQuQk9PTEVBTixcbiAgICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICAgIGxvYzogdGhpcy5sb2ModG9rZW4pXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgY2FzZSAnZmFsc2UnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogX2tpbmRzLktpbmQuQk9PTEVBTixcbiAgICAgICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogX2tpbmRzLktpbmQuTlVMTCxcbiAgICAgICAgICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAga2luZDogX2tpbmRzLktpbmQuRU5VTSxcbiAgICAgICAgICAgICAgdmFsdWU6IHRva2VuLnZhbHVlLFxuICAgICAgICAgICAgICBsb2M6IHRoaXMubG9jKHRva2VuKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIF90b2tlbktpbmQuVG9rZW5LaW5kLkRPTExBUjpcbiAgICAgICAgaWYgKCFpc0NvbnN0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VWYXJpYWJsZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlU3RyaW5nTGl0ZXJhbCA9IGZ1bmN0aW9uIHBhcnNlU3RyaW5nTGl0ZXJhbCgpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5TVFJJTkcsXG4gICAgICB2YWx1ZTogdG9rZW4udmFsdWUsXG4gICAgICBibG9jazogdG9rZW4ua2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuQkxPQ0tfU1RSSU5HLFxuICAgICAgbG9jOiB0aGlzLmxvYyh0b2tlbilcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBMaXN0VmFsdWVbQ29uc3RdIDpcbiAgICogICAtIFsgXVxuICAgKiAgIC0gWyBWYWx1ZVs/Q29uc3RdKyBdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlTGlzdCA9IGZ1bmN0aW9uIHBhcnNlTGlzdChpc0NvbnN0KSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgdmFyIGl0ZW0gPSBmdW5jdGlvbiBpdGVtKCkge1xuICAgICAgcmV0dXJuIF90aGlzLnBhcnNlVmFsdWVMaXRlcmFsKGlzQ29uc3QpO1xuICAgIH07XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuTElTVCxcbiAgICAgIHZhbHVlczogdGhpcy5hbnkoX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0tFVF9MLCBpdGVtLCBfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDS0VUX1IpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RWYWx1ZVtDb25zdF0gOlxuICAgKiAgIC0geyB9XG4gICAqICAgLSB7IE9iamVjdEZpZWxkWz9Db25zdF0rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3QgPSBmdW5jdGlvbiBwYXJzZU9iamVjdChpc0NvbnN0KSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcblxuICAgIHZhciBpdGVtID0gZnVuY3Rpb24gaXRlbSgpIHtcbiAgICAgIHJldHVybiBfdGhpczIucGFyc2VPYmplY3RGaWVsZChpc0NvbnN0KTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVCxcbiAgICAgIGZpZWxkczogdGhpcy5hbnkoX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfTCwgaXRlbSwgX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfUiksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIE9iamVjdEZpZWxkW0NvbnN0XSA6IE5hbWUgOiBWYWx1ZVs/Q29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT2JqZWN0RmllbGQgPSBmdW5jdGlvbiBwYXJzZU9iamVjdEZpZWxkKGlzQ29uc3QpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5DT0xPTik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLk9CSkVDVF9GSUVMRCxcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB2YWx1ZTogdGhpcy5wYXJzZVZhbHVlTGl0ZXJhbChpc0NvbnN0KSxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfSAvLyBJbXBsZW1lbnRzIHRoZSBwYXJzaW5nIHJ1bGVzIGluIHRoZSBEaXJlY3RpdmVzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIERpcmVjdGl2ZXNbQ29uc3RdIDogRGlyZWN0aXZlWz9Db25zdF0rXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGlyZWN0aXZlcyA9IGZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlcyhpc0NvbnN0KSB7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSBbXTtcblxuICAgIHdoaWxlICh0aGlzLnBlZWsoX3Rva2VuS2luZC5Ub2tlbktpbmQuQVQpKSB7XG4gICAgICBkaXJlY3RpdmVzLnB1c2godGhpcy5wYXJzZURpcmVjdGl2ZShpc0NvbnN0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRpcmVjdGl2ZXM7XG4gIH1cbiAgLyoqXG4gICAqIERpcmVjdGl2ZVtDb25zdF0gOiBAIE5hbWUgQXJndW1lbnRzWz9Db25zdF0/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGlyZWN0aXZlID0gZnVuY3Rpb24gcGFyc2VEaXJlY3RpdmUoaXNDb25zdCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQVQpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5ESVJFQ1RJVkUsXG4gICAgICBuYW1lOiB0aGlzLnBhcnNlTmFtZSgpLFxuICAgICAgYXJndW1lbnRzOiB0aGlzLnBhcnNlQXJndW1lbnRzKGlzQ29uc3QpLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9IC8vIEltcGxlbWVudHMgdGhlIHBhcnNpbmcgcnVsZXMgaW4gdGhlIFR5cGVzIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIFR5cGUgOlxuICAgKiAgIC0gTmFtZWRUeXBlXG4gICAqICAgLSBMaXN0VHlwZVxuICAgKiAgIC0gTm9uTnVsbFR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VUeXBlUmVmZXJlbmNlID0gZnVuY3Rpb24gcGFyc2VUeXBlUmVmZXJlbmNlKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciB0eXBlO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDS0VUX0wpKSB7XG4gICAgICB0eXBlID0gdGhpcy5wYXJzZVR5cGVSZWZlcmVuY2UoKTtcbiAgICAgIHRoaXMuZXhwZWN0VG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0tFVF9SKTtcbiAgICAgIHR5cGUgPSB7XG4gICAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkxJU1RfVFlQRSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHR5cGUgPSB0aGlzLnBhcnNlTmFtZWRUeXBlKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5CQU5HKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAga2luZDogX2tpbmRzLktpbmQuTk9OX05VTExfVFlQRSxcbiAgICAgICAgdHlwZTogdHlwZSxcbiAgICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cbiAgLyoqXG4gICAqIE5hbWVkVHlwZSA6IE5hbWVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VOYW1lZFR5cGUgPSBmdW5jdGlvbiBwYXJzZU5hbWVkVHlwZSgpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuTkFNRURfVFlQRSxcbiAgICAgIG5hbWU6IHRoaXMucGFyc2VOYW1lKCksXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH0gLy8gSW1wbGVtZW50cyB0aGUgcGFyc2luZyBydWxlcyBpbiB0aGUgVHlwZSBEZWZpbml0aW9uIHNlY3Rpb24uXG5cbiAgLyoqXG4gICAqIFR5cGVTeXN0ZW1EZWZpbml0aW9uIDpcbiAgICogICAtIFNjaGVtYURlZmluaXRpb25cbiAgICogICAtIFR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBEaXJlY3RpdmVEZWZpbml0aW9uXG4gICAqXG4gICAqIFR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIFNjYWxhclR5cGVEZWZpbml0aW9uXG4gICAqICAgLSBPYmplY3RUeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gSW50ZXJmYWNlVHlwZURlZmluaXRpb25cbiAgICogICAtIFVuaW9uVHlwZURlZmluaXRpb25cbiAgICogICAtIEVudW1UeXBlRGVmaW5pdGlvblxuICAgKiAgIC0gSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVR5cGVTeXN0ZW1EZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VUeXBlU3lzdGVtRGVmaW5pdGlvbigpIHtcbiAgICAvLyBNYW55IGRlZmluaXRpb25zIGJlZ2luIHdpdGggYSBkZXNjcmlwdGlvbiBhbmQgcmVxdWlyZSBhIGxvb2thaGVhZC5cbiAgICB2YXIga2V5d29yZFRva2VuID0gdGhpcy5wZWVrRGVzY3JpcHRpb24oKSA/IHRoaXMuX2xleGVyLmxvb2thaGVhZCgpIDogdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAoa2V5d29yZFRva2VuLmtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLk5BTUUpIHtcbiAgICAgIHN3aXRjaCAoa2V5d29yZFRva2VuLnZhbHVlKSB7XG4gICAgICAgIGNhc2UgJ3NjaGVtYSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTY2hlbWFEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjYWxhclR5cGVEZWZpbml0aW9uKCk7XG5cbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2ludGVyZmFjZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ3VuaW9uJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVVuaW9uVHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVudW1UeXBlRGVmaW5pdGlvbigpO1xuXG4gICAgICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUlucHV0T2JqZWN0VHlwZURlZmluaXRpb24oKTtcblxuICAgICAgICBjYXNlICdkaXJlY3RpdmUnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlRGlyZWN0aXZlRGVmaW5pdGlvbigpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IHRoaXMudW5leHBlY3RlZChrZXl3b3JkVG9rZW4pO1xuICB9O1xuXG4gIF9wcm90by5wZWVrRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBwZWVrRGVzY3JpcHRpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMucGVlayhfdG9rZW5LaW5kLlRva2VuS2luZC5TVFJJTkcpIHx8IHRoaXMucGVlayhfdG9rZW5LaW5kLlRva2VuS2luZC5CTE9DS19TVFJJTkcpO1xuICB9XG4gIC8qKlxuICAgKiBEZXNjcmlwdGlvbiA6IFN0cmluZ1ZhbHVlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGVzY3JpcHRpb24gPSBmdW5jdGlvbiBwYXJzZURlc2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLnBlZWtEZXNjcmlwdGlvbigpKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZVN0cmluZ0xpdGVyYWwoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVtYURlZmluaXRpb24gOiBEZXNjcmlwdGlvbj8gc2NoZW1hIERpcmVjdGl2ZXNbQ29uc3RdPyB7IE9wZXJhdGlvblR5cGVEZWZpbml0aW9uKyB9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2NoZW1hRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlU2NoZW1hRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ3NjaGVtYScpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIG9wZXJhdGlvblR5cGVzID0gdGhpcy5tYW55KF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX0wsIHRoaXMucGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiwgX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfUik7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLlNDSEVNQV9ERUZJTklUSU9OLFxuICAgICAgZGVzY3JpcHRpb246IGRlc2NyaXB0aW9uLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIG9wZXJhdGlvblR5cGVzOiBvcGVyYXRpb25UeXBlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT3BlcmF0aW9uVHlwZURlZmluaXRpb24gOiBPcGVyYXRpb25UeXBlIDogTmFtZWRUeXBlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlT3BlcmF0aW9uVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZU9wZXJhdGlvblR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBvcGVyYXRpb24gPSB0aGlzLnBhcnNlT3BlcmF0aW9uVHlwZSgpO1xuICAgIHRoaXMuZXhwZWN0VG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQ09MT04pO1xuICAgIHZhciB0eXBlID0gdGhpcy5wYXJzZU5hbWVkVHlwZSgpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5PUEVSQVRJT05fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgb3BlcmF0aW9uOiBvcGVyYXRpb24sXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBTY2FsYXJUeXBlRGVmaW5pdGlvbiA6IERlc2NyaXB0aW9uPyBzY2FsYXIgTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VTY2FsYXJUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlU2NhbGFyVHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdzY2FsYXInKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBPYmplY3RUeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgRGVzY3JpcHRpb24/XG4gICAqICAgdHlwZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzPyBEaXJlY3RpdmVzW0NvbnN0XT8gRmllbGRzRGVmaW5pdGlvbj9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3RUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlT2JqZWN0VHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0eXBlJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpbnRlcmZhY2VzOiBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJbXBsZW1lbnRzSW50ZXJmYWNlcyA6XG4gICAqICAgLSBpbXBsZW1lbnRzIGAmYD8gTmFtZWRUeXBlXG4gICAqICAgLSBJbXBsZW1lbnRzSW50ZXJmYWNlcyAmIE5hbWVkVHlwZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzID0gZnVuY3Rpb24gcGFyc2VJbXBsZW1lbnRzSW50ZXJmYWNlcygpIHtcbiAgICB2YXIgdHlwZXMgPSBbXTtcblxuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsS2V5d29yZCgnaW1wbGVtZW50cycpKSB7XG4gICAgICAvLyBPcHRpb25hbCBsZWFkaW5nIGFtcGVyc2FuZFxuICAgICAgdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkFNUCk7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIF90aGlzJF9vcHRpb25zMjtcblxuICAgICAgICB0eXBlcy5wdXNoKHRoaXMucGFyc2VOYW1lZFR5cGUoKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQU1QKSB8fCAvLyBMZWdhY3kgc3VwcG9ydCBmb3IgdGhlIFNETD9cbiAgICAgICgoX3RoaXMkX29wdGlvbnMyID0gdGhpcy5fb3B0aW9ucykgPT09IG51bGwgfHwgX3RoaXMkX29wdGlvbnMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRfb3B0aW9uczIuYWxsb3dMZWdhY3lTRExJbXBsZW1lbnRzSW50ZXJmYWNlcykgPT09IHRydWUgJiYgdGhpcy5wZWVrKF90b2tlbktpbmQuVG9rZW5LaW5kLk5BTUUpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZXM7XG4gIH1cbiAgLyoqXG4gICAqIEZpZWxkc0RlZmluaXRpb24gOiB7IEZpZWxkRGVmaW5pdGlvbisgfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUZpZWxkc0RlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUZpZWxkc0RlZmluaXRpb24oKSB7XG4gICAgdmFyIF90aGlzJF9vcHRpb25zMztcblxuICAgIC8vIExlZ2FjeSBzdXBwb3J0IGZvciB0aGUgU0RMP1xuICAgIGlmICgoKF90aGlzJF9vcHRpb25zMyA9IHRoaXMuX29wdGlvbnMpID09PSBudWxsIHx8IF90aGlzJF9vcHRpb25zMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkX29wdGlvbnMzLmFsbG93TGVnYWN5U0RMRW1wdHlGaWVsZHMpID09PSB0cnVlICYmIHRoaXMucGVlayhfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9MKSAmJiB0aGlzLl9sZXhlci5sb29rYWhlYWQoKS5raW5kID09PSBfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9SKSB7XG4gICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG5cbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm9wdGlvbmFsTWFueShfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9MLCB0aGlzLnBhcnNlRmllbGREZWZpbml0aW9uLCBfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9SKTtcbiAgfVxuICAvKipcbiAgICogRmllbGREZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBOYW1lIEFyZ3VtZW50c0RlZmluaXRpb24/IDogVHlwZSBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VGaWVsZERlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUZpZWxkRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGFyZ3MgPSB0aGlzLnBhcnNlQXJndW1lbnREZWZzKCk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5DT0xPTik7XG4gICAgdmFyIHR5cGUgPSB0aGlzLnBhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkZJRUxEX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgYXJndW1lbnRzOiBhcmdzLFxuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEFyZ3VtZW50c0RlZmluaXRpb24gOiAoIElucHV0VmFsdWVEZWZpbml0aW9uKyApXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlQXJndW1lbnREZWZzID0gZnVuY3Rpb24gcGFyc2VBcmd1bWVudERlZnMoKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9uYWxNYW55KF90b2tlbktpbmQuVG9rZW5LaW5kLlBBUkVOX0wsIHRoaXMucGFyc2VJbnB1dFZhbHVlRGVmLCBfdG9rZW5LaW5kLlRva2VuS2luZC5QQVJFTl9SKTtcbiAgfVxuICAvKipcbiAgICogSW5wdXRWYWx1ZURlZmluaXRpb24gOlxuICAgKiAgIC0gRGVzY3JpcHRpb24/IE5hbWUgOiBUeXBlIERlZmF1bHRWYWx1ZT8gRGlyZWN0aXZlc1tDb25zdF0/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW5wdXRWYWx1ZURlZiA9IGZ1bmN0aW9uIHBhcnNlSW5wdXRWYWx1ZURlZigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdGhpcy5leHBlY3RUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5DT0xPTik7XG4gICAgdmFyIHR5cGUgPSB0aGlzLnBhcnNlVHlwZVJlZmVyZW5jZSgpO1xuICAgIHZhciBkZWZhdWx0VmFsdWU7XG5cbiAgICBpZiAodGhpcy5leHBlY3RPcHRpb25hbFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkVRVUFMUykpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHRoaXMucGFyc2VWYWx1ZUxpdGVyYWwodHJ1ZSk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuSU5QVVRfVkFMVUVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZGVmYXVsdFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gaW50ZXJmYWNlIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEZpZWxkc0RlZmluaXRpb24/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW50ZXJmYWNlVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUludGVyZmFjZVR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnaW50ZXJmYWNlJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBpbnRlcmZhY2VzOiBpbnRlcmZhY2VzLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGZpZWxkczogZmllbGRzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBVbmlvblR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyB1bmlvbiBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBVbmlvbk1lbWJlclR5cGVzP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVVuaW9uVHlwZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZVVuaW9uVHlwZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd1bmlvbicpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciB0eXBlcyA9IHRoaXMucGFyc2VVbmlvbk1lbWJlclR5cGVzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgdHlwZXM6IHR5cGVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBVbmlvbk1lbWJlclR5cGVzIDpcbiAgICogICAtID0gYHxgPyBOYW1lZFR5cGVcbiAgICogICAtIFVuaW9uTWVtYmVyVHlwZXMgfCBOYW1lZFR5cGVcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VVbmlvbk1lbWJlclR5cGVzID0gZnVuY3Rpb24gcGFyc2VVbmlvbk1lbWJlclR5cGVzKCkge1xuICAgIHZhciB0eXBlcyA9IFtdO1xuXG4gICAgaWYgKHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5FUVVBTFMpKSB7XG4gICAgICAvLyBPcHRpb25hbCBsZWFkaW5nIHBpcGVcbiAgICAgIHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5QSVBFKTtcblxuICAgICAgZG8ge1xuICAgICAgICB0eXBlcy5wdXNoKHRoaXMucGFyc2VOYW1lZFR5cGUoKSk7XG4gICAgICB9IHdoaWxlICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuUElQRSkpO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlcztcbiAgfVxuICAvKipcbiAgICogRW51bVR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEVudW1WYWx1ZXNEZWZpbml0aW9uP1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUVudW1UeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlRW51bVR5cGVEZWZpbml0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHRoaXMucGFyc2VEZXNjcmlwdGlvbigpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZW51bScpO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLnBhcnNlRW51bVZhbHVlc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuRU5VTV9UWVBFX0RFRklOSVRJT04sXG4gICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIHZhbHVlczogdmFsdWVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBFbnVtVmFsdWVzRGVmaW5pdGlvbiA6IHsgRW51bVZhbHVlRGVmaW5pdGlvbisgfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUVudW1WYWx1ZXNEZWZpbml0aW9uID0gZnVuY3Rpb24gcGFyc2VFbnVtVmFsdWVzRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfTCwgdGhpcy5wYXJzZUVudW1WYWx1ZURlZmluaXRpb24sIF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX1IpO1xuICB9XG4gIC8qKlxuICAgKiBFbnVtVmFsdWVEZWZpbml0aW9uIDogRGVzY3JpcHRpb24/IEVudW1WYWx1ZSBEaXJlY3RpdmVzW0NvbnN0XT9cbiAgICpcbiAgICogRW51bVZhbHVlIDogTmFtZVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZUVudW1WYWx1ZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUVudW1WYWx1ZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLkVOVU1fVkFMVUVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgbG9jOiB0aGlzLmxvYyhzdGFydClcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uIDpcbiAgICogICAtIERlc2NyaXB0aW9uPyBpbnB1dCBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBJbnB1dEZpZWxkc0RlZmluaXRpb24/XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbiA9IGZ1bmN0aW9uIHBhcnNlSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB0aGlzLnBhcnNlRGVzY3JpcHRpb24oKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2lucHV0Jyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMucGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIElucHV0RmllbGRzRGVmaW5pdGlvbiA6IHsgSW5wdXRWYWx1ZURlZmluaXRpb24rIH1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZUlucHV0RmllbGRzRGVmaW5pdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25hbE1hbnkoX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfTCwgdGhpcy5wYXJzZUlucHV0VmFsdWVEZWYsIF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX1IpO1xuICB9XG4gIC8qKlxuICAgKiBUeXBlU3lzdGVtRXh0ZW5zaW9uIDpcbiAgICogICAtIFNjaGVtYUV4dGVuc2lvblxuICAgKiAgIC0gVHlwZUV4dGVuc2lvblxuICAgKlxuICAgKiBUeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIFNjYWxhclR5cGVFeHRlbnNpb25cbiAgICogICAtIE9iamVjdFR5cGVFeHRlbnNpb25cbiAgICogICAtIEludGVyZmFjZVR5cGVFeHRlbnNpb25cbiAgICogICAtIFVuaW9uVHlwZUV4dGVuc2lvblxuICAgKiAgIC0gRW51bVR5cGVFeHRlbnNpb25cbiAgICogICAtIElucHV0T2JqZWN0VHlwZURlZmluaXRpb25cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VUeXBlU3lzdGVtRXh0ZW5zaW9uKCkge1xuICAgIHZhciBrZXl3b3JkVG9rZW4gPSB0aGlzLl9sZXhlci5sb29rYWhlYWQoKTtcblxuICAgIGlmIChrZXl3b3JkVG9rZW4ua2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuTkFNRSkge1xuICAgICAgc3dpdGNoIChrZXl3b3JkVG9rZW4udmFsdWUpIHtcbiAgICAgICAgY2FzZSAnc2NoZW1hJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZVNjaGVtYUV4dGVuc2lvbigpO1xuXG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VTY2FsYXJUeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAndHlwZSc6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW50ZXJmYWNlJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUludGVyZmFjZVR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICd1bmlvbic6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VVbmlvblR5cGVFeHRlbnNpb24oKTtcblxuICAgICAgICBjYXNlICdlbnVtJzpcbiAgICAgICAgICByZXR1cm4gdGhpcy5wYXJzZUVudW1UeXBlRXh0ZW5zaW9uKCk7XG5cbiAgICAgICAgY2FzZSAnaW5wdXQnOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKGtleXdvcmRUb2tlbik7XG4gIH1cbiAgLyoqXG4gICAqIFNjaGVtYUV4dGVuc2lvbiA6XG4gICAqICAtIGV4dGVuZCBzY2hlbWEgRGlyZWN0aXZlc1tDb25zdF0/IHsgT3BlcmF0aW9uVHlwZURlZmluaXRpb24rIH1cbiAgICogIC0gZXh0ZW5kIHNjaGVtYSBEaXJlY3RpdmVzW0NvbnN0XVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZVNjaGVtYUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlU2NoZW1hRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdzY2hlbWEnKTtcbiAgICB2YXIgZGlyZWN0aXZlcyA9IHRoaXMucGFyc2VEaXJlY3RpdmVzKHRydWUpO1xuICAgIHZhciBvcGVyYXRpb25UeXBlcyA9IHRoaXMub3B0aW9uYWxNYW55KF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX0wsIHRoaXMucGFyc2VPcGVyYXRpb25UeXBlRGVmaW5pdGlvbiwgX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfUik7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDAgJiYgb3BlcmF0aW9uVHlwZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuU0NIRU1BX0VYVEVOU0lPTixcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBvcGVyYXRpb25UeXBlczogb3BlcmF0aW9uVHlwZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFNjYWxhclR5cGVFeHRlbnNpb24gOlxuICAgKiAgIC0gZXh0ZW5kIHNjYWxhciBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlU2NhbGFyVHlwZUV4dGVuc2lvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnc2NhbGFyJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG5cbiAgICBpZiAoZGlyZWN0aXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT04sXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogT2JqZWN0VHlwZUV4dGVuc2lvbiA6XG4gICAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uXG4gICAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqICAtIGV4dGVuZCB0eXBlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXNcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VPYmplY3RUeXBlRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCd0eXBlJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcblxuICAgIGlmIChpbnRlcmZhY2VzLmxlbmd0aCA9PT0gMCAmJiBkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGludGVyZmFjZXM6IGludGVyZmFjZXMsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEludGVyZmFjZVR5cGVFeHRlbnNpb24gOlxuICAgKiAgLSBleHRlbmQgaW50ZXJmYWNlIE5hbWUgSW1wbGVtZW50c0ludGVyZmFjZXM/IERpcmVjdGl2ZXNbQ29uc3RdPyBGaWVsZHNEZWZpbml0aW9uXG4gICAqICAtIGV4dGVuZCBpbnRlcmZhY2UgTmFtZSBJbXBsZW1lbnRzSW50ZXJmYWNlcz8gRGlyZWN0aXZlc1tDb25zdF1cbiAgICogIC0gZXh0ZW5kIGludGVyZmFjZSBOYW1lIEltcGxlbWVudHNJbnRlcmZhY2VzXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbiA9IGZ1bmN0aW9uIHBhcnNlSW50ZXJmYWNlVHlwZUV4dGVuc2lvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnaW50ZXJmYWNlJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBpbnRlcmZhY2VzID0gdGhpcy5wYXJzZUltcGxlbWVudHNJbnRlcmZhY2VzKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5wYXJzZUZpZWxkc0RlZmluaXRpb24oKTtcblxuICAgIGlmIChpbnRlcmZhY2VzLmxlbmd0aCA9PT0gMCAmJiBkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuSU5URVJGQUNFX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGludGVyZmFjZXM6IGludGVyZmFjZXMsXG4gICAgICBkaXJlY3RpdmVzOiBkaXJlY3RpdmVzLFxuICAgICAgZmllbGRzOiBmaWVsZHMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIFVuaW9uVHlwZUV4dGVuc2lvbiA6XG4gICAqICAgLSBleHRlbmQgdW5pb24gTmFtZSBEaXJlY3RpdmVzW0NvbnN0XT8gVW5pb25NZW1iZXJUeXBlc1xuICAgKiAgIC0gZXh0ZW5kIHVuaW9uIE5hbWUgRGlyZWN0aXZlc1tDb25zdF1cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucGFyc2VVbmlvblR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZVVuaW9uVHlwZUV4dGVuc2lvbigpIHtcbiAgICB2YXIgc3RhcnQgPSB0aGlzLl9sZXhlci50b2tlbjtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2V4dGVuZCcpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgndW5pb24nKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGRpcmVjdGl2ZXMgPSB0aGlzLnBhcnNlRGlyZWN0aXZlcyh0cnVlKTtcbiAgICB2YXIgdHlwZXMgPSB0aGlzLnBhcnNlVW5pb25NZW1iZXJUeXBlcygpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIHR5cGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGtpbmQ6IF9raW5kcy5LaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICB0eXBlczogdHlwZXMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIEVudW1UeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIGV4dGVuZCBlbnVtIE5hbWUgRGlyZWN0aXZlc1tDb25zdF0/IEVudW1WYWx1ZXNEZWZpbml0aW9uXG4gICAqICAgLSBleHRlbmQgZW51bSBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRW51bVR5cGVFeHRlbnNpb24gPSBmdW5jdGlvbiBwYXJzZUVudW1UeXBlRXh0ZW5zaW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnZXh0ZW5kJyk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdlbnVtJyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMucGFyc2VFbnVtVmFsdWVzRGVmaW5pdGlvbigpO1xuXG4gICAgaWYgKGRpcmVjdGl2ZXMubGVuZ3RoID09PSAwICYmIHZhbHVlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IHRoaXMudW5leHBlY3RlZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICB2YWx1ZXM6IHZhbHVlcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uIDpcbiAgICogICAtIGV4dGVuZCBpbnB1dCBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdPyBJbnB1dEZpZWxkc0RlZmluaXRpb25cbiAgICogICAtIGV4dGVuZCBpbnB1dCBOYW1lIERpcmVjdGl2ZXNbQ29uc3RdXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlSW5wdXRPYmplY3RUeXBlRXh0ZW5zaW9uID0gZnVuY3Rpb24gcGFyc2VJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdleHRlbmQnKTtcbiAgICB0aGlzLmV4cGVjdEtleXdvcmQoJ2lucHV0Jyk7XG4gICAgdmFyIG5hbWUgPSB0aGlzLnBhcnNlTmFtZSgpO1xuICAgIHZhciBkaXJlY3RpdmVzID0gdGhpcy5wYXJzZURpcmVjdGl2ZXModHJ1ZSk7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMucGFyc2VJbnB1dEZpZWxkc0RlZmluaXRpb24oKTtcblxuICAgIGlmIChkaXJlY3RpdmVzLmxlbmd0aCA9PT0gMCAmJiBmaWVsZHMubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyB0aGlzLnVuZXhwZWN0ZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAga2luZDogX2tpbmRzLktpbmQuSU5QVVRfT0JKRUNUX1RZUEVfRVhURU5TSU9OLFxuICAgICAgbmFtZTogbmFtZSxcbiAgICAgIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMsXG4gICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgIGxvYzogdGhpcy5sb2Moc3RhcnQpXG4gICAgfTtcbiAgfVxuICAvKipcbiAgICogRGlyZWN0aXZlRGVmaW5pdGlvbiA6XG4gICAqICAgLSBEZXNjcmlwdGlvbj8gZGlyZWN0aXZlIEAgTmFtZSBBcmd1bWVudHNEZWZpbml0aW9uPyBgcmVwZWF0YWJsZWA/IG9uIERpcmVjdGl2ZUxvY2F0aW9uc1xuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURpcmVjdGl2ZURlZmluaXRpb24gPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZURlZmluaXRpb24oKSB7XG4gICAgdmFyIHN0YXJ0ID0gdGhpcy5fbGV4ZXIudG9rZW47XG4gICAgdmFyIGRlc2NyaXB0aW9uID0gdGhpcy5wYXJzZURlc2NyaXB0aW9uKCk7XG4gICAgdGhpcy5leHBlY3RLZXl3b3JkKCdkaXJlY3RpdmUnKTtcbiAgICB0aGlzLmV4cGVjdFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkFUKTtcbiAgICB2YXIgbmFtZSA9IHRoaXMucGFyc2VOYW1lKCk7XG4gICAgdmFyIGFyZ3MgPSB0aGlzLnBhcnNlQXJndW1lbnREZWZzKCk7XG4gICAgdmFyIHJlcGVhdGFibGUgPSB0aGlzLmV4cGVjdE9wdGlvbmFsS2V5d29yZCgncmVwZWF0YWJsZScpO1xuICAgIHRoaXMuZXhwZWN0S2V5d29yZCgnb24nKTtcbiAgICB2YXIgbG9jYXRpb25zID0gdGhpcy5wYXJzZURpcmVjdGl2ZUxvY2F0aW9ucygpO1xuICAgIHJldHVybiB7XG4gICAgICBraW5kOiBfa2luZHMuS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTixcbiAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgICByZXBlYXRhYmxlOiByZXBlYXRhYmxlLFxuICAgICAgbG9jYXRpb25zOiBsb2NhdGlvbnMsXG4gICAgICBsb2M6IHRoaXMubG9jKHN0YXJ0KVxuICAgIH07XG4gIH1cbiAgLyoqXG4gICAqIERpcmVjdGl2ZUxvY2F0aW9ucyA6XG4gICAqICAgLSBgfGA/IERpcmVjdGl2ZUxvY2F0aW9uXG4gICAqICAgLSBEaXJlY3RpdmVMb2NhdGlvbnMgfCBEaXJlY3RpdmVMb2NhdGlvblxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wYXJzZURpcmVjdGl2ZUxvY2F0aW9ucyA9IGZ1bmN0aW9uIHBhcnNlRGlyZWN0aXZlTG9jYXRpb25zKCkge1xuICAgIC8vIE9wdGlvbmFsIGxlYWRpbmcgcGlwZVxuICAgIHRoaXMuZXhwZWN0T3B0aW9uYWxUb2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5QSVBFKTtcbiAgICB2YXIgbG9jYXRpb25zID0gW107XG5cbiAgICBkbyB7XG4gICAgICBsb2NhdGlvbnMucHVzaCh0aGlzLnBhcnNlRGlyZWN0aXZlTG9jYXRpb24oKSk7XG4gICAgfSB3aGlsZSAodGhpcy5leHBlY3RPcHRpb25hbFRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLlBJUEUpKTtcblxuICAgIHJldHVybiBsb2NhdGlvbnM7XG4gIH1cbiAgLypcbiAgICogRGlyZWN0aXZlTG9jYXRpb24gOlxuICAgKiAgIC0gRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uXG4gICAqICAgLSBUeXBlU3lzdGVtRGlyZWN0aXZlTG9jYXRpb25cbiAgICpcbiAgICogRXhlY3V0YWJsZURpcmVjdGl2ZUxvY2F0aW9uIDogb25lIG9mXG4gICAqICAgYFFVRVJZYFxuICAgKiAgIGBNVVRBVElPTmBcbiAgICogICBgU1VCU0NSSVBUSU9OYFxuICAgKiAgIGBGSUVMRGBcbiAgICogICBgRlJBR01FTlRfREVGSU5JVElPTmBcbiAgICogICBgRlJBR01FTlRfU1BSRUFEYFxuICAgKiAgIGBJTkxJTkVfRlJBR01FTlRgXG4gICAqXG4gICAqIFR5cGVTeXN0ZW1EaXJlY3RpdmVMb2NhdGlvbiA6IG9uZSBvZlxuICAgKiAgIGBTQ0hFTUFgXG4gICAqICAgYFNDQUxBUmBcbiAgICogICBgT0JKRUNUYFxuICAgKiAgIGBGSUVMRF9ERUZJTklUSU9OYFxuICAgKiAgIGBBUkdVTUVOVF9ERUZJTklUSU9OYFxuICAgKiAgIGBJTlRFUkZBQ0VgXG4gICAqICAgYFVOSU9OYFxuICAgKiAgIGBFTlVNYFxuICAgKiAgIGBFTlVNX1ZBTFVFYFxuICAgKiAgIGBJTlBVVF9PQkpFQ1RgXG4gICAqICAgYElOUFVUX0ZJRUxEX0RFRklOSVRJT05gXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBhcnNlRGlyZWN0aXZlTG9jYXRpb24gPSBmdW5jdGlvbiBwYXJzZURpcmVjdGl2ZUxvY2F0aW9uKCkge1xuICAgIHZhciBzdGFydCA9IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHZhciBuYW1lID0gdGhpcy5wYXJzZU5hbWUoKTtcblxuICAgIGlmIChfZGlyZWN0aXZlTG9jYXRpb24uRGlyZWN0aXZlTG9jYXRpb25bbmFtZS52YWx1ZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuXG4gICAgdGhyb3cgdGhpcy51bmV4cGVjdGVkKHN0YXJ0KTtcbiAgfSAvLyBDb3JlIHBhcnNpbmcgdXRpbGl0eSBmdW5jdGlvbnNcblxuICAvKipcbiAgICogUmV0dXJucyBhIGxvY2F0aW9uIG9iamVjdCwgdXNlZCB0byBpZGVudGlmeSB0aGUgcGxhY2UgaW5cbiAgICogdGhlIHNvdXJjZSB0aGF0IGNyZWF0ZWQgYSBnaXZlbiBwYXJzZWQgb2JqZWN0LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb2MgPSBmdW5jdGlvbiBsb2Moc3RhcnRUb2tlbikge1xuICAgIHZhciBfdGhpcyRfb3B0aW9uczQ7XG5cbiAgICBpZiAoKChfdGhpcyRfb3B0aW9uczQgPSB0aGlzLl9vcHRpb25zKSA9PT0gbnVsbCB8fCBfdGhpcyRfb3B0aW9uczQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJF9vcHRpb25zNC5ub0xvY2F0aW9uKSAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIG5ldyBfYXN0LkxvY2F0aW9uKHN0YXJ0VG9rZW4sIHRoaXMuX2xleGVyLmxhc3RUb2tlbiwgdGhpcy5fbGV4ZXIuc291cmNlKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgYSBnaXZlbiBraW5kXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnBlZWsgPSBmdW5jdGlvbiBwZWVrKGtpbmQpIHtcbiAgICByZXR1cm4gdGhpcy5fbGV4ZXIudG9rZW4ua2luZCA9PT0ga2luZDtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuIGtpbmQsIHJldHVybiB0aGF0IHRva2VuIGFmdGVyIGFkdmFuY2luZ1xuICAgKiB0aGUgbGV4ZXIuIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCB0aHJvdyBhbiBlcnJvci5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwZWN0VG9rZW4gPSBmdW5jdGlvbiBleHBlY3RUb2tlbihraW5kKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0ga2luZCkge1xuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgdGhyb3cgKDAsIF9zeW50YXhFcnJvci5zeW50YXhFcnJvcikodGhpcy5fbGV4ZXIuc291cmNlLCB0b2tlbi5zdGFydCwgXCJFeHBlY3RlZCBcIi5jb25jYXQoZ2V0VG9rZW5LaW5kRGVzYyhraW5kKSwgXCIsIGZvdW5kIFwiKS5jb25jYXQoZ2V0VG9rZW5EZXNjKHRva2VuKSwgXCIuXCIpKTtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgb2YgdGhlIGdpdmVuIGtpbmQsIHJldHVybiB0aGF0IHRva2VuIGFmdGVyIGFkdmFuY2luZ1xuICAgKiB0aGUgbGV4ZXIuIE90aGVyd2lzZSwgZG8gbm90IGNoYW5nZSB0aGUgcGFyc2VyIHN0YXRlIGFuZCByZXR1cm4gdW5kZWZpbmVkLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBlY3RPcHRpb25hbFRva2VuID0gZnVuY3Rpb24gZXhwZWN0T3B0aW9uYWxUb2tlbihraW5kKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0ga2luZCkge1xuICAgICAgdGhpcy5fbGV4ZXIuYWR2YW5jZSgpO1xuXG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIG5leHQgdG9rZW4gaXMgYSBnaXZlbiBrZXl3b3JkLCBhZHZhbmNlIHRoZSBsZXhlci5cbiAgICogT3RoZXJ3aXNlLCBkbyBub3QgY2hhbmdlIHRoZSBwYXJzZXIgc3RhdGUgYW5kIHRocm93IGFuIGVycm9yLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5leHBlY3RLZXl3b3JkID0gZnVuY3Rpb24gZXhwZWN0S2V5d29yZCh2YWx1ZSkge1xuICAgIHZhciB0b2tlbiA9IHRoaXMuX2xleGVyLnRva2VuO1xuXG4gICAgaWYgKHRva2VuLmtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLk5BTUUgJiYgdG9rZW4udmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICB0aGlzLl9sZXhlci5hZHZhbmNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93ICgwLCBfc3ludGF4RXJyb3Iuc3ludGF4RXJyb3IpKHRoaXMuX2xleGVyLnNvdXJjZSwgdG9rZW4uc3RhcnQsIFwiRXhwZWN0ZWQgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiLCBmb3VuZCBcIikuY29uY2F0KGdldFRva2VuRGVzYyh0b2tlbiksIFwiLlwiKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBJZiB0aGUgbmV4dCB0b2tlbiBpcyBhIGdpdmVuIGtleXdvcmQsIHJldHVybiBcInRydWVcIiBhZnRlciBhZHZhbmNpbmdcbiAgICogdGhlIGxleGVyLiBPdGhlcndpc2UsIGRvIG5vdCBjaGFuZ2UgdGhlIHBhcnNlciBzdGF0ZSBhbmQgcmV0dXJuIFwiZmFsc2VcIi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXhwZWN0T3B0aW9uYWxLZXl3b3JkID0gZnVuY3Rpb24gZXhwZWN0T3B0aW9uYWxLZXl3b3JkKHZhbHVlKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy5fbGV4ZXIudG9rZW47XG5cbiAgICBpZiAodG9rZW4ua2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuTkFNRSAmJiB0b2tlbi52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuX2xleGVyLmFkdmFuY2UoKTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8qKlxuICAgKiBIZWxwZXIgZnVuY3Rpb24gZm9yIGNyZWF0aW5nIGFuIGVycm9yIHdoZW4gYW4gdW5leHBlY3RlZCBsZXhlZCB0b2tlblxuICAgKiBpcyBlbmNvdW50ZXJlZC5cbiAgICovXG4gIDtcblxuICBfcHJvdG8udW5leHBlY3RlZCA9IGZ1bmN0aW9uIHVuZXhwZWN0ZWQoYXRUb2tlbikge1xuICAgIHZhciB0b2tlbiA9IGF0VG9rZW4gIT09IG51bGwgJiYgYXRUb2tlbiAhPT0gdm9pZCAwID8gYXRUb2tlbiA6IHRoaXMuX2xleGVyLnRva2VuO1xuICAgIHJldHVybiAoMCwgX3N5bnRheEVycm9yLnN5bnRheEVycm9yKSh0aGlzLl9sZXhlci5zb3VyY2UsIHRva2VuLnN0YXJ0LCBcIlVuZXhwZWN0ZWQgXCIuY29uY2F0KGdldFRva2VuRGVzYyh0b2tlbiksIFwiLlwiKSk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBwb3NzaWJseSBlbXB0eSBsaXN0IG9mIHBhcnNlIG5vZGVzLCBkZXRlcm1pbmVkIGJ5XG4gICAqIHRoZSBwYXJzZUZuLiBUaGlzIGxpc3QgYmVnaW5zIHdpdGggYSBsZXggdG9rZW4gb2Ygb3BlbktpbmRcbiAgICogYW5kIGVuZHMgd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuIEFkdmFuY2VzIHRoZSBwYXJzZXJcbiAgICogdG8gdGhlIG5leHQgbGV4IHRva2VuIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5hbnkgPSBmdW5jdGlvbiBhbnkob3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICAgIHRoaXMuZXhwZWN0VG9rZW4ob3BlbktpbmQpO1xuICAgIHZhciBub2RlcyA9IFtdO1xuXG4gICAgd2hpbGUgKCF0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4oY2xvc2VLaW5kKSkge1xuICAgICAgbm9kZXMucHVzaChwYXJzZUZuLmNhbGwodGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGxpc3Qgb2YgcGFyc2Ugbm9kZXMsIGRldGVybWluZWQgYnkgdGhlIHBhcnNlRm4uXG4gICAqIEl0IGNhbiBiZSBlbXB0eSBvbmx5IGlmIG9wZW4gdG9rZW4gaXMgbWlzc2luZyBvdGhlcndpc2UgaXQgd2lsbCBhbHdheXNcbiAgICogcmV0dXJuIG5vbi1lbXB0eSBsaXN0IHRoYXQgYmVnaW5zIHdpdGggYSBsZXggdG9rZW4gb2Ygb3BlbktpbmQgYW5kIGVuZHNcbiAgICogd2l0aCBhIGxleCB0b2tlbiBvZiBjbG9zZUtpbmQuIEFkdmFuY2VzIHRoZSBwYXJzZXIgdG8gdGhlIG5leHQgbGV4IHRva2VuXG4gICAqIGFmdGVyIHRoZSBjbG9zaW5nIHRva2VuLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5vcHRpb25hbE1hbnkgPSBmdW5jdGlvbiBvcHRpb25hbE1hbnkob3BlbktpbmQsIHBhcnNlRm4sIGNsb3NlS2luZCkge1xuICAgIGlmICh0aGlzLmV4cGVjdE9wdGlvbmFsVG9rZW4ob3BlbktpbmQpKSB7XG4gICAgICB2YXIgbm9kZXMgPSBbXTtcblxuICAgICAgZG8ge1xuICAgICAgICBub2Rlcy5wdXNoKHBhcnNlRm4uY2FsbCh0aGlzKSk7XG4gICAgICB9IHdoaWxlICghdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKGNsb3NlS2luZCkpO1xuXG4gICAgICByZXR1cm4gbm9kZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbm9uLWVtcHR5IGxpc3Qgb2YgcGFyc2Ugbm9kZXMsIGRldGVybWluZWQgYnlcbiAgICogdGhlIHBhcnNlRm4uIFRoaXMgbGlzdCBiZWdpbnMgd2l0aCBhIGxleCB0b2tlbiBvZiBvcGVuS2luZFxuICAgKiBhbmQgZW5kcyB3aXRoIGEgbGV4IHRva2VuIG9mIGNsb3NlS2luZC4gQWR2YW5jZXMgdGhlIHBhcnNlclxuICAgKiB0byB0aGUgbmV4dCBsZXggdG9rZW4gYWZ0ZXIgdGhlIGNsb3NpbmcgdG9rZW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm1hbnkgPSBmdW5jdGlvbiBtYW55KG9wZW5LaW5kLCBwYXJzZUZuLCBjbG9zZUtpbmQpIHtcbiAgICB0aGlzLmV4cGVjdFRva2VuKG9wZW5LaW5kKTtcbiAgICB2YXIgbm9kZXMgPSBbXTtcblxuICAgIGRvIHtcbiAgICAgIG5vZGVzLnB1c2gocGFyc2VGbi5jYWxsKHRoaXMpKTtcbiAgICB9IHdoaWxlICghdGhpcy5leHBlY3RPcHRpb25hbFRva2VuKGNsb3NlS2luZCkpO1xuXG4gICAgcmV0dXJuIG5vZGVzO1xuICB9O1xuXG4gIHJldHVybiBQYXJzZXI7XG59KCk7XG4vKipcbiAqIEEgaGVscGVyIGZ1bmN0aW9uIHRvIGRlc2NyaWJlIGEgdG9rZW4gYXMgYSBzdHJpbmcgZm9yIGRlYnVnZ2luZ1xuICovXG5cblxuZnVuY3Rpb24gZ2V0VG9rZW5EZXNjKHRva2VuKSB7XG4gIHZhciB2YWx1ZSA9IHRva2VuLnZhbHVlO1xuICByZXR1cm4gZ2V0VG9rZW5LaW5kRGVzYyh0b2tlbi5raW5kKSArICh2YWx1ZSAhPSBudWxsID8gXCIgXFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiXCIpIDogJycpO1xufVxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiB0byBkZXNjcmliZSBhIHRva2VuIGtpbmQgYXMgYSBzdHJpbmcgZm9yIGRlYnVnZ2luZ1xuICovXG5cblxuZnVuY3Rpb24gZ2V0VG9rZW5LaW5kRGVzYyhraW5kKSB7XG4gIHJldHVybiAoMCwgX2xleGVyLmlzUHVuY3R1YXRvclRva2VuS2luZCkoa2luZCkgPyBcIlxcXCJcIi5jb25jYXQoa2luZCwgXCJcXFwiXCIpIDoga2luZDtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5wcmludEVycm9yID0gcHJpbnRFcnJvcjtcbmV4cG9ydHMuR3JhcGhRTEVycm9yID0gdm9pZCAwO1xuXG52YXIgX2lzT2JqZWN0TGlrZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvaXNPYmplY3RMaWtlXCIpKTtcblxudmFyIF9zeW1ib2xzID0gcmVxdWlyZShcIi4uL3BvbHlmaWxscy9zeW1ib2xzXCIpO1xuXG52YXIgX2xvY2F0aW9uID0gcmVxdWlyZShcIi4uL2xhbmd1YWdlL2xvY2F0aW9uXCIpO1xuXG52YXIgX3ByaW50TG9jYXRpb24gPSByZXF1aXJlKFwiLi4vbGFuZ3VhZ2UvcHJpbnRMb2NhdGlvblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkOyBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzOyBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7IGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpOyBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpOyB9IFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IFdyYXBwZXIsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpOyB9OyByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7IH1cblxuZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IGlmIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHsgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0OyB9IGVsc2UgeyBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IHZhciBhID0gW251bGxdOyBhLnB1c2guYXBwbHkoYSwgYXJncyk7IHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTsgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7IGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpOyByZXR1cm4gaW5zdGFuY2U7IH07IH0gcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG4vKipcbiAqIEEgR3JhcGhRTEVycm9yIGRlc2NyaWJlcyBhbiBFcnJvciBmb3VuZCBkdXJpbmcgdGhlIHBhcnNlLCB2YWxpZGF0ZSwgb3JcbiAqIGV4ZWN1dGUgcGhhc2VzIG9mIHBlcmZvcm1pbmcgYSBHcmFwaFFMIG9wZXJhdGlvbi4gSW4gYWRkaXRpb24gdG8gYSBtZXNzYWdlXG4gKiBhbmQgc3RhY2sgdHJhY2UsIGl0IGFsc28gaW5jbHVkZXMgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxvY2F0aW9ucyBpbiBhXG4gKiBHcmFwaFFMIGRvY3VtZW50IGFuZC9vciBleGVjdXRpb24gcmVzdWx0IHRoYXQgY29ycmVzcG9uZCB0byB0aGUgRXJyb3IuXG4gKi9cbnZhciBHcmFwaFFMRXJyb3IgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9FcnJvcikge1xuICBfaW5oZXJpdHMoR3JhcGhRTEVycm9yLCBfRXJyb3IpO1xuXG4gIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoR3JhcGhRTEVycm9yKTtcblxuICAvKipcbiAgICogQSBtZXNzYWdlIGRlc2NyaWJpbmcgdGhlIEVycm9yIGZvciBkZWJ1Z2dpbmcgcHVycG9zZXMuXG4gICAqXG4gICAqIEVudW1lcmFibGUsIGFuZCBhcHBlYXJzIGluIHRoZSByZXN1bHQgb2YgSlNPTi5zdHJpbmdpZnkoKS5cbiAgICpcbiAgICogTm90ZTogc2hvdWxkIGJlIHRyZWF0ZWQgYXMgcmVhZG9ubHksIGRlc3BpdGUgaW52YXJpYW50IHVzYWdlLlxuICAgKi9cblxuICAvKipcbiAgICogQW4gYXJyYXkgb2YgeyBsaW5lLCBjb2x1bW4gfSBsb2NhdGlvbnMgd2l0aGluIHRoZSBzb3VyY2UgR3JhcGhRTCBkb2N1bWVudFxuICAgKiB3aGljaCBjb3JyZXNwb25kIHRvIHRoaXMgZXJyb3IuXG4gICAqXG4gICAqIEVycm9ycyBkdXJpbmcgdmFsaWRhdGlvbiBvZnRlbiBjb250YWluIG11bHRpcGxlIGxvY2F0aW9ucywgZm9yIGV4YW1wbGUgdG9cbiAgICogcG9pbnQgb3V0IHR3byB0aGluZ3Mgd2l0aCB0aGUgc2FtZSBuYW1lLiBFcnJvcnMgZHVyaW5nIGV4ZWN1dGlvbiBpbmNsdWRlIGFcbiAgICogc2luZ2xlIGxvY2F0aW9uLCB0aGUgZmllbGQgd2hpY2ggcHJvZHVjZWQgdGhlIGVycm9yLlxuICAgKlxuICAgKiBFbnVtZXJhYmxlLCBhbmQgYXBwZWFycyBpbiB0aGUgcmVzdWx0IG9mIEpTT04uc3RyaW5naWZ5KCkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBkZXNjcmliaW5nIHRoZSBKU09OLXBhdGggaW50byB0aGUgZXhlY3V0aW9uIHJlc3BvbnNlIHdoaWNoXG4gICAqIGNvcnJlc3BvbmRzIHRvIHRoaXMgZXJyb3IuIE9ubHkgaW5jbHVkZWQgZm9yIGVycm9ycyBkdXJpbmcgZXhlY3V0aW9uLlxuICAgKlxuICAgKiBFbnVtZXJhYmxlLCBhbmQgYXBwZWFycyBpbiB0aGUgcmVzdWx0IG9mIEpTT04uc3RyaW5naWZ5KCkuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBHcmFwaFFMIEFTVCBOb2RlcyBjb3JyZXNwb25kaW5nIHRvIHRoaXMgZXJyb3IuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgc291cmNlIEdyYXBoUUwgZG9jdW1lbnQgZm9yIHRoZSBmaXJzdCBsb2NhdGlvbiBvZiB0aGlzIGVycm9yLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgaWYgdGhpcyBFcnJvciByZXByZXNlbnRzIG1vcmUgdGhhbiBvbmUgbm9kZSwgdGhlIHNvdXJjZSBtYXkgbm90XG4gICAqIHJlcHJlc2VudCBub2RlcyBhZnRlciB0aGUgZmlyc3Qgbm9kZS5cbiAgICovXG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIGNoYXJhY3RlciBvZmZzZXRzIHdpdGhpbiB0aGUgc291cmNlIEdyYXBoUUwgZG9jdW1lbnRcbiAgICogd2hpY2ggY29ycmVzcG9uZCB0byB0aGlzIGVycm9yLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIG9yaWdpbmFsIGVycm9yIHRocm93biBmcm9tIGEgZmllbGQgcmVzb2x2ZXIgZHVyaW5nIGV4ZWN1dGlvbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIEV4dGVuc2lvbiBmaWVsZHMgdG8gYWRkIHRvIHRoZSBmb3JtYXR0ZWQgZXJyb3IuXG4gICAqL1xuICBmdW5jdGlvbiBHcmFwaFFMRXJyb3IobWVzc2FnZSwgbm9kZXMsIHNvdXJjZSwgcG9zaXRpb25zLCBwYXRoLCBvcmlnaW5hbEVycm9yLCBleHRlbnNpb25zKSB7XG4gICAgdmFyIF9sb2NhdGlvbnMyLCBfc291cmNlMiwgX3Bvc2l0aW9uczIsIF9leHRlbnNpb25zMjtcblxuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBHcmFwaFFMRXJyb3IpO1xuXG4gICAgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBtZXNzYWdlKTsgLy8gQ29tcHV0ZSBsaXN0IG9mIGJsYW1lIG5vZGVzLlxuXG4gICAgdmFyIF9ub2RlcyA9IEFycmF5LmlzQXJyYXkobm9kZXMpID8gbm9kZXMubGVuZ3RoICE9PSAwID8gbm9kZXMgOiB1bmRlZmluZWQgOiBub2RlcyA/IFtub2Rlc10gOiB1bmRlZmluZWQ7IC8vIENvbXB1dGUgbG9jYXRpb25zIGluIHRoZSBzb3VyY2UgZm9yIHRoZSBnaXZlbiBub2Rlcy9wb3NpdGlvbnMuXG5cblxuICAgIHZhciBfc291cmNlID0gc291cmNlO1xuXG4gICAgaWYgKCFfc291cmNlICYmIF9ub2Rlcykge1xuICAgICAgdmFyIF9ub2RlcyQwJGxvYztcblxuICAgICAgX3NvdXJjZSA9IChfbm9kZXMkMCRsb2MgPSBfbm9kZXNbMF0ubG9jKSA9PT0gbnVsbCB8fCBfbm9kZXMkMCRsb2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9ub2RlcyQwJGxvYy5zb3VyY2U7XG4gICAgfVxuXG4gICAgdmFyIF9wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG5cbiAgICBpZiAoIV9wb3NpdGlvbnMgJiYgX25vZGVzKSB7XG4gICAgICBfcG9zaXRpb25zID0gX25vZGVzLnJlZHVjZShmdW5jdGlvbiAobGlzdCwgbm9kZSkge1xuICAgICAgICBpZiAobm9kZS5sb2MpIHtcbiAgICAgICAgICBsaXN0LnB1c2gobm9kZS5sb2Muc3RhcnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxpc3Q7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuXG4gICAgaWYgKF9wb3NpdGlvbnMgJiYgX3Bvc2l0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgIF9wb3NpdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgdmFyIF9sb2NhdGlvbnM7XG5cbiAgICBpZiAocG9zaXRpb25zICYmIHNvdXJjZSkge1xuICAgICAgX2xvY2F0aW9ucyA9IHBvc2l0aW9ucy5tYXAoZnVuY3Rpb24gKHBvcykge1xuICAgICAgICByZXR1cm4gKDAsIF9sb2NhdGlvbi5nZXRMb2NhdGlvbikoc291cmNlLCBwb3MpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChfbm9kZXMpIHtcbiAgICAgIF9sb2NhdGlvbnMgPSBfbm9kZXMucmVkdWNlKGZ1bmN0aW9uIChsaXN0LCBub2RlKSB7XG4gICAgICAgIGlmIChub2RlLmxvYykge1xuICAgICAgICAgIGxpc3QucHVzaCgoMCwgX2xvY2F0aW9uLmdldExvY2F0aW9uKShub2RlLmxvYy5zb3VyY2UsIG5vZGUubG9jLnN0YXJ0KSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbGlzdDtcbiAgICAgIH0sIFtdKTtcbiAgICB9XG5cbiAgICB2YXIgX2V4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXG4gICAgaWYgKF9leHRlbnNpb25zID09IG51bGwgJiYgb3JpZ2luYWxFcnJvciAhPSBudWxsKSB7XG4gICAgICB2YXIgb3JpZ2luYWxFeHRlbnNpb25zID0gb3JpZ2luYWxFcnJvci5leHRlbnNpb25zO1xuXG4gICAgICBpZiAoKDAsIF9pc09iamVjdExpa2UuZGVmYXVsdCkob3JpZ2luYWxFeHRlbnNpb25zKSkge1xuICAgICAgICBfZXh0ZW5zaW9ucyA9IG9yaWdpbmFsRXh0ZW5zaW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwge1xuICAgICAgbmFtZToge1xuICAgICAgICB2YWx1ZTogJ0dyYXBoUUxFcnJvcidcbiAgICAgIH0sXG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgICAvLyBCeSBiZWluZyBlbnVtZXJhYmxlLCBKU09OLnN0cmluZ2lmeSB3aWxsIGluY2x1ZGUgYG1lc3NhZ2VgIGluIHRoZVxuICAgICAgICAvLyByZXN1bHRpbmcgb3V0cHV0LiBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgc2ltcGxlc3QgcG9zc2libGUgR3JhcGhRTFxuICAgICAgICAvLyBzZXJ2aWNlIGFkaGVyZXMgdG8gdGhlIHNwZWMuXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9LFxuICAgICAgbG9jYXRpb25zOiB7XG4gICAgICAgIC8vIENvZXJjaW5nIGZhbHN5IHZhbHVlcyB0byB1bmRlZmluZWQgZW5zdXJlcyB0aGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkXG4gICAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICAgIHZhbHVlOiAoX2xvY2F0aW9uczIgPSBfbG9jYXRpb25zKSAhPT0gbnVsbCAmJiBfbG9jYXRpb25zMiAhPT0gdm9pZCAwID8gX2xvY2F0aW9uczIgOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgbG9jYXRpb25zYCBpbiB0aGVcbiAgICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgICBlbnVtZXJhYmxlOiBfbG9jYXRpb25zICE9IG51bGxcbiAgICAgIH0sXG4gICAgICBwYXRoOiB7XG4gICAgICAgIC8vIENvZXJjaW5nIGZhbHN5IHZhbHVlcyB0byB1bmRlZmluZWQgZW5zdXJlcyB0aGV5IHdpbGwgbm90IGJlIGluY2x1ZGVkXG4gICAgICAgIC8vIGluIEpTT04uc3RyaW5naWZ5KCkgd2hlbiBub3QgcHJvdmlkZWQuXG4gICAgICAgIHZhbHVlOiBwYXRoICE9PSBudWxsICYmIHBhdGggIT09IHZvaWQgMCA/IHBhdGggOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEJ5IGJlaW5nIGVudW1lcmFibGUsIEpTT04uc3RyaW5naWZ5IHdpbGwgaW5jbHVkZSBgcGF0aGAgaW4gdGhlXG4gICAgICAgIC8vIHJlc3VsdGluZyBvdXRwdXQuIFRoaXMgZW5zdXJlcyB0aGF0IHRoZSBzaW1wbGVzdCBwb3NzaWJsZSBHcmFwaFFMXG4gICAgICAgIC8vIHNlcnZpY2UgYWRoZXJlcyB0byB0aGUgc3BlYy5cbiAgICAgICAgZW51bWVyYWJsZTogcGF0aCAhPSBudWxsXG4gICAgICB9LFxuICAgICAgbm9kZXM6IHtcbiAgICAgICAgdmFsdWU6IF9ub2RlcyAhPT0gbnVsbCAmJiBfbm9kZXMgIT09IHZvaWQgMCA/IF9ub2RlcyA6IHVuZGVmaW5lZFxuICAgICAgfSxcbiAgICAgIHNvdXJjZToge1xuICAgICAgICB2YWx1ZTogKF9zb3VyY2UyID0gX3NvdXJjZSkgIT09IG51bGwgJiYgX3NvdXJjZTIgIT09IHZvaWQgMCA/IF9zb3VyY2UyIDogdW5kZWZpbmVkXG4gICAgICB9LFxuICAgICAgcG9zaXRpb25zOiB7XG4gICAgICAgIHZhbHVlOiAoX3Bvc2l0aW9uczIgPSBfcG9zaXRpb25zKSAhPT0gbnVsbCAmJiBfcG9zaXRpb25zMiAhPT0gdm9pZCAwID8gX3Bvc2l0aW9uczIgOiB1bmRlZmluZWRcbiAgICAgIH0sXG4gICAgICBvcmlnaW5hbEVycm9yOiB7XG4gICAgICAgIHZhbHVlOiBvcmlnaW5hbEVycm9yXG4gICAgICB9LFxuICAgICAgZXh0ZW5zaW9uczoge1xuICAgICAgICAvLyBDb2VyY2luZyBmYWxzeSB2YWx1ZXMgdG8gdW5kZWZpbmVkIGVuc3VyZXMgdGhleSB3aWxsIG5vdCBiZSBpbmNsdWRlZFxuICAgICAgICAvLyBpbiBKU09OLnN0cmluZ2lmeSgpIHdoZW4gbm90IHByb3ZpZGVkLlxuICAgICAgICB2YWx1ZTogKF9leHRlbnNpb25zMiA9IF9leHRlbnNpb25zKSAhPT0gbnVsbCAmJiBfZXh0ZW5zaW9uczIgIT09IHZvaWQgMCA/IF9leHRlbnNpb25zMiA6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gQnkgYmVpbmcgZW51bWVyYWJsZSwgSlNPTi5zdHJpbmdpZnkgd2lsbCBpbmNsdWRlIGBwYXRoYCBpbiB0aGVcbiAgICAgICAgLy8gcmVzdWx0aW5nIG91dHB1dC4gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIHNpbXBsZXN0IHBvc3NpYmxlIEdyYXBoUUxcbiAgICAgICAgLy8gc2VydmljZSBhZGhlcmVzIHRvIHRoZSBzcGVjLlxuICAgICAgICBlbnVtZXJhYmxlOiBfZXh0ZW5zaW9ucyAhPSBudWxsXG4gICAgICB9XG4gICAgfSk7IC8vIEluY2x1ZGUgKG5vbi1lbnVtZXJhYmxlKSBzdGFjayB0cmFjZS5cblxuICAgIGlmIChvcmlnaW5hbEVycm9yID09PSBudWxsIHx8IG9yaWdpbmFsRXJyb3IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9yaWdpbmFsRXJyb3Iuc3RhY2spIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgJ3N0YWNrJywge1xuICAgICAgICB2YWx1ZTogb3JpZ2luYWxFcnJvci5zdGFjayxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAoU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3KSAqL1xuXG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBHcmFwaFFMRXJyb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpcyksICdzdGFjaycsIHtcbiAgICAgICAgdmFsdWU6IEVycm9yKCkuc3RhY2ssXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhHcmFwaFFMRXJyb3IsIFt7XG4gICAga2V5OiBcInRvU3RyaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgICAgcmV0dXJuIHByaW50RXJyb3IodGhpcyk7XG4gICAgfSAvLyBGSVhNRTogd29ya2Fyb3VuZCB0byBub3QgYnJlYWsgY2hhaSBjb21wYXJpc29ucywgc2hvdWxkIGJlIHJlbW92ZSBpbiB2MTZcbiAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBzdXBwb3J0IGNvbXB1dGVkIHByb3BlcnRpZXMgeWV0XG5cbiAgfSwge1xuICAgIGtleTogX3N5bWJvbHMuU1lNQk9MX1RPX1NUUklOR19UQUcsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gJ09iamVjdCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEdyYXBoUUxFcnJvcjtcbn0oIC8qI19fUFVSRV9fKi9fd3JhcE5hdGl2ZVN1cGVyKEVycm9yKSk7XG4vKipcbiAqIFByaW50cyBhIEdyYXBoUUxFcnJvciB0byBhIHN0cmluZywgcmVwcmVzZW50aW5nIHVzZWZ1bCBsb2NhdGlvbiBpbmZvcm1hdGlvblxuICogYWJvdXQgdGhlIGVycm9yJ3MgcG9zaXRpb24gaW4gdGhlIHNvdXJjZS5cbiAqL1xuXG5cbmV4cG9ydHMuR3JhcGhRTEVycm9yID0gR3JhcGhRTEVycm9yO1xuXG5mdW5jdGlvbiBwcmludEVycm9yKGVycm9yKSB7XG4gIHZhciBvdXRwdXQgPSBlcnJvci5tZXNzYWdlO1xuXG4gIGlmIChlcnJvci5ub2Rlcykge1xuICAgIGZvciAodmFyIF9pMiA9IDAsIF9lcnJvciRub2RlczIgPSBlcnJvci5ub2RlczsgX2kyIDwgX2Vycm9yJG5vZGVzMi5sZW5ndGg7IF9pMisrKSB7XG4gICAgICB2YXIgbm9kZSA9IF9lcnJvciRub2RlczJbX2kyXTtcblxuICAgICAgaWYgKG5vZGUubG9jKSB7XG4gICAgICAgIG91dHB1dCArPSAnXFxuXFxuJyArICgwLCBfcHJpbnRMb2NhdGlvbi5wcmludExvY2F0aW9uKShub2RlLmxvYyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGVycm9yLnNvdXJjZSAmJiBlcnJvci5sb2NhdGlvbnMpIHtcbiAgICBmb3IgKHZhciBfaTQgPSAwLCBfZXJyb3IkbG9jYXRpb25zMiA9IGVycm9yLmxvY2F0aW9uczsgX2k0IDwgX2Vycm9yJGxvY2F0aW9uczIubGVuZ3RoOyBfaTQrKykge1xuICAgICAgdmFyIGxvY2F0aW9uID0gX2Vycm9yJGxvY2F0aW9uczJbX2k0XTtcbiAgICAgIG91dHB1dCArPSAnXFxuXFxuJyArICgwLCBfcHJpbnRMb2NhdGlvbi5wcmludFNvdXJjZUxvY2F0aW9uKShlcnJvci5zb3VyY2UsIGxvY2F0aW9uKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0cHV0O1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBpc09iamVjdExpa2U7XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH1cblxuLyoqXG4gKiBSZXR1cm4gdHJ1ZSBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90XG4gKiBgbnVsbGAgYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIF90eXBlb2YodmFsdWUpID09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnByaW50TG9jYXRpb24gPSBwcmludExvY2F0aW9uO1xuZXhwb3J0cy5wcmludFNvdXJjZUxvY2F0aW9uID0gcHJpbnRTb3VyY2VMb2NhdGlvbjtcblxudmFyIF9sb2NhdGlvbiA9IHJlcXVpcmUoXCIuL2xvY2F0aW9uXCIpO1xuXG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuZnVuY3Rpb24gcHJpbnRMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gcHJpbnRTb3VyY2VMb2NhdGlvbihsb2NhdGlvbi5zb3VyY2UsICgwLCBfbG9jYXRpb24uZ2V0TG9jYXRpb24pKGxvY2F0aW9uLnNvdXJjZSwgbG9jYXRpb24uc3RhcnQpKTtcbn1cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5cblxuZnVuY3Rpb24gcHJpbnRTb3VyY2VMb2NhdGlvbihzb3VyY2UsIHNvdXJjZUxvY2F0aW9uKSB7XG4gIHZhciBmaXJzdExpbmVDb2x1bW5PZmZzZXQgPSBzb3VyY2UubG9jYXRpb25PZmZzZXQuY29sdW1uIC0gMTtcbiAgdmFyIGJvZHkgPSB3aGl0ZXNwYWNlKGZpcnN0TGluZUNvbHVtbk9mZnNldCkgKyBzb3VyY2UuYm9keTtcbiAgdmFyIGxpbmVJbmRleCA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgLSAxO1xuICB2YXIgbGluZU9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5saW5lIC0gMTtcbiAgdmFyIGxpbmVOdW0gPSBzb3VyY2VMb2NhdGlvbi5saW5lICsgbGluZU9mZnNldDtcbiAgdmFyIGNvbHVtbk9mZnNldCA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgPT09IDEgPyBmaXJzdExpbmVDb2x1bW5PZmZzZXQgOiAwO1xuICB2YXIgY29sdW1uTnVtID0gc291cmNlTG9jYXRpb24uY29sdW1uICsgY29sdW1uT2Zmc2V0O1xuICB2YXIgbG9jYXRpb25TdHIgPSBcIlwiLmNvbmNhdChzb3VyY2UubmFtZSwgXCI6XCIpLmNvbmNhdChsaW5lTnVtLCBcIjpcIikuY29uY2F0KGNvbHVtbk51bSwgXCJcXG5cIik7XG4gIHZhciBsaW5lcyA9IGJvZHkuc3BsaXQoL1xcclxcbnxbXFxuXFxyXS9nKTtcbiAgdmFyIGxvY2F0aW9uTGluZSA9IGxpbmVzW2xpbmVJbmRleF07IC8vIFNwZWNpYWwgY2FzZSBmb3IgbWluaWZpZWQgZG9jdW1lbnRzXG5cbiAgaWYgKGxvY2F0aW9uTGluZS5sZW5ndGggPiAxMjApIHtcbiAgICB2YXIgc3ViTGluZUluZGV4ID0gTWF0aC5mbG9vcihjb2x1bW5OdW0gLyA4MCk7XG4gICAgdmFyIHN1YkxpbmVDb2x1bW5OdW0gPSBjb2x1bW5OdW0gJSA4MDtcbiAgICB2YXIgc3ViTGluZXMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYXRpb25MaW5lLmxlbmd0aDsgaSArPSA4MCkge1xuICAgICAgc3ViTGluZXMucHVzaChsb2NhdGlvbkxpbmUuc2xpY2UoaSwgaSArIDgwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2F0aW9uU3RyICsgcHJpbnRQcmVmaXhlZExpbmVzKFtbXCJcIi5jb25jYXQobGluZU51bSksIHN1YkxpbmVzWzBdXV0uY29uY2F0KHN1YkxpbmVzLnNsaWNlKDEsIHN1YkxpbmVJbmRleCArIDEpLm1hcChmdW5jdGlvbiAoc3ViTGluZSkge1xuICAgICAgcmV0dXJuIFsnJywgc3ViTGluZV07XG4gICAgfSksIFtbJyAnLCB3aGl0ZXNwYWNlKHN1YkxpbmVDb2x1bW5OdW0gLSAxKSArICdeJ10sIFsnJywgc3ViTGluZXNbc3ViTGluZUluZGV4ICsgMV1dXSkpO1xuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uU3RyICsgcHJpbnRQcmVmaXhlZExpbmVzKFsvLyBMaW5lcyBzcGVjaWZpZWQgbGlrZSB0aGlzOiBbXCJwcmVmaXhcIiwgXCJzdHJpbmdcIl0sXG4gIFtcIlwiLmNvbmNhdChsaW5lTnVtIC0gMSksIGxpbmVzW2xpbmVJbmRleCAtIDFdXSwgW1wiXCIuY29uY2F0KGxpbmVOdW0pLCBsb2NhdGlvbkxpbmVdLCBbJycsIHdoaXRlc3BhY2UoY29sdW1uTnVtIC0gMSkgKyAnXiddLCBbXCJcIi5jb25jYXQobGluZU51bSArIDEpLCBsaW5lc1tsaW5lSW5kZXggKyAxXV1dKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRQcmVmaXhlZExpbmVzKGxpbmVzKSB7XG4gIHZhciBleGlzdGluZ0xpbmVzID0gbGluZXMuZmlsdGVyKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIF8gPSBfcmVmWzBdLFxuICAgICAgICBsaW5lID0gX3JlZlsxXTtcbiAgICByZXR1cm4gbGluZSAhPT0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdmFyIHBhZExlbiA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIGV4aXN0aW5nTGluZXMubWFwKGZ1bmN0aW9uIChfcmVmMikge1xuICAgIHZhciBwcmVmaXggPSBfcmVmMlswXTtcbiAgICByZXR1cm4gcHJlZml4Lmxlbmd0aDtcbiAgfSkpO1xuICByZXR1cm4gZXhpc3RpbmdMaW5lcy5tYXAoZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgdmFyIHByZWZpeCA9IF9yZWYzWzBdLFxuICAgICAgICBsaW5lID0gX3JlZjNbMV07XG4gICAgcmV0dXJuIGxlZnRQYWQocGFkTGVuLCBwcmVmaXgpICsgKGxpbmUgPyAnIHwgJyArIGxpbmUgOiAnIHwnKTtcbiAgfSkuam9pbignXFxuJyk7XG59XG5cbmZ1bmN0aW9uIHdoaXRlc3BhY2UobGVuKSB7XG4gIHJldHVybiBBcnJheShsZW4gKyAxKS5qb2luKCcgJyk7XG59XG5cbmZ1bmN0aW9uIGxlZnRQYWQobGVuLCBzdHIpIHtcbiAgcmV0dXJuIHdoaXRlc3BhY2UobGVuIC0gc3RyLmxlbmd0aCkgKyBzdHI7XG59XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuS2luZCA9IHZvaWQgMDtcblxuLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQga2luZCB2YWx1ZXMgZm9yIEFTVCBub2Rlcy5cbiAqL1xudmFyIEtpbmQgPSBPYmplY3QuZnJlZXplKHtcbiAgLy8gTmFtZVxuICBOQU1FOiAnTmFtZScsXG4gIC8vIERvY3VtZW50XG4gIERPQ1VNRU5UOiAnRG9jdW1lbnQnLFxuICBPUEVSQVRJT05fREVGSU5JVElPTjogJ09wZXJhdGlvbkRlZmluaXRpb24nLFxuICBWQVJJQUJMRV9ERUZJTklUSU9OOiAnVmFyaWFibGVEZWZpbml0aW9uJyxcbiAgU0VMRUNUSU9OX1NFVDogJ1NlbGVjdGlvblNldCcsXG4gIEZJRUxEOiAnRmllbGQnLFxuICBBUkdVTUVOVDogJ0FyZ3VtZW50JyxcbiAgLy8gRnJhZ21lbnRzXG4gIEZSQUdNRU5UX1NQUkVBRDogJ0ZyYWdtZW50U3ByZWFkJyxcbiAgSU5MSU5FX0ZSQUdNRU5UOiAnSW5saW5lRnJhZ21lbnQnLFxuICBGUkFHTUVOVF9ERUZJTklUSU9OOiAnRnJhZ21lbnREZWZpbml0aW9uJyxcbiAgLy8gVmFsdWVzXG4gIFZBUklBQkxFOiAnVmFyaWFibGUnLFxuICBJTlQ6ICdJbnRWYWx1ZScsXG4gIEZMT0FUOiAnRmxvYXRWYWx1ZScsXG4gIFNUUklORzogJ1N0cmluZ1ZhbHVlJyxcbiAgQk9PTEVBTjogJ0Jvb2xlYW5WYWx1ZScsXG4gIE5VTEw6ICdOdWxsVmFsdWUnLFxuICBFTlVNOiAnRW51bVZhbHVlJyxcbiAgTElTVDogJ0xpc3RWYWx1ZScsXG4gIE9CSkVDVDogJ09iamVjdFZhbHVlJyxcbiAgT0JKRUNUX0ZJRUxEOiAnT2JqZWN0RmllbGQnLFxuICAvLyBEaXJlY3RpdmVzXG4gIERJUkVDVElWRTogJ0RpcmVjdGl2ZScsXG4gIC8vIFR5cGVzXG4gIE5BTUVEX1RZUEU6ICdOYW1lZFR5cGUnLFxuICBMSVNUX1RZUEU6ICdMaXN0VHlwZScsXG4gIE5PTl9OVUxMX1RZUEU6ICdOb25OdWxsVHlwZScsXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNDSEVNQV9ERUZJTklUSU9OOiAnU2NoZW1hRGVmaW5pdGlvbicsXG4gIE9QRVJBVElPTl9UWVBFX0RFRklOSVRJT046ICdPcGVyYXRpb25UeXBlRGVmaW5pdGlvbicsXG4gIC8vIFR5cGUgRGVmaW5pdGlvbnNcbiAgU0NBTEFSX1RZUEVfREVGSU5JVElPTjogJ1NjYWxhclR5cGVEZWZpbml0aW9uJyxcbiAgT0JKRUNUX1RZUEVfREVGSU5JVElPTjogJ09iamVjdFR5cGVEZWZpbml0aW9uJyxcbiAgRklFTERfREVGSU5JVElPTjogJ0ZpZWxkRGVmaW5pdGlvbicsXG4gIElOUFVUX1ZBTFVFX0RFRklOSVRJT046ICdJbnB1dFZhbHVlRGVmaW5pdGlvbicsXG4gIElOVEVSRkFDRV9UWVBFX0RFRklOSVRJT046ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbicsXG4gIFVOSU9OX1RZUEVfREVGSU5JVElPTjogJ1VuaW9uVHlwZURlZmluaXRpb24nLFxuICBFTlVNX1RZUEVfREVGSU5JVElPTjogJ0VudW1UeXBlRGVmaW5pdGlvbicsXG4gIEVOVU1fVkFMVUVfREVGSU5JVElPTjogJ0VudW1WYWx1ZURlZmluaXRpb24nLFxuICBJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOiAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbicsXG4gIC8vIERpcmVjdGl2ZSBEZWZpbml0aW9uc1xuICBESVJFQ1RJVkVfREVGSU5JVElPTjogJ0RpcmVjdGl2ZURlZmluaXRpb24nLFxuICAvLyBUeXBlIFN5c3RlbSBFeHRlbnNpb25zXG4gIFNDSEVNQV9FWFRFTlNJT046ICdTY2hlbWFFeHRlbnNpb24nLFxuICAvLyBUeXBlIEV4dGVuc2lvbnNcbiAgU0NBTEFSX1RZUEVfRVhURU5TSU9OOiAnU2NhbGFyVHlwZUV4dGVuc2lvbicsXG4gIE9CSkVDVF9UWVBFX0VYVEVOU0lPTjogJ09iamVjdFR5cGVFeHRlbnNpb24nLFxuICBJTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT046ICdJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uJyxcbiAgVU5JT05fVFlQRV9FWFRFTlNJT046ICdVbmlvblR5cGVFeHRlbnNpb24nLFxuICBFTlVNX1RZUEVfRVhURU5TSU9OOiAnRW51bVR5cGVFeHRlbnNpb24nLFxuICBJTlBVVF9PQkpFQ1RfVFlQRV9FWFRFTlNJT046ICdJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24nXG59KTtcbi8qKlxuICogVGhlIGVudW0gdHlwZSByZXByZXNlbnRpbmcgdGhlIHBvc3NpYmxlIGtpbmQgdmFsdWVzIG9mIEFTVCBub2Rlcy5cbiAqL1xuXG5leHBvcnRzLktpbmQgPSBLaW5kO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlNvdXJjZSA9IHZvaWQgMDtcblxudmFyIF9zeW1ib2xzID0gcmVxdWlyZShcIi4uL3BvbHlmaWxscy9zeW1ib2xzXCIpO1xuXG52YXIgX2RldkFzc2VydCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL2pzdXRpbHMvZGV2QXNzZXJ0XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG4vKipcbiAqIEEgcmVwcmVzZW50YXRpb24gb2Ygc291cmNlIGlucHV0IHRvIEdyYXBoUUwuXG4gKiBgbmFtZWAgYW5kIGBsb2NhdGlvbk9mZnNldGAgYXJlIG9wdGlvbmFsLiBUaGV5IGFyZSB1c2VmdWwgZm9yIGNsaWVudHMgd2hvXG4gKiBzdG9yZSBHcmFwaFFMIGRvY3VtZW50cyBpbiBzb3VyY2UgZmlsZXM7IGZvciBleGFtcGxlLCBpZiB0aGUgR3JhcGhRTCBpbnB1dFxuICogc3RhcnRzIGF0IGxpbmUgNDAgaW4gYSBmaWxlIG5hbWVkIEZvby5ncmFwaHFsLCBpdCBtaWdodCBiZSB1c2VmdWwgZm9yIG5hbWUgdG9cbiAqIGJlIFwiRm9vLmdyYXBocWxcIiBhbmQgbG9jYXRpb24gdG8gYmUgYHsgbGluZTogNDAsIGNvbHVtbjogMCB9YC5cbiAqIGxpbmUgYW5kIGNvbHVtbiBpbiBsb2NhdGlvbk9mZnNldCBhcmUgMS1pbmRleGVkXG4gKi9cbnZhciBTb3VyY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTb3VyY2UoYm9keSkge1xuICAgIHZhciBuYW1lID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnR3JhcGhRTCByZXF1ZXN0JztcbiAgICB2YXIgbG9jYXRpb25PZmZzZXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHtcbiAgICAgIGxpbmU6IDEsXG4gICAgICBjb2x1bW46IDFcbiAgICB9O1xuICAgIHRoaXMuYm9keSA9IGJvZHk7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLmxvY2F0aW9uT2Zmc2V0ID0gbG9jYXRpb25PZmZzZXQ7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldC5saW5lID4gMCB8fCAoMCwgX2RldkFzc2VydC5kZWZhdWx0KSgwLCAnbGluZSBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUuJyk7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldC5jb2x1bW4gPiAwIHx8ICgwLCBfZGV2QXNzZXJ0LmRlZmF1bHQpKDAsICdjb2x1bW4gaW4gbG9jYXRpb25PZmZzZXQgaXMgMS1pbmRleGVkIGFuZCBtdXN0IGJlIHBvc2l0aXZlLicpO1xuICB9IC8vICRGbG93Rml4TWUgRmxvdyBkb2Vzbid0IHN1cHBvcnQgY29tcHV0ZWQgcHJvcGVydGllcyB5ZXRcblxuXG4gIF9jcmVhdGVDbGFzcyhTb3VyY2UsIFt7XG4gICAga2V5OiBfc3ltYm9scy5TWU1CT0xfVE9fU1RSSU5HX1RBRyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiAnU291cmNlJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gU291cmNlO1xufSgpO1xuXG5leHBvcnRzLlNvdXJjZSA9IFNvdXJjZTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5EaXJlY3RpdmVMb2NhdGlvbiA9IHZvaWQgMDtcblxuLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQgZGlyZWN0aXZlIGxvY2F0aW9uIHZhbHVlcy5cbiAqL1xudmFyIERpcmVjdGl2ZUxvY2F0aW9uID0gT2JqZWN0LmZyZWV6ZSh7XG4gIC8vIFJlcXVlc3QgRGVmaW5pdGlvbnNcbiAgUVVFUlk6ICdRVUVSWScsXG4gIE1VVEFUSU9OOiAnTVVUQVRJT04nLFxuICBTVUJTQ1JJUFRJT046ICdTVUJTQ1JJUFRJT04nLFxuICBGSUVMRDogJ0ZJRUxEJyxcbiAgRlJBR01FTlRfREVGSU5JVElPTjogJ0ZSQUdNRU5UX0RFRklOSVRJT04nLFxuICBGUkFHTUVOVF9TUFJFQUQ6ICdGUkFHTUVOVF9TUFJFQUQnLFxuICBJTkxJTkVfRlJBR01FTlQ6ICdJTkxJTkVfRlJBR01FTlQnLFxuICBWQVJJQUJMRV9ERUZJTklUSU9OOiAnVkFSSUFCTEVfREVGSU5JVElPTicsXG4gIC8vIFR5cGUgU3lzdGVtIERlZmluaXRpb25zXG4gIFNDSEVNQTogJ1NDSEVNQScsXG4gIFNDQUxBUjogJ1NDQUxBUicsXG4gIE9CSkVDVDogJ09CSkVDVCcsXG4gIEZJRUxEX0RFRklOSVRJT046ICdGSUVMRF9ERUZJTklUSU9OJyxcbiAgQVJHVU1FTlRfREVGSU5JVElPTjogJ0FSR1VNRU5UX0RFRklOSVRJT04nLFxuICBJTlRFUkZBQ0U6ICdJTlRFUkZBQ0UnLFxuICBVTklPTjogJ1VOSU9OJyxcbiAgRU5VTTogJ0VOVU0nLFxuICBFTlVNX1ZBTFVFOiAnRU5VTV9WQUxVRScsXG4gIElOUFVUX09CSkVDVDogJ0lOUFVUX09CSkVDVCcsXG4gIElOUFVUX0ZJRUxEX0RFRklOSVRJT046ICdJTlBVVF9GSUVMRF9ERUZJTklUSU9OJ1xufSk7XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICovXG5cbmV4cG9ydHMuRGlyZWN0aXZlTG9jYXRpb24gPSBEaXJlY3RpdmVMb2NhdGlvbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc1B1bmN0dWF0b3JUb2tlbktpbmQgPSBpc1B1bmN0dWF0b3JUb2tlbktpbmQ7XG5leHBvcnRzLkxleGVyID0gdm9pZCAwO1xuXG52YXIgX3N5bnRheEVycm9yID0gcmVxdWlyZShcIi4uL2Vycm9yL3N5bnRheEVycm9yXCIpO1xuXG52YXIgX2FzdCA9IHJlcXVpcmUoXCIuL2FzdFwiKTtcblxudmFyIF9ibG9ja1N0cmluZyA9IHJlcXVpcmUoXCIuL2Jsb2NrU3RyaW5nXCIpO1xuXG52YXIgX3Rva2VuS2luZCA9IHJlcXVpcmUoXCIuL3Rva2VuS2luZFwiKTtcblxuLyoqXG4gKiBHaXZlbiBhIFNvdXJjZSBvYmplY3QsIGNyZWF0ZXMgYSBMZXhlciBmb3IgdGhhdCBzb3VyY2UuXG4gKiBBIExleGVyIGlzIGEgc3RhdGVmdWwgc3RyZWFtIGdlbmVyYXRvciBpbiB0aGF0IGV2ZXJ5IHRpbWVcbiAqIGl0IGlzIGFkdmFuY2VkLCBpdCByZXR1cm5zIHRoZSBuZXh0IHRva2VuIGluIHRoZSBTb3VyY2UuIEFzc3VtaW5nIHRoZVxuICogc291cmNlIGxleGVzLCB0aGUgZmluYWwgVG9rZW4gZW1pdHRlZCBieSB0aGUgbGV4ZXIgd2lsbCBiZSBvZiBraW5kXG4gKiBFT0YsIGFmdGVyIHdoaWNoIHRoZSBsZXhlciB3aWxsIHJlcGVhdGVkbHkgcmV0dXJuIHRoZSBzYW1lIEVPRiB0b2tlblxuICogd2hlbmV2ZXIgY2FsbGVkLlxuICovXG52YXIgTGV4ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogVGhlIHByZXZpb3VzbHkgZm9jdXNlZCBub24taWdub3JlZCB0b2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50bHkgZm9jdXNlZCBub24taWdub3JlZCB0b2tlbi5cbiAgICovXG5cbiAgLyoqXG4gICAqIFRoZSAoMS1pbmRleGVkKSBsaW5lIGNvbnRhaW5pbmcgdGhlIGN1cnJlbnQgdG9rZW4uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBUaGUgY2hhcmFjdGVyIG9mZnNldCBhdCB3aGljaCB0aGUgY3VycmVudCBsaW5lIGJlZ2lucy5cbiAgICovXG4gIGZ1bmN0aW9uIExleGVyKHNvdXJjZSkge1xuICAgIHZhciBzdGFydE9mRmlsZVRva2VuID0gbmV3IF9hc3QuVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuU09GLCAwLCAwLCAwLCAwLCBudWxsKTtcbiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLmxhc3RUb2tlbiA9IHN0YXJ0T2ZGaWxlVG9rZW47XG4gICAgdGhpcy50b2tlbiA9IHN0YXJ0T2ZGaWxlVG9rZW47XG4gICAgdGhpcy5saW5lID0gMTtcbiAgICB0aGlzLmxpbmVTdGFydCA9IDA7XG4gIH1cbiAgLyoqXG4gICAqIEFkdmFuY2VzIHRoZSB0b2tlbiBzdHJlYW0gdG8gdGhlIG5leHQgbm9uLWlnbm9yZWQgdG9rZW4uXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IExleGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8uYWR2YW5jZSA9IGZ1bmN0aW9uIGFkdmFuY2UoKSB7XG4gICAgdGhpcy5sYXN0VG9rZW4gPSB0aGlzLnRva2VuO1xuICAgIHZhciB0b2tlbiA9IHRoaXMudG9rZW4gPSB0aGlzLmxvb2thaGVhZCgpO1xuICAgIHJldHVybiB0b2tlbjtcbiAgfVxuICAvKipcbiAgICogTG9va3MgYWhlYWQgYW5kIHJldHVybnMgdGhlIG5leHQgbm9uLWlnbm9yZWQgdG9rZW4sIGJ1dCBkb2VzIG5vdCBjaGFuZ2VcbiAgICogdGhlIHN0YXRlIG9mIExleGVyLlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5sb29rYWhlYWQgPSBmdW5jdGlvbiBsb29rYWhlYWQoKSB7XG4gICAgdmFyIHRva2VuID0gdGhpcy50b2tlbjtcblxuICAgIGlmICh0b2tlbi5raW5kICE9PSBfdG9rZW5LaW5kLlRva2VuS2luZC5FT0YpIHtcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIF90b2tlbiRuZXh0O1xuXG4gICAgICAgIC8vIE5vdGU6IG5leHQgaXMgb25seSBtdXRhYmxlIGR1cmluZyBwYXJzaW5nLCBzbyB3ZSBjYXN0IHRvIGFsbG93IHRoaXMuXG4gICAgICAgIHRva2VuID0gKF90b2tlbiRuZXh0ID0gdG9rZW4ubmV4dCkgIT09IG51bGwgJiYgX3Rva2VuJG5leHQgIT09IHZvaWQgMCA/IF90b2tlbiRuZXh0IDogdG9rZW4ubmV4dCA9IHJlYWRUb2tlbih0aGlzLCB0b2tlbik7XG4gICAgICB9IHdoaWxlICh0b2tlbi5raW5kID09PSBfdG9rZW5LaW5kLlRva2VuS2luZC5DT01NRU5UKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdG9rZW47XG4gIH07XG5cbiAgcmV0dXJuIExleGVyO1xufSgpO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5cbmV4cG9ydHMuTGV4ZXIgPSBMZXhlcjtcblxuZnVuY3Rpb24gaXNQdW5jdHVhdG9yVG9rZW5LaW5kKGtpbmQpIHtcbiAgcmV0dXJuIGtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLkJBTkcgfHwga2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuRE9MTEFSIHx8IGtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLkFNUCB8fCBraW5kID09PSBfdG9rZW5LaW5kLlRva2VuS2luZC5QQVJFTl9MIHx8IGtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLlBBUkVOX1IgfHwga2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuU1BSRUFEIHx8IGtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLkNPTE9OIHx8IGtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLkVRVUFMUyB8fCBraW5kID09PSBfdG9rZW5LaW5kLlRva2VuS2luZC5BVCB8fCBraW5kID09PSBfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDS0VUX0wgfHwga2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0tFVF9SIHx8IGtpbmQgPT09IF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX0wgfHwga2luZCA9PT0gX3Rva2VuS2luZC5Ub2tlbktpbmQuUElQRSB8fCBraW5kID09PSBfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDRV9SO1xufVxuXG5mdW5jdGlvbiBwcmludENoYXJDb2RlKGNvZGUpIHtcbiAgcmV0dXJuICgvLyBOYU4vdW5kZWZpbmVkIHJlcHJlc2VudHMgYWNjZXNzIGJleW9uZCB0aGUgZW5kIG9mIHRoZSBmaWxlLlxuICAgIGlzTmFOKGNvZGUpID8gX3Rva2VuS2luZC5Ub2tlbktpbmQuRU9GIDogLy8gVHJ1c3QgSlNPTiBmb3IgQVNDSUkuXG4gICAgY29kZSA8IDB4MDA3ZiA/IEpTT04uc3RyaW5naWZ5KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSkpIDogLy8gT3RoZXJ3aXNlIHByaW50IHRoZSBlc2NhcGVkIGZvcm0uXG4gICAgXCJcXFwiXFxcXHVcIi5jb25jYXQoKCcwMCcgKyBjb2RlLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpKS5zbGljZSgtNCksIFwiXFxcIlwiKVxuICApO1xufVxuLyoqXG4gKiBHZXRzIHRoZSBuZXh0IHRva2VuIGZyb20gdGhlIHNvdXJjZSBzdGFydGluZyBhdCB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gKlxuICogVGhpcyBza2lwcyBvdmVyIHdoaXRlc3BhY2UgdW50aWwgaXQgZmluZHMgdGhlIG5leHQgbGV4YWJsZSB0b2tlbiwgdGhlbiBsZXhlc1xuICogcHVuY3R1YXRvcnMgaW1tZWRpYXRlbHkgb3IgY2FsbHMgdGhlIGFwcHJvcHJpYXRlIGhlbHBlciBmdW5jdGlvbiBmb3IgbW9yZVxuICogY29tcGxpY2F0ZWQgdG9rZW5zLlxuICovXG5cblxuZnVuY3Rpb24gcmVhZFRva2VuKGxleGVyLCBwcmV2KSB7XG4gIHZhciBzb3VyY2UgPSBsZXhlci5zb3VyY2U7XG4gIHZhciBib2R5ID0gc291cmNlLmJvZHk7XG4gIHZhciBib2R5TGVuZ3RoID0gYm9keS5sZW5ndGg7XG4gIHZhciBwb3MgPSBwb3NpdGlvbkFmdGVyV2hpdGVzcGFjZShib2R5LCBwcmV2LmVuZCwgbGV4ZXIpO1xuICB2YXIgbGluZSA9IGxleGVyLmxpbmU7XG4gIHZhciBjb2wgPSAxICsgcG9zIC0gbGV4ZXIubGluZVN0YXJ0O1xuXG4gIGlmIChwb3MgPj0gYm9keUxlbmd0aCkge1xuICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5FT0YsIGJvZHlMZW5ndGgsIGJvZHlMZW5ndGgsIGxpbmUsIGNvbCwgcHJldik7XG4gIH1cblxuICB2YXIgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3MpOyAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAvLyAhXG4gICAgY2FzZSAzMzpcbiAgICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5CQU5HLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gI1xuXG4gICAgY2FzZSAzNTpcbiAgICAgIHJldHVybiByZWFkQ29tbWVudChzb3VyY2UsIHBvcywgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyAkXG5cbiAgICBjYXNlIDM2OlxuICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkRPTExBUiwgcG9zLCBwb3MgKyAxLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vICZcblxuICAgIGNhc2UgMzg6XG4gICAgICByZXR1cm4gbmV3IF9hc3QuVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQU1QLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gKFxuXG4gICAgY2FzZSA0MDpcbiAgICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5QQVJFTl9MLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gKVxuXG4gICAgY2FzZSA0MTpcbiAgICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5QQVJFTl9SLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gLlxuXG4gICAgY2FzZSA0NjpcbiAgICAgIGlmIChib2R5LmNoYXJDb2RlQXQocG9zICsgMSkgPT09IDQ2ICYmIGJvZHkuY2hhckNvZGVBdChwb3MgKyAyKSA9PT0gNDYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLlNQUkVBRCwgcG9zLCBwb3MgKyAzLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgICAvLyA6XG5cbiAgICBjYXNlIDU4OlxuICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkNPTE9OLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gPVxuXG4gICAgY2FzZSA2MTpcbiAgICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5FUVVBTFMsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyBAXG5cbiAgICBjYXNlIDY0OlxuICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkFULCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gW1xuXG4gICAgY2FzZSA5MTpcbiAgICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5CUkFDS0VUX0wsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyBdXG5cbiAgICBjYXNlIDkzOlxuICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNLRVRfUiwgcG9zLCBwb3MgKyAxLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vIHtcblxuICAgIGNhc2UgMTIzOlxuICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkJSQUNFX0wsIHBvcywgcG9zICsgMSwgbGluZSwgY29sLCBwcmV2KTtcbiAgICAvLyB8XG5cbiAgICBjYXNlIDEyNDpcbiAgICAgIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5QSVBFLCBwb3MsIHBvcyArIDEsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gfVxuXG4gICAgY2FzZSAxMjU6XG4gICAgICByZXR1cm4gbmV3IF9hc3QuVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuQlJBQ0VfUiwgcG9zLCBwb3MgKyAxLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vIEEtWiBfIGEtelxuXG4gICAgY2FzZSA2NTpcbiAgICBjYXNlIDY2OlxuICAgIGNhc2UgNjc6XG4gICAgY2FzZSA2ODpcbiAgICBjYXNlIDY5OlxuICAgIGNhc2UgNzA6XG4gICAgY2FzZSA3MTpcbiAgICBjYXNlIDcyOlxuICAgIGNhc2UgNzM6XG4gICAgY2FzZSA3NDpcbiAgICBjYXNlIDc1OlxuICAgIGNhc2UgNzY6XG4gICAgY2FzZSA3NzpcbiAgICBjYXNlIDc4OlxuICAgIGNhc2UgNzk6XG4gICAgY2FzZSA4MDpcbiAgICBjYXNlIDgxOlxuICAgIGNhc2UgODI6XG4gICAgY2FzZSA4MzpcbiAgICBjYXNlIDg0OlxuICAgIGNhc2UgODU6XG4gICAgY2FzZSA4NjpcbiAgICBjYXNlIDg3OlxuICAgIGNhc2UgODg6XG4gICAgY2FzZSA4OTpcbiAgICBjYXNlIDkwOlxuICAgIGNhc2UgOTU6XG4gICAgY2FzZSA5NzpcbiAgICBjYXNlIDk4OlxuICAgIGNhc2UgOTk6XG4gICAgY2FzZSAxMDA6XG4gICAgY2FzZSAxMDE6XG4gICAgY2FzZSAxMDI6XG4gICAgY2FzZSAxMDM6XG4gICAgY2FzZSAxMDQ6XG4gICAgY2FzZSAxMDU6XG4gICAgY2FzZSAxMDY6XG4gICAgY2FzZSAxMDc6XG4gICAgY2FzZSAxMDg6XG4gICAgY2FzZSAxMDk6XG4gICAgY2FzZSAxMTA6XG4gICAgY2FzZSAxMTE6XG4gICAgY2FzZSAxMTI6XG4gICAgY2FzZSAxMTM6XG4gICAgY2FzZSAxMTQ6XG4gICAgY2FzZSAxMTU6XG4gICAgY2FzZSAxMTY6XG4gICAgY2FzZSAxMTc6XG4gICAgY2FzZSAxMTg6XG4gICAgY2FzZSAxMTk6XG4gICAgY2FzZSAxMjA6XG4gICAgY2FzZSAxMjE6XG4gICAgY2FzZSAxMjI6XG4gICAgICByZXR1cm4gcmVhZE5hbWUoc291cmNlLCBwb3MsIGxpbmUsIGNvbCwgcHJldik7XG4gICAgLy8gLSAwLTlcblxuICAgIGNhc2UgNDU6XG4gICAgY2FzZSA0ODpcbiAgICBjYXNlIDQ5OlxuICAgIGNhc2UgNTA6XG4gICAgY2FzZSA1MTpcbiAgICBjYXNlIDUyOlxuICAgIGNhc2UgNTM6XG4gICAgY2FzZSA1NDpcbiAgICBjYXNlIDU1OlxuICAgIGNhc2UgNTY6XG4gICAgY2FzZSA1NzpcbiAgICAgIHJldHVybiByZWFkTnVtYmVyKHNvdXJjZSwgcG9zLCBjb2RlLCBsaW5lLCBjb2wsIHByZXYpO1xuICAgIC8vIFwiXG5cbiAgICBjYXNlIDM0OlxuICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3MgKyAxKSA9PT0gMzQgJiYgYm9keS5jaGFyQ29kZUF0KHBvcyArIDIpID09PSAzNCkge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2NrU3RyaW5nKHNvdXJjZSwgcG9zLCBsaW5lLCBjb2wsIHByZXYsIGxleGVyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlYWRTdHJpbmcoc291cmNlLCBwb3MsIGxpbmUsIGNvbCwgcHJldik7XG4gIH1cblxuICB0aHJvdyAoMCwgX3N5bnRheEVycm9yLnN5bnRheEVycm9yKShzb3VyY2UsIHBvcywgdW5leHBlY3RlZENoYXJhY3Rlck1lc3NhZ2UoY29kZSkpO1xufVxuLyoqXG4gKiBSZXBvcnQgYSBtZXNzYWdlIHRoYXQgYW4gdW5leHBlY3RlZCBjaGFyYWN0ZXIgd2FzIGVuY291bnRlcmVkLlxuICovXG5cblxuZnVuY3Rpb24gdW5leHBlY3RlZENoYXJhY3Rlck1lc3NhZ2UoY29kZSkge1xuICBpZiAoY29kZSA8IDB4MDAyMCAmJiBjb2RlICE9PSAweDAwMDkgJiYgY29kZSAhPT0gMHgwMDBhICYmIGNvZGUgIT09IDB4MDAwZCkge1xuICAgIHJldHVybiBcIkNhbm5vdCBjb250YWluIHRoZSBpbnZhbGlkIGNoYXJhY3RlciBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDM5KSB7XG4gICAgLy8gJ1xuICAgIHJldHVybiAnVW5leHBlY3RlZCBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyIChcXCcpLCBkaWQgeW91IG1lYW4gdG8gdXNlIGEgZG91YmxlIHF1b3RlIChcIik/JztcbiAgfVxuXG4gIHJldHVybiBcIkNhbm5vdCBwYXJzZSB0aGUgdW5leHBlY3RlZCBjaGFyYWN0ZXIgXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKTtcbn1cbi8qKlxuICogUmVhZHMgZnJvbSBib2R5IHN0YXJ0aW5nIGF0IHN0YXJ0UG9zaXRpb24gdW50aWwgaXQgZmluZHMgYSBub24td2hpdGVzcGFjZVxuICogY2hhcmFjdGVyLCB0aGVuIHJldHVybnMgdGhlIHBvc2l0aW9uIG9mIHRoYXQgY2hhcmFjdGVyIGZvciBsZXhpbmcuXG4gKi9cblxuXG5mdW5jdGlvbiBwb3NpdGlvbkFmdGVyV2hpdGVzcGFjZShib2R5LCBzdGFydFBvc2l0aW9uLCBsZXhlcikge1xuICB2YXIgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xuXG4gIHdoaWxlIChwb3NpdGlvbiA8IGJvZHlMZW5ndGgpIHtcbiAgICB2YXIgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbik7IC8vIHRhYiB8IHNwYWNlIHwgY29tbWEgfCBCT01cblxuICAgIGlmIChjb2RlID09PSA5IHx8IGNvZGUgPT09IDMyIHx8IGNvZGUgPT09IDQ0IHx8IGNvZGUgPT09IDB4ZmVmZikge1xuICAgICAgKytwb3NpdGlvbjtcbiAgICB9IGVsc2UgaWYgKGNvZGUgPT09IDEwKSB7XG4gICAgICAvLyBuZXcgbGluZVxuICAgICAgKytwb3NpdGlvbjtcbiAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMTMpIHtcbiAgICAgIC8vIGNhcnJpYWdlIHJldHVyblxuICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAxMCkge1xuICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKytwb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgKytsZXhlci5saW5lO1xuICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zaXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwb3NpdGlvbjtcbn1cbi8qKlxuICogUmVhZHMgYSBjb21tZW50IHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqICNbXFx1MDAwOVxcdTAwMjAtXFx1RkZGRl0qXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkQ29tbWVudChzb3VyY2UsIHN0YXJ0LCBsaW5lLCBjb2wsIHByZXYpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIGNvZGU7XG4gIHZhciBwb3NpdGlvbiA9IHN0YXJ0O1xuXG4gIGRvIHtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICB9IHdoaWxlICghaXNOYU4oY29kZSkgJiYgKCAvLyBTb3VyY2VDaGFyYWN0ZXIgYnV0IG5vdCBMaW5lVGVybWluYXRvclxuICBjb2RlID4gMHgwMDFmIHx8IGNvZGUgPT09IDB4MDAwOSkpO1xuXG4gIHJldHVybiBuZXcgX2FzdC5Ub2tlbihfdG9rZW5LaW5kLlRva2VuS2luZC5DT01NRU5ULCBzdGFydCwgcG9zaXRpb24sIGxpbmUsIGNvbCwgcHJldiwgYm9keS5zbGljZShzdGFydCArIDEsIHBvc2l0aW9uKSk7XG59XG4vKipcbiAqIFJlYWRzIGEgbnVtYmVyIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLCBlaXRoZXIgYSBmbG9hdFxuICogb3IgYW4gaW50IGRlcGVuZGluZyBvbiB3aGV0aGVyIGEgZGVjaW1hbCBwb2ludCBhcHBlYXJzLlxuICpcbiAqIEludDogICAtPygwfFsxLTldWzAtOV0qKVxuICogRmxvYXQ6IC0/KDB8WzEtOV1bMC05XSopKFxcLlswLTldKyk/KChFfGUpKCt8LSk/WzAtOV0rKT9cbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWROdW1iZXIoc291cmNlLCBzdGFydCwgZmlyc3RDb2RlLCBsaW5lLCBjb2wsIHByZXYpIHtcbiAgdmFyIGJvZHkgPSBzb3VyY2UuYm9keTtcbiAgdmFyIGNvZGUgPSBmaXJzdENvZGU7XG4gIHZhciBwb3NpdGlvbiA9IHN0YXJ0O1xuICB2YXIgaXNGbG9hdCA9IGZhbHNlO1xuXG4gIGlmIChjb2RlID09PSA0NSkge1xuICAgIC8vIC1cbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICB9XG5cbiAgaWYgKGNvZGUgPT09IDQ4KSB7XG4gICAgLy8gMFxuICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQoKytwb3NpdGlvbik7XG5cbiAgICBpZiAoY29kZSA+PSA0OCAmJiBjb2RlIDw9IDU3KSB7XG4gICAgICB0aHJvdyAoMCwgX3N5bnRheEVycm9yLnN5bnRheEVycm9yKShzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgbnVtYmVyLCB1bmV4cGVjdGVkIGRpZ2l0IGFmdGVyIDA6IFwiLmNvbmNhdChwcmludENoYXJDb2RlKGNvZGUpLCBcIi5cIikpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwb3NpdGlvbiA9IHJlYWREaWdpdHMoc291cmNlLCBwb3NpdGlvbiwgY29kZSk7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gIH1cblxuICBpZiAoY29kZSA9PT0gNDYpIHtcbiAgICAvLyAuXG4gICAgaXNGbG9hdCA9IHRydWU7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgICBwb3NpdGlvbiA9IHJlYWREaWdpdHMoc291cmNlLCBwb3NpdGlvbiwgY29kZSk7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gIH1cblxuICBpZiAoY29kZSA9PT0gNjkgfHwgY29kZSA9PT0gMTAxKSB7XG4gICAgLy8gRSBlXG4gICAgaXNGbG9hdCA9IHRydWU7XG4gICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcblxuICAgIGlmIChjb2RlID09PSA0MyB8fCBjb2RlID09PSA0NSkge1xuICAgICAgLy8gKyAtXG4gICAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KCsrcG9zaXRpb24pO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gcmVhZERpZ2l0cyhzb3VyY2UsIHBvc2l0aW9uLCBjb2RlKTtcbiAgICBjb2RlID0gYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgfSAvLyBOdW1iZXJzIGNhbm5vdCBiZSBmb2xsb3dlZCBieSAuIG9yIE5hbWVTdGFydFxuXG5cbiAgaWYgKGNvZGUgPT09IDQ2IHx8IGlzTmFtZVN0YXJ0KGNvZGUpKSB7XG4gICAgdGhyb3cgKDAsIF9zeW50YXhFcnJvci5zeW50YXhFcnJvcikoc291cmNlLCBwb3NpdGlvbiwgXCJJbnZhbGlkIG51bWJlciwgZXhwZWN0ZWQgZGlnaXQgYnV0IGdvdDogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gIH1cblxuICByZXR1cm4gbmV3IF9hc3QuVG9rZW4oaXNGbG9hdCA/IF90b2tlbktpbmQuVG9rZW5LaW5kLkZMT0FUIDogX3Rva2VuS2luZC5Ub2tlbktpbmQuSU5ULCBzdGFydCwgcG9zaXRpb24sIGxpbmUsIGNvbCwgcHJldiwgYm9keS5zbGljZShzdGFydCwgcG9zaXRpb24pKTtcbn1cbi8qKlxuICogUmV0dXJucyB0aGUgbmV3IHBvc2l0aW9uIGluIHRoZSBzb3VyY2UgYWZ0ZXIgcmVhZGluZyBkaWdpdHMuXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkRGlnaXRzKHNvdXJjZSwgc3RhcnQsIGZpcnN0Q29kZSkge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgcG9zaXRpb24gPSBzdGFydDtcbiAgdmFyIGNvZGUgPSBmaXJzdENvZGU7XG5cbiAgaWYgKGNvZGUgPj0gNDggJiYgY29kZSA8PSA1Nykge1xuICAgIC8vIDAgLSA5XG4gICAgZG8ge1xuICAgICAgY29kZSA9IGJvZHkuY2hhckNvZGVBdCgrK3Bvc2l0aW9uKTtcbiAgICB9IHdoaWxlIChjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcpOyAvLyAwIC0gOVxuXG5cbiAgICByZXR1cm4gcG9zaXRpb247XG4gIH1cblxuICB0aHJvdyAoMCwgX3N5bnRheEVycm9yLnN5bnRheEVycm9yKShzb3VyY2UsIHBvc2l0aW9uLCBcIkludmFsaWQgbnVtYmVyLCBleHBlY3RlZCBkaWdpdCBidXQgZ290OiBcIi5jb25jYXQocHJpbnRDaGFyQ29kZShjb2RlKSwgXCIuXCIpKTtcbn1cbi8qKlxuICogUmVhZHMgYSBzdHJpbmcgdG9rZW4gZnJvbSB0aGUgc291cmNlIGZpbGUuXG4gKlxuICogXCIoW15cIlxcXFxcXHUwMDBBXFx1MDAwRF18KFxcXFwodVswLTlhLWZBLUZdezR9fFtcIlxcXFwvYmZucnRdKSkpKlwiXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkU3RyaW5nKHNvdXJjZSwgc3RhcnQsIGxpbmUsIGNvbCwgcHJldikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDE7XG4gIHZhciBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gIHZhciBjb2RlID0gMDtcbiAgdmFyIHZhbHVlID0gJyc7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgYm9keS5sZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSAmJiAvLyBub3QgTGluZVRlcm1pbmF0b3JcbiAgY29kZSAhPT0gMHgwMDBhICYmIGNvZGUgIT09IDB4MDAwZCkge1xuICAgIC8vIENsb3NpbmcgUXVvdGUgKFwiKVxuICAgIGlmIChjb2RlID09PSAzNCkge1xuICAgICAgdmFsdWUgKz0gYm9keS5zbGljZShjaHVua1N0YXJ0LCBwb3NpdGlvbik7XG4gICAgICByZXR1cm4gbmV3IF9hc3QuVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuU1RSSU5HLCBzdGFydCwgcG9zaXRpb24gKyAxLCBsaW5lLCBjb2wsIHByZXYsIHZhbHVlKTtcbiAgICB9IC8vIFNvdXJjZUNoYXJhY3RlclxuXG5cbiAgICBpZiAoY29kZSA8IDB4MDAyMCAmJiBjb2RlICE9PSAweDAwMDkpIHtcbiAgICAgIHRocm93ICgwLCBfc3ludGF4RXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgd2l0aGluIFN0cmluZzogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgKytwb3NpdGlvbjtcblxuICAgIGlmIChjb2RlID09PSA5Mikge1xuICAgICAgLy8gXFxcbiAgICAgIHZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24gLSAxKTtcbiAgICAgIGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pO1xuXG4gICAgICBzd2l0Y2ggKGNvZGUpIHtcbiAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICB2YWx1ZSArPSAnXCInO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDc6XG4gICAgICAgICAgdmFsdWUgKz0gJy8nO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgOTI6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcXFwnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgOTg6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcYic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMDI6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcZic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTA6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTQ6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xccic7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTY6XG4gICAgICAgICAgdmFsdWUgKz0gJ1xcdCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMTc6XG4gICAgICAgICAge1xuICAgICAgICAgICAgLy8gdVhYWFhcbiAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IHVuaUNoYXJDb2RlKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpLCBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSwgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMyksIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDQpKTtcblxuICAgICAgICAgICAgaWYgKGNoYXJDb2RlIDwgMCkge1xuICAgICAgICAgICAgICB2YXIgaW52YWxpZFNlcXVlbmNlID0gYm9keS5zbGljZShwb3NpdGlvbiArIDEsIHBvc2l0aW9uICsgNSk7XG4gICAgICAgICAgICAgIHRocm93ICgwLCBfc3ludGF4RXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlOiBcXFxcdVwiLmNvbmNhdChpbnZhbGlkU2VxdWVuY2UsIFwiLlwiKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhbHVlICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhckNvZGUpO1xuICAgICAgICAgICAgcG9zaXRpb24gKz0gNDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93ICgwLCBfc3ludGF4RXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgZXNjYXBlIHNlcXVlbmNlOiBcXFxcXCIuY29uY2F0KFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgICB9XG5cbiAgICAgICsrcG9zaXRpb247XG4gICAgICBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgKDAsIF9zeW50YXhFcnJvci5zeW50YXhFcnJvcikoc291cmNlLCBwb3NpdGlvbiwgJ1VudGVybWluYXRlZCBzdHJpbmcuJyk7XG59XG4vKipcbiAqIFJlYWRzIGEgYmxvY2sgc3RyaW5nIHRva2VuIGZyb20gdGhlIHNvdXJjZSBmaWxlLlxuICpcbiAqIFwiXCJcIihcIj9cIj8oXFxcXFwiXCJcInxcXFxcKD8hPVwiXCJcIil8W15cIlxcXFxdKSkqXCJcIlwiXG4gKi9cblxuXG5mdW5jdGlvbiByZWFkQmxvY2tTdHJpbmcoc291cmNlLCBzdGFydCwgbGluZSwgY29sLCBwcmV2LCBsZXhlcikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDM7XG4gIHZhciBjaHVua1N0YXJ0ID0gcG9zaXRpb247XG4gIHZhciBjb2RlID0gMDtcbiAgdmFyIHJhd1ZhbHVlID0gJyc7XG5cbiAgd2hpbGUgKHBvc2l0aW9uIDwgYm9keS5sZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSkge1xuICAgIC8vIENsb3NpbmcgVHJpcGxlLVF1b3RlIChcIlwiXCIpXG4gICAgaWYgKGNvZGUgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAyKSA9PT0gMzQpIHtcbiAgICAgIHJhd1ZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pO1xuICAgICAgcmV0dXJuIG5ldyBfYXN0LlRva2VuKF90b2tlbktpbmQuVG9rZW5LaW5kLkJMT0NLX1NUUklORywgc3RhcnQsIHBvc2l0aW9uICsgMywgbGluZSwgY29sLCBwcmV2LCAoMCwgX2Jsb2NrU3RyaW5nLmRlZGVudEJsb2NrU3RyaW5nVmFsdWUpKHJhd1ZhbHVlKSk7XG4gICAgfSAvLyBTb3VyY2VDaGFyYWN0ZXJcblxuXG4gICAgaWYgKGNvZGUgPCAweDAwMjAgJiYgY29kZSAhPT0gMHgwMDA5ICYmIGNvZGUgIT09IDB4MDAwYSAmJiBjb2RlICE9PSAweDAwMGQpIHtcbiAgICAgIHRocm93ICgwLCBfc3ludGF4RXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sIFwiSW52YWxpZCBjaGFyYWN0ZXIgd2l0aGluIFN0cmluZzogXCIuY29uY2F0KHByaW50Q2hhckNvZGUoY29kZSksIFwiLlwiKSk7XG4gICAgfVxuXG4gICAgaWYgKGNvZGUgPT09IDEwKSB7XG4gICAgICAvLyBuZXcgbGluZVxuICAgICAgKytwb3NpdGlvbjtcbiAgICAgICsrbGV4ZXIubGluZTtcbiAgICAgIGxleGVyLmxpbmVTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSBpZiAoY29kZSA9PT0gMTMpIHtcbiAgICAgIC8vIGNhcnJpYWdlIHJldHVyblxuICAgICAgaWYgKGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDEpID09PSAxMCkge1xuICAgICAgICBwb3NpdGlvbiArPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKytwb3NpdGlvbjtcbiAgICAgIH1cblxuICAgICAgKytsZXhlci5saW5lO1xuICAgICAgbGV4ZXIubGluZVN0YXJ0ID0gcG9zaXRpb247XG4gICAgfSBlbHNlIGlmICggLy8gRXNjYXBlIFRyaXBsZS1RdW90ZSAoXFxcIlwiXCIpXG4gICAgY29kZSA9PT0gOTIgJiYgYm9keS5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkgPT09IDM0ICYmIGJvZHkuY2hhckNvZGVBdChwb3NpdGlvbiArIDIpID09PSAzNCAmJiBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24gKyAzKSA9PT0gMzQpIHtcbiAgICAgIHJhd1ZhbHVlICs9IGJvZHkuc2xpY2UoY2h1bmtTdGFydCwgcG9zaXRpb24pICsgJ1wiXCJcIic7XG4gICAgICBwb3NpdGlvbiArPSA0O1xuICAgICAgY2h1bmtTdGFydCA9IHBvc2l0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICArK3Bvc2l0aW9uO1xuICAgIH1cbiAgfVxuXG4gIHRocm93ICgwLCBfc3ludGF4RXJyb3Iuc3ludGF4RXJyb3IpKHNvdXJjZSwgcG9zaXRpb24sICdVbnRlcm1pbmF0ZWQgc3RyaW5nLicpO1xufVxuLyoqXG4gKiBDb252ZXJ0cyBmb3VyIGhleGFkZWNpbWFsIGNoYXJzIHRvIHRoZSBpbnRlZ2VyIHRoYXQgdGhlXG4gKiBzdHJpbmcgcmVwcmVzZW50cy4gRm9yIGV4YW1wbGUsIHVuaUNoYXJDb2RlKCcwJywnMCcsJzAnLCdmJylcbiAqIHdpbGwgcmV0dXJuIDE1LCBhbmQgdW5pQ2hhckNvZGUoJzAnLCcwJywnZicsJ2YnKSByZXR1cm5zIDI1NS5cbiAqXG4gKiBSZXR1cm5zIGEgbmVnYXRpdmUgbnVtYmVyIG9uIGVycm9yLCBpZiBhIGNoYXIgd2FzIGludmFsaWQuXG4gKlxuICogVGhpcyBpcyBpbXBsZW1lbnRlZCBieSBub3RpbmcgdGhhdCBjaGFyMmhleCgpIHJldHVybnMgLTEgb24gZXJyb3IsXG4gKiB3aGljaCBtZWFucyB0aGUgcmVzdWx0IG9mIE9SaW5nIHRoZSBjaGFyMmhleCgpIHdpbGwgYWxzbyBiZSBuZWdhdGl2ZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHVuaUNoYXJDb2RlKGEsIGIsIGMsIGQpIHtcbiAgcmV0dXJuIGNoYXIyaGV4KGEpIDw8IDEyIHwgY2hhcjJoZXgoYikgPDwgOCB8IGNoYXIyaGV4KGMpIDw8IDQgfCBjaGFyMmhleChkKTtcbn1cbi8qKlxuICogQ29udmVydHMgYSBoZXggY2hhcmFjdGVyIHRvIGl0cyBpbnRlZ2VyIHZhbHVlLlxuICogJzAnIGJlY29tZXMgMCwgJzknIGJlY29tZXMgOVxuICogJ0EnIGJlY29tZXMgMTAsICdGJyBiZWNvbWVzIDE1XG4gKiAnYScgYmVjb21lcyAxMCwgJ2YnIGJlY29tZXMgMTVcbiAqXG4gKiBSZXR1cm5zIC0xIG9uIGVycm9yLlxuICovXG5cblxuZnVuY3Rpb24gY2hhcjJoZXgoYSkge1xuICByZXR1cm4gYSA+PSA0OCAmJiBhIDw9IDU3ID8gYSAtIDQ4IC8vIDAtOVxuICA6IGEgPj0gNjUgJiYgYSA8PSA3MCA/IGEgLSA1NSAvLyBBLUZcbiAgOiBhID49IDk3ICYmIGEgPD0gMTAyID8gYSAtIDg3IC8vIGEtZlxuICA6IC0xO1xufVxuLyoqXG4gKiBSZWFkcyBhbiBhbHBoYW51bWVyaWMgKyB1bmRlcnNjb3JlIG5hbWUgZnJvbSB0aGUgc291cmNlLlxuICpcbiAqIFtfQS1aYS16XVtfMC05QS1aYS16XSpcbiAqL1xuXG5cbmZ1bmN0aW9uIHJlYWROYW1lKHNvdXJjZSwgc3RhcnQsIGxpbmUsIGNvbCwgcHJldikge1xuICB2YXIgYm9keSA9IHNvdXJjZS5ib2R5O1xuICB2YXIgYm9keUxlbmd0aCA9IGJvZHkubGVuZ3RoO1xuICB2YXIgcG9zaXRpb24gPSBzdGFydCArIDE7XG4gIHZhciBjb2RlID0gMDtcblxuICB3aGlsZSAocG9zaXRpb24gIT09IGJvZHlMZW5ndGggJiYgIWlzTmFOKGNvZGUgPSBib2R5LmNoYXJDb2RlQXQocG9zaXRpb24pKSAmJiAoY29kZSA9PT0gOTUgfHwgLy8gX1xuICBjb2RlID49IDQ4ICYmIGNvZGUgPD0gNTcgfHwgLy8gMC05XG4gIGNvZGUgPj0gNjUgJiYgY29kZSA8PSA5MCB8fCAvLyBBLVpcbiAgY29kZSA+PSA5NyAmJiBjb2RlIDw9IDEyMikgLy8gYS16XG4gICkge1xuICAgICsrcG9zaXRpb247XG4gIH1cblxuICByZXR1cm4gbmV3IF9hc3QuVG9rZW4oX3Rva2VuS2luZC5Ub2tlbktpbmQuTkFNRSwgc3RhcnQsIHBvc2l0aW9uLCBsaW5lLCBjb2wsIHByZXYsIGJvZHkuc2xpY2Uoc3RhcnQsIHBvc2l0aW9uKSk7XG59IC8vIF8gQS1aIGEtelxuXG5cbmZ1bmN0aW9uIGlzTmFtZVN0YXJ0KGNvZGUpIHtcbiAgcmV0dXJuIGNvZGUgPT09IDk1IHx8IGNvZGUgPj0gNjUgJiYgY29kZSA8PSA5MCB8fCBjb2RlID49IDk3ICYmIGNvZGUgPD0gMTIyO1xufVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWZpbmVUb0pTT047XG5cbnZhciBfbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZWpzQ3VzdG9tSW5zcGVjdFN5bWJvbFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhlIGBkZWZpbmVUb0pTT04oKWAgZnVuY3Rpb24gZGVmaW5lcyB0b0pTT04oKSBhbmQgaW5zcGVjdCgpIHByb3RvdHlwZVxuICogbWV0aG9kcywgaWYgbm8gZnVuY3Rpb24gcHJvdmlkZWQgdGhleSBiZWNvbWUgYWxpYXNlcyBmb3IgdG9TdHJpbmcoKS5cbiAqL1xuZnVuY3Rpb24gZGVmaW5lVG9KU09OKGNsYXNzT2JqZWN0KSB7XG4gIHZhciBmbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogY2xhc3NPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuICBjbGFzc09iamVjdC5wcm90b3R5cGUudG9KU09OID0gZm47XG4gIGNsYXNzT2JqZWN0LnByb3RvdHlwZS5pbnNwZWN0ID0gZm47XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlIChTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9ncmFwaHFsL2dyYXBocWwtanMvaXNzdWVzLzIzMTcpICovXG5cbiAgaWYgKF9ub2RlanNDdXN0b21JbnNwZWN0U3ltYm9sLmRlZmF1bHQpIHtcbiAgICBjbGFzc09iamVjdC5wcm90b3R5cGVbX25vZGVqc0N1c3RvbUluc3BlY3RTeW1ib2wuZGVmYXVsdF0gPSBmbjtcbiAgfVxufVxuIiwidmFyIGFwaSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCIpO1xuICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIpO1xuXG4gICAgICAgICAgICBjb250ZW50ID0gY29udGVudC5fX2VzTW9kdWxlID8gY29udGVudC5kZWZhdWx0IDogY29udGVudDtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4gICAgICAgICAgICB9XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxubW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscyB8fCB7fTsiLCIvLyBJbXBvcnRzXG52YXIgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIik7XG5leHBvcnRzID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiQGtleWZyYW1lcyBmaXJzdEl0ZW17MCV7bGVmdDowfTEyLjUle2xlZnQ6MnJlbX0yNSV7bGVmdDo0cmVtfTM3LjUle2xlZnQ6MnJlbX01MCV7bGVmdDowfTEwMCV7bGVmdDowfX1Aa2V5ZnJhbWVzIHNlY29uZEl0ZW17MCV7bGVmdDoycmVtfTEyLjUle2xlZnQ6MnJlbX0yNSV7bGVmdDo0cmVtfTM3LjUle2xlZnQ6MnJlbX02Mi41JXtsZWZ0OjJyZW19NzUle2xlZnQ6MH04Ny41JXtsZWZ0OjJyZW19MTAwJXtsZWZ0OjJyZW19fUBrZXlmcmFtZXMgdGhpcmRJdGVtezAle2xlZnQ6NHJlbX01MCV7bGVmdDo0cmVtfTYyLjUle2xlZnQ6MnJlbX03NSV7bGVmdDowfTg3LjUle2xlZnQ6MnJlbX0xMDAle2xlZnQ6NHJlbX19LmxvYWRlcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cGFkZGluZzoxcmVtIDB9LmxvYWRlcl9faXRlbXN7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NXJlbTtoZWlnaHQ6MXJlbTttYXJnaW46MCBhdXRvfS5sb2FkZXJfX2l0ZW1zIHNwYW57YmFja2dyb3VuZC1jb2xvcjpibHVlO3dpZHRoOjFyZW07aGVpZ2h0OjFyZW07Ym9yZGVyLXJhZGl1czoxcmVtO3Bvc2l0aW9uOmFic29sdXRlfS5sb2FkZXJfX2l0ZW1zIHNwYW46bnRoLWNoaWxkKDEpe2xlZnQ6MDthbmltYXRpb246Zmlyc3RJdGVtIDJzIGluZmluaXRlO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246bGluZWFyfS5sb2FkZXJfX2l0ZW1zIHNwYW46bnRoLWNoaWxkKDIpe2xlZnQ6MnJlbTthbmltYXRpb246c2Vjb25kSXRlbSAycyBpbmZpbml0ZTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmxpbmVhcn0ubG9hZGVyX19pdGVtcyBzcGFuOm50aC1jaGlsZCgzKXtyaWdodDowO2FuaW1hdGlvbjp0aGlyZEl0ZW0gMnMgaW5maW5pdGU7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpsaW5lYXJ9XFxuXCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cztcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ob3JpZ2luYWxNb2R1bGUpIHtcblx0aWYgKCFvcmlnaW5hbE1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHR2YXIgbW9kdWxlID0gT2JqZWN0LmNyZWF0ZShvcmlnaW5hbE1vZHVsZSk7XG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwibG9hZGVkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJpZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiZXhwb3J0c1wiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlXG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuT2JzZXJ2YWJsZSA9IHZvaWQgMDtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG4vLyA9PT0gU3ltYm9sIFN1cHBvcnQgPT09XG52YXIgaGFzU3ltYm9scyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbic7XG59O1xuXG52YXIgaGFzU3ltYm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGhhc1N5bWJvbHMoKSAmJiBCb29sZWFuKFN5bWJvbFtuYW1lXSk7XG59O1xuXG52YXIgZ2V0U3ltYm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIGhhc1N5bWJvbChuYW1lKSA/IFN5bWJvbFtuYW1lXSA6ICdAQCcgKyBuYW1lO1xufTtcblxuaWYgKGhhc1N5bWJvbHMoKSAmJiAhaGFzU3ltYm9sKCdvYnNlcnZhYmxlJykpIHtcbiAgU3ltYm9sLm9ic2VydmFibGUgPSBTeW1ib2woJ29ic2VydmFibGUnKTtcbn1cblxudmFyIFN5bWJvbEl0ZXJhdG9yID0gZ2V0U3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFN5bWJvbE9ic2VydmFibGUgPSBnZXRTeW1ib2woJ29ic2VydmFibGUnKTtcbnZhciBTeW1ib2xTcGVjaWVzID0gZ2V0U3ltYm9sKCdzcGVjaWVzJyk7IC8vID09PSBBYnN0cmFjdCBPcGVyYXRpb25zID09PVxuXG5mdW5jdGlvbiBnZXRNZXRob2Qob2JqLCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gIGlmICh2YWx1ZSA9PSBudWxsKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKHZhbHVlICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGdldFNwZWNpZXMob2JqKSB7XG4gIHZhciBjdG9yID0gb2JqLmNvbnN0cnVjdG9yO1xuXG4gIGlmIChjdG9yICE9PSB1bmRlZmluZWQpIHtcbiAgICBjdG9yID0gY3RvcltTeW1ib2xTcGVjaWVzXTtcblxuICAgIGlmIChjdG9yID09PSBudWxsKSB7XG4gICAgICBjdG9yID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjdG9yICE9PSB1bmRlZmluZWQgPyBjdG9yIDogT2JzZXJ2YWJsZTtcbn1cblxuZnVuY3Rpb24gaXNPYnNlcnZhYmxlKHgpIHtcbiAgcmV0dXJuIHggaW5zdGFuY2VvZiBPYnNlcnZhYmxlOyAvLyBTUEVDOiBCcmFuZCBjaGVja1xufVxuXG5mdW5jdGlvbiBob3N0UmVwb3J0RXJyb3IoZSkge1xuICBpZiAoaG9zdFJlcG9ydEVycm9yLmxvZykge1xuICAgIGhvc3RSZXBvcnRFcnJvci5sb2coZSk7XG4gIH0gZWxzZSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGVucXVldWUoZm4pIHtcbiAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaG9zdFJlcG9ydEVycm9yKGUpO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKSB7XG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jbGVhbnVwO1xuICBpZiAoY2xlYW51cCA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gIHN1YnNjcmlwdGlvbi5fY2xlYW51cCA9IHVuZGVmaW5lZDtcblxuICBpZiAoIWNsZWFudXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB0cnkge1xuICAgIGlmICh0eXBlb2YgY2xlYW51cCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2xlYW51cCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdW5zdWJzY3JpYmUgPSBnZXRNZXRob2QoY2xlYW51cCwgJ3Vuc3Vic2NyaWJlJyk7XG5cbiAgICAgIGlmICh1bnN1YnNjcmliZSkge1xuICAgICAgICB1bnN1YnNjcmliZS5jYWxsKGNsZWFudXApO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhvc3RSZXBvcnRFcnJvcihlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgc3Vic2NyaXB0aW9uLl9vYnNlcnZlciA9IHVuZGVmaW5lZDtcbiAgc3Vic2NyaXB0aW9uLl9xdWV1ZSA9IHVuZGVmaW5lZDtcbiAgc3Vic2NyaXB0aW9uLl9zdGF0ZSA9ICdjbG9zZWQnO1xufVxuXG5mdW5jdGlvbiBmbHVzaFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pIHtcbiAgdmFyIHF1ZXVlID0gc3Vic2NyaXB0aW9uLl9xdWV1ZTtcblxuICBpZiAoIXF1ZXVlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3Vic2NyaXB0aW9uLl9xdWV1ZSA9IHVuZGVmaW5lZDtcbiAgc3Vic2NyaXB0aW9uLl9zdGF0ZSA9ICdyZWFkeSc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgIG5vdGlmeVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHF1ZXVlW2ldLnR5cGUsIHF1ZXVlW2ldLnZhbHVlKTtcbiAgICBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIGJyZWFrO1xuICB9XG59XG5cbmZ1bmN0aW9uIG5vdGlmeVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24sIHR5cGUsIHZhbHVlKSB7XG4gIHN1YnNjcmlwdGlvbi5fc3RhdGUgPSAncnVubmluZyc7XG4gIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fb2JzZXJ2ZXI7XG5cbiAgdHJ5IHtcbiAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlciwgdHlwZSk7XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ25leHQnOlxuICAgICAgICBpZiAobSkgbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIGlmIChtKSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtlbHNlIHRocm93IHZhbHVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnY29tcGxldGUnOlxuICAgICAgICBjbG9zZVN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xuICAgICAgICBpZiAobSkgbS5jYWxsKG9ic2VydmVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaG9zdFJlcG9ydEVycm9yKGUpO1xuICB9XG5cbiAgaWYgKHN1YnNjcmlwdGlvbi5fc3RhdGUgPT09ICdjbG9zZWQnKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7ZWxzZSBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ3J1bm5pbmcnKSBzdWJzY3JpcHRpb24uX3N0YXRlID0gJ3JlYWR5Jztcbn1cblxuZnVuY3Rpb24gb25Ob3RpZnkoc3Vic2NyaXB0aW9uLCB0eXBlLCB2YWx1ZSkge1xuICBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHJldHVybjtcblxuICBpZiAoc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2J1ZmZlcmluZycpIHtcbiAgICBzdWJzY3JpcHRpb24uX3F1ZXVlLnB1c2goe1xuICAgICAgdHlwZTogdHlwZSxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHN1YnNjcmlwdGlvbi5fc3RhdGUgIT09ICdyZWFkeScpIHtcbiAgICBzdWJzY3JpcHRpb24uX3N0YXRlID0gJ2J1ZmZlcmluZyc7XG4gICAgc3Vic2NyaXB0aW9uLl9xdWV1ZSA9IFt7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfV07XG4gICAgZW5xdWV1ZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZmx1c2hTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBub3RpZnlTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uLCB0eXBlLCB2YWx1ZSk7XG59XG5cbnZhciBTdWJzY3JpcHRpb24gPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdWJzY3JpcHRpb24ob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3Vic2NyaXB0aW9uKTtcblxuICAgIC8vIEFTU0VSVDogb2JzZXJ2ZXIgaXMgYW4gb2JqZWN0XG4gICAgLy8gQVNTRVJUOiBzdWJzY3JpYmVyIGlzIGNhbGxhYmxlXG4gICAgdGhpcy5fY2xlYW51cCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgIHRoaXMuX3F1ZXVlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3N0YXRlID0gJ2luaXRpYWxpemluZyc7XG4gICAgdmFyIHN1YnNjcmlwdGlvbk9ic2VydmVyID0gbmV3IFN1YnNjcmlwdGlvbk9ic2VydmVyKHRoaXMpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX2NsZWFudXAgPSBzdWJzY3JpYmVyLmNhbGwodW5kZWZpbmVkLCBzdWJzY3JpcHRpb25PYnNlcnZlcik7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgc3Vic2NyaXB0aW9uT2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3N0YXRlID09PSAnaW5pdGlhbGl6aW5nJykgdGhpcy5fc3RhdGUgPSAncmVhZHknO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFN1YnNjcmlwdGlvbiwgW3tcbiAgICBrZXk6IFwidW5zdWJzY3JpYmVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAodGhpcy5fc3RhdGUgIT09ICdjbG9zZWQnKSB7XG4gICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHRoaXMpO1xuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJjbG9zZWRcIixcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gJ2Nsb3NlZCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKTtcblxudmFyIFN1YnNjcmlwdGlvbk9ic2VydmVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uT2JzZXJ2ZXIoc3Vic2NyaXB0aW9uKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN1YnNjcmlwdGlvbk9ic2VydmVyKTtcblxuICAgIHRoaXMuX3N1YnNjcmlwdGlvbiA9IHN1YnNjcmlwdGlvbjtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTdWJzY3JpcHRpb25PYnNlcnZlciwgW3tcbiAgICBrZXk6IFwibmV4dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XG4gICAgICBvbk5vdGlmeSh0aGlzLl9zdWJzY3JpcHRpb24sICduZXh0JywgdmFsdWUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlcnJvclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xuICAgICAgb25Ob3RpZnkodGhpcy5fc3Vic2NyaXB0aW9uLCAnZXJyb3InLCB2YWx1ZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNvbXBsZXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgb25Ob3RpZnkodGhpcy5fc3Vic2NyaXB0aW9uLCAnY29tcGxldGUnKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2xvc2VkXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaXB0aW9uLl9zdGF0ZSA9PT0gJ2Nsb3NlZCc7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFN1YnNjcmlwdGlvbk9ic2VydmVyO1xufSgpO1xuXG52YXIgT2JzZXJ2YWJsZSA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE9ic2VydmFibGUoc3Vic2NyaWJlcikge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBPYnNlcnZhYmxlKTtcblxuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignT2JzZXJ2YWJsZSBjYW5ub3QgYmUgY2FsbGVkIGFzIGEgZnVuY3Rpb24nKTtcbiAgICBpZiAodHlwZW9mIHN1YnNjcmliZXIgIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoJ09ic2VydmFibGUgaW5pdGlhbGl6ZXIgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgdGhpcy5fc3Vic2NyaWJlciA9IHN1YnNjcmliZXI7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoT2JzZXJ2YWJsZSwgW3tcbiAgICBrZXk6IFwic3Vic2NyaWJlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgaWYgKHR5cGVvZiBvYnNlcnZlciAhPT0gJ29iamVjdCcgfHwgb2JzZXJ2ZXIgPT09IG51bGwpIHtcbiAgICAgICAgb2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgbmV4dDogb2JzZXJ2ZXIsXG4gICAgICAgICAgZXJyb3I6IGFyZ3VtZW50c1sxXSxcbiAgICAgICAgICBjb21wbGV0ZTogYXJndW1lbnRzWzJdXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9zdWJzY3JpYmVyKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9yRWFjaFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJykpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRvbmUoKSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF90aGlzLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBmbih2YWx1ZSwgZG9uZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHJlamVjdChlKTtcbiAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm1hcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtYXAoZm4pIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gX3RoaXMyLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YWx1ZSA9IGZuKHZhbHVlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZpbHRlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXIoZm4pIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgJyBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gX3RoaXMzLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBpZiAoIWZuKHZhbHVlKSkgcmV0dXJuO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICByZXR1cm4gb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5lcnJvcihlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVkdWNlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlZHVjZShmbikge1xuICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gICAgICB2YXIgQyA9IGdldFNwZWNpZXModGhpcyk7XG4gICAgICB2YXIgaGFzU2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxO1xuICAgICAgdmFyIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgICB2YXIgc2VlZCA9IGFyZ3VtZW50c1sxXTtcbiAgICAgIHZhciBhY2MgPSBzZWVkO1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gX3RoaXM0LnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgZmlyc3QgPSAhaGFzVmFsdWU7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG5cbiAgICAgICAgICAgIGlmICghZmlyc3QgfHwgaGFzU2VlZCkge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGFjYyA9IGZuKGFjYywgdmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhY2MgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCFoYXNWYWx1ZSAmJiAhaGFzU2VlZCkgcmV0dXJuIG9ic2VydmVyLmVycm9yKG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCByZWR1Y2UgYW4gZW1wdHkgc2VxdWVuY2UnKSk7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGFjYyk7XG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY29uY2F0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbmNhdCgpIHtcbiAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgc291cmNlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgc291cmNlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIEMgPSBnZXRTcGVjaWVzKHRoaXMpO1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICB2YXIgc3Vic2NyaXB0aW9uO1xuICAgICAgICB2YXIgaW5kZXggPSAwO1xuXG4gICAgICAgIGZ1bmN0aW9uIHN0YXJ0TmV4dChuZXh0KSB7XG4gICAgICAgICAgc3Vic2NyaXB0aW9uID0gbmV4dC5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSBzb3VyY2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXJ0TmV4dChDLmZyb20oc291cmNlc1tpbmRleCsrXSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzdGFydE5leHQoX3RoaXM1KTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZmxhdE1hcFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmbGF0TWFwKGZuKSB7XG4gICAgICB2YXIgX3RoaXM2ID0gdGhpcztcblxuICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcihmbiArICcgaXMgbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgIHZhciBDID0gZ2V0U3BlY2llcyh0aGlzKTtcbiAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgICAgICB2YXIgb3V0ZXIgPSBfdGhpczYuc3Vic2NyaWJlKHtcbiAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmIChmbikge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZm4odmFsdWUpO1xuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbm5lciA9IEMuZnJvbSh2YWx1ZSkuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBpID0gc3Vic2NyaXB0aW9ucy5pbmRleE9mKGlubmVyKTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSAwKSBzdWJzY3JpcHRpb25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBjb21wbGV0ZUlmRG9uZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbnMucHVzaChpbm5lcik7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbXBsZXRlSWZEb25lKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZUlmRG9uZSgpIHtcbiAgICAgICAgICBpZiAob3V0ZXIuY2xvc2VkICYmIHN1YnNjcmlwdGlvbnMubGVuZ3RoID09PSAwKSBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goZnVuY3Rpb24gKHMpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgb3V0ZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogU3ltYm9sT2JzZXJ2YWJsZSxcbiAgICB2YWx1ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6IFwiZnJvbVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9tKHgpIHtcbiAgICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogT2JzZXJ2YWJsZTtcbiAgICAgIGlmICh4ID09IG51bGwpIHRocm93IG5ldyBUeXBlRXJyb3IoeCArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICAgICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZCh4LCBTeW1ib2xPYnNlcnZhYmxlKTtcblxuICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG1ldGhvZC5jYWxsKHgpO1xuICAgICAgICBpZiAoT2JqZWN0KG9ic2VydmFibGUpICE9PSBvYnNlcnZhYmxlKSB0aHJvdyBuZXcgVHlwZUVycm9yKG9ic2VydmFibGUgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZShvYnNlcnZhYmxlKSAmJiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDKSByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaGFzU3ltYm9sKCdpdGVyYXRvcicpKSB7XG4gICAgICAgIG1ldGhvZCA9IGdldE1ldGhvZCh4LCBTeW1ib2xJdGVyYXRvcik7XG5cbiAgICAgICAgaWYgKG1ldGhvZCkge1xuICAgICAgICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm47XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IG1ldGhvZC5jYWxsKHgpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgdmFyIF9pdGVtID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KF9pdGVtKTtcbiAgICAgICAgICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoeCkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICAgIGVucXVldWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKG9ic2VydmVyLmNsb3NlZCkgcmV0dXJuO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHgubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh4W2ldKTtcbiAgICAgICAgICAgICAgaWYgKG9ic2VydmVyLmNsb3NlZCkgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcih4ICsgJyBpcyBub3Qgb2JzZXJ2YWJsZScpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJvZlwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvZigpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgaXRlbXNbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBPYnNlcnZhYmxlO1xuICAgICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xuICAgICAgICBlbnF1ZXVlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAob2JzZXJ2ZXIuY2xvc2VkKSByZXR1cm47XG5cbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2ldKTtcbiAgICAgICAgICAgIGlmIChvYnNlcnZlci5jbG9zZWQpIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogU3ltYm9sU3BlY2llcyxcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBPYnNlcnZhYmxlO1xufSgpO1xuXG5leHBvcnRzLk9ic2VydmFibGUgPSBPYnNlcnZhYmxlO1xuXG5pZiAoaGFzU3ltYm9scygpKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPYnNlcnZhYmxlLCBTeW1ib2woJ2V4dGVuc2lvbnMnKSwge1xuICAgIHZhbHVlOiB7XG4gICAgICBzeW1ib2w6IFN5bWJvbE9ic2VydmFibGUsXG4gICAgICBob3N0UmVwb3J0RXJyb3I6IGhvc3RSZXBvcnRFcnJvclxuICAgIH0sXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGlzRW1wdHlUZXh0Tm9kZTtcbi8qKlxuICogVGVzdHMgYSBodG1scGFyc2VyMiBub2RlIGFuZCByZXR1cm5zIHdoZXRoZXIgaXMgaXQgYSB0ZXh0IG5vZGUgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIGxpbmUgY29udGFpbmluZyBvbmx5XG4gKiB3aGl0ZSBzcGFjZS4gVGhpcyBhbGxvd3MgdGhlc2Ugbm9kZSB0eXBlcyB0byBiZSBleGNsdWRlZCBmcm9tIHRoZSByZW5kZXJpbmcgYmVjYXVzZSB0aGV5IGFyZSB1bm5lY2Vzc2FyeS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBUaGUgZWxlbWVudCBvYmplY3QgYXMgY3JlYXRlZCBieSBodG1scGFyc2VyMlxuICogQHJldHVybnMge2Jvb2xlYW59IFdoZXRoZXIgdGhlIG5vZGUgaXMgYW4gZW1wdHkgdGV4dCBub2RlXG4gKi9cbmZ1bmN0aW9uIGlzRW1wdHlUZXh0Tm9kZShub2RlKSB7XG4gIHJldHVybiBub2RlLnR5cGUgPT09ICd0ZXh0JyAmJiAvXFxyP1xcbi8udGVzdChub2RlLmRhdGEpICYmIG5vZGUuZGF0YS50cmltKCkgPT09ICcnO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9FbGVtZW50VHlwZSRUZXh0JEVsZTtcblxudmFyIF9odG1scGFyc2VyID0gcmVxdWlyZSgnaHRtbHBhcnNlcjInKTtcblxudmFyIF9UZXh0RWxlbWVudFR5cGUgPSByZXF1aXJlKCcuL1RleHRFbGVtZW50VHlwZScpO1xuXG52YXIgX1RleHRFbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9UZXh0RWxlbWVudFR5cGUpO1xuXG52YXIgX1RhZ0VsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi9UYWdFbGVtZW50VHlwZScpO1xuXG52YXIgX1RhZ0VsZW1lbnRUeXBlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhZ0VsZW1lbnRUeXBlKTtcblxudmFyIF9TdHlsZUVsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi9TdHlsZUVsZW1lbnRUeXBlJyk7XG5cbnZhciBfU3R5bGVFbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TdHlsZUVsZW1lbnRUeXBlKTtcblxudmFyIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlID0gcmVxdWlyZSgnLi9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlJyk7XG5cbnZhciBfVW5zdXBwb3J0ZWRFbGVtZW50VHlwZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH0gLypcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIE1hcCBlYWNoIGh0bWxwYXJzZXIyIGVsZW1lbnQgdHlwZSB0byBhIGZ1bmN0aW9uIHdoaWNoIHdpbGwgY29udmVydCB0aGF0IGVsZW1lbnQgdHlwZSB0byBhIFJlYWN0IGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIE5vdCBhbGwgb2YgdGhlIGVsZW1lbnQgdHlwZXMgYXJlIHN1cHBvcnRlZCBzbyB0aGUgVW5zdXBwb3J0ZWRFbGVtZW50VHlwZSBpcyB1c2VkIGZvciB0aGVtIHdoaWNoIHdpbGwgbm90IHJldHVybiBhbnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gKF9FbGVtZW50VHlwZSRUZXh0JEVsZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5UZXh0LCBfVGV4dEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuVGFnLCBfVGFnRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5TdHlsZSwgX1N0eWxlRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5EaXJlY3RpdmUsIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuQ29tbWVudCwgX1Vuc3VwcG9ydGVkRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfZGVmaW5lUHJvcGVydHkoX0VsZW1lbnRUeXBlJFRleHQkRWxlLCBfaHRtbHBhcnNlci5FbGVtZW50VHlwZS5TY3JpcHQsIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuQ0RBVEEsIF9VbnN1cHBvcnRlZEVsZW1lbnRUeXBlMi5kZWZhdWx0KSwgX2RlZmluZVByb3BlcnR5KF9FbGVtZW50VHlwZSRUZXh0JEVsZSwgX2h0bWxwYXJzZXIuRWxlbWVudFR5cGUuRG9jdHlwZSwgX1Vuc3VwcG9ydGVkRWxlbWVudFR5cGUyLmRlZmF1bHQpLCBfRWxlbWVudFR5cGUkVGV4dCRFbGUpOyIsInZhciBkZWNvZGVNYXAgPSByZXF1aXJlKFwiLi4vbWFwcy9kZWNvZGUuanNvblwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGVDb2RlUG9pbnQ7XG5cbi8vIG1vZGlmaWVkIHZlcnNpb24gb2YgaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvaGUvYmxvYi9tYXN0ZXIvc3JjL2hlLmpzI0w5NC1MMTE5XG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnQoY29kZVBvaW50KSB7XG4gICAgaWYgKChjb2RlUG9pbnQgPj0gMHhkODAwICYmIGNvZGVQb2ludCA8PSAweGRmZmYpIHx8IGNvZGVQb2ludCA+IDB4MTBmZmZmKSB7XG4gICAgICAgIHJldHVybiBcIlxcdUZGRkRcIjtcbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZU1hcCkge1xuICAgICAgICBjb2RlUG9pbnQgPSBkZWNvZGVNYXBbY29kZVBvaW50XTtcbiAgICB9XG5cbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcblxuICAgIGlmIChjb2RlUG9pbnQgPiAweGZmZmYpIHtcbiAgICAgICAgY29kZVBvaW50IC09IDB4MTAwMDA7XG4gICAgICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+PiAxMCkgJiAweDNmZikgfCAweGQ4MDApO1xuICAgICAgICBjb2RlUG9pbnQgPSAweGRjMDAgfCAoY29kZVBvaW50ICYgMHgzZmYpO1xuICAgIH1cblxuICAgIG91dHB1dCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGVQb2ludCk7XG4gICAgcmV0dXJuIG91dHB1dDtcbn1cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSID0gdHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnID8gUmVmbGVjdCA6IG51bGxcbnZhciBSZWZsZWN0QXBwbHkgPSBSICYmIHR5cGVvZiBSLmFwcGx5ID09PSAnZnVuY3Rpb24nXG4gID8gUi5hcHBseVxuICA6IGZ1bmN0aW9uIFJlZmxlY3RBcHBseSh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKHRhcmdldCwgcmVjZWl2ZXIsIGFyZ3MpO1xuICB9XG5cbnZhciBSZWZsZWN0T3duS2V5c1xuaWYgKFIgJiYgdHlwZW9mIFIub3duS2V5cyA9PT0gJ2Z1bmN0aW9uJykge1xuICBSZWZsZWN0T3duS2V5cyA9IFIub3duS2V5c1xufSBlbHNlIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldClcbiAgICAgIC5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyh0YXJnZXQpKTtcbiAgfTtcbn0gZWxzZSB7XG4gIFJlZmxlY3RPd25LZXlzID0gZnVuY3Rpb24gUmVmbGVjdE93bktleXModGFyZ2V0KSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldCk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIFByb2Nlc3NFbWl0V2FybmluZyh3YXJuaW5nKSB7XG4gIGlmIChjb25zb2xlICYmIGNvbnNvbGUud2FybikgY29uc29sZS53YXJuKHdhcm5pbmcpO1xufVxuXG52YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gTnVtYmVySXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xuICBFdmVudEVtaXR0ZXIuaW5pdC5jYWxsKHRoaXMpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBFdmVudEVtaXR0ZXI7XG5cbi8vIEJhY2t3YXJkcy1jb21wYXQgd2l0aCBub2RlIDAuMTAueFxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzQ291bnQgPSAwO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG52YXIgZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5mdW5jdGlvbiBjaGVja0xpc3RlbmVyKGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxufVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoRXZlbnRFbWl0dGVyLCAnZGVmYXVsdE1heExpc3RlbmVycycsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZGVmYXVsdE1heExpc3RlbmVycztcbiAgfSxcbiAgc2V0OiBmdW5jdGlvbihhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ251bWJlcicgfHwgYXJnIDwgMCB8fCBOdW1iZXJJc05hTihhcmcpKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIG9mIFwiZGVmYXVsdE1heExpc3RlbmVyc1wiIGlzIG91dCBvZiByYW5nZS4gSXQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBudW1iZXIuIFJlY2VpdmVkICcgKyBhcmcgKyAnLicpO1xuICAgIH1cbiAgICBkZWZhdWx0TWF4TGlzdGVuZXJzID0gYXJnO1xuICB9XG59KTtcblxuRXZlbnRFbWl0dGVyLmluaXQgPSBmdW5jdGlvbigpIHtcblxuICBpZiAodGhpcy5fZXZlbnRzID09PSB1bmRlZmluZWQgfHxcbiAgICAgIHRoaXMuX2V2ZW50cyA9PT0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLl9ldmVudHMpIHtcbiAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgfVxuXG4gIHRoaXMuX21heExpc3RlbmVycyA9IHRoaXMuX21heExpc3RlbmVycyB8fCB1bmRlZmluZWQ7XG59O1xuXG4vLyBPYnZpb3VzbHkgbm90IGFsbCBFbWl0dGVycyBzaG91bGQgYmUgbGltaXRlZCB0byAxMC4gVGhpcyBmdW5jdGlvbiBhbGxvd3Ncbi8vIHRoYXQgdG8gYmUgaW5jcmVhc2VkLiBTZXQgdG8gemVybyBmb3IgdW5saW1pdGVkLlxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5zZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXRNYXhMaXN0ZW5lcnMobikge1xuICBpZiAodHlwZW9mIG4gIT09ICdudW1iZXInIHx8IG4gPCAwIHx8IE51bWJlcklzTmFOKG4pKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcIm5cIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgbiArICcuJyk7XG4gIH1cbiAgdGhpcy5fbWF4TGlzdGVuZXJzID0gbjtcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBfZ2V0TWF4TGlzdGVuZXJzKHRoYXQpIHtcbiAgaWYgKHRoYXQuX21heExpc3RlbmVycyA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBFdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycztcbiAgcmV0dXJuIHRoYXQuX21heExpc3RlbmVycztcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5nZXRNYXhMaXN0ZW5lcnMgPSBmdW5jdGlvbiBnZXRNYXhMaXN0ZW5lcnMoKSB7XG4gIHJldHVybiBfZ2V0TWF4TGlzdGVuZXJzKHRoaXMpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5lbWl0ID0gZnVuY3Rpb24gZW1pdCh0eXBlKSB7XG4gIHZhciBhcmdzID0gW107XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSBhcmdzLnB1c2goYXJndW1lbnRzW2ldKTtcbiAgdmFyIGRvRXJyb3IgPSAodHlwZSA9PT0gJ2Vycm9yJyk7XG5cbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyAhPT0gdW5kZWZpbmVkKVxuICAgIGRvRXJyb3IgPSAoZG9FcnJvciAmJiBldmVudHMuZXJyb3IgPT09IHVuZGVmaW5lZCk7XG4gIGVsc2UgaWYgKCFkb0Vycm9yKVxuICAgIHJldHVybiBmYWxzZTtcblxuICAvLyBJZiB0aGVyZSBpcyBubyAnZXJyb3InIGV2ZW50IGxpc3RlbmVyIHRoZW4gdGhyb3cuXG4gIGlmIChkb0Vycm9yKSB7XG4gICAgdmFyIGVyO1xuICAgIGlmIChhcmdzLmxlbmd0aCA+IDApXG4gICAgICBlciA9IGFyZ3NbMF07XG4gICAgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIC8vIE5vdGU6IFRoZSBjb21tZW50cyBvbiB0aGUgYHRocm93YCBsaW5lcyBhcmUgaW50ZW50aW9uYWwsIHRoZXkgc2hvd1xuICAgICAgLy8gdXAgaW4gTm9kZSdzIG91dHB1dCBpZiB0aGlzIHJlc3VsdHMgaW4gYW4gdW5oYW5kbGVkIGV4Y2VwdGlvbi5cbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH1cbiAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcignVW5oYW5kbGVkIGVycm9yLicgKyAoZXIgPyAnICgnICsgZXIubWVzc2FnZSArICcpJyA6ICcnKSk7XG4gICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICB0aHJvdyBlcnI7IC8vIFVuaGFuZGxlZCAnZXJyb3InIGV2ZW50XG4gIH1cblxuICB2YXIgaGFuZGxlciA9IGV2ZW50c1t0eXBlXTtcblxuICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBmYWxzZTtcblxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBSZWZsZWN0QXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIFJlZmxlY3RBcHBseShsaXN0ZW5lcnNbaV0sIHRoaXMsIGFyZ3MpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5mdW5jdGlvbiBfYWRkTGlzdGVuZXIodGFyZ2V0LCB0eXBlLCBsaXN0ZW5lciwgcHJlcGVuZCkge1xuICB2YXIgbTtcbiAgdmFyIGV2ZW50cztcbiAgdmFyIGV4aXN0aW5nO1xuXG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGFyZ2V0Ll9ldmVudHNDb3VudCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgLy8gVG8gYXZvaWQgcmVjdXJzaW9uIGluIHRoZSBjYXNlIHRoYXQgdHlwZSA9PT0gXCJuZXdMaXN0ZW5lclwiISBCZWZvcmVcbiAgICAvLyBhZGRpbmcgaXQgdG8gdGhlIGxpc3RlbmVycywgZmlyc3QgZW1pdCBcIm5ld0xpc3RlbmVyXCIuXG4gICAgaWYgKGV2ZW50cy5uZXdMaXN0ZW5lciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0YXJnZXQuZW1pdCgnbmV3TGlzdGVuZXInLCB0eXBlLFxuICAgICAgICAgICAgICAgICAgbGlzdGVuZXIubGlzdGVuZXIgPyBsaXN0ZW5lci5saXN0ZW5lciA6IGxpc3RlbmVyKTtcblxuICAgICAgLy8gUmUtYXNzaWduIGBldmVudHNgIGJlY2F1c2UgYSBuZXdMaXN0ZW5lciBoYW5kbGVyIGNvdWxkIGhhdmUgY2F1c2VkIHRoZVxuICAgICAgLy8gdGhpcy5fZXZlbnRzIHRvIGJlIGFzc2lnbmVkIHRvIGEgbmV3IG9iamVjdFxuICAgICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gICAgfVxuICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdO1xuICB9XG5cbiAgaWYgKGV4aXN0aW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPcHRpbWl6ZSB0aGUgY2FzZSBvZiBvbmUgbGlzdGVuZXIuIERvbid0IG5lZWQgdGhlIGV4dHJhIGFycmF5IG9iamVjdC5cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IGxpc3RlbmVyO1xuICAgICsrdGFyZ2V0Ll9ldmVudHNDb3VudDtcbiAgfSBlbHNlIHtcbiAgICBpZiAodHlwZW9mIGV4aXN0aW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBBZGRpbmcgdGhlIHNlY29uZCBlbGVtZW50LCBuZWVkIHRvIGNoYW5nZSB0byBhcnJheS5cbiAgICAgIGV4aXN0aW5nID0gZXZlbnRzW3R5cGVdID1cbiAgICAgICAgcHJlcGVuZCA/IFtsaXN0ZW5lciwgZXhpc3RpbmddIDogW2V4aXN0aW5nLCBsaXN0ZW5lcl07XG4gICAgICAvLyBJZiB3ZSd2ZSBhbHJlYWR5IGdvdCBhbiBhcnJheSwganVzdCBhcHBlbmQuXG4gICAgfSBlbHNlIGlmIChwcmVwZW5kKSB7XG4gICAgICBleGlzdGluZy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhpc3RpbmcucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgZm9yIGxpc3RlbmVyIGxlYWtcbiAgICBtID0gX2dldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgIGlmIChtID4gMCAmJiBleGlzdGluZy5sZW5ndGggPiBtICYmICFleGlzdGluZy53YXJuZWQpIHtcbiAgICAgIGV4aXN0aW5nLndhcm5lZCA9IHRydWU7XG4gICAgICAvLyBObyBlcnJvciBjb2RlIGZvciB0aGlzIHNpbmNlIGl0IGlzIGEgV2FybmluZ1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4XG4gICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmcubGVuZ3RoICsgJyAnICsgU3RyaW5nKHR5cGUpICsgJyBsaXN0ZW5lcnMgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRlZC4gVXNlIGVtaXR0ZXIuc2V0TWF4TGlzdGVuZXJzKCkgdG8gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgdy5uYW1lID0gJ01heExpc3RlbmVyc0V4Y2VlZGVkV2FybmluZyc7XG4gICAgICB3LmVtaXR0ZXIgPSB0YXJnZXQ7XG4gICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgdy5jb3VudCA9IGV4aXN0aW5nLmxlbmd0aDtcbiAgICAgIFByb2Nlc3NFbWl0V2FybmluZyh3KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIG9uY2VXcmFwcGVyKCkge1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMClcbiAgICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmNhbGwodGhpcy50YXJnZXQpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVyLmFwcGx5KHRoaXMudGFyZ2V0LCBhcmd1bWVudHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgY2hlY2tMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIEVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZiBhbmQgb25seSBpZiB0aGUgbGlzdGVuZXIgd2FzIHJlbW92ZWQuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGNoZWNrTGlzdGVuZXIobGlzdGVuZXIpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKGxpc3QgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIGlmIChsaXN0ID09PSBsaXN0ZW5lciB8fCBsaXN0Lmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgaWYgKGxpc3RbaV0gPT09IGxpc3RlbmVyIHx8IGxpc3RbaV0ubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSAwKVxuICAgICAgICAgIGxpc3Quc2hpZnQoKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgc3BsaWNlT25lKGxpc3QsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICBldmVudHNbdHlwZV0gPSBsaXN0WzBdO1xuXG4gICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZClcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVMaXN0ZW5lcjtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yZW1vdmVBbGxMaXN0ZW5lcnMgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUFsbExpc3RlbmVycyh0eXBlKSB7XG4gICAgICB2YXIgbGlzdGVuZXJzLCBldmVudHMsIGk7XG5cbiAgICAgIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcbiAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICB9IGVsc2UgaWYgKGV2ZW50c1t0eXBlXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICB2YXIga2V5O1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIExJRk8gb3JkZXJcbiAgICAgICAgZm9yIChpID0gbGlzdGVuZXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnNbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9saXN0ZW5lcnModGFyZ2V0LCB0eXBlLCB1bndyYXApIHtcbiAgdmFyIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gW107XG5cbiAgdmFyIGV2bGlzdGVuZXIgPSBldmVudHNbdHlwZV07XG4gIGlmIChldmxpc3RlbmVyID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJylcbiAgICByZXR1cm4gdW53cmFwID8gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl0gOiBbZXZsaXN0ZW5lcl07XG5cbiAgcmV0dXJuIHVud3JhcCA/XG4gICAgdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpIDogYXJyYXlDbG9uZShldmxpc3RlbmVyLCBldmxpc3RlbmVyLmxlbmd0aCk7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJzID0gZnVuY3Rpb24gbGlzdGVuZXJzKHR5cGUpIHtcbiAgcmV0dXJuIF9saXN0ZW5lcnModGhpcywgdHlwZSwgdHJ1ZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJhd0xpc3RlbmVycyA9IGZ1bmN0aW9uIHJhd0xpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gMTtcbiAgICB9IGVsc2UgaWYgKGV2bGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGV2bGlzdGVuZXIubGVuZ3RoO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmV2ZW50TmFtZXMgPSBmdW5jdGlvbiBldmVudE5hbWVzKCkge1xuICByZXR1cm4gdGhpcy5fZXZlbnRzQ291bnQgPiAwID8gUmVmbGVjdE93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIG4pIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkobik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgKytpKVxuICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gIHJldHVybiBjb3B5O1xufVxuXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICg7IGluZGV4ICsgMSA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKVxuICAgIGxpc3RbaW5kZXhdID0gbGlzdFtpbmRleCArIDFdO1xuICBsaXN0LnBvcCgpO1xufVxuXG5mdW5jdGlvbiB1bndyYXBMaXN0ZW5lcnMoYXJyKSB7XG4gIHZhciByZXQgPSBuZXcgQXJyYXkoYXJyLmxlbmd0aCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgKytpKSB7XG4gICAgcmV0W2ldID0gYXJyW2ldLmxpc3RlbmVyIHx8IGFycltpXTtcbiAgfVxuICByZXR1cm4gcmV0O1xufVxuIiwiLy8gRE9NLUxldmVsLTEtY29tcGxpYW50IHN0cnVjdHVyZVxudmFyIE5vZGVQcm90b3R5cGUgPSByZXF1aXJlKCcuL25vZGUnKTtcbnZhciBFbGVtZW50UHJvdG90eXBlID0gbW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKE5vZGVQcm90b3R5cGUpO1xuXG52YXIgZG9tTHZsMSA9IHtcblx0dGFnTmFtZTogXCJuYW1lXCJcbn07XG5cbk9iamVjdC5rZXlzKGRvbUx2bDEpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdHZhciBzaG9ydGhhbmQgPSBkb21MdmwxW2tleV07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShFbGVtZW50UHJvdG90eXBlLCBrZXksIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXNbc2hvcnRoYW5kXSB8fCBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbih2YWwpIHtcblx0XHRcdHRoaXNbc2hvcnRoYW5kXSA9IHZhbDtcblx0XHRcdHJldHVybiB2YWw7XG5cdFx0fVxuXHR9KTtcbn0pO1xuIiwidmFyIERvbUhhbmRsZXIgPSByZXF1aXJlKFwiZG9taGFuZGxlclwiKTtcbnZhciBEb21VdGlscyA9IHJlcXVpcmUoXCJkb211dGlsc1wiKTtcblxuLy9UT0RPOiBtYWtlIHRoaXMgYSBzdHJlYW1hYmxlIGhhbmRsZXJcbmZ1bmN0aW9uIEZlZWRIYW5kbGVyKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gICAgdGhpcy5pbml0KGNhbGxiYWNrLCBvcHRpb25zKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKEZlZWRIYW5kbGVyLCBEb21IYW5kbGVyKTtcblxuRmVlZEhhbmRsZXIucHJvdG90eXBlLmluaXQgPSBEb21IYW5kbGVyO1xuXG5mdW5jdGlvbiBnZXRFbGVtZW50cyh3aGF0LCB3aGVyZSkge1xuICAgIHJldHVybiBEb21VdGlscy5nZXRFbGVtZW50c0J5VGFnTmFtZSh3aGF0LCB3aGVyZSwgdHJ1ZSk7XG59XG5mdW5jdGlvbiBnZXRPbmVFbGVtZW50KHdoYXQsIHdoZXJlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHdoYXQsIHdoZXJlLCB0cnVlLCAxKVswXTtcbn1cbmZ1bmN0aW9uIGZldGNoKHdoYXQsIHdoZXJlLCByZWN1cnNlKSB7XG4gICAgcmV0dXJuIERvbVV0aWxzLmdldFRleHQoXG4gICAgICAgIERvbVV0aWxzLmdldEVsZW1lbnRzQnlUYWdOYW1lKHdoYXQsIHdoZXJlLCByZWN1cnNlLCAxKVxuICAgICkudHJpbSgpO1xufVxuXG5mdW5jdGlvbiBhZGRDb25kaXRpb25hbGx5KG9iaiwgcHJvcCwgd2hhdCwgd2hlcmUsIHJlY3Vyc2UpIHtcbiAgICB2YXIgdG1wID0gZmV0Y2god2hhdCwgd2hlcmUsIHJlY3Vyc2UpO1xuICAgIGlmICh0bXApIG9ialtwcm9wXSA9IHRtcDtcbn1cblxudmFyIGlzVmFsaWRGZWVkID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IFwicnNzXCIgfHwgdmFsdWUgPT09IFwiZmVlZFwiIHx8IHZhbHVlID09PSBcInJkZjpSREZcIjtcbn07XG5cbkZlZWRIYW5kbGVyLnByb3RvdHlwZS5vbmVuZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBmZWVkID0ge30sXG4gICAgICAgIGZlZWRSb290ID0gZ2V0T25lRWxlbWVudChpc1ZhbGlkRmVlZCwgdGhpcy5kb20pLFxuICAgICAgICB0bXAsXG4gICAgICAgIGNoaWxkcztcblxuICAgIGlmIChmZWVkUm9vdCkge1xuICAgICAgICBpZiAoZmVlZFJvb3QubmFtZSA9PT0gXCJmZWVkXCIpIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IGZlZWRSb290LmNoaWxkcmVuO1xuXG4gICAgICAgICAgICBmZWVkLnR5cGUgPSBcImF0b21cIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJpZFwiLCBcImlkXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwidGl0bGVcIiwgXCJ0aXRsZVwiLCBjaGlsZHMpO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICh0bXAgPSBnZXRPbmVFbGVtZW50KFwibGlua1wiLCBjaGlsZHMpKSAmJlxuICAgICAgICAgICAgICAgICh0bXAgPSB0bXAuYXR0cmlicykgJiZcbiAgICAgICAgICAgICAgICAodG1wID0gdG1wLmhyZWYpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZmVlZC5saW5rID0gdG1wO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImRlc2NyaXB0aW9uXCIsIFwic3VidGl0bGVcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGlmICgodG1wID0gZmV0Y2goXCJ1cGRhdGVkXCIsIGNoaWxkcykpKSBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh0bXApO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcImVtYWlsXCIsIGNoaWxkcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcImVudHJ5XCIsIGNoaWxkcykubWFwKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiaWRcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGl0ZW0pO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgKHRtcCA9IGdldE9uZUVsZW1lbnQoXCJsaW5rXCIsIGl0ZW0pKSAmJlxuICAgICAgICAgICAgICAgICAgICAodG1wID0gdG1wLmF0dHJpYnMpICYmXG4gICAgICAgICAgICAgICAgICAgICh0bXAgPSB0bXAuaHJlZilcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LmxpbmsgPSB0bXA7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInN1bW1hcnlcIiwgaXRlbSkgfHwgZmV0Y2goXCJjb250ZW50XCIsIGl0ZW0pKSlcbiAgICAgICAgICAgICAgICAgICAgZW50cnkuZGVzY3JpcHRpb24gPSB0bXA7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInVwZGF0ZWRcIiwgaXRlbSkpKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUodG1wKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNoaWxkcyA9IGdldE9uZUVsZW1lbnQoXCJjaGFubmVsXCIsIGZlZWRSb290LmNoaWxkcmVuKS5jaGlsZHJlbjtcblxuICAgICAgICAgICAgZmVlZC50eXBlID0gZmVlZFJvb3QubmFtZS5zdWJzdHIoMCwgMyk7XG4gICAgICAgICAgICBmZWVkLmlkID0gXCJcIjtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJ0aXRsZVwiLCBcInRpdGxlXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGZlZWQsIFwibGlua1wiLCBcImxpbmtcIiwgY2hpbGRzKTtcbiAgICAgICAgICAgIGFkZENvbmRpdGlvbmFsbHkoZmVlZCwgXCJkZXNjcmlwdGlvblwiLCBcImRlc2NyaXB0aW9uXCIsIGNoaWxkcyk7XG4gICAgICAgICAgICBpZiAoKHRtcCA9IGZldGNoKFwibGFzdEJ1aWxkRGF0ZVwiLCBjaGlsZHMpKSlcbiAgICAgICAgICAgICAgICBmZWVkLnVwZGF0ZWQgPSBuZXcgRGF0ZSh0bXApO1xuICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShmZWVkLCBcImF1dGhvclwiLCBcIm1hbmFnaW5nRWRpdG9yXCIsIGNoaWxkcywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGZlZWQuaXRlbXMgPSBnZXRFbGVtZW50cyhcIml0ZW1cIiwgZmVlZFJvb3QuY2hpbGRyZW4pLm1hcChmdW5jdGlvbihcbiAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSB7fSxcbiAgICAgICAgICAgICAgICAgICAgdG1wO1xuXG4gICAgICAgICAgICAgICAgaXRlbSA9IGl0ZW0uY2hpbGRyZW47XG5cbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImlkXCIsIFwiZ3VpZFwiLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcInRpdGxlXCIsIFwidGl0bGVcIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgYWRkQ29uZGl0aW9uYWxseShlbnRyeSwgXCJsaW5rXCIsIFwibGlua1wiLCBpdGVtKTtcbiAgICAgICAgICAgICAgICBhZGRDb25kaXRpb25hbGx5KGVudHJ5LCBcImRlc2NyaXB0aW9uXCIsIFwiZGVzY3JpcHRpb25cIiwgaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCh0bXAgPSBmZXRjaChcInB1YkRhdGVcIiwgaXRlbSkpKVxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wdWJEYXRlID0gbmV3IERhdGUodG1wKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmRvbSA9IGZlZWQ7XG4gICAgRG9tSGFuZGxlci5wcm90b3R5cGUuX2hhbmRsZUNhbGxiYWNrLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIGZlZWRSb290ID8gbnVsbCA6IEVycm9yKFwiY291bGRuJ3QgZmluZCByb290IG9mIGZlZWRcIilcbiAgICApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGZWVkSGFuZGxlcjtcbiIsInZhciBFbGVtZW50VHlwZSA9IHJlcXVpcmUoXCJkb21lbGVtZW50dHlwZVwiKSxcbiAgICBnZXRPdXRlckhUTUwgPSByZXF1aXJlKFwiZG9tLXNlcmlhbGl6ZXJcIiksXG4gICAgaXNUYWcgPSBFbGVtZW50VHlwZS5pc1RhZztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGdldElubmVySFRNTDogZ2V0SW5uZXJIVE1MLFxuXHRnZXRPdXRlckhUTUw6IGdldE91dGVySFRNTCxcblx0Z2V0VGV4dDogZ2V0VGV4dFxufTtcblxuZnVuY3Rpb24gZ2V0SW5uZXJIVE1MKGVsZW0sIG9wdHMpe1xuXHRyZXR1cm4gZWxlbS5jaGlsZHJlbiA/IGVsZW0uY2hpbGRyZW4ubWFwKGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHJldHVybiBnZXRPdXRlckhUTUwoZWxlbSwgb3B0cyk7XG5cdH0pLmpvaW4oXCJcIikgOiBcIlwiO1xufVxuXG5mdW5jdGlvbiBnZXRUZXh0KGVsZW0pe1xuXHRpZihBcnJheS5pc0FycmF5KGVsZW0pKSByZXR1cm4gZWxlbS5tYXAoZ2V0VGV4dCkuam9pbihcIlwiKTtcblx0aWYoaXNUYWcoZWxlbSkpIHJldHVybiBlbGVtLm5hbWUgPT09IFwiYnJcIiA/IFwiXFxuXCIgOiBnZXRUZXh0KGVsZW0uY2hpbGRyZW4pO1xuXHRpZihlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLkNEQVRBKSByZXR1cm4gZ2V0VGV4dChlbGVtLmNoaWxkcmVuKTtcblx0aWYoZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5UZXh0KSByZXR1cm4gZWxlbS5kYXRhO1xuXHRyZXR1cm4gXCJcIjtcbn1cbiIsIi8qXG4gIE1vZHVsZSBkZXBlbmRlbmNpZXNcbiovXG52YXIgRWxlbWVudFR5cGUgPSByZXF1aXJlKCdkb21lbGVtZW50dHlwZScpO1xudmFyIGVudGl0aWVzID0gcmVxdWlyZSgnZW50aXRpZXMnKTtcblxuLyogbWl4ZWQtY2FzZSBTVkcgYW5kIE1hdGhNTCB0YWdzICYgYXR0cmlidXRlc1xuICAgcmVjb2duaXplZCBieSB0aGUgSFRNTCBwYXJzZXIsIHNlZVxuICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvcGFyc2luZy5odG1sI3BhcnNpbmctbWFpbi1pbmZvcmVpZ25cbiovXG52YXIgZm9yZWlnbk5hbWVzID0gcmVxdWlyZSgnLi9mb3JlaWduTmFtZXMuanNvbicpO1xuZm9yZWlnbk5hbWVzLmVsZW1lbnROYW1lcy5fX3Byb3RvX18gPSBudWxsOyAvKiB1c2UgYXMgYSBzaW1wbGUgZGljdGlvbmFyeSAqL1xuZm9yZWlnbk5hbWVzLmF0dHJpYnV0ZU5hbWVzLl9fcHJvdG9fXyA9IG51bGw7XG5cbnZhciB1bmVuY29kZWRFbGVtZW50cyA9IHtcbiAgX19wcm90b19fOiBudWxsLFxuICBzdHlsZTogdHJ1ZSxcbiAgc2NyaXB0OiB0cnVlLFxuICB4bXA6IHRydWUsXG4gIGlmcmFtZTogdHJ1ZSxcbiAgbm9lbWJlZDogdHJ1ZSxcbiAgbm9mcmFtZXM6IHRydWUsXG4gIHBsYWludGV4dDogdHJ1ZSxcbiAgbm9zY3JpcHQ6IHRydWVcbn07XG5cbi8qXG4gIEZvcm1hdCBhdHRyaWJ1dGVzXG4qL1xuZnVuY3Rpb24gZm9ybWF0QXR0cnMoYXR0cmlidXRlcywgb3B0cykge1xuICBpZiAoIWF0dHJpYnV0ZXMpIHJldHVybjtcblxuICB2YXIgb3V0cHV0ID0gJyc7XG4gIHZhciB2YWx1ZTtcblxuICAvLyBMb29wIHRocm91Z2ggdGhlIGF0dHJpYnV0ZXNcbiAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICBpZiAob3V0cHV0KSB7XG4gICAgICBvdXRwdXQgKz0gJyAnO1xuICAgIH1cblxuICAgIGlmIChvcHRzLnhtbE1vZGUgPT09ICdmb3JlaWduJykge1xuICAgICAgLyogZml4IHVwIG1peGVkLWNhc2UgYXR0cmlidXRlIG5hbWVzICovXG4gICAgICBrZXkgPSBmb3JlaWduTmFtZXMuYXR0cmlidXRlTmFtZXNba2V5XSB8fCBrZXk7XG4gICAgfVxuICAgIG91dHB1dCArPSBrZXk7XG4gICAgaWYgKCh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gJycpIHx8IG9wdHMueG1sTW9kZSkge1xuICAgICAgb3V0cHV0ICs9XG4gICAgICAgICc9XCInICtcbiAgICAgICAgKG9wdHMuZGVjb2RlRW50aXRpZXNcbiAgICAgICAgICA/IGVudGl0aWVzLmVuY29kZVhNTCh2YWx1ZSlcbiAgICAgICAgICA6IHZhbHVlLnJlcGxhY2UoL1xcXCIvZywgJyZxdW90OycpKSArXG4gICAgICAgICdcIic7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLypcbiAgU2VsZi1lbmNsb3NpbmcgdGFncyAoc3RvbGVuIGZyb20gbm9kZS1odG1scGFyc2VyKVxuKi9cbnZhciBzaW5nbGVUYWcgPSB7XG4gIF9fcHJvdG9fXzogbnVsbCxcbiAgYXJlYTogdHJ1ZSxcbiAgYmFzZTogdHJ1ZSxcbiAgYmFzZWZvbnQ6IHRydWUsXG4gIGJyOiB0cnVlLFxuICBjb2w6IHRydWUsXG4gIGNvbW1hbmQ6IHRydWUsXG4gIGVtYmVkOiB0cnVlLFxuICBmcmFtZTogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGlzaW5kZXg6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZVxufTtcblxudmFyIHJlbmRlciA9IChtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRvbSwgb3B0cykge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoZG9tKSAmJiAhZG9tLmNoZWVyaW8pIGRvbSA9IFtkb21dO1xuICBvcHRzID0gb3B0cyB8fCB7fTtcblxuICB2YXIgb3V0cHV0ID0gJyc7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkb20ubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgZWxlbSA9IGRvbVtpXTtcblxuICAgIGlmIChlbGVtLnR5cGUgPT09ICdyb290Jykgb3V0cHV0ICs9IHJlbmRlcihlbGVtLmNoaWxkcmVuLCBvcHRzKTtcbiAgICBlbHNlIGlmIChFbGVtZW50VHlwZS5pc1RhZyhlbGVtKSkgb3V0cHV0ICs9IHJlbmRlclRhZyhlbGVtLCBvcHRzKTtcbiAgICBlbHNlIGlmIChlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLkRpcmVjdGl2ZSlcbiAgICAgIG91dHB1dCArPSByZW5kZXJEaXJlY3RpdmUoZWxlbSk7XG4gICAgZWxzZSBpZiAoZWxlbS50eXBlID09PSBFbGVtZW50VHlwZS5Db21tZW50KSBvdXRwdXQgKz0gcmVuZGVyQ29tbWVudChlbGVtKTtcbiAgICBlbHNlIGlmIChlbGVtLnR5cGUgPT09IEVsZW1lbnRUeXBlLkNEQVRBKSBvdXRwdXQgKz0gcmVuZGVyQ2RhdGEoZWxlbSk7XG4gICAgZWxzZSBvdXRwdXQgKz0gcmVuZGVyVGV4dChlbGVtLCBvcHRzKTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59KTtcblxudmFyIGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMgPSBbXG4gICdtaScsXG4gICdtbycsXG4gICdtbicsXG4gICdtcycsXG4gICdtdGV4dCcsXG4gICdhbm5vdGF0aW9uLXhtbCcsXG4gICdmb3JlaWduT2JqZWN0JyxcbiAgJ2Rlc2MnLFxuICAndGl0bGUnXG5dO1xuXG5mdW5jdGlvbiByZW5kZXJUYWcoZWxlbSwgb3B0cykge1xuICAvLyBIYW5kbGUgU1ZHIC8gTWF0aE1MIGluIEhUTUxcbiAgaWYgKG9wdHMueG1sTW9kZSA9PT0gJ2ZvcmVpZ24nKSB7XG4gICAgLyogZml4IHVwIG1peGVkLWNhc2UgZWxlbWVudCBuYW1lcyAqL1xuICAgIGVsZW0ubmFtZSA9IGZvcmVpZ25OYW1lcy5lbGVtZW50TmFtZXNbZWxlbS5uYW1lXSB8fCBlbGVtLm5hbWU7XG4gICAgLyogZXhpdCBmb3JlaWduIG1vZGUgYXQgaW50ZWdyYXRpb24gcG9pbnRzICovXG4gICAgaWYgKFxuICAgICAgZWxlbS5wYXJlbnQgJiZcbiAgICAgIGZvcmVpZ25Nb2RlSW50ZWdyYXRpb25Qb2ludHMuaW5kZXhPZihlbGVtLnBhcmVudC5uYW1lKSA+PSAwXG4gICAgKVxuICAgICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHsgeG1sTW9kZTogZmFsc2UgfSk7XG4gIH1cbiAgaWYgKCFvcHRzLnhtbE1vZGUgJiYgWydzdmcnLCAnbWF0aCddLmluZGV4T2YoZWxlbS5uYW1lKSA+PSAwKSB7XG4gICAgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIG9wdHMsIHsgeG1sTW9kZTogJ2ZvcmVpZ24nIH0pO1xuICB9XG5cbiAgdmFyIHRhZyA9ICc8JyArIGVsZW0ubmFtZTtcbiAgdmFyIGF0dHJpYnMgPSBmb3JtYXRBdHRycyhlbGVtLmF0dHJpYnMsIG9wdHMpO1xuXG4gIGlmIChhdHRyaWJzKSB7XG4gICAgdGFnICs9ICcgJyArIGF0dHJpYnM7XG4gIH1cblxuICBpZiAob3B0cy54bWxNb2RlICYmICghZWxlbS5jaGlsZHJlbiB8fCBlbGVtLmNoaWxkcmVuLmxlbmd0aCA9PT0gMCkpIHtcbiAgICB0YWcgKz0gJy8+JztcbiAgfSBlbHNlIHtcbiAgICB0YWcgKz0gJz4nO1xuICAgIGlmIChlbGVtLmNoaWxkcmVuKSB7XG4gICAgICB0YWcgKz0gcmVuZGVyKGVsZW0uY2hpbGRyZW4sIG9wdHMpO1xuICAgIH1cblxuICAgIGlmICghc2luZ2xlVGFnW2VsZW0ubmFtZV0gfHwgb3B0cy54bWxNb2RlKSB7XG4gICAgICB0YWcgKz0gJzwvJyArIGVsZW0ubmFtZSArICc+JztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFnO1xufVxuXG5mdW5jdGlvbiByZW5kZXJEaXJlY3RpdmUoZWxlbSkge1xuICByZXR1cm4gJzwnICsgZWxlbS5kYXRhICsgJz4nO1xufVxuXG5mdW5jdGlvbiByZW5kZXJUZXh0KGVsZW0sIG9wdHMpIHtcbiAgdmFyIGRhdGEgPSBlbGVtLmRhdGEgfHwgJyc7XG5cbiAgLy8gaWYgZW50aXRpZXMgd2VyZW4ndCBkZWNvZGVkLCBubyBuZWVkIHRvIGVuY29kZSB0aGVtIGJhY2tcbiAgaWYgKFxuICAgIG9wdHMuZGVjb2RlRW50aXRpZXMgJiZcbiAgICAhKGVsZW0ucGFyZW50ICYmIGVsZW0ucGFyZW50Lm5hbWUgaW4gdW5lbmNvZGVkRWxlbWVudHMpXG4gICkge1xuICAgIGRhdGEgPSBlbnRpdGllcy5lbmNvZGVYTUwoZGF0YSk7XG4gIH1cblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2RhdGEoZWxlbSkge1xuICByZXR1cm4gJzwhW0NEQVRBWycgKyBlbGVtLmNoaWxkcmVuWzBdLmRhdGEgKyAnXV0+Jztcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29tbWVudChlbGVtKSB7XG4gIHJldHVybiAnPCEtLScgKyBlbGVtLmRhdGEgKyAnLS0+Jztcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBUZXN0cyB3aGV0aGVyIGFuIGVsZW1lbnQgaXMgYSB0YWcgb3Igbm90LlxuICpcbiAqIEBwYXJhbSBlbGVtIEVsZW1lbnQgdG8gdGVzdFxuICovXG5mdW5jdGlvbiBpc1RhZyhlbGVtKSB7XG4gICAgcmV0dXJuIChlbGVtLnR5cGUgPT09IFwidGFnXCIgLyogVGFnICovIHx8XG4gICAgICAgIGVsZW0udHlwZSA9PT0gXCJzY3JpcHRcIiAvKiBTY3JpcHQgKi8gfHxcbiAgICAgICAgZWxlbS50eXBlID09PSBcInN0eWxlXCIgLyogU3R5bGUgKi8pO1xufVxuZXhwb3J0cy5pc1RhZyA9IGlzVGFnO1xuLy8gRXhwb3J0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbmV4cG9ydHMuVGV4dCA9IFwidGV4dFwiIC8qIFRleHQgKi87IC8vVGV4dFxuZXhwb3J0cy5EaXJlY3RpdmUgPSBcImRpcmVjdGl2ZVwiIC8qIERpcmVjdGl2ZSAqLzsgLy88PyAuLi4gPz5cbmV4cG9ydHMuQ29tbWVudCA9IFwiY29tbWVudFwiIC8qIENvbW1lbnQgKi87IC8vPCEtLSAuLi4gLS0+XG5leHBvcnRzLlNjcmlwdCA9IFwic2NyaXB0XCIgLyogU2NyaXB0ICovOyAvLzxzY3JpcHQ+IHRhZ3NcbmV4cG9ydHMuU3R5bGUgPSBcInN0eWxlXCIgLyogU3R5bGUgKi87IC8vPHN0eWxlPiB0YWdzXG5leHBvcnRzLlRhZyA9IFwidGFnXCIgLyogVGFnICovOyAvL0FueSB0YWdcbmV4cG9ydHMuQ0RBVEEgPSBcImNkYXRhXCIgLyogQ0RBVEEgKi87IC8vPCFbQ0RBVEFbIC4uLiBdXT5cbmV4cG9ydHMuRG9jdHlwZSA9IFwiZG9jdHlwZVwiIC8qIERvY3R5cGUgKi87XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfMSA9IHJlcXVpcmUoXCIuL2RlY29kZVwiKTtcbnZhciBlbmNvZGVfMSA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKTtcbmZ1bmN0aW9uIGRlY29kZShkYXRhLCBsZXZlbCkge1xuICAgIHJldHVybiAoIWxldmVsIHx8IGxldmVsIDw9IDAgPyBkZWNvZGVfMS5kZWNvZGVYTUwgOiBkZWNvZGVfMS5kZWNvZGVIVE1MKShkYXRhKTtcbn1cbmV4cG9ydHMuZGVjb2RlID0gZGVjb2RlO1xuZnVuY3Rpb24gZGVjb2RlU3RyaWN0KGRhdGEsIGxldmVsKSB7XG4gICAgcmV0dXJuICghbGV2ZWwgfHwgbGV2ZWwgPD0gMCA/IGRlY29kZV8xLmRlY29kZVhNTCA6IGRlY29kZV8xLmRlY29kZUhUTUxTdHJpY3QpKGRhdGEpO1xufVxuZXhwb3J0cy5kZWNvZGVTdHJpY3QgPSBkZWNvZGVTdHJpY3Q7XG5mdW5jdGlvbiBlbmNvZGUoZGF0YSwgbGV2ZWwpIHtcbiAgICByZXR1cm4gKCFsZXZlbCB8fCBsZXZlbCA8PSAwID8gZW5jb2RlXzEuZW5jb2RlWE1MIDogZW5jb2RlXzEuZW5jb2RlSFRNTCkoZGF0YSk7XG59XG5leHBvcnRzLmVuY29kZSA9IGVuY29kZTtcbnZhciBlbmNvZGVfMiA9IHJlcXVpcmUoXCIuL2VuY29kZVwiKTtcbmV4cG9ydHMuZW5jb2RlWE1MID0gZW5jb2RlXzIuZW5jb2RlWE1MO1xuZXhwb3J0cy5lbmNvZGVIVE1MID0gZW5jb2RlXzIuZW5jb2RlSFRNTDtcbmV4cG9ydHMuZXNjYXBlID0gZW5jb2RlXzIuZXNjYXBlO1xuLy8gTGVnYWN5IGFsaWFzZXNcbmV4cG9ydHMuZW5jb2RlSFRNTDQgPSBlbmNvZGVfMi5lbmNvZGVIVE1MO1xuZXhwb3J0cy5lbmNvZGVIVE1MNSA9IGVuY29kZV8yLmVuY29kZUhUTUw7XG52YXIgZGVjb2RlXzIgPSByZXF1aXJlKFwiLi9kZWNvZGVcIik7XG5leHBvcnRzLmRlY29kZVhNTCA9IGRlY29kZV8yLmRlY29kZVhNTDtcbmV4cG9ydHMuZGVjb2RlSFRNTCA9IGRlY29kZV8yLmRlY29kZUhUTUw7XG5leHBvcnRzLmRlY29kZUhUTUxTdHJpY3QgPSBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0O1xuLy8gTGVnYWN5IGFsaWFzZXNcbmV4cG9ydHMuZGVjb2RlSFRNTDQgPSBkZWNvZGVfMi5kZWNvZGVIVE1MO1xuZXhwb3J0cy5kZWNvZGVIVE1MNSA9IGRlY29kZV8yLmRlY29kZUhUTUw7XG5leHBvcnRzLmRlY29kZUhUTUw0U3RyaWN0ID0gZGVjb2RlXzIuZGVjb2RlSFRNTFN0cmljdDtcbmV4cG9ydHMuZGVjb2RlSFRNTDVTdHJpY3QgPSBkZWNvZGVfMi5kZWNvZGVIVE1MU3RyaWN0O1xuZXhwb3J0cy5kZWNvZGVYTUxTdHJpY3QgPSBkZWNvZGVfMi5kZWNvZGVYTUw7XG4iLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBkZWNvZGVfanNvbl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL21hcHMvZGVjb2RlLmpzb25cIikpO1xuLy8gbW9kaWZpZWQgdmVyc2lvbiBvZiBodHRwczovL2dpdGh1Yi5jb20vbWF0aGlhc2J5bmVucy9oZS9ibG9iL21hc3Rlci9zcmMvaGUuanMjTDk0LUwxMTlcbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludChjb2RlUG9pbnQpIHtcbiAgICBpZiAoKGNvZGVQb2ludCA+PSAweGQ4MDAgJiYgY29kZVBvaW50IDw9IDB4ZGZmZikgfHwgY29kZVBvaW50ID4gMHgxMGZmZmYpIHtcbiAgICAgICAgcmV0dXJuIFwiXFx1RkZGRFwiO1xuICAgIH1cbiAgICBpZiAoY29kZVBvaW50IGluIGRlY29kZV9qc29uXzEuZGVmYXVsdCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvZGVQb2ludCA9IGRlY29kZV9qc29uXzEuZGVmYXVsdFtjb2RlUG9pbnRdO1xuICAgIH1cbiAgICB2YXIgb3V0cHV0ID0gXCJcIjtcbiAgICBpZiAoY29kZVBvaW50ID4gMHhmZmZmKSB7XG4gICAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwO1xuICAgICAgICBvdXRwdXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+Pj4gMTApICYgMHgzZmYpIHwgMHhkODAwKTtcbiAgICAgICAgY29kZVBvaW50ID0gMHhkYzAwIHwgKGNvZGVQb2ludCAmIDB4M2ZmKTtcbiAgICB9XG4gICAgb3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcbiAgICByZXR1cm4gb3V0cHV0O1xufVxuZXhwb3J0cy5kZWZhdWx0ID0gZGVjb2RlQ29kZVBvaW50O1xuIiwidmFyIGdldENoaWxkcmVuID0gZXhwb3J0cy5nZXRDaGlsZHJlbiA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRyZXR1cm4gZWxlbS5jaGlsZHJlbjtcbn07XG5cbnZhciBnZXRQYXJlbnQgPSBleHBvcnRzLmdldFBhcmVudCA9IGZ1bmN0aW9uKGVsZW0pe1xuXHRyZXR1cm4gZWxlbS5wYXJlbnQ7XG59O1xuXG5leHBvcnRzLmdldFNpYmxpbmdzID0gZnVuY3Rpb24oZWxlbSl7XG5cdHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoZWxlbSk7XG5cdHJldHVybiBwYXJlbnQgPyBnZXRDaGlsZHJlbihwYXJlbnQpIDogW2VsZW1dO1xufTtcblxuZXhwb3J0cy5nZXRBdHRyaWJ1dGVWYWx1ZSA9IGZ1bmN0aW9uKGVsZW0sIG5hbWUpe1xuXHRyZXR1cm4gZWxlbS5hdHRyaWJzICYmIGVsZW0uYXR0cmlic1tuYW1lXTtcbn07XG5cbmV4cG9ydHMuaGFzQXR0cmliID0gZnVuY3Rpb24oZWxlbSwgbmFtZSl7XG5cdHJldHVybiAhIWVsZW0uYXR0cmlicyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGVsZW0uYXR0cmlicywgbmFtZSk7XG59O1xuXG5leHBvcnRzLmdldE5hbWUgPSBmdW5jdGlvbihlbGVtKXtcblx0cmV0dXJuIGVsZW0ubmFtZTtcbn07XG4iLCJleHBvcnRzLnJlbW92ZUVsZW1lbnQgPSBmdW5jdGlvbihlbGVtKXtcblx0aWYoZWxlbS5wcmV2KSBlbGVtLnByZXYubmV4dCA9IGVsZW0ubmV4dDtcblx0aWYoZWxlbS5uZXh0KSBlbGVtLm5leHQucHJldiA9IGVsZW0ucHJldjtcblxuXHRpZihlbGVtLnBhcmVudCl7XG5cdFx0dmFyIGNoaWxkcyA9IGVsZW0ucGFyZW50LmNoaWxkcmVuO1xuXHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAxKTtcblx0fVxufTtcblxuZXhwb3J0cy5yZXBsYWNlRWxlbWVudCA9IGZ1bmN0aW9uKGVsZW0sIHJlcGxhY2VtZW50KXtcblx0dmFyIHByZXYgPSByZXBsYWNlbWVudC5wcmV2ID0gZWxlbS5wcmV2O1xuXHRpZihwcmV2KXtcblx0XHRwcmV2Lm5leHQgPSByZXBsYWNlbWVudDtcblx0fVxuXG5cdHZhciBuZXh0ID0gcmVwbGFjZW1lbnQubmV4dCA9IGVsZW0ubmV4dDtcblx0aWYobmV4dCl7XG5cdFx0bmV4dC5wcmV2ID0gcmVwbGFjZW1lbnQ7XG5cdH1cblxuXHR2YXIgcGFyZW50ID0gcmVwbGFjZW1lbnQucGFyZW50ID0gZWxlbS5wYXJlbnQ7XG5cdGlmKHBhcmVudCl7XG5cdFx0dmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcblx0XHRjaGlsZHNbY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pXSA9IHJlcGxhY2VtZW50O1xuXHR9XG59O1xuXG5leHBvcnRzLmFwcGVuZENoaWxkID0gZnVuY3Rpb24oZWxlbSwgY2hpbGQpe1xuXHRjaGlsZC5wYXJlbnQgPSBlbGVtO1xuXG5cdGlmKGVsZW0uY2hpbGRyZW4ucHVzaChjaGlsZCkgIT09IDEpe1xuXHRcdHZhciBzaWJsaW5nID0gZWxlbS5jaGlsZHJlbltlbGVtLmNoaWxkcmVuLmxlbmd0aCAtIDJdO1xuXHRcdHNpYmxpbmcubmV4dCA9IGNoaWxkO1xuXHRcdGNoaWxkLnByZXYgPSBzaWJsaW5nO1xuXHRcdGNoaWxkLm5leHQgPSBudWxsO1xuXHR9XG59O1xuXG5leHBvcnRzLmFwcGVuZCA9IGZ1bmN0aW9uKGVsZW0sIG5leHQpe1xuXHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnQsXG5cdFx0Y3Vyck5leHQgPSBlbGVtLm5leHQ7XG5cblx0bmV4dC5uZXh0ID0gY3Vyck5leHQ7XG5cdG5leHQucHJldiA9IGVsZW07XG5cdGVsZW0ubmV4dCA9IG5leHQ7XG5cdG5leHQucGFyZW50ID0gcGFyZW50O1xuXG5cdGlmKGN1cnJOZXh0KXtcblx0XHRjdXJyTmV4dC5wcmV2ID0gbmV4dDtcblx0XHRpZihwYXJlbnQpe1xuXHRcdFx0dmFyIGNoaWxkcyA9IHBhcmVudC5jaGlsZHJlbjtcblx0XHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGN1cnJOZXh0KSwgMCwgbmV4dCk7XG5cdFx0fVxuXHR9IGVsc2UgaWYocGFyZW50KXtcblx0XHRwYXJlbnQuY2hpbGRyZW4ucHVzaChuZXh0KTtcblx0fVxufTtcblxuZXhwb3J0cy5wcmVwZW5kID0gZnVuY3Rpb24oZWxlbSwgcHJldil7XG5cdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudDtcblx0aWYocGFyZW50KXtcblx0XHR2YXIgY2hpbGRzID0gcGFyZW50LmNoaWxkcmVuO1xuXHRcdGNoaWxkcy5zcGxpY2UoY2hpbGRzLmxhc3RJbmRleE9mKGVsZW0pLCAwLCBwcmV2KTtcblx0fVxuXG5cdGlmKGVsZW0ucHJldil7XG5cdFx0ZWxlbS5wcmV2Lm5leHQgPSBwcmV2O1xuXHR9XG5cdFxuXHRwcmV2LnBhcmVudCA9IHBhcmVudDtcblx0cHJldi5wcmV2ID0gZWxlbS5wcmV2O1xuXHRwcmV2Lm5leHQgPSBlbGVtO1xuXHRlbGVtLnByZXYgPSBwcmV2O1xufTtcblxuXG4iLCJ2YXIgaXNUYWcgPSByZXF1aXJlKFwiZG9tZWxlbWVudHR5cGVcIikuaXNUYWc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRmaWx0ZXI6IGZpbHRlcixcblx0ZmluZDogZmluZCxcblx0ZmluZE9uZUNoaWxkOiBmaW5kT25lQ2hpbGQsXG5cdGZpbmRPbmU6IGZpbmRPbmUsXG5cdGV4aXN0c09uZTogZXhpc3RzT25lLFxuXHRmaW5kQWxsOiBmaW5kQWxsXG59O1xuXG5mdW5jdGlvbiBmaWx0ZXIodGVzdCwgZWxlbWVudCwgcmVjdXJzZSwgbGltaXQpe1xuXHRpZighQXJyYXkuaXNBcnJheShlbGVtZW50KSkgZWxlbWVudCA9IFtlbGVtZW50XTtcblxuXHRpZih0eXBlb2YgbGltaXQgIT09IFwibnVtYmVyXCIgfHwgIWlzRmluaXRlKGxpbWl0KSl7XG5cdFx0bGltaXQgPSBJbmZpbml0eTtcblx0fVxuXHRyZXR1cm4gZmluZCh0ZXN0LCBlbGVtZW50LCByZWN1cnNlICE9PSBmYWxzZSwgbGltaXQpO1xufVxuXG5mdW5jdGlvbiBmaW5kKHRlc3QsIGVsZW1zLCByZWN1cnNlLCBsaW1pdCl7XG5cdHZhciByZXN1bHQgPSBbXSwgY2hpbGRzO1xuXG5cdGZvcih2YXIgaSA9IDAsIGogPSBlbGVtcy5sZW5ndGg7IGkgPCBqOyBpKyspe1xuXHRcdGlmKHRlc3QoZWxlbXNbaV0pKXtcblx0XHRcdHJlc3VsdC5wdXNoKGVsZW1zW2ldKTtcblx0XHRcdGlmKC0tbGltaXQgPD0gMCkgYnJlYWs7XG5cdFx0fVxuXG5cdFx0Y2hpbGRzID0gZWxlbXNbaV0uY2hpbGRyZW47XG5cdFx0aWYocmVjdXJzZSAmJiBjaGlsZHMgJiYgY2hpbGRzLmxlbmd0aCA+IDApe1xuXHRcdFx0Y2hpbGRzID0gZmluZCh0ZXN0LCBjaGlsZHMsIHJlY3Vyc2UsIGxpbWl0KTtcblx0XHRcdHJlc3VsdCA9IHJlc3VsdC5jb25jYXQoY2hpbGRzKTtcblx0XHRcdGxpbWl0IC09IGNoaWxkcy5sZW5ndGg7XG5cdFx0XHRpZihsaW1pdCA8PSAwKSBicmVhaztcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBmaW5kT25lQ2hpbGQodGVzdCwgZWxlbXMpe1xuXHRmb3IodmFyIGkgPSAwLCBsID0gZWxlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKXtcblx0XHRpZih0ZXN0KGVsZW1zW2ldKSkgcmV0dXJuIGVsZW1zW2ldO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRPbmUodGVzdCwgZWxlbXMpe1xuXHR2YXIgZWxlbSA9IG51bGw7XG5cblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGwgJiYgIWVsZW07IGkrKyl7XG5cdFx0aWYoIWlzVGFnKGVsZW1zW2ldKSl7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9IGVsc2UgaWYodGVzdChlbGVtc1tpXSkpe1xuXHRcdFx0ZWxlbSA9IGVsZW1zW2ldO1xuXHRcdH0gZWxzZSBpZihlbGVtc1tpXS5jaGlsZHJlbi5sZW5ndGggPiAwKXtcblx0XHRcdGVsZW0gPSBmaW5kT25lKHRlc3QsIGVsZW1zW2ldLmNoaWxkcmVuKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gZXhpc3RzT25lKHRlc3QsIGVsZW1zKXtcblx0Zm9yKHZhciBpID0gMCwgbCA9IGVsZW1zLmxlbmd0aDsgaSA8IGw7IGkrKyl7XG5cdFx0aWYoXG5cdFx0XHRpc1RhZyhlbGVtc1tpXSkgJiYgKFxuXHRcdFx0XHR0ZXN0KGVsZW1zW2ldKSB8fCAoXG5cdFx0XHRcdFx0ZWxlbXNbaV0uY2hpbGRyZW4ubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdGV4aXN0c09uZSh0ZXN0LCBlbGVtc1tpXS5jaGlsZHJlbilcblx0XHRcdFx0KVxuXHRcdFx0KVxuXHRcdCl7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGZpbmRBbGwodGVzdCwgcm9vdEVsZW1zKXtcblx0dmFyIHJlc3VsdCA9IFtdO1xuXHR2YXIgc3RhY2sgPSByb290RWxlbXMuc2xpY2UoKTtcblx0d2hpbGUoc3RhY2subGVuZ3RoKXtcblx0XHR2YXIgZWxlbSA9IHN0YWNrLnNoaWZ0KCk7XG5cdFx0aWYoIWlzVGFnKGVsZW0pKSBjb250aW51ZTtcblx0XHRpZiAoZWxlbS5jaGlsZHJlbiAmJiBlbGVtLmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcblx0XHRcdHN0YWNrLnVuc2hpZnQuYXBwbHkoc3RhY2ssIGVsZW0uY2hpbGRyZW4pO1xuXHRcdH1cblx0XHRpZih0ZXN0KGVsZW0pKSByZXN1bHQucHVzaChlbGVtKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0O1xufVxuIiwidmFyIEVsZW1lbnRUeXBlID0gcmVxdWlyZShcImRvbWVsZW1lbnR0eXBlXCIpO1xudmFyIGlzVGFnID0gZXhwb3J0cy5pc1RhZyA9IEVsZW1lbnRUeXBlLmlzVGFnO1xuXG5leHBvcnRzLnRlc3RFbGVtZW50ID0gZnVuY3Rpb24ob3B0aW9ucywgZWxlbWVudCl7XG5cdGZvcih2YXIga2V5IGluIG9wdGlvbnMpe1xuXHRcdGlmKCFvcHRpb25zLmhhc093blByb3BlcnR5KGtleSkpO1xuXHRcdGVsc2UgaWYoa2V5ID09PSBcInRhZ19uYW1lXCIpe1xuXHRcdFx0aWYoIWlzVGFnKGVsZW1lbnQpIHx8ICFvcHRpb25zLnRhZ19uYW1lKGVsZW1lbnQubmFtZSkpe1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmKGtleSA9PT0gXCJ0YWdfdHlwZVwiKXtcblx0XHRcdGlmKCFvcHRpb25zLnRhZ190eXBlKGVsZW1lbnQudHlwZSkpIHJldHVybiBmYWxzZTtcblx0XHR9IGVsc2UgaWYoa2V5ID09PSBcInRhZ19jb250YWluc1wiKXtcblx0XHRcdGlmKGlzVGFnKGVsZW1lbnQpIHx8ICFvcHRpb25zLnRhZ19jb250YWlucyhlbGVtZW50LmRhdGEpKXtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZighZWxlbWVudC5hdHRyaWJzIHx8ICFvcHRpb25zW2tleV0oZWxlbWVudC5hdHRyaWJzW2tleV0pKXtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIHRydWU7XG59O1xuXG52YXIgQ2hlY2tzID0ge1xuXHR0YWdfbmFtZTogZnVuY3Rpb24obmFtZSl7XG5cdFx0aWYodHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBpc1RhZyhlbGVtKSAmJiBuYW1lKGVsZW0ubmFtZSk7IH07XG5cdFx0fSBlbHNlIGlmKG5hbWUgPT09IFwiKlwiKXtcblx0XHRcdHJldHVybiBpc1RhZztcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gaXNUYWcoZWxlbSkgJiYgZWxlbS5uYW1lID09PSBuYW1lOyB9O1xuXHRcdH1cblx0fSxcblx0dGFnX3R5cGU6IGZ1bmN0aW9uKHR5cGUpe1xuXHRcdGlmKHR5cGVvZiB0eXBlID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gdHlwZShlbGVtLnR5cGUpOyB9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBlbGVtLnR5cGUgPT09IHR5cGU7IH07XG5cdFx0fVxuXHR9LFxuXHR0YWdfY29udGFpbnM6IGZ1bmN0aW9uKGRhdGEpe1xuXHRcdGlmKHR5cGVvZiBkYXRhID09PSBcImZ1bmN0aW9uXCIpe1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gIWlzVGFnKGVsZW0pICYmIGRhdGEoZWxlbS5kYXRhKTsgfTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gIWlzVGFnKGVsZW0pICYmIGVsZW0uZGF0YSA9PT0gZGF0YTsgfTtcblx0XHR9XG5cdH1cbn07XG5cbmZ1bmN0aW9uIGdldEF0dHJpYkNoZWNrKGF0dHJpYiwgdmFsdWUpe1xuXHRpZih0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIil7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0peyByZXR1cm4gZWxlbS5hdHRyaWJzICYmIHZhbHVlKGVsZW0uYXR0cmlic1thdHRyaWJdKTsgfTtcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oZWxlbSl7IHJldHVybiBlbGVtLmF0dHJpYnMgJiYgZWxlbS5hdHRyaWJzW2F0dHJpYl0gPT09IHZhbHVlOyB9O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVGdW5jcyhhLCBiKXtcblx0cmV0dXJuIGZ1bmN0aW9uKGVsZW0pe1xuXHRcdHJldHVybiBhKGVsZW0pIHx8IGIoZWxlbSk7XG5cdH07XG59XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHMgPSBmdW5jdGlvbihvcHRpb25zLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHZhciBmdW5jcyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpLm1hcChmdW5jdGlvbihrZXkpe1xuXHRcdHZhciB2YWx1ZSA9IG9wdGlvbnNba2V5XTtcblx0XHRyZXR1cm4ga2V5IGluIENoZWNrcyA/IENoZWNrc1trZXldKHZhbHVlKSA6IGdldEF0dHJpYkNoZWNrKGtleSwgdmFsdWUpO1xuXHR9KTtcblxuXHRyZXR1cm4gZnVuY3MubGVuZ3RoID09PSAwID8gW10gOiB0aGlzLmZpbHRlcihcblx0XHRmdW5jcy5yZWR1Y2UoY29tYmluZUZ1bmNzKSxcblx0XHRlbGVtZW50LCByZWN1cnNlLCBsaW1pdFxuXHQpO1xufTtcblxuZXhwb3J0cy5nZXRFbGVtZW50QnlJZCA9IGZ1bmN0aW9uKGlkLCBlbGVtZW50LCByZWN1cnNlKXtcblx0aWYoIUFycmF5LmlzQXJyYXkoZWxlbWVudCkpIGVsZW1lbnQgPSBbZWxlbWVudF07XG5cdHJldHVybiB0aGlzLmZpbmRPbmUoZ2V0QXR0cmliQ2hlY2soXCJpZFwiLCBpZCksIGVsZW1lbnQsIHJlY3Vyc2UgIT09IGZhbHNlKTtcbn07XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBmdW5jdGlvbihuYW1lLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHJldHVybiB0aGlzLmZpbHRlcihDaGVja3MudGFnX25hbWUobmFtZSksIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KTtcbn07XG5cbmV4cG9ydHMuZ2V0RWxlbWVudHNCeVRhZ1R5cGUgPSBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCByZWN1cnNlLCBsaW1pdCl7XG5cdHJldHVybiB0aGlzLmZpbHRlcihDaGVja3MudGFnX3R5cGUodHlwZSksIGVsZW1lbnQsIHJlY3Vyc2UsIGxpbWl0KTtcbn07XG4iLCIvLyByZW1vdmVTdWJzZXRzXG4vLyBHaXZlbiBhbiBhcnJheSBvZiBub2RlcywgcmVtb3ZlIGFueSBtZW1iZXIgdGhhdCBpcyBjb250YWluZWQgYnkgYW5vdGhlci5cbmV4cG9ydHMucmVtb3ZlU3Vic2V0cyA9IGZ1bmN0aW9uKG5vZGVzKSB7XG5cdHZhciBpZHggPSBub2Rlcy5sZW5ndGgsIG5vZGUsIGFuY2VzdG9yLCByZXBsYWNlO1xuXG5cdC8vIENoZWNrIGlmIGVhY2ggbm9kZSAob3Igb25lIG9mIGl0cyBhbmNlc3RvcnMpIGlzIGFscmVhZHkgY29udGFpbmVkIGluIHRoZVxuXHQvLyBhcnJheS5cblx0d2hpbGUgKC0taWR4ID4gLTEpIHtcblx0XHRub2RlID0gYW5jZXN0b3IgPSBub2Rlc1tpZHhdO1xuXG5cdFx0Ly8gVGVtcG9yYXJpbHkgcmVtb3ZlIHRoZSBub2RlIHVuZGVyIGNvbnNpZGVyYXRpb25cblx0XHRub2Rlc1tpZHhdID0gbnVsbDtcblx0XHRyZXBsYWNlID0gdHJ1ZTtcblxuXHRcdHdoaWxlIChhbmNlc3Rvcikge1xuXHRcdFx0aWYgKG5vZGVzLmluZGV4T2YoYW5jZXN0b3IpID4gLTEpIHtcblx0XHRcdFx0cmVwbGFjZSA9IGZhbHNlO1xuXHRcdFx0XHRub2Rlcy5zcGxpY2UoaWR4LCAxKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGUgbm9kZSBoYXMgYmVlbiBmb3VuZCB0byBiZSB1bmlxdWUsIHJlLWluc2VydCBpdC5cblx0XHRpZiAocmVwbGFjZSkge1xuXHRcdFx0bm9kZXNbaWR4XSA9IG5vZGU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5vZGVzO1xufTtcblxuLy8gU291cmNlOiBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLW5vZGUtY29tcGFyZWRvY3VtZW50cG9zaXRpb25cbnZhciBQT1NJVElPTiA9IHtcblx0RElTQ09OTkVDVEVEOiAxLFxuXHRQUkVDRURJTkc6IDIsXG5cdEZPTExPV0lORzogNCxcblx0Q09OVEFJTlM6IDgsXG5cdENPTlRBSU5FRF9CWTogMTZcbn07XG5cbi8vIENvbXBhcmUgdGhlIHBvc2l0aW9uIG9mIG9uZSBub2RlIGFnYWluc3QgYW5vdGhlciBub2RlIGluIGFueSBvdGhlciBkb2N1bWVudC5cbi8vIFRoZSByZXR1cm4gdmFsdWUgaXMgYSBiaXRtYXNrIHdpdGggdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG4vL1xuLy8gZG9jdW1lbnQgb3JkZXI6XG4vLyA+IFRoZXJlIGlzIGFuIG9yZGVyaW5nLCBkb2N1bWVudCBvcmRlciwgZGVmaW5lZCBvbiBhbGwgdGhlIG5vZGVzIGluIHRoZVxuLy8gPiBkb2N1bWVudCBjb3JyZXNwb25kaW5nIHRvIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIHRoZVxuLy8gPiBYTUwgcmVwcmVzZW50YXRpb24gb2YgZWFjaCBub2RlIG9jY3VycyBpbiB0aGUgWE1MIHJlcHJlc2VudGF0aW9uIG9mIHRoZVxuLy8gPiBkb2N1bWVudCBhZnRlciBleHBhbnNpb24gb2YgZ2VuZXJhbCBlbnRpdGllcy4gVGh1cywgdGhlIGRvY3VtZW50IGVsZW1lbnRcbi8vID4gbm9kZSB3aWxsIGJlIHRoZSBmaXJzdCBub2RlLiBFbGVtZW50IG5vZGVzIG9jY3VyIGJlZm9yZSB0aGVpciBjaGlsZHJlbi5cbi8vID4gVGh1cywgZG9jdW1lbnQgb3JkZXIgb3JkZXJzIGVsZW1lbnQgbm9kZXMgaW4gb3JkZXIgb2YgdGhlIG9jY3VycmVuY2Ugb2Zcbi8vID4gdGhlaXIgc3RhcnQtdGFnIGluIHRoZSBYTUwgKGFmdGVyIGV4cGFuc2lvbiBvZiBlbnRpdGllcykuIFRoZSBhdHRyaWJ1dGVcbi8vID4gbm9kZXMgb2YgYW4gZWxlbWVudCBvY2N1ciBhZnRlciB0aGUgZWxlbWVudCBhbmQgYmVmb3JlIGl0cyBjaGlsZHJlbi4gVGhlXG4vLyA+IHJlbGF0aXZlIG9yZGVyIG9mIGF0dHJpYnV0ZSBub2RlcyBpcyBpbXBsZW1lbnRhdGlvbi1kZXBlbmRlbnQuL1xuLy8gU291cmNlOlxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtQ29yZS9nbG9zc2FyeS5odG1sI2R0LWRvY3VtZW50LW9yZGVyXG4vL1xuLy8gQGFyZ3VtZW50IHtOb2RlfSBub2RhQSBUaGUgZmlyc3Qgbm9kZSB0byB1c2UgaW4gdGhlIGNvbXBhcmlzb25cbi8vIEBhcmd1bWVudCB7Tm9kZX0gbm9kZUIgVGhlIHNlY29uZCBub2RlIHRvIHVzZSBpbiB0aGUgY29tcGFyaXNvblxuLy9cbi8vIEByZXR1cm4ge051bWJlcn0gQSBiaXRtYXNrIGRlc2NyaWJpbmcgdGhlIGlucHV0IG5vZGVzJyByZWxhdGl2ZSBwb3NpdGlvbi5cbi8vICAgICAgICAgU2VlIGh0dHA6Ly9kb20uc3BlYy53aGF0d2cub3JnLyNkb20tbm9kZS1jb21wYXJlZG9jdW1lbnRwb3NpdGlvbiBmb3Jcbi8vICAgICAgICAgYSBkZXNjcmlwdGlvbiBvZiB0aGVzZSB2YWx1ZXMuXG52YXIgY29tcGFyZVBvcyA9IGV4cG9ydHMuY29tcGFyZURvY3VtZW50UG9zaXRpb24gPSBmdW5jdGlvbihub2RlQSwgbm9kZUIpIHtcblx0dmFyIGFQYXJlbnRzID0gW107XG5cdHZhciBiUGFyZW50cyA9IFtdO1xuXHR2YXIgY3VycmVudCwgc2hhcmVkUGFyZW50LCBzaWJsaW5ncywgYVNpYmxpbmcsIGJTaWJsaW5nLCBpZHg7XG5cblx0aWYgKG5vZGVBID09PSBub2RlQikge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Y3VycmVudCA9IG5vZGVBO1xuXHR3aGlsZSAoY3VycmVudCkge1xuXHRcdGFQYXJlbnRzLnVuc2hpZnQoY3VycmVudCk7XG5cdFx0Y3VycmVudCA9IGN1cnJlbnQucGFyZW50O1xuXHR9XG5cdGN1cnJlbnQgPSBub2RlQjtcblx0d2hpbGUgKGN1cnJlbnQpIHtcblx0XHRiUGFyZW50cy51bnNoaWZ0KGN1cnJlbnQpO1xuXHRcdGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcblx0fVxuXG5cdGlkeCA9IDA7XG5cdHdoaWxlIChhUGFyZW50c1tpZHhdID09PSBiUGFyZW50c1tpZHhdKSB7XG5cdFx0aWR4Kys7XG5cdH1cblxuXHRpZiAoaWR4ID09PSAwKSB7XG5cdFx0cmV0dXJuIFBPU0lUSU9OLkRJU0NPTk5FQ1RFRDtcblx0fVxuXG5cdHNoYXJlZFBhcmVudCA9IGFQYXJlbnRzW2lkeCAtIDFdO1xuXHRzaWJsaW5ncyA9IHNoYXJlZFBhcmVudC5jaGlsZHJlbjtcblx0YVNpYmxpbmcgPSBhUGFyZW50c1tpZHhdO1xuXHRiU2libGluZyA9IGJQYXJlbnRzW2lkeF07XG5cblx0aWYgKHNpYmxpbmdzLmluZGV4T2YoYVNpYmxpbmcpID4gc2libGluZ3MuaW5kZXhPZihiU2libGluZykpIHtcblx0XHRpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQikge1xuXHRcdFx0cmV0dXJuIFBPU0lUSU9OLkZPTExPV0lORyB8IFBPU0lUSU9OLkNPTlRBSU5FRF9CWTtcblx0XHR9XG5cdFx0cmV0dXJuIFBPU0lUSU9OLkZPTExPV0lORztcblx0fSBlbHNlIHtcblx0XHRpZiAoc2hhcmVkUGFyZW50ID09PSBub2RlQSkge1xuXHRcdFx0cmV0dXJuIFBPU0lUSU9OLlBSRUNFRElORyB8IFBPU0lUSU9OLkNPTlRBSU5TO1xuXHRcdH1cblx0XHRyZXR1cm4gUE9TSVRJT04uUFJFQ0VESU5HO1xuXHR9XG59O1xuXG4vLyBTb3J0IGFuIGFycmF5IG9mIG5vZGVzIGJhc2VkIG9uIHRoZWlyIHJlbGF0aXZlIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCBhbmRcbi8vIHJlbW92ZSBhbnkgZHVwbGljYXRlIG5vZGVzLiBJZiB0aGUgYXJyYXkgY29udGFpbnMgbm9kZXMgdGhhdCBkbyBub3QgYmVsb25nXG4vLyB0byB0aGUgc2FtZSBkb2N1bWVudCwgc29ydCBvcmRlciBpcyB1bnNwZWNpZmllZC5cbi8vXG4vLyBAYXJndW1lbnQge0FycmF5fSBub2RlcyBBcnJheSBvZiBET00gbm9kZXNcbi8vXG4vLyBAcmV0dXJucyB7QXJyYXl9IGNvbGxlY3Rpb24gb2YgdW5pcXVlIG5vZGVzLCBzb3J0ZWQgaW4gZG9jdW1lbnQgb3JkZXJcbmV4cG9ydHMudW5pcXVlU29ydCA9IGZ1bmN0aW9uKG5vZGVzKSB7XG5cdHZhciBpZHggPSBub2Rlcy5sZW5ndGgsIG5vZGUsIHBvc2l0aW9uO1xuXG5cdG5vZGVzID0gbm9kZXMuc2xpY2UoKTtcblxuXHR3aGlsZSAoLS1pZHggPiAtMSkge1xuXHRcdG5vZGUgPSBub2Rlc1tpZHhdO1xuXHRcdHBvc2l0aW9uID0gbm9kZXMuaW5kZXhPZihub2RlKTtcblx0XHRpZiAocG9zaXRpb24gPiAtMSAmJiBwb3NpdGlvbiA8IGlkeCkge1xuXHRcdFx0bm9kZXMuc3BsaWNlKGlkeCwgMSk7XG5cdFx0fVxuXHR9XG5cdG5vZGVzLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuXHRcdHZhciByZWxhdGl2ZSA9IGNvbXBhcmVQb3MoYSwgYik7XG5cdFx0aWYgKHJlbGF0aXZlICYgUE9TSVRJT04uUFJFQ0VESU5HKSB7XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fSBlbHNlIGlmIChyZWxhdGl2ZSAmIFBPU0lUSU9OLkZPTExPV0lORykge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9KTtcblxuXHRyZXR1cm4gbm9kZXM7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBTdHJlYW07XG5cbnZhciBQYXJzZXIgPSByZXF1aXJlKFwiLi9Xcml0YWJsZVN0cmVhbS5qc1wiKTtcblxuZnVuY3Rpb24gU3RyZWFtKG9wdGlvbnMpIHtcbiAgICBQYXJzZXIuY2FsbCh0aGlzLCBuZXcgQ2JzKHRoaXMpLCBvcHRpb25zKTtcbn1cblxucmVxdWlyZShcImluaGVyaXRzXCIpKFN0cmVhbSwgUGFyc2VyKTtcblxuU3RyZWFtLnByb3RvdHlwZS5yZWFkYWJsZSA9IHRydWU7XG5cbmZ1bmN0aW9uIENicyhzY29wZSkge1xuICAgIHRoaXMuc2NvcGUgPSBzY29wZTtcbn1cblxudmFyIEVWRU5UUyA9IHJlcXVpcmUoXCIuLi9cIikuRVZFTlRTO1xuXG5PYmplY3Qua2V5cyhFVkVOVFMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChFVkVOVFNbbmFtZV0gPT09IDApIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zY29wZS5lbWl0KG5hbWUpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIENicy5wcm90b3R5cGVbXCJvblwiICsgbmFtZV0gPSBmdW5jdGlvbihhKSB7XG4gICAgICAgICAgICB0aGlzLnNjb3BlLmVtaXQobmFtZSwgYSk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIGlmIChFVkVOVFNbbmFtZV0gPT09IDIpIHtcbiAgICAgICAgQ2JzLnByb3RvdHlwZVtcIm9uXCIgKyBuYW1lXSA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgICAgICAgIHRoaXMuc2NvcGUuZW1pdChuYW1lLCBhLCBiKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBFcnJvcihcIndyb25nIG51bWJlciBvZiBhcmd1bWVudHMhXCIpO1xuICAgIH1cbn0pO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxuLyo8cmVwbGFjZW1lbnQ+Ki9cblxudmFyIEJ1ZmZlciA9IHJlcXVpcmUoJ3NhZmUtYnVmZmVyJykuQnVmZmVyO1xuLyo8L3JlcGxhY2VtZW50PiovXG5cbnZhciBpc0VuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmcgfHwgZnVuY3Rpb24gKGVuY29kaW5nKSB7XG4gIGVuY29kaW5nID0gJycgKyBlbmNvZGluZztcbiAgc3dpdGNoIChlbmNvZGluZyAmJiBlbmNvZGluZy50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpjYXNlICd1dGY4JzpjYXNlICd1dGYtOCc6Y2FzZSAnYXNjaWknOmNhc2UgJ2JpbmFyeSc6Y2FzZSAnYmFzZTY0JzpjYXNlICd1Y3MyJzpjYXNlICd1Y3MtMic6Y2FzZSAndXRmMTZsZSc6Y2FzZSAndXRmLTE2bGUnOmNhc2UgJ3Jhdyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuXG5mdW5jdGlvbiBfbm9ybWFsaXplRW5jb2RpbmcoZW5jKSB7XG4gIGlmICghZW5jKSByZXR1cm4gJ3V0ZjgnO1xuICB2YXIgcmV0cmllZDtcbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuYykge1xuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiAndXRmOCc7XG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gJ3V0ZjE2bGUnO1xuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiAnbGF0aW4xJztcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gZW5jO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKHJldHJpZWQpIHJldHVybjsgLy8gdW5kZWZpbmVkXG4gICAgICAgIGVuYyA9ICgnJyArIGVuYykudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcmV0cmllZCA9IHRydWU7XG4gICAgfVxuICB9XG59O1xuXG4vLyBEbyBub3QgY2FjaGUgYEJ1ZmZlci5pc0VuY29kaW5nYCB3aGVuIGNoZWNraW5nIGVuY29kaW5nIG5hbWVzIGFzIHNvbWVcbi8vIG1vZHVsZXMgbW9ua2V5LXBhdGNoIGl0IHRvIHN1cHBvcnQgYWRkaXRpb25hbCBlbmNvZGluZ3NcbmZ1bmN0aW9uIG5vcm1hbGl6ZUVuY29kaW5nKGVuYykge1xuICB2YXIgbmVuYyA9IF9ub3JtYWxpemVFbmNvZGluZyhlbmMpO1xuICBpZiAodHlwZW9mIG5lbmMgIT09ICdzdHJpbmcnICYmIChCdWZmZXIuaXNFbmNvZGluZyA9PT0gaXNFbmNvZGluZyB8fCAhaXNFbmNvZGluZyhlbmMpKSkgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jKTtcbiAgcmV0dXJuIG5lbmMgfHwgZW5jO1xufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuXG5leHBvcnRzLlN0cmluZ0RlY29kZXIgPSBTdHJpbmdEZWNvZGVyO1xuZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gbm9ybWFsaXplRW5jb2RpbmcoZW5jb2RpbmcpO1xuICB2YXIgbmI7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgdGhpcy50ZXh0ID0gdXRmMTZUZXh0O1xuICAgICAgdGhpcy5lbmQgPSB1dGYxNkVuZDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgdGhpcy5maWxsTGFzdCA9IHV0ZjhGaWxsTGFzdDtcbiAgICAgIG5iID0gNDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICB0aGlzLnRleHQgPSBiYXNlNjRUZXh0O1xuICAgICAgdGhpcy5lbmQgPSBiYXNlNjRFbmQ7XG4gICAgICBuYiA9IDM7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhpcy53cml0ZSA9IHNpbXBsZVdyaXRlO1xuICAgICAgdGhpcy5lbmQgPSBzaW1wbGVFbmQ7XG4gICAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIHRoaXMubGFzdFRvdGFsID0gMDtcbiAgdGhpcy5sYXN0Q2hhciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShuYik7XG59XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAoYnVmLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcjtcbiAgdmFyIGk7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSB7XG4gICAgciA9IHRoaXMuZmlsbExhc3QoYnVmKTtcbiAgICBpZiAociA9PT0gdW5kZWZpbmVkKSByZXR1cm4gJyc7XG4gICAgaSA9IHRoaXMubGFzdE5lZWQ7XG4gICAgdGhpcy5sYXN0TmVlZCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgaSA9IDA7XG4gIH1cbiAgaWYgKGkgPCBidWYubGVuZ3RoKSByZXR1cm4gciA/IHIgKyB0aGlzLnRleHQoYnVmLCBpKSA6IHRoaXMudGV4dChidWYsIGkpO1xuICByZXR1cm4gciB8fCAnJztcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IHV0ZjhFbmQ7XG5cbi8vIFJldHVybnMgb25seSBjb21wbGV0ZSBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS50ZXh0ID0gdXRmOFRleHQ7XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgcGFydGlhbCBub24tVVRGLTggY2hhcmFjdGVyIHVzaW5nIGJ5dGVzIGZyb20gYSBCdWZmZXJcblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmZpbGxMYXN0ID0gZnVuY3Rpb24gKGJ1Zikge1xuICBpZiAodGhpcy5sYXN0TmVlZCA8PSBidWYubGVuZ3RoKSB7XG4gICAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCB0aGlzLmxhc3ROZWVkKTtcbiAgICByZXR1cm4gdGhpcy5sYXN0Q2hhci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCAwLCB0aGlzLmxhc3RUb3RhbCk7XG4gIH1cbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufTtcblxuLy8gQ2hlY2tzIHRoZSB0eXBlIG9mIGEgVVRGLTggYnl0ZSwgd2hldGhlciBpdCdzIEFTQ0lJLCBhIGxlYWRpbmcgYnl0ZSwgb3IgYVxuLy8gY29udGludWF0aW9uIGJ5dGUuIElmIGFuIGludmFsaWQgYnl0ZSBpcyBkZXRlY3RlZCwgLTIgaXMgcmV0dXJuZWQuXG5mdW5jdGlvbiB1dGY4Q2hlY2tCeXRlKGJ5dGUpIHtcbiAgaWYgKGJ5dGUgPD0gMHg3RikgcmV0dXJuIDA7ZWxzZSBpZiAoYnl0ZSA+PiA1ID09PSAweDA2KSByZXR1cm4gMjtlbHNlIGlmIChieXRlID4+IDQgPT09IDB4MEUpIHJldHVybiAzO2Vsc2UgaWYgKGJ5dGUgPj4gMyA9PT0gMHgxRSkgcmV0dXJuIDQ7XG4gIHJldHVybiBieXRlID4+IDYgPT09IDB4MDIgPyAtMSA6IC0yO1xufVxuXG4vLyBDaGVja3MgYXQgbW9zdCAzIGJ5dGVzIGF0IHRoZSBlbmQgb2YgYSBCdWZmZXIgaW4gb3JkZXIgdG8gZGV0ZWN0IGFuXG4vLyBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyLiBUaGUgdG90YWwgbnVtYmVyIG9mIGJ5dGVzICgyLCAzLCBvciA0KVxuLy8gbmVlZGVkIHRvIGNvbXBsZXRlIHRoZSBVVEYtOCBjaGFyYWN0ZXIgKGlmIGFwcGxpY2FibGUpIGFyZSByZXR1cm5lZC5cbmZ1bmN0aW9uIHV0ZjhDaGVja0luY29tcGxldGUoc2VsZiwgYnVmLCBpKSB7XG4gIHZhciBqID0gYnVmLmxlbmd0aCAtIDE7XG4gIGlmIChqIDwgaSkgcmV0dXJuIDA7XG4gIHZhciBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAxO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSBzZWxmLmxhc3ROZWVkID0gbmIgLSAyO1xuICAgIHJldHVybiBuYjtcbiAgfVxuICBpZiAoLS1qIDwgaSB8fCBuYiA9PT0gLTIpIHJldHVybiAwO1xuICBuYiA9IHV0ZjhDaGVja0J5dGUoYnVmW2pdKTtcbiAgaWYgKG5iID49IDApIHtcbiAgICBpZiAobmIgPiAwKSB7XG4gICAgICBpZiAobmIgPT09IDIpIG5iID0gMDtlbHNlIHNlbGYubGFzdE5lZWQgPSBuYiAtIDM7XG4gICAgfVxuICAgIHJldHVybiBuYjtcbiAgfVxuICByZXR1cm4gMDtcbn1cblxuLy8gVmFsaWRhdGVzIGFzIG1hbnkgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIG11bHRpLWJ5dGUgVVRGLTggY2hhcmFjdGVyIGFzXG4vLyBuZWVkZWQgb3IgYXJlIGF2YWlsYWJsZS4gSWYgd2Ugc2VlIGEgbm9uLWNvbnRpbnVhdGlvbiBieXRlIHdoZXJlIHdlIGV4cGVjdFxuLy8gb25lLCB3ZSBcInJlcGxhY2VcIiB0aGUgdmFsaWRhdGVkIGNvbnRpbnVhdGlvbiBieXRlcyB3ZSd2ZSBzZWVuIHNvIGZhciB3aXRoXG4vLyBhIHNpbmdsZSBVVEYtOCByZXBsYWNlbWVudCBjaGFyYWN0ZXIgKCdcXHVmZmZkJyksIHRvIG1hdGNoIHY4J3MgVVRGLTggZGVjb2Rpbmdcbi8vIGJlaGF2aW9yLiBUaGUgY29udGludWF0aW9uIGJ5dGUgY2hlY2sgaXMgaW5jbHVkZWQgdGhyZWUgdGltZXMgaW4gdGhlIGNhc2Vcbi8vIHdoZXJlIGFsbCBvZiB0aGUgY29udGludWF0aW9uIGJ5dGVzIGZvciBhIGNoYXJhY3RlciBleGlzdCBpbiB0aGUgc2FtZSBidWZmZXIuXG4vLyBJdCBpcyBhbHNvIGRvbmUgdGhpcyB3YXkgYXMgYSBzbGlnaHQgcGVyZm9ybWFuY2UgaW5jcmVhc2UgaW5zdGVhZCBvZiB1c2luZyBhXG4vLyBsb29wLlxuZnVuY3Rpb24gdXRmOENoZWNrRXh0cmFCeXRlcyhzZWxmLCBidWYsIHApIHtcbiAgaWYgKChidWZbMF0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgIHNlbGYubGFzdE5lZWQgPSAwO1xuICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gIH1cbiAgaWYgKHNlbGYubGFzdE5lZWQgPiAxICYmIGJ1Zi5sZW5ndGggPiAxKSB7XG4gICAgaWYgKChidWZbMV0gJiAweEMwKSAhPT0gMHg4MCkge1xuICAgICAgc2VsZi5sYXN0TmVlZCA9IDE7XG4gICAgICByZXR1cm4gJ1xcdWZmZmQnO1xuICAgIH1cbiAgICBpZiAoc2VsZi5sYXN0TmVlZCA+IDIgJiYgYnVmLmxlbmd0aCA+IDIpIHtcbiAgICAgIGlmICgoYnVmWzJdICYgMHhDMCkgIT09IDB4ODApIHtcbiAgICAgICAgc2VsZi5sYXN0TmVlZCA9IDI7XG4gICAgICAgIHJldHVybiAnXFx1ZmZmZCc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEF0dGVtcHRzIHRvIGNvbXBsZXRlIGEgbXVsdGktYnl0ZSBVVEYtOCBjaGFyYWN0ZXIgdXNpbmcgYnl0ZXMgZnJvbSBhIEJ1ZmZlci5cbmZ1bmN0aW9uIHV0ZjhGaWxsTGFzdChidWYpIHtcbiAgdmFyIHAgPSB0aGlzLmxhc3RUb3RhbCAtIHRoaXMubGFzdE5lZWQ7XG4gIHZhciByID0gdXRmOENoZWNrRXh0cmFCeXRlcyh0aGlzLCBidWYsIHApO1xuICBpZiAociAhPT0gdW5kZWZpbmVkKSByZXR1cm4gcjtcbiAgaWYgKHRoaXMubGFzdE5lZWQgPD0gYnVmLmxlbmd0aCkge1xuICAgIGJ1Zi5jb3B5KHRoaXMubGFzdENoYXIsIHAsIDAsIHRoaXMubGFzdE5lZWQpO1xuICAgIHJldHVybiB0aGlzLmxhc3RDaGFyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIHRoaXMubGFzdFRvdGFsKTtcbiAgfVxuICBidWYuY29weSh0aGlzLmxhc3RDaGFyLCBwLCAwLCBidWYubGVuZ3RoKTtcbiAgdGhpcy5sYXN0TmVlZCAtPSBidWYubGVuZ3RoO1xufVxuXG4vLyBSZXR1cm5zIGFsbCBjb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXJzIGluIGEgQnVmZmVyLiBJZiB0aGUgQnVmZmVyIGVuZGVkIG9uIGFcbi8vIHBhcnRpYWwgY2hhcmFjdGVyLCB0aGUgY2hhcmFjdGVyJ3MgYnl0ZXMgYXJlIGJ1ZmZlcmVkIHVudGlsIHRoZSByZXF1aXJlZFxuLy8gbnVtYmVyIG9mIGJ5dGVzIGFyZSBhdmFpbGFibGUuXG5mdW5jdGlvbiB1dGY4VGV4dChidWYsIGkpIHtcbiAgdmFyIHRvdGFsID0gdXRmOENoZWNrSW5jb21wbGV0ZSh0aGlzLCBidWYsIGkpO1xuICBpZiAoIXRoaXMubGFzdE5lZWQpIHJldHVybiBidWYudG9TdHJpbmcoJ3V0ZjgnLCBpKTtcbiAgdGhpcy5sYXN0VG90YWwgPSB0b3RhbDtcbiAgdmFyIGVuZCA9IGJ1Zi5sZW5ndGggLSAodG90YWwgLSB0aGlzLmxhc3ROZWVkKTtcbiAgYnVmLmNvcHkodGhpcy5sYXN0Q2hhciwgMCwgZW5kKTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmOCcsIGksIGVuZCk7XG59XG5cbi8vIEZvciBVVEYtOCwgYSByZXBsYWNlbWVudCBjaGFyYWN0ZXIgaXMgYWRkZWQgd2hlbiBlbmRpbmcgb24gYSBwYXJ0aWFsXG4vLyBjaGFyYWN0ZXIuXG5mdW5jdGlvbiB1dGY4RW5kKGJ1Zikge1xuICB2YXIgciA9IGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG4gIGlmICh0aGlzLmxhc3ROZWVkKSByZXR1cm4gciArICdcXHVmZmZkJztcbiAgcmV0dXJuIHI7XG59XG5cbi8vIFVURi0xNkxFIHR5cGljYWxseSBuZWVkcyB0d28gYnl0ZXMgcGVyIGNoYXJhY3RlciwgYnV0IGV2ZW4gaWYgd2UgaGF2ZSBhbiBldmVuXG4vLyBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlLCB3ZSBuZWVkIHRvIGNoZWNrIGlmIHdlIGVuZCBvbiBhIGxlYWRpbmcvaGlnaFxuLy8gc3Vycm9nYXRlLiBJbiB0aGF0IGNhc2UsIHdlIG5lZWQgdG8gd2FpdCBmb3IgdGhlIG5leHQgdHdvIGJ5dGVzIGluIG9yZGVyIHRvXG4vLyBkZWNvZGUgdGhlIGxhc3QgY2hhcmFjdGVyIHByb3Blcmx5LlxuZnVuY3Rpb24gdXRmMTZUZXh0KGJ1ZiwgaSkge1xuICBpZiAoKGJ1Zi5sZW5ndGggLSBpKSAlIDIgPT09IDApIHtcbiAgICB2YXIgciA9IGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGkpO1xuICAgIGlmIChyKSB7XG4gICAgICB2YXIgYyA9IHIuY2hhckNvZGVBdChyLmxlbmd0aCAtIDEpO1xuICAgICAgaWYgKGMgPj0gMHhEODAwICYmIGMgPD0gMHhEQkZGKSB7XG4gICAgICAgIHRoaXMubGFzdE5lZWQgPSAyO1xuICAgICAgICB0aGlzLmxhc3RUb3RhbCA9IDQ7XG4gICAgICAgIHRoaXMubGFzdENoYXJbMF0gPSBidWZbYnVmLmxlbmd0aCAtIDJdO1xuICAgICAgICB0aGlzLmxhc3RDaGFyWzFdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgICAgICAgcmV0dXJuIHIuc2xpY2UoMCwgLTEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICB0aGlzLmxhc3ROZWVkID0gMTtcbiAgdGhpcy5sYXN0VG90YWwgPSAyO1xuICB0aGlzLmxhc3RDaGFyWzBdID0gYnVmW2J1Zi5sZW5ndGggLSAxXTtcbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygndXRmMTZsZScsIGksIGJ1Zi5sZW5ndGggLSAxKTtcbn1cblxuLy8gRm9yIFVURi0xNkxFIHdlIGRvIG5vdCBleHBsaWNpdGx5IGFwcGVuZCBzcGVjaWFsIHJlcGxhY2VtZW50IGNoYXJhY3RlcnMgaWYgd2Vcbi8vIGVuZCBvbiBhIHBhcnRpYWwgY2hhcmFjdGVyLCB3ZSBzaW1wbHkgbGV0IHY4IGhhbmRsZSB0aGF0LlxuZnVuY3Rpb24gdXRmMTZFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHtcbiAgICB2YXIgZW5kID0gdGhpcy5sYXN0VG90YWwgLSB0aGlzLmxhc3ROZWVkO1xuICAgIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygndXRmMTZsZScsIDAsIGVuZCk7XG4gIH1cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFRleHQoYnVmLCBpKSB7XG4gIHZhciBuID0gKGJ1Zi5sZW5ndGggLSBpKSAlIDM7XG4gIGlmIChuID09PSAwKSByZXR1cm4gYnVmLnRvU3RyaW5nKCdiYXNlNjQnLCBpKTtcbiAgdGhpcy5sYXN0TmVlZCA9IDMgLSBuO1xuICB0aGlzLmxhc3RUb3RhbCA9IDM7XG4gIGlmIChuID09PSAxKSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5sYXN0Q2hhclswXSA9IGJ1ZltidWYubGVuZ3RoIC0gMl07XG4gICAgdGhpcy5sYXN0Q2hhclsxXSA9IGJ1ZltidWYubGVuZ3RoIC0gMV07XG4gIH1cbiAgcmV0dXJuIGJ1Zi50b1N0cmluZygnYmFzZTY0JywgaSwgYnVmLmxlbmd0aCAtIG4pO1xufVxuXG5mdW5jdGlvbiBiYXNlNjRFbmQoYnVmKSB7XG4gIHZhciByID0gYnVmICYmIGJ1Zi5sZW5ndGggPyB0aGlzLndyaXRlKGJ1ZikgOiAnJztcbiAgaWYgKHRoaXMubGFzdE5lZWQpIHJldHVybiByICsgdGhpcy5sYXN0Q2hhci50b1N0cmluZygnYmFzZTY0JywgMCwgMyAtIHRoaXMubGFzdE5lZWQpO1xuICByZXR1cm4gcjtcbn1cblxuLy8gUGFzcyBieXRlcyBvbiB0aHJvdWdoIGZvciBzaW5nbGUtYnl0ZSBlbmNvZGluZ3MgKGUuZy4gYXNjaWksIGxhdGluMSwgaGV4KVxuZnVuY3Rpb24gc2ltcGxlV3JpdGUoYnVmKSB7XG4gIHJldHVybiBidWYudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHNpbXBsZUVuZChidWYpIHtcbiAgcmV0dXJuIGJ1ZiAmJiBidWYubGVuZ3RoID8gdGhpcy53cml0ZShidWYpIDogJyc7XG59IiwiLyogZXNsaW50LWRpc2FibGUgbm9kZS9uby1kZXByZWNhdGVkLWFwaSAqL1xudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJ2J1ZmZlcicpXG52YXIgQnVmZmVyID0gYnVmZmVyLkJ1ZmZlclxuXG4vLyBhbHRlcm5hdGl2ZSB0byB1c2luZyBPYmplY3Qua2V5cyBmb3Igb2xkIGJyb3dzZXJzXG5mdW5jdGlvbiBjb3B5UHJvcHMgKHNyYywgZHN0KSB7XG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHtcbiAgICBkc3Rba2V5XSA9IHNyY1trZXldXG4gIH1cbn1cbmlmIChCdWZmZXIuZnJvbSAmJiBCdWZmZXIuYWxsb2MgJiYgQnVmZmVyLmFsbG9jVW5zYWZlICYmIEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBidWZmZXJcbn0gZWxzZSB7XG4gIC8vIENvcHkgcHJvcGVydGllcyBmcm9tIHJlcXVpcmUoJ2J1ZmZlcicpXG4gIGNvcHlQcm9wcyhidWZmZXIsIGV4cG9ydHMpXG4gIGV4cG9ydHMuQnVmZmVyID0gU2FmZUJ1ZmZlclxufVxuXG5mdW5jdGlvbiBTYWZlQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQnVmZmVyLnByb3RvdHlwZSlcblxuLy8gQ29weSBzdGF0aWMgbWV0aG9kcyBmcm9tIEJ1ZmZlclxuY29weVByb3BzKEJ1ZmZlciwgU2FmZUJ1ZmZlcilcblxuU2FmZUJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuICByZXR1cm4gQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5TYWZlQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfVxuICB2YXIgYnVmID0gQnVmZmVyKHNpemUpXG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJykge1xuICAgICAgYnVmLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5maWxsKGZpbGwpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGJ1Zi5maWxsKDApXG4gIH1cbiAgcmV0dXJuIGJ1ZlxufVxuXG5TYWZlQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9XG4gIHJldHVybiBCdWZmZXIoc2l6ZSlcbn1cblxuU2FmZUJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH1cbiAgcmV0dXJuIGJ1ZmZlci5TbG93QnVmZmVyKHNpemUpXG59XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0cy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuZXhwb3J0cy50b0J5dGVBcnJheSA9IHRvQnl0ZUFycmF5XG5leHBvcnRzLmZyb21CeXRlQXJyYXkgPSBmcm9tQnl0ZUFycmF5XG5cbnZhciBsb29rdXAgPSBbXVxudmFyIHJldkxvb2t1cCA9IFtdXG52YXIgQXJyID0gdHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnID8gVWludDhBcnJheSA6IEFycmF5XG5cbnZhciBjb2RlID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8nXG5mb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICBsb29rdXBbaV0gPSBjb2RlW2ldXG4gIHJldkxvb2t1cFtjb2RlLmNoYXJDb2RlQXQoaSldID0gaVxufVxuXG4vLyBTdXBwb3J0IGRlY29kaW5nIFVSTC1zYWZlIGJhc2U2NCBzdHJpbmdzLCBhcyBOb2RlLmpzIGRvZXMuXG4vLyBTZWU6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0Jhc2U2NCNVUkxfYXBwbGljYXRpb25zXG5yZXZMb29rdXBbJy0nLmNoYXJDb2RlQXQoMCldID0gNjJcbnJldkxvb2t1cFsnXycuY2hhckNvZGVBdCgwKV0gPSA2M1xuXG5mdW5jdGlvbiBnZXRMZW5zIChiNjQpIHtcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gVHJpbSBvZmYgZXh0cmEgYnl0ZXMgYWZ0ZXIgcGxhY2Vob2xkZXIgYnl0ZXMgYXJlIGZvdW5kXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2JlYXRnYW1taXQvYmFzZTY0LWpzL2lzc3Vlcy80MlxuICB2YXIgdmFsaWRMZW4gPSBiNjQuaW5kZXhPZignPScpXG4gIGlmICh2YWxpZExlbiA9PT0gLTEpIHZhbGlkTGVuID0gbGVuXG5cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IHZhbGlkTGVuID09PSBsZW5cbiAgICA/IDBcbiAgICA6IDQgLSAodmFsaWRMZW4gJSA0KVxuXG4gIHJldHVybiBbdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbl1cbn1cblxuLy8gYmFzZTY0IGlzIDQvMyArIHVwIHRvIHR3byBjaGFyYWN0ZXJzIG9mIHRoZSBvcmlnaW5hbCBkYXRhXG5mdW5jdGlvbiBieXRlTGVuZ3RoIChiNjQpIHtcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gX2J5dGVMZW5ndGggKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikge1xuICByZXR1cm4gKCh2YWxpZExlbiArIHBsYWNlSG9sZGVyc0xlbikgKiAzIC8gNCkgLSBwbGFjZUhvbGRlcnNMZW5cbn1cblxuZnVuY3Rpb24gdG9CeXRlQXJyYXkgKGI2NCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cblxuICB2YXIgYXJyID0gbmV3IEFycihfYnl0ZUxlbmd0aChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pKVxuXG4gIHZhciBjdXJCeXRlID0gMFxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgdmFyIGxlbiA9IHBsYWNlSG9sZGVyc0xlbiA+IDBcbiAgICA/IHZhbGlkTGVuIC0gNFxuICAgIDogdmFsaWRMZW5cblxuICB2YXIgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTgpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildIDw8IDYpIHxcbiAgICAgIHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMyldXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDE2KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAyKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA+PiA0KVxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMSkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxMCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA+PiAyKVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gdHJpcGxldFRvQmFzZTY0IChudW0pIHtcbiAgcmV0dXJuIGxvb2t1cFtudW0gPj4gMTggJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDYgJiAweDNGXSArXG4gICAgbG9va3VwW251bSAmIDB4M0ZdXG59XG5cbmZ1bmN0aW9uIGVuY29kZUNodW5rICh1aW50OCwgc3RhcnQsIGVuZCkge1xuICB2YXIgdG1wXG4gIHZhciBvdXRwdXQgPSBbXVxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkgKz0gMykge1xuICAgIHRtcCA9XG4gICAgICAoKHVpbnQ4W2ldIDw8IDE2KSAmIDB4RkYwMDAwKSArXG4gICAgICAoKHVpbnQ4W2kgKyAxXSA8PCA4KSAmIDB4RkYwMCkgK1xuICAgICAgKHVpbnQ4W2kgKyAyXSAmIDB4RkYpXG4gICAgb3V0cHV0LnB1c2godHJpcGxldFRvQmFzZTY0KHRtcCkpXG4gIH1cbiAgcmV0dXJuIG91dHB1dC5qb2luKCcnKVxufVxuXG5mdW5jdGlvbiBmcm9tQnl0ZUFycmF5ICh1aW50OCkge1xuICB2YXIgdG1wXG4gIHZhciBsZW4gPSB1aW50OC5sZW5ndGhcbiAgdmFyIGV4dHJhQnl0ZXMgPSBsZW4gJSAzIC8vIGlmIHdlIGhhdmUgMSBieXRlIGxlZnQsIHBhZCAyIGJ5dGVzXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsoXG4gICAgICB1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpXG4gICAgKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiZXhwb3J0cy5yZWFkID0gZnVuY3Rpb24gKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIG5CaXRzID0gLTdcbiAgdmFyIGkgPSBpc0xFID8gKG5CeXRlcyAtIDEpIDogMFxuICB2YXIgZCA9IGlzTEUgPyAtMSA6IDFcbiAgdmFyIHMgPSBidWZmZXJbb2Zmc2V0ICsgaV1cblxuICBpICs9IGRcblxuICBlID0gcyAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBzID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBlTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSAoZSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBtID0gZSAmICgoMSA8PCAoLW5CaXRzKSkgLSAxKVxuICBlID4+PSAoLW5CaXRzKVxuICBuQml0cyArPSBtTGVuXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSAobSAqIDI1NikgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnRzLndyaXRlID0gZnVuY3Rpb24gKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBydCA9IChtTGVuID09PSAyMyA/IE1hdGgucG93KDIsIC0yNCkgLSBNYXRoLnBvdygyLCAtNzcpIDogMClcbiAgdmFyIGkgPSBpc0xFID8gMCA6IChuQnl0ZXMgLSAxKVxuICB2YXIgZCA9IGlzTEUgPyAxIDogLTFcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgKHZhbHVlID09PSAwICYmIDEgLyB2YWx1ZSA8IDApID8gMSA6IDBcblxuICB2YWx1ZSA9IE1hdGguYWJzKHZhbHVlKVxuXG4gIGlmIChpc05hTih2YWx1ZSkgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XG4gICAgbSA9IGlzTmFOKHZhbHVlKSA/IDEgOiAwXG4gICAgZSA9IGVNYXhcbiAgfSBlbHNlIHtcbiAgICBlID0gTWF0aC5mbG9vcihNYXRoLmxvZyh2YWx1ZSkgLyBNYXRoLkxOMilcbiAgICBpZiAodmFsdWUgKiAoYyA9IE1hdGgucG93KDIsIC1lKSkgPCAxKSB7XG4gICAgICBlLS1cbiAgICAgIGMgKj0gMlxuICAgIH1cbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIHZhbHVlICs9IHJ0IC8gY1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSArPSBydCAqIE1hdGgucG93KDIsIDEgLSBlQmlhcylcbiAgICB9XG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XG4gICAgICBlKytcbiAgICAgIGMgLz0gMlxuICAgIH1cblxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xuICAgICAgbSA9IDBcbiAgICAgIGUgPSBlTWF4XG4gICAgfSBlbHNlIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgbSA9ICgodmFsdWUgKiBjKSAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSBlICsgZUJpYXNcbiAgICB9IGVsc2Uge1xuICAgICAgbSA9IHZhbHVlICogTWF0aC5wb3coMiwgZUJpYXMgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gMFxuICAgIH1cbiAgfVxuXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IG0gJiAweGZmLCBpICs9IGQsIG0gLz0gMjU2LCBtTGVuIC09IDgpIHt9XG5cbiAgZSA9IChlIDw8IG1MZW4pIHwgbVxuICBlTGVuICs9IG1MZW5cbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBlICYgMHhmZiwgaSArPSBkLCBlIC89IDI1NiwgZUxlbiAtPSA4KSB7fVxuXG4gIGJ1ZmZlcltvZmZzZXQgKyBpIC0gZF0gfD0gcyAqIDEyOFxufVxuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFByb3h5SGFuZGxlcjtcblxuZnVuY3Rpb24gUHJveHlIYW5kbGVyKGNicykge1xuICAgIHRoaXMuX2NicyA9IGNicyB8fCB7fTtcbn1cblxudmFyIEVWRU5UUyA9IHJlcXVpcmUoXCIuL1wiKS5FVkVOVFM7XG5PYmplY3Qua2V5cyhFVkVOVFMpLmZvckVhY2goZnVuY3Rpb24obmFtZSkge1xuICAgIGlmIChFVkVOVFNbbmFtZV0gPT09IDApIHtcbiAgICAgICAgbmFtZSA9IFwib25cIiArIG5hbWU7XG4gICAgICAgIFByb3h5SGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYnNbbmFtZV0pIHRoaXMuX2Nic1tuYW1lXSgpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAxKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBQcm94eUhhbmRsZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nic1tuYW1lXSkgdGhpcy5fY2JzW25hbWVdKGEpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAyKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBQcm94eUhhbmRsZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYSwgYikge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nic1tuYW1lXSkgdGhpcy5fY2JzW25hbWVdKGEsIGIpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IEVycm9yKFwid3JvbmcgbnVtYmVyIG9mIGFyZ3VtZW50c1wiKTtcbiAgICB9XG59KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gQ29sbGVjdGluZ0hhbmRsZXI7XG5cbmZ1bmN0aW9uIENvbGxlY3RpbmdIYW5kbGVyKGNicykge1xuICAgIHRoaXMuX2NicyA9IGNicyB8fCB7fTtcbiAgICB0aGlzLmV2ZW50cyA9IFtdO1xufVxuXG52YXIgRVZFTlRTID0gcmVxdWlyZShcIi4vXCIpLkVWRU5UUztcbk9iamVjdC5rZXlzKEVWRU5UUykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMCkge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgQ29sbGVjdGluZ0hhbmRsZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKFtuYW1lXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oKTtcbiAgICAgICAgfTtcbiAgICB9IGVsc2UgaWYgKEVWRU5UU1tuYW1lXSA9PT0gMSkge1xuICAgICAgICBuYW1lID0gXCJvblwiICsgbmFtZTtcbiAgICAgICAgQ29sbGVjdGluZ0hhbmRsZXIucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgdGhpcy5ldmVudHMucHVzaChbbmFtZSwgYV0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Nic1tuYW1lXSkgdGhpcy5fY2JzW25hbWVdKGEpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoRVZFTlRTW25hbWVdID09PSAyKSB7XG4gICAgICAgIG5hbWUgPSBcIm9uXCIgKyBuYW1lO1xuICAgICAgICBDb2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50cy5wdXNoKFtuYW1lLCBhLCBiXSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fY2JzW25hbWVdKSB0aGlzLl9jYnNbbmFtZV0oYSwgYik7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoXCJ3cm9uZyBudW1iZXIgb2YgYXJndW1lbnRzXCIpO1xuICAgIH1cbn0pO1xuXG5Db2xsZWN0aW5nSGFuZGxlci5wcm90b3R5cGUub25yZXNldCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuZXZlbnRzID0gW107XG4gICAgaWYgKHRoaXMuX2Nicy5vbnJlc2V0KSB0aGlzLl9jYnMub25yZXNldCgpO1xufTtcblxuQ29sbGVjdGluZ0hhbmRsZXIucHJvdG90eXBlLnJlc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5fY2JzLm9ucmVzZXQpIHRoaXMuX2Nicy5vbnJlc2V0KCk7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5ldmVudHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0pIHtcbiAgICAgICAgICAgIHZhciBudW0gPSB0aGlzLmV2ZW50c1tpXS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmIChudW0gPT09IDEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYnNbdGhpcy5ldmVudHNbaV1bMF1dKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG51bSA9PT0gMikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nic1t0aGlzLmV2ZW50c1tpXVswXV0odGhpcy5ldmVudHNbaV1bMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYnNbdGhpcy5ldmVudHNbaV1bMF1dKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmV2ZW50c1tpXVsxXSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudHNbaV1bMl1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gVGV4dEVsZW1lbnRUeXBlO1xuLyoqXG4gKiBDb252ZXJ0cyBhIHRleHQgbm9kZSB0byBhIFJlYWN0IHRleHQgZWxlbWVudFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIFRoZSB0ZXh0IG5vZGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSB0ZXh0XG4gKi9cbmZ1bmN0aW9uIFRleHRFbGVtZW50VHlwZShub2RlKSB7XG5cbiAgLy8gUmVhY3Qgd2lsbCBhY2NlcHQgcGxhaW4gdGV4dCBmb3IgcmVuZGVyaW5nIHNvIGp1c3QgcmV0dXJuIHRoZSBub2RlIGRhdGFcbiAgcmV0dXJuIG5vZGUuZGF0YTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBUYWdFbGVtZW50VHlwZTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb2Nlc3NOb2RlcyA9IHJlcXVpcmUoJy4uL3Byb2Nlc3NOb2RlcycpO1xuXG52YXIgX3Byb2Nlc3NOb2RlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9jZXNzTm9kZXMpO1xuXG52YXIgX2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcyA9IHJlcXVpcmUoJy4uL3V0aWxzL2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlcycpO1xuXG52YXIgX2dlbmVyYXRlUHJvcHNGcm9tQXR0cmlidXRlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMpO1xuXG52YXIgX1ZvaWRFbGVtZW50cyA9IHJlcXVpcmUoJy4uL2RvbS9lbGVtZW50cy9Wb2lkRWxlbWVudHMnKTtcblxudmFyIF9Wb2lkRWxlbWVudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVm9pZEVsZW1lbnRzKTtcblxudmFyIF9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lID0gcmVxdWlyZSgnLi4vdXRpbHMvaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZScpO1xuXG52YXIgX2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29udmVydHMgYW55IGVsZW1lbnQgKGV4Y2x1ZGluZyBzdHlsZSAtIHNlZSBTdHlsZUVsZW1lbnRUeXBlIC0gYW5kIHNjcmlwdCkgdG8gYSByZWFjdCBlbGVtZW50LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBub2RlIFRoZSB0YWcgbm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgUmVhY3QgZWxlbWVudCByZWxhdGl2ZSB0byBpdCdzIHBhcmVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSB0cmFuc2Zvcm0gZnVuY3Rpb24gdG8gYXBwbHkgdG8gYWxsIGNoaWxkcmVuXG4gKiBAcmV0dXJucyB7UmVhY3QuRWxlbWVudH0gVGhlIFJlYWN0IHRhZyBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIFRhZ0VsZW1lbnRUeXBlKG5vZGUsIGluZGV4LCB0cmFuc2Zvcm0pIHtcblxuICB2YXIgdGFnTmFtZSA9IG5vZGUubmFtZTtcblxuICAvLyB2YWxpZGF0ZSB0YWcgbmFtZVxuICBpZiAoISgwLCBfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZTIuZGVmYXVsdCkodGFnTmFtZSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGdlbmVyYXRlIHByb3BzXG4gIHZhciBwcm9wcyA9ICgwLCBfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzMi5kZWZhdWx0KShub2RlLmF0dHJpYnMsIGluZGV4KTtcblxuICAvLyBJZiB0aGUgbm9kZSBpcyBub3QgYSB2b2lkIGVsZW1lbnQgYW5kIGhhcyBjaGlsZHJlbiB0aGVuIHByb2Nlc3MgdGhlbVxuICB2YXIgY2hpbGRyZW4gPSBudWxsO1xuICBpZiAoX1ZvaWRFbGVtZW50czIuZGVmYXVsdC5pbmRleE9mKHRhZ05hbWUpID09PSAtMSkge1xuICAgIGNoaWxkcmVuID0gKDAsIF9wcm9jZXNzTm9kZXMyLmRlZmF1bHQpKG5vZGUuY2hpbGRyZW4sIHRyYW5zZm9ybSk7XG4gIH1cblxuICAvLyBjcmVhdGUgYW5kIHJldHVybiB0aGUgZWxlbWVudFxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSwgcHJvcHMsIGNoaWxkcmVuKTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBodG1sQXR0cmlidXRlc1RvUmVhY3Q7XG5cbnZhciBfQm9vbGVhbkF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi9kb20vYXR0cmlidXRlcy9Cb29sZWFuQXR0cmlidXRlcycpO1xuXG52YXIgX0Jvb2xlYW5BdHRyaWJ1dGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX0Jvb2xlYW5BdHRyaWJ1dGVzKTtcblxudmFyIF9SZWFjdEF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi9kb20vYXR0cmlidXRlcy9SZWFjdEF0dHJpYnV0ZXMnKTtcblxudmFyIF9SZWFjdEF0dHJpYnV0ZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfUmVhY3RBdHRyaWJ1dGVzKTtcblxudmFyIF9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lID0gcmVxdWlyZSgnLi9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lJyk7XG5cbnZhciBfaXNWYWxpZFRhZ09yQXR0cmlidXRlTmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pc1ZhbGlkVGFnT3JBdHRyaWJ1dGVOYW1lKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwYXJzZWQgYXR0cmlidXRlIHZhbHVlIHRha2luZyBpbnRvIGFjY291bnQgdGhpbmdzIGxpa2UgYm9vbGVhbiBhdHRyaWJ1dGVzXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGF0dHJpYnV0ZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgYXR0cmlidXRlIGZyb20gdGhlIEhUTUxcbiAqIEByZXR1cm5zIHsqfSBUaGUgcGFyc2VkIGF0dHJpYnV0ZSB2YWx1ZVxuICovXG52YXIgZ2V0UGFyc2VkQXR0cmlidXRlVmFsdWUgPSBmdW5jdGlvbiBnZXRQYXJzZWRBdHRyaWJ1dGVWYWx1ZShhdHRyaWJ1dGUsIHZhbHVlKSB7XG5cbiAgLy8gaWYgdGhlIGF0dHJpYnV0ZSBpZiBhIGJvb2xlYW4gdGhlbiBpdCdzIHZhbHVlIHNob3VsZCBiZSB0aGUgc2FtZSBhcyBpdCdzIG5hbWVcbiAgLy8gZS5nLiBkaXNhYmxlZD1cImRpc2FibGVkXCJcbiAgdmFyIGxvd2VyQm9vbGVhbkF0dHJpYnV0ZXMgPSBfQm9vbGVhbkF0dHJpYnV0ZXMyLmRlZmF1bHQubWFwKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgcmV0dXJuIGF0dHIudG9Mb3dlckNhc2UoKTtcbiAgfSk7XG4gIGlmIChsb3dlckJvb2xlYW5BdHRyaWJ1dGVzLmluZGV4T2YoYXR0cmlidXRlLnRvTG93ZXJDYXNlKCkpID49IDApIHtcbiAgICB2YWx1ZSA9IGF0dHJpYnV0ZTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogVGFrZXMgYW4gb2JqZWN0IG9mIHN0YW5kYXJkIEhUTUwgcHJvcGVydHkgbmFtZXMgYW5kIGNvbnZlcnRzIHRoZW0gdG8gdGhlaXIgUmVhY3QgY291bnRlcnBhcnQuIElmIHRoZSByZWFjdFxuICogdmVyc2lvbiBkb2VzIG5vdCBleGlzdCBmb3IgYW4gYXR0cmlidXRlIHRoZW4ganVzdCB1c2UgaXQgYXMgaXQgaXNcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlcyBUaGUgSFRNTCBhdHRyaWJ1dGVzIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBSZWFjdCBhdHRyaWJ1dGVzXG4gKi9cbmZ1bmN0aW9uIGh0bWxBdHRyaWJ1dGVzVG9SZWFjdChhdHRyaWJ1dGVzKSB7XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZpbHRlcihmdW5jdGlvbiAoYXR0cikge1xuICAgIHJldHVybiAoMCwgX2lzVmFsaWRUYWdPckF0dHJpYnV0ZU5hbWUyLmRlZmF1bHQpKGF0dHIpO1xuICB9KS5yZWR1Y2UoZnVuY3Rpb24gKG1hcHBlZEF0dHJpYnV0ZXMsIGF0dHJpYnV0ZSkge1xuXG4gICAgLy8gbG93ZXJjYXNlIHRoZSBhdHRyaWJ1dGUgbmFtZSBhbmQgZmluZCBpdCBpbiB0aGUgcmVhY3QgYXR0cmlidXRlIG1hcFxuICAgIHZhciBsb3dlckNhc2VBdHRyaWJ1dGUgPSBhdHRyaWJ1dGUudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIGZvcm1hdCB0aGUgYXR0cmlidXRlIG5hbWVcbiAgICB2YXIgbmFtZSA9IF9SZWFjdEF0dHJpYnV0ZXMyLmRlZmF1bHRbbG93ZXJDYXNlQXR0cmlidXRlXSB8fCBsb3dlckNhc2VBdHRyaWJ1dGU7XG5cbiAgICAvLyBhZGQgdGhlIHBhcnNlZCBhdHRyaWJ1dGUgdmFsdWUgdG8gdGhlIG1hcHBlZCBhdHRyaWJ1dGVzXG4gICAgbWFwcGVkQXR0cmlidXRlc1tuYW1lXSA9IGdldFBhcnNlZEF0dHJpYnV0ZVZhbHVlKG5hbWUsIGF0dHJpYnV0ZXNbYXR0cmlidXRlXSk7XG5cbiAgICByZXR1cm4gbWFwcGVkQXR0cmlidXRlcztcbiAgfSwge30pO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbi8qKlxuICogTGlzdCBvZiBib29sZWFuIGF0dHJpYnV0ZXNcbiAqIFRoZXNlIGF0dHJpYnV0ZXMgc2hvdWxkIGhhdmUgdGhlaXIgUmVhY3QgYXR0cmlidXRlIHZhbHVlIHNldCB0byBiZSB0aGUgc2FtZSBhcyB0aGVpciBuYW1lXG4gKiBFLmcuIDxpbnB1dCBkaXNhYmxlZD4gPSA8aW5wdXQgZGlzYWJsZWQ+XG4gKiAgICAgIDxpbnB1dCBkaXNhYmxlZD1cIlwiPiA9IDxpbnB1dCBkaXNhYmxlZD5cbiAqICAgICAgPGlucHV0IGRpc2FibGVkPVwiZGlzYWJsZWRcIj4gPSA8aW5wdXQgZGlzYWJsZWQ+XG4gKiBAdHlwZSB7QXJyYXl9XG4gKi9cbmV4cG9ydHMuZGVmYXVsdCA9IFsnYWxsb3dmdWxsU2NyZWVuJywgJ2FzeW5jJywgJ2F1dG9wbGF5JywgJ2NhcHR1cmUnLCAnY2hlY2tlZCcsICdjb250cm9scycsICdkZWZhdWx0JywgJ2RlZmVyJywgJ2Rpc2FibGVkJywgJ2Zvcm1ub3ZhbGlkYXRlJywgJ2hpZGRlbicsICdsb29wJywgJ211bHRpcGxlJywgJ211dGVkJywgJ25vdmFsaWRhdGUnLCAnb3BlbicsICdwbGF5c2lubGluZScsICdyZWFkb25seScsICdyZXF1aXJlZCcsICdyZXZlcnNlZCcsICdzY29wZWQnLCAnc2VhbWxlc3MnLCAnc2VsZWN0ZWQnLCAnaXRlbXNjb3BlJ107IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuLyoqXG4gKiBNYXBwaW5nIG9mIHN0YW5kYXJkIEhUTUwgYXR0cmlidXRlcyB0byB0aGVpciBSZWFjdCBjb3VudGVycGFydHNcbiAqIExpc3QgdGFrZW4gYW5kIHJldmVyc2VkIGZyb20gcmVhY3Qvc3JjL3JlbmRlcmVycy9kb20vc2hhcmVkL0hUTUxET01Qcm9wZXJ0eUNvbmZpZy5qc1xuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2Jsb2IvYzljM2MzMzliNzU3NjgyZjExNTRmMWM5MTVlYjU1ZTZhODc2NjkzMy9zcmMvcmVuZGVyZXJzL2RvbS9zaGFyZWQvSFRNTERPTVByb3BlcnR5Q29uZmlnLmpzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5leHBvcnRzLmRlZmF1bHQgPSB7XG4gIC8qKlxuICAgKiBTdGFuZGFyZCBQcm9wZXJ0aWVzXG4gICAqL1xuICBhY2NlcHQ6ICdhY2NlcHQnLFxuICAnYWNjZXB0LWNoYXJzZXQnOiAnYWNjZXB0Q2hhcnNldCcsXG4gIGFjY2Vzc2tleTogJ2FjY2Vzc0tleScsXG4gIGFjdGlvbjogJ2FjdGlvbicsXG4gIGFsbG93ZnVsbHNjcmVlbjogJ2FsbG93RnVsbFNjcmVlbicsXG4gIGFsbG93dHJhbnNwYXJlbmN5OiAnYWxsb3dUcmFuc3BhcmVuY3knLFxuICBhbHQ6ICdhbHQnLFxuICBhczogJ2FzJyxcbiAgYXN5bmM6ICdhc3luYycsXG4gIGF1dG9jb21wbGV0ZTogJ2F1dG9Db21wbGV0ZScsXG4gIGF1dG9wbGF5OiAnYXV0b1BsYXknLFxuICBjYXB0dXJlOiAnY2FwdHVyZScsXG4gIGNlbGxwYWRkaW5nOiAnY2VsbFBhZGRpbmcnLFxuICBjZWxsc3BhY2luZzogJ2NlbGxTcGFjaW5nJyxcbiAgY2hhcnNldDogJ2NoYXJTZXQnLFxuICBjaGFsbGVuZ2U6ICdjaGFsbGVuZ2UnLFxuICBjaGVja2VkOiAnY2hlY2tlZCcsXG4gIGNpdGU6ICdjaXRlJyxcbiAgY2xhc3NpZDogJ2NsYXNzSUQnLFxuICBjbGFzczogJ2NsYXNzTmFtZScsXG4gIGNvbHM6ICdjb2xzJyxcbiAgY29sc3BhbjogJ2NvbFNwYW4nLFxuICBjb250ZW50OiAnY29udGVudCcsXG4gIGNvbnRlbnRlZGl0YWJsZTogJ2NvbnRlbnRFZGl0YWJsZScsXG4gIGNvbnRleHRtZW51OiAnY29udGV4dE1lbnUnLFxuICBjb250cm9sczogJ2NvbnRyb2xzJyxcbiAgY29udHJvbHNMaXN0OiAnY29udHJvbHNMaXN0JyxcbiAgY29vcmRzOiAnY29vcmRzJyxcbiAgY3Jvc3NvcmlnaW46ICdjcm9zc09yaWdpbicsXG4gIGRhdGE6ICdkYXRhJyxcbiAgZGF0ZXRpbWU6ICdkYXRlVGltZScsXG4gIGRlZmF1bHQ6ICdkZWZhdWx0JyxcbiAgZGVmZXI6ICdkZWZlcicsXG4gIGRpcjogJ2RpcicsXG4gIGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuICBkb3dubG9hZDogJ2Rvd25sb2FkJyxcbiAgZHJhZ2dhYmxlOiAnZHJhZ2dhYmxlJyxcbiAgZW5jdHlwZTogJ2VuY1R5cGUnLFxuICBmb3JtOiAnZm9ybScsXG4gIGZvcm1hY3Rpb246ICdmb3JtQWN0aW9uJyxcbiAgZm9ybWVuY3R5cGU6ICdmb3JtRW5jVHlwZScsXG4gIGZvcm1tZXRob2Q6ICdmb3JtTWV0aG9kJyxcbiAgZm9ybW5vdmFsaWRhdGU6ICdmb3JtTm9WYWxpZGF0ZScsXG4gIGZvcm10YXJnZXQ6ICdmb3JtVGFyZ2V0JyxcbiAgZnJhbWVib3JkZXI6ICdmcmFtZUJvcmRlcicsXG4gIGhlYWRlcnM6ICdoZWFkZXJzJyxcbiAgaGVpZ2h0OiAnaGVpZ2h0JyxcbiAgaGlkZGVuOiAnaGlkZGVuJyxcbiAgaGlnaDogJ2hpZ2gnLFxuICBocmVmOiAnaHJlZicsXG4gIGhyZWZsYW5nOiAnaHJlZkxhbmcnLFxuICBmb3I6ICdodG1sRm9yJyxcbiAgJ2h0dHAtZXF1aXYnOiAnaHR0cEVxdWl2JyxcbiAgaWNvbjogJ2ljb24nLFxuICBpZDogJ2lkJyxcbiAgaW5wdXRtb2RlOiAnaW5wdXRNb2RlJyxcbiAgaW50ZWdyaXR5OiAnaW50ZWdyaXR5JyxcbiAgaXM6ICdpcycsXG4gIGtleXBhcmFtczogJ2tleVBhcmFtcycsXG4gIGtleXR5cGU6ICdrZXlUeXBlJyxcbiAga2luZDogJ2tpbmQnLFxuICBsYWJlbDogJ2xhYmVsJyxcbiAgbGFuZzogJ2xhbmcnLFxuICBsaXN0OiAnbGlzdCcsXG4gIGxvb3A6ICdsb29wJyxcbiAgbG93OiAnbG93JyxcbiAgbWFuaWZlc3Q6ICdtYW5pZmVzdCcsXG4gIG1hcmdpbmhlaWdodDogJ21hcmdpbkhlaWdodCcsXG4gIG1hcmdpbndpZHRoOiAnbWFyZ2luV2lkdGgnLFxuICBtYXg6ICdtYXgnLFxuICBtYXhsZW5ndGg6ICdtYXhMZW5ndGgnLFxuICBtZWRpYTogJ21lZGlhJyxcbiAgbWVkaWFncm91cDogJ21lZGlhR3JvdXAnLFxuICBtZXRob2Q6ICdtZXRob2QnLFxuICBtaW46ICdtaW4nLFxuICBtaW5sZW5ndGg6ICdtaW5MZW5ndGgnLFxuICBtdWx0aXBsZTogJ211bHRpcGxlJyxcbiAgbXV0ZWQ6ICdtdXRlZCcsXG4gIG5hbWU6ICduYW1lJyxcbiAgbm9uY2U6ICdub25jZScsXG4gIG5vdmFsaWRhdGU6ICdub1ZhbGlkYXRlJyxcbiAgb3BlbjogJ29wZW4nLFxuICBvcHRpbXVtOiAnb3B0aW11bScsXG4gIHBhdHRlcm46ICdwYXR0ZXJuJyxcbiAgcGxhY2Vob2xkZXI6ICdwbGFjZWhvbGRlcicsXG4gIHBsYXlzaW5saW5lOiAncGxheXNJbmxpbmUnLFxuICBwb3N0ZXI6ICdwb3N0ZXInLFxuICBwcmVsb2FkOiAncHJlbG9hZCcsXG4gIHByb2ZpbGU6ICdwcm9maWxlJyxcbiAgcmFkaW9ncm91cDogJ3JhZGlvR3JvdXAnLFxuICByZWFkb25seTogJ3JlYWRPbmx5JyxcbiAgcmVmZXJyZXJwb2xpY3k6ICdyZWZlcnJlclBvbGljeScsXG4gIHJlbDogJ3JlbCcsXG4gIHJlcXVpcmVkOiAncmVxdWlyZWQnLFxuICByZXZlcnNlZDogJ3JldmVyc2VkJyxcbiAgcm9sZTogJ3JvbGUnLFxuICByb3dzOiAncm93cycsXG4gIHJvd3NwYW46ICdyb3dTcGFuJyxcbiAgc2FuZGJveDogJ3NhbmRib3gnLFxuICBzY29wZTogJ3Njb3BlJyxcbiAgc2NvcGVkOiAnc2NvcGVkJyxcbiAgc2Nyb2xsaW5nOiAnc2Nyb2xsaW5nJyxcbiAgc2VhbWxlc3M6ICdzZWFtbGVzcycsXG4gIHNlbGVjdGVkOiAnc2VsZWN0ZWQnLFxuICBzaGFwZTogJ3NoYXBlJyxcbiAgc2l6ZTogJ3NpemUnLFxuICBzaXplczogJ3NpemVzJyxcbiAgc2xvdDogJ3Nsb3QnLFxuICBzcGFuOiAnc3BhbicsXG4gIHNwZWxsY2hlY2s6ICdzcGVsbENoZWNrJyxcbiAgc3JjOiAnc3JjJyxcbiAgc3JjZG9jOiAnc3JjRG9jJyxcbiAgc3JjbGFuZzogJ3NyY0xhbmcnLFxuICBzcmNzZXQ6ICdzcmNTZXQnLFxuICBzdGFydDogJ3N0YXJ0JyxcbiAgc3RlcDogJ3N0ZXAnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICB0YWJpbmRleDogJ3RhYkluZGV4JyxcbiAgdGFyZ2V0OiAndGFyZ2V0JyxcbiAgdGl0bGU6ICd0aXRsZScsXG4gIHR5cGU6ICd0eXBlJyxcbiAgdXNlbWFwOiAndXNlTWFwJyxcbiAgdmFsdWU6ICd2YWx1ZScsXG4gIHdpZHRoOiAnd2lkdGgnLFxuICB3bW9kZTogJ3dtb2RlJyxcbiAgd3JhcDogJ3dyYXAnLFxuICAvKipcbiAgICogUkRGYSBQcm9wZXJ0aWVzXG4gICAqL1xuICBhYm91dDogJ2Fib3V0JyxcbiAgZGF0YXR5cGU6ICdkYXRhdHlwZScsXG4gIGlubGlzdDogJ2lubGlzdCcsXG4gIHByZWZpeDogJ3ByZWZpeCcsXG4gIHByb3BlcnR5OiAncHJvcGVydHknLFxuICByZXNvdXJjZTogJ3Jlc291cmNlJyxcbiAgdHlwZW9mOiAndHlwZW9mJyxcbiAgdm9jYWI6ICd2b2NhYicsXG4gIC8qKlxuICAgKiBOb24tc3RhbmRhcmQgUHJvcGVydGllc1xuICAgKi9cbiAgYXV0b2NhcGl0YWxpemU6ICdhdXRvQ2FwaXRhbGl6ZScsXG4gIGF1dG9jb3JyZWN0OiAnYXV0b0NvcnJlY3QnLFxuICBhdXRvc2F2ZTogJ2F1dG9TYXZlJyxcbiAgY29sb3I6ICdjb2xvcicsXG4gIGl0ZW1wcm9wOiAnaXRlbVByb3AnLFxuICBpdGVtc2NvcGU6ICdpdGVtU2NvcGUnLFxuICBpdGVtdHlwZTogJ2l0ZW1UeXBlJyxcbiAgaXRlbWlkOiAnaXRlbUlEJyxcbiAgaXRlbXJlZjogJ2l0ZW1SZWYnLFxuICByZXN1bHRzOiAncmVzdWx0cycsXG4gIHNlY3VyaXR5OiAnc2VjdXJpdHknLFxuICB1bnNlbGVjdGFibGU6ICd1bnNlbGVjdGFibGUnXG59OyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBJbmxpbmVTdHlsZVRvT2JqZWN0O1xuLyoqXG4gKiBDb252ZXJ0cyBhbiBpbmxpbmUgc3R5bGUgc3RyaW5nIGludG8gYW4gb2JqZWN0IG9mIFJlYWN0IHN0eWxlIHByb3BlcnRpZXNcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5saW5lU3R5bGU9JycgVGhlIGlubGluZSBzdHlsZSB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29udmVydGVkIHN0eWxlXG4gKi9cbmZ1bmN0aW9uIElubGluZVN0eWxlVG9PYmplY3QoKSB7XG4gIHZhciBpbmxpbmVTdHlsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG5cblxuICAvLyBqdXN0IHJldHVybiBlbXB0eSBvYmplY3QgaWYgdGhlIGlubGluZVN0eWxlIGlzIGVtcHR5XG4gIGlmIChpbmxpbmVTdHlsZSA9PT0gJycpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICByZXR1cm4gaW5saW5lU3R5bGUuc3BsaXQoJzsnKS5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlT2JqZWN0LCBzdHlsZVByb3BlcnR5VmFsdWUpIHtcblxuICAgIC8vIGV4dHJhY3QgdGhlIHN0eWxlIHByb3BlcnR5IG5hbWUgYW5kIHZhbHVlXG4gICAgdmFyIF9zdHlsZVByb3BlcnR5VmFsdWUkcyA9IHN0eWxlUHJvcGVydHlWYWx1ZS5zcGxpdCgvXihbXjpdKyk6LykuZmlsdGVyKGZ1bmN0aW9uICh2YWwsIGkpIHtcbiAgICAgIHJldHVybiBpID4gMDtcbiAgICB9KS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIH0pLFxuICAgICAgICBfc3R5bGVQcm9wZXJ0eVZhbHVlJHMyID0gX3NsaWNlZFRvQXJyYXkoX3N0eWxlUHJvcGVydHlWYWx1ZSRzLCAyKSxcbiAgICAgICAgcHJvcGVydHkgPSBfc3R5bGVQcm9wZXJ0eVZhbHVlJHMyWzBdLFxuICAgICAgICB2YWx1ZSA9IF9zdHlsZVByb3BlcnR5VmFsdWUkczJbMV07XG5cbiAgICAvLyBpZiB0aGVyZSBpcyBubyB2YWx1ZSAoaS5lLiBubyA6IGluIHRoZSBzdHlsZSkgdGhlbiBpZ25vcmUgaXRcblxuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBzdHlsZU9iamVjdDtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IHRoZSBwcm9wZXJ0eSBuYW1lIGludG8gdGhlIGNvcnJlY3QgUmVhY3QgZm9ybWF0XG4gICAgLy8gcmVtb3ZlIGFsbCBoeXBoZW5zIGFuZCBjb252ZXJ0IHRoZSBsZXR0ZXIgaW1tZWRpYXRlbHkgYWZ0ZXIgZWFjaCBoeXBoZW4gdG8gdXBwZXIgY2FzZVxuICAgIC8vIGFkZGl0aW9uYWxseSBkb24ndCB1cHBlcmNhc2UgYW55IC1tcy0gcHJlZml4XG4gICAgLy8gZS5nLiAtbXMtc3R5bGUtcHJvcGVydHkgPSBtc1N0eWxlUHJvcGVydHlcbiAgICAvLyAgICAgIC13ZWJraXQtc3R5bGUtcHJvcGVydHkgPSBXZWJraXRTdHlsZVByb3BlcnR5XG4gICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5yZXBsYWNlKC9eLW1zLS8sICdtcy0nKS5yZXBsYWNlKC8tKC4pL2csIGZ1bmN0aW9uIChfLCBjaGFyYWN0ZXIpIHtcbiAgICAgIHJldHVybiBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8vIGFkZCB0aGUgbmV3IHN0eWxlIHByb3BlcnR5IGFuZCB2YWx1ZSB0byB0aGUgc3R5bGUgb2JqZWN0XG4gICAgc3R5bGVPYmplY3RbcHJvcGVydHldID0gdmFsdWU7XG5cbiAgICByZXR1cm4gc3R5bGVPYmplY3Q7XG4gIH0sIHt9KTtcbn0iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG4vKipcbiAqIExpc3Qgb2Ygdm9pZCBlbGVtZW50c1xuICogVGhlc2UgZWxlbWVudHMgYXJlIG5vdCBhbGxvd2VkIHRvIGhhdmUgY2hpbGRyZW5cbiAqIEB0eXBlIHtBcnJheX1cbiAqL1xuZXhwb3J0cy5kZWZhdWx0ID0gWydhcmVhJywgJ2Jhc2UnLCAnYnInLCAnY29sJywgJ2NvbW1hbmQnLCAnZW1iZWQnLCAnaHInLCAnaW1nJywgJ2lucHV0JywgJ2tleWdlbicsICdsaW5rJywgJ21ldGEnLCAncGFyYW0nLCAnc291cmNlJywgJ3RyYWNrJywgJ3diciddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IFN0eWxlRWxlbWVudFR5cGU7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMgPSByZXF1aXJlKCcuLi91dGlscy9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMnKTtcblxudmFyIF9nZW5lcmF0ZVByb3BzRnJvbUF0dHJpYnV0ZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIDxzdHlsZT4gZWxlbWVudCB0byBhIFJlYWN0IGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbm9kZSBUaGUgc3R5bGUgbm9kZVxuICogQHBhcmFtIHtTdHJpbmd9IGluZGV4IFRoZSBpbmRleCBvZiB0aGUgUmVhY3QgZWxlbWVudCByZWxhdGl2ZSB0byBpdCdzIHBhcmVudFxuICogQHJldHVybnMge1JlYWN0LkVsZW1lbnR9IFRoZSBSZWFjdCBzdHlsZSBlbGVtZW50XG4gKi9cbmZ1bmN0aW9uIFN0eWxlRWxlbWVudFR5cGUobm9kZSwgaW5kZXgpIHtcblxuICAvLyBUaGUgc3R5bGUgZWxlbWVudCBvbmx5IGV2ZXIgaGFzIGEgc2luZ2xlIGNoaWxkIHdoaWNoIGlzIHRoZSBzdHlsZXMgc28gdHJ5IGFuZCBmaW5kIHRoaXMgdG8gYWRkIGFzXG4gIC8vIGEgY2hpbGQgdG8gdGhlIHN0eWxlIGVsZW1lbnQgdGhhdCB3aWxsIGJlIGNyZWF0ZWRcbiAgdmFyIHN0eWxlcyA9IHZvaWQgMDtcbiAgaWYgKG5vZGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgIHN0eWxlcyA9IG5vZGUuY2hpbGRyZW5bMF0uZGF0YTtcbiAgfVxuXG4gIC8vIGdlbmVyYXRlIHByb3BzXG4gIHZhciBwcm9wcyA9ICgwLCBfZ2VuZXJhdGVQcm9wc0Zyb21BdHRyaWJ1dGVzMi5kZWZhdWx0KShub2RlLmF0dHJpYnMsIGluZGV4KTtcblxuICAvLyBjcmVhdGUgYW5kIHJldHVybiB0aGUgZWxlbWVudFxuICByZXR1cm4gX3JlYWN0Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJywgcHJvcHMsIHN0eWxlcyk7XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBVbnN1cHBvcnRlZEVsZW1lbnRUeXBlO1xuLyoqXG4gKiBIYW5kbGVzIGFuIHVuc3VwcG9ydGVkIGVsZW1lbnQgdHlwZSBieSByZXR1cm5pbmcgbnVsbCBzbyBub3RoaW5nIGlzIHJlbmRlcmVkXG4gKiBAcmV0dXJucyB7bnVsbH1cbiAqL1xuZnVuY3Rpb24gVW5zdXBwb3J0ZWRFbGVtZW50VHlwZSgpIHtcblxuICAvLyBkbyBub3RoaW5nIGJlY2F1c2UgdGhlIGVsZW1lbnQgdHlwZSBpcyB1bnN1cHBvcnRlZFxuICAvLyBjb21tZW50LCBkaXJlY3RpdmUsIHNjcmlwdCwgY2RhdGEsIGRvY3R5cGUgYXJlIGFsbCBjdXJyZW50bHkgdW5zdXBwb3J0ZWRcbiAgcmV0dXJuIG51bGw7XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gSHRtbFBhcnNlcjtcblxudmFyIF9odG1scGFyc2VyID0gcmVxdWlyZSgnaHRtbHBhcnNlcjInKTtcblxudmFyIF9odG1scGFyc2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2h0bWxwYXJzZXIpO1xuXG52YXIgX3Byb2Nlc3NOb2RlcyA9IHJlcXVpcmUoJy4vcHJvY2Vzc05vZGVzJyk7XG5cbnZhciBfcHJvY2Vzc05vZGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb2Nlc3NOb2Rlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogUGFyc2VzIGEgSFRNTCBzdHJpbmcgYW5kIHJldHVybnMgYSBsaXN0IG9mIFJlYWN0IGNvbXBvbmVudHMgZ2VuZXJhdGVkIGZyb20gaXRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaHRtbCBUaGUgSFRNTCB0byBjb252ZXJ0IGludG8gUmVhY3QgY29tcG9uZW50XG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyBPcHRpb25zIHRvIHBhc3NcbiAqIEByZXR1cm5zIHtBcnJheX0gTGlzdCBvZiB0b3AgbGV2ZWwgUmVhY3QgZWxlbWVudHNcbiAqL1xuZnVuY3Rpb24gSHRtbFBhcnNlcihodG1sKSB7XG4gIHZhciBfcmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSxcbiAgICAgIF9yZWYkZGVjb2RlRW50aXRpZXMgPSBfcmVmLmRlY29kZUVudGl0aWVzLFxuICAgICAgZGVjb2RlRW50aXRpZXMgPSBfcmVmJGRlY29kZUVudGl0aWVzID09PSB1bmRlZmluZWQgPyB0cnVlIDogX3JlZiRkZWNvZGVFbnRpdGllcyxcbiAgICAgIHRyYW5zZm9ybSA9IF9yZWYudHJhbnNmb3JtLFxuICAgICAgX3JlZiRwcmVwcm9jZXNzTm9kZXMgPSBfcmVmLnByZXByb2Nlc3NOb2RlcyxcbiAgICAgIHByZXByb2Nlc3NOb2RlcyA9IF9yZWYkcHJlcHJvY2Vzc05vZGVzID09PSB1bmRlZmluZWQgPyBmdW5jdGlvbiAobm9kZXMpIHtcbiAgICByZXR1cm4gbm9kZXM7XG4gIH0gOiBfcmVmJHByZXByb2Nlc3NOb2RlcztcblxuICB2YXIgbm9kZXMgPSBwcmVwcm9jZXNzTm9kZXMoX2h0bWxwYXJzZXIyLmRlZmF1bHQucGFyc2VET00oaHRtbCwgeyBkZWNvZGVFbnRpdGllczogZGVjb2RlRW50aXRpZXMgfSkpO1xuICByZXR1cm4gKDAsIF9wcm9jZXNzTm9kZXMyLmRlZmF1bHQpKG5vZGVzLCB0cmFuc2Zvcm0pO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpO1xuICBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzcztcbiAgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzcztcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgZ3VkIGZyb20gJ2d1ZCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcblxuZnVuY3Rpb24gb2JqZWN0SXMoeCwgeSkge1xuICBpZiAoeCA9PT0geSkge1xuICAgIHJldHVybiB4ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geCAhPT0geCAmJiB5ICE9PSB5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50RW1pdHRlcih2YWx1ZSkge1xuICB2YXIgaGFuZGxlcnMgPSBbXTtcbiAgcmV0dXJuIHtcbiAgICBvbjogZnVuY3Rpb24gb24oaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMucHVzaChoYW5kbGVyKTtcbiAgICB9LFxuICAgIG9mZjogZnVuY3Rpb24gb2ZmKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7XG4gICAgICAgIHJldHVybiBoICE9PSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9LFxuICAgIHNldDogZnVuY3Rpb24gc2V0KG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZXIodmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gb25seUNoaWxkKGNoaWxkcmVuKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGNoaWxkcmVuKSA/IGNoaWxkcmVuWzBdIDogY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0Q29udGV4dChkZWZhdWx0VmFsdWUsIGNhbGN1bGF0ZUNoYW5nZWRCaXRzKSB7XG4gIHZhciBfUHJvdmlkZXIkY2hpbGRDb250ZXgsIF9Db25zdW1lciRjb250ZXh0VHlwZTtcblxuICB2YXIgY29udGV4dFByb3AgPSAnX19jcmVhdGUtcmVhY3QtY29udGV4dC0nICsgZ3VkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9XG4gIC8qI19fUFVSRV9fKi9cbiAgZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID1cbiAgLyojX19QVVJFX18qL1xuICBmdW5jdGlvbiAoX0NvbXBvbmVudDIpIHtcbiAgICBfaW5oZXJpdHNMb29zZShDb25zdW1lciwgX0NvbXBvbmVudDIpO1xuXG4gICAgZnVuY3Rpb24gQ29uc3VtZXIoKSB7XG4gICAgICB2YXIgX3RoaXMyO1xuXG4gICAgICBfdGhpczIgPSBfQ29tcG9uZW50Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICBfdGhpczIuc3RhdGUgPSB7XG4gICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgfTtcblxuICAgICAgX3RoaXMyLm9uVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlLCBjaGFuZ2VkQml0cykge1xuICAgICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gX3RoaXMyLm9ic2VydmVkQml0cyB8IDA7XG5cbiAgICAgICAgaWYgKChvYnNlcnZlZEJpdHMgJiBjaGFuZ2VkQml0cykgIT09IDApIHtcbiAgICAgICAgICBfdGhpczIuc2V0U3RhdGUoe1xuICAgICAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBfdGhpczI7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90bzIgPSBDb25zdW1lci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IG5leHRQcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vbih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9ic2VydmVkQml0cyA9IHRoaXMucHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub2ZmKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5nZXQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIG9ubHlDaGlsZCh0aGlzLnByb3BzLmNoaWxkcmVuKSh0aGlzLnN0YXRlLnZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIENvbnN1bWVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgQ29uc3VtZXIuY29udGV4dFR5cGVzID0gKF9Db25zdW1lciRjb250ZXh0VHlwZSA9IHt9LCBfQ29uc3VtZXIkY29udGV4dFR5cGVbY29udGV4dFByb3BdID0gUHJvcFR5cGVzLm9iamVjdCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlKTtcbiAgcmV0dXJuIHtcbiAgICBQcm92aWRlcjogUHJvdmlkZXIsXG4gICAgQ29uc3VtZXI6IENvbnN1bWVyXG4gIH07XG59XG5cbnZhciBpbmRleCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQgfHwgY3JlYXRlUmVhY3RDb250ZXh0O1xuXG5leHBvcnQgZGVmYXVsdCBpbmRleDtcbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8vIFRPRE86IFJlcGxhY2Ugd2l0aCBSZWFjdC5jcmVhdGVDb250ZXh0IG9uY2Ugd2UgY2FuIGFzc3VtZSBSZWFjdCAxNitcbmltcG9ydCBjcmVhdGVDb250ZXh0IGZyb20gXCJtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0XCI7XG5cbmNvbnN0IGNyZWF0ZU5hbWVkQ29udGV4dCA9IG5hbWUgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gY3JlYXRlQ29udGV4dCgpO1xuICBjb250ZXh0LmRpc3BsYXlOYW1lID0gbmFtZTtcblxuICByZXR1cm4gY29udGV4dDtcbn07XG5cbmNvbnN0IGNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlclwiKTtcbmV4cG9ydCBkZWZhdWx0IGNvbnRleHQ7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cbmNsYXNzIFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHsgcGF0aDogXCIvXCIsIHVybDogXCIvXCIsIHBhcmFtczoge30sIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIiB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICB0aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4obG9jYXRpb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb24gfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgY2hpbGRyZW49e3RoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbH1cbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgICB9fVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBzdGF0aWNDb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbihwcmV2UHJvcHMpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgcHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgIFwiWW91IGNhbm5vdCBjaGFuZ2UgPFJvdXRlciBoaXN0b3J5PlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTWVtb3J5SGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuaW1wb3J0IFJvdXRlciBmcm9tIFwiLi9Sb3V0ZXJcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHN0b3JlcyBsb2NhdGlvbiBpbiBtZW1vcnkuXG4gKi9cbmNsYXNzIE1lbW9yeVJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgd2FybmluZyhcbiAgICAgICF0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIjxNZW1vcnlSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICtcbiAgICAgICAgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5jbGFzcyBMaWZlY3ljbGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vbk1vdW50KSB0aGlzLnByb3BzLm9uTW91bnQuY2FsbCh0aGlzLCB0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVubW91bnQpIHRoaXMucHJvcHMub25Vbm1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlmZWN5Y2xlO1xuIiwiaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tIFwicGF0aC10by1yZWdleHBcIjtcblxuY29uc3QgY2FjaGUgPSB7fTtcbmNvbnN0IGNhY2hlTGltaXQgPSAxMDAwMDtcbmxldCBjYWNoZUNvdW50ID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgb3B0aW9ucykge1xuICBjb25zdCBjYWNoZUtleSA9IGAke29wdGlvbnMuZW5kfSR7b3B0aW9ucy5zdHJpY3R9JHtvcHRpb25zLnNlbnNpdGl2ZX1gO1xuICBjb25zdCBwYXRoQ2FjaGUgPSBjYWNoZVtjYWNoZUtleV0gfHwgKGNhY2hlW2NhY2hlS2V5XSA9IHt9KTtcblxuICBpZiAocGF0aENhY2hlW3BhdGhdKSByZXR1cm4gcGF0aENhY2hlW3BhdGhdO1xuXG4gIGNvbnN0IGtleXMgPSBbXTtcbiAgY29uc3QgcmVnZXhwID0gcGF0aFRvUmVnZXhwKHBhdGgsIGtleXMsIG9wdGlvbnMpO1xuICBjb25zdCByZXN1bHQgPSB7IHJlZ2V4cCwga2V5cyB9O1xuXG4gIGlmIChjYWNoZUNvdW50IDwgY2FjaGVMaW1pdCkge1xuICAgIHBhdGhDYWNoZVtwYXRoXSA9IHJlc3VsdDtcbiAgICBjYWNoZUNvdW50Kys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIFB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgVVJMIHBhdGhuYW1lIHRvIGEgcGF0aC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdGhuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICBvcHRpb25zID0geyBwYXRoOiBvcHRpb25zIH07XG4gIH1cblxuICBjb25zdCB7IHBhdGgsIGV4YWN0ID0gZmFsc2UsIHN0cmljdCA9IGZhbHNlLCBzZW5zaXRpdmUgPSBmYWxzZSB9ID0gb3B0aW9ucztcblxuICBjb25zdCBwYXRocyA9IFtdLmNvbmNhdChwYXRoKTtcblxuICByZXR1cm4gcGF0aHMucmVkdWNlKChtYXRjaGVkLCBwYXRoKSA9PiB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIGNvbnN0IHsgcmVnZXhwLCBrZXlzIH0gPSBjb21waWxlUGF0aChwYXRoLCB7XG4gICAgICBlbmQ6IGV4YWN0LFxuICAgICAgc3RyaWN0LFxuICAgICAgc2Vuc2l0aXZlXG4gICAgfSk7XG4gICAgY29uc3QgbWF0Y2ggPSByZWdleHAuZXhlYyhwYXRobmFtZSk7XG5cbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IFt1cmwsIC4uLnZhbHVlc10gPSBtYXRjaDtcbiAgICBjb25zdCBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcblxuICAgIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCwgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCwgLy8gdGhlIG1hdGNoZWQgcG9ydGlvbiBvZiB0aGUgVVJMXG4gICAgICBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICAgIHBhcmFtczoga2V5cy5yZWR1Y2UoKG1lbW8sIGtleSwgaW5kZXgpID0+IHtcbiAgICAgICAgbWVtb1trZXkubmFtZV0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgICAgICByZXR1cm4gbWVtbztcbiAgICAgIH0sIHt9KVxuICAgIH07XG4gIH0sIG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tIFwicmVhY3QtaXNcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHRcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoXCI7XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIGNvbnN0IHZhbHVlID0gY2hpbGRyZW4ocHJvcHMpO1xuXG4gIHdhcm5pbmcoXG4gICAgdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICtcbiAgICAgIGA8Um91dGUke3BhdGggPyBgIHBhdGg9XCIke3BhdGh9XCJgIDogXCJcIn0+LCBidXQgeW91IGAgK1xuICAgICAgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCJcbiAgKTtcblxuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5jbGFzcyBSb3V0ZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IHRoaXMucHJvcHMuY29tcHV0ZWRNYXRjaFxuICAgICAgICAgICAgPyB0aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICAgICAgICA6IHRoaXMucHJvcHMucGF0aFxuICAgICAgICAgICAgPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHRoaXMucHJvcHMpXG4gICAgICAgICAgICA6IGNvbnRleHQubWF0Y2g7XG5cbiAgICAgICAgICBjb25zdCBwcm9wcyA9IHsgLi4uY29udGV4dCwgbG9jYXRpb24sIG1hdGNoIH07XG5cbiAgICAgICAgICBsZXQgeyBjaGlsZHJlbiwgY29tcG9uZW50LCByZW5kZXIgfSA9IHRoaXMucHJvcHM7XG5cbiAgICAgICAgICAvLyBQcmVhY3QgdXNlcyBhbiBlbXB0eSBhcnJheSBhcyBjaGlsZHJlbiBieVxuICAgICAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiYgY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxSb3V0ZXJDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXtwcm9wc30+XG4gICAgICAgICAgICAgIHtwcm9wcy5tYXRjaFxuICAgICAgICAgICAgICAgID8gY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgID8gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICAgICAgPyBfX0RFVl9fXG4gICAgICAgICAgICAgICAgICAgICAgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCB0aGlzLnByb3BzLnBhdGgpXG4gICAgICAgICAgICAgICAgICAgICAgOiBjaGlsZHJlbihwcm9wcylcbiAgICAgICAgICAgICAgICAgICAgOiBjaGlsZHJlblxuICAgICAgICAgICAgICAgICAgOiBjb21wb25lbnRcbiAgICAgICAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKVxuICAgICAgICAgICAgICAgICAgOiByZW5kZXJcbiAgICAgICAgICAgICAgICAgID8gcmVuZGVyKHByb3BzKVxuICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICAgICAgOiB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgICAgICAgID8gX19ERVZfX1xuICAgICAgICAgICAgICAgICAgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCB0aGlzLnByb3BzLnBhdGgpXG4gICAgICAgICAgICAgICAgICA6IGNoaWxkcmVuKHByb3BzKVxuICAgICAgICAgICAgICAgIDogbnVsbH1cbiAgICAgICAgICAgIDwvUm91dGVyQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgICApO1xuICAgICAgICB9fVxuICAgICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgUm91dGUucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLm5vZGVdKSxcbiAgICBjb21wb25lbnQ6IChwcm9wcywgcHJvcE5hbWUpID0+IHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gJiYgIWlzVmFsaWRFbGVtZW50VHlwZShwcm9wc1twcm9wTmFtZV0pKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoXG4gICAgICAgICAgYEludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgICBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZylcbiAgICBdKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhKFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuICYmXG4gICAgICAgICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICAgICksXG4gICAgICBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkXCJcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoXG4gICAgICAgIHRoaXMucHJvcHMuY2hpbGRyZW4gJiZcbiAgICAgICAgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSAmJlxuICAgICAgICB0aGlzLnByb3BzLnJlbmRlclxuICAgICAgKSxcbiAgICAgIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSByZW5kZXI+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIlxuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksXG4gICAgICBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiXG4gICAgKTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLFxuICAgICAgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyXCI7XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiB7XG4gICAgLi4ubG9jYXRpb24sXG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9O1xufVxuXG5mdW5jdGlvbiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBsb2NhdGlvbikge1xuICBpZiAoIWJhc2VuYW1lKSByZXR1cm4gbG9jYXRpb247XG5cbiAgY29uc3QgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG5cbiAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmluZGV4T2YoYmFzZSkgIT09IDApIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIC4uLmxvY2F0aW9uLFxuICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoYmFzZS5sZW5ndGgpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVSTChsb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIGxvY2F0aW9uID09PSBcInN0cmluZ1wiID8gbG9jYXRpb24gOiBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbn1cblxuZnVuY3Rpb24gc3RhdGljSGFuZGxlcihtZXRob2ROYW1lKSB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuY2xhc3MgU3RhdGljUm91dGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgbmF2aWdhdGVUbyhsb2NhdGlvbiwgYWN0aW9uKSB7XG4gICAgY29uc3QgeyBiYXNlbmFtZSA9IFwiXCIsIGNvbnRleHQgPSB7fSB9ID0gdGhpcy5wcm9wcztcbiAgICBjb250ZXh0LmFjdGlvbiA9IGFjdGlvbjtcbiAgICBjb250ZXh0LmxvY2F0aW9uID0gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSk7XG4gICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gIH1cblxuICBoYW5kbGVQdXNoID0gbG9jYXRpb24gPT4gdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlBVU0hcIik7XG4gIGhhbmRsZVJlcGxhY2UgPSBsb2NhdGlvbiA9PiB0aGlzLm5hdmlnYXRlVG8obG9jYXRpb24sIFwiUkVQTEFDRVwiKTtcbiAgaGFuZGxlTGlzdGVuID0gKCkgPT4gbm9vcDtcbiAgaGFuZGxlQmxvY2sgPSAoKSA9PiBub29wO1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGJhc2VuYW1lID0gXCJcIiwgY29udGV4dCA9IHt9LCBsb2NhdGlvbiA9IFwiL1wiLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IHBhdGggPT4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKSxcbiAgICAgIGFjdGlvbjogXCJQT1BcIixcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoXCJnb1wiKSxcbiAgICAgIGdvQmFjazogc3RhdGljSGFuZGxlcihcImdvQmFja1wiKSxcbiAgICAgIGdvRm9yd2FyZDogc3RhdGljSGFuZGxlcihcImdvRm9yd2FyZFwiKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gPFJvdXRlciB7Li4ucmVzdH0gaGlzdG9yeT17aGlzdG9yeX0gc3RhdGljQ29udGV4dD17Y29udGV4dH0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgU3RhdGljUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSlcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24oKSB7XG4gICAgd2FybmluZyhcbiAgICAgICF0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIjxTdGF0aWNSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksIFwiICtcbiAgICAgICAgXCJ1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBTdGF0aWNSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3RhdGljUm91dGVyO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuaW1wb3J0IFJvdXRlckNvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dFwiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGhcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuY2xhc3MgU3dpdGNoIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAge2NvbnRleHQgPT4ge1xuICAgICAgICAgIGludmFyaWFudChjb250ZXh0LCBcIllvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dC5sb2NhdGlvbjtcblxuICAgICAgICAgIGxldCBlbGVtZW50LCBtYXRjaDtcblxuICAgICAgICAgIC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgICAgIC8vIGhlcmUgYmVjYXVzZSB0b0FycmF5IGFkZHMga2V5cyB0byBhbGwgY2hpbGQgZWxlbWVudHMgYW5kIHdlIGRvIG5vdCB3YW50XG4gICAgICAgICAgLy8gdG8gdHJpZ2dlciBhbiB1bm1vdW50L3JlbW91bnQgZm9yIHR3byA8Um91dGU+cyB0aGF0IHJlbmRlciB0aGUgc2FtZVxuICAgICAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cbiAgICAgICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHRoaXMucHJvcHMuY2hpbGRyZW4sIGNoaWxkID0+IHtcbiAgICAgICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIFJlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkge1xuICAgICAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG5cbiAgICAgICAgICAgICAgY29uc3QgcGF0aCA9IGNoaWxkLnByb3BzLnBhdGggfHwgY2hpbGQucHJvcHMuZnJvbTtcblxuICAgICAgICAgICAgICBtYXRjaCA9IHBhdGhcbiAgICAgICAgICAgICAgICA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyAuLi5jaGlsZC5wcm9wcywgcGF0aCB9KVxuICAgICAgICAgICAgICAgIDogY29udGV4dC5tYXRjaDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHJldHVybiBtYXRjaFxuICAgICAgICAgICAgPyBSZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwgeyBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFN3aXRjaC5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG4gIH07XG5cbiAgU3dpdGNoLnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbihwcmV2UHJvcHMpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLFxuICAgICAgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gdW5jb250cm9sbGVkIHRvIGNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgaW5pdGlhbGx5IHVzZWQgbm8gXCJsb2NhdGlvblwiIHByb3AgYW5kIHRoZW4gcHJvdmlkZWQgb25lIG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLFxuICAgICAgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcblxuaW1wb3J0IENvbnRleHQgZnJvbSBcIi4vUm91dGVyQ29udGV4dC5qc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcblxuY29uc3QgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChDb250ZXh0KS5oaXN0b3J5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIixcbiAgICAgIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZUxvY2F0aW9uKClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChDb250ZXh0KS5sb2NhdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhcmFtcygpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIlxuICAgICk7XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IHVzZUNvbnRleHQoQ29udGV4dCkubWF0Y2g7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoLnBhcmFtcyA6IHt9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUm91dGVNYXRjaChwYXRoKSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIixcbiAgICAgIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiBwYXRoXG4gICAgPyBtYXRjaFBhdGgodXNlTG9jYXRpb24oKS5wYXRobmFtZSwgcGF0aClcbiAgICA6IHVzZUNvbnRleHQoQ29udGV4dCkubWF0Y2g7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuY2xhc3MgQnJvd3NlclJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuY2xhc3MgSGFzaFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjtcbiIsImltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxuZXhwb3J0IGNvbnN0IHJlc29sdmVUb0xvY2F0aW9uID0gKHRvLCBjdXJyZW50TG9jYXRpb24pID0+XG4gIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVG9Mb2NhdGlvbiA9ICh0bywgY3VycmVudExvY2F0aW9uKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCJcbiAgICA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pXG4gICAgOiB0bztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgeyByZXNvbHZlVG9Mb2NhdGlvbiwgbm9ybWFsaXplVG9Mb2NhdGlvbiB9IGZyb20gXCIuL3V0aWxzL2xvY2F0aW9uVXRpbHNcIjtcblxuLy8gUmVhY3QgMTUgY29tcGF0XG5jb25zdCBmb3J3YXJkUmVmU2hpbSA9IEMgPT4gQztcbmxldCB7IGZvcndhcmRSZWYgfSA9IFJlYWN0O1xuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gaXNNb2RpZmllZEV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiAhIShldmVudC5tZXRhS2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50LnNoaWZ0S2V5KTtcbn1cblxuY29uc3QgTGlua0FuY2hvciA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIG9uQ2xpY2ssXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgY29uc3QgeyB0YXJnZXQgfSA9IHJlc3Q7XG5cbiAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAuLi5yZXN0LFxuICAgICAgb25DbGljazogZXZlbnQgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIHRocm93IGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgICAgICBldmVudC5idXR0b24gPT09IDAgJiYgLy8gaWdub3JlIGV2ZXJ5dGhpbmcgYnV0IGxlZnQgY2xpY2tzXG4gICAgICAgICAgKCF0YXJnZXQgfHwgdGFyZ2V0ID09PSBcIl9zZWxmXCIpICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAgICAgIWlzTW9kaWZpZWRFdmVudChldmVudCkgLy8gaWdub3JlIGNsaWNrcyB3aXRoIG1vZGlmaWVyIGtleXNcbiAgICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICBuYXZpZ2F0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFJlYWN0IDE1IGNvbXBhdFxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gPGEgey4uLnByb3BzfSAvPjtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTGlua0FuY2hvci5kaXNwbGF5TmFtZSA9IFwiTGlua0FuY2hvclwiO1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuY29uc3QgTGluayA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBjb21wb25lbnQgPSBMaW5rQW5jaG9yLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIHRvLFxuICAgICAgaW5uZXJSZWYsIC8vIFRPRE86IGRlcHJlY2F0ZVxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgICAge2NvbnRleHQgPT4ge1xuICAgICAgICAgIGludmFyaWFudChjb250ZXh0LCBcIllvdSBzaG91bGQgbm90IHVzZSA8TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgeyBoaXN0b3J5IH0gPSBjb250ZXh0O1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKFxuICAgICAgICAgICAgcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pLFxuICAgICAgICAgICAgY29udGV4dC5sb2NhdGlvblxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcbiAgICAgICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgbmF2aWdhdGUoKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGxvY2F0aW9uID0gcmVzb2x2ZVRvTG9jYXRpb24odG8sIGNvbnRleHQubG9jYXRpb24pO1xuICAgICAgICAgICAgICBjb25zdCBtZXRob2QgPSByZXBsYWNlID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuXG4gICAgICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFJlYWN0IDE1IGNvbXBhdFxuICAgICAgICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICAgICAgICB9fVxuICAgICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIGNvbnN0IHRvVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLm9iamVjdCxcbiAgICBQcm9wVHlwZXMuZnVuY1xuICBdKTtcbiAgY29uc3QgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgIFByb3BUeXBlcy5zdHJpbmcsXG4gICAgUHJvcFR5cGVzLmZ1bmMsXG4gICAgUHJvcFR5cGVzLnNoYXBlKHsgY3VycmVudDogUHJvcFR5cGVzLmFueSB9KVxuICBdKTtcblxuICBMaW5rLmRpc3BsYXlOYW1lID0gXCJMaW5rXCI7XG5cbiAgTGluay5wcm9wVHlwZXMgPSB7XG4gICAgaW5uZXJSZWY6IHJlZlR5cGUsXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgcmVwbGFjZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgdGFyZ2V0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiB0b1R5cGUuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBMaW5rO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgX19Sb3V0ZXJDb250ZXh0IGFzIFJvdXRlckNvbnRleHQsIG1hdGNoUGF0aCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgTGluayBmcm9tIFwiLi9MaW5rXCI7XG5pbXBvcnQgeyByZXNvbHZlVG9Mb2NhdGlvbiwgbm9ybWFsaXplVG9Mb2NhdGlvbiB9IGZyb20gXCIuL3V0aWxzL2xvY2F0aW9uVXRpbHNcIjtcblxuLy8gUmVhY3QgMTUgY29tcGF0XG5jb25zdCBmb3J3YXJkUmVmU2hpbSA9IEMgPT4gQztcbmxldCB7IGZvcndhcmRSZWYgfSA9IFJlYWN0O1xuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoLi4uY2xhc3NuYW1lcykge1xuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoaSA9PiBpKS5qb2luKFwiIFwiKTtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCA9IFwicGFnZVwiLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gXCJhY3RpdmVcIixcbiAgICAgIGFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wLFxuICAgICAgZXhhY3QsXG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmVQcm9wLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICAgIHN0cmljdCxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIGlubmVyUmVmLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgICAgIGNvbnN0IHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKFxuICAgICAgICAgICAgcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWU6IHBhdGggfSA9IHRvTG9jYXRpb247XG4gICAgICAgICAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgICAgICAgICBjb25zdCBlc2NhcGVkUGF0aCA9XG4gICAgICAgICAgICBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVkUGF0aFxuICAgICAgICAgICAgPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICAgICAgICAgICAgZXhhY3QsXG4gICAgICAgICAgICAgICAgc3RyaWN0XG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgY29uc3QgaXNBY3RpdmUgPSAhIShpc0FjdGl2ZVByb3BcbiAgICAgICAgICAgID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pXG4gICAgICAgICAgICA6IG1hdGNoKTtcblxuICAgICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IGlzQWN0aXZlXG4gICAgICAgICAgICA/IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZVByb3AsIGFjdGl2ZUNsYXNzTmFtZSlcbiAgICAgICAgICAgIDogY2xhc3NOYW1lUHJvcDtcbiAgICAgICAgICBjb25zdCBzdHlsZSA9IGlzQWN0aXZlID8geyAuLi5zdHlsZVByb3AsIC4uLmFjdGl2ZVN0eWxlIH0gOiBzdHlsZVByb3A7XG5cbiAgICAgICAgICBjb25zdCBwcm9wcyA9IHtcbiAgICAgICAgICAgIFwiYXJpYS1jdXJyZW50XCI6IChpc0FjdGl2ZSAmJiBhcmlhQ3VycmVudCkgfHwgbnVsbCxcbiAgICAgICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgICAgIHN0eWxlLFxuICAgICAgICAgICAgdG86IHRvTG9jYXRpb24sXG4gICAgICAgICAgICAuLi5yZXN0XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIC8vIFJlYWN0IDE1IGNvbXBhdFxuICAgICAgICAgIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgICAgICAgICAgcHJvcHMucmVmID0gZm9yd2FyZGVkUmVmIHx8IGlubmVyUmVmO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9wcy5pbm5lclJlZiA9IGlubmVyUmVmO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiA8TGluayB7Li4ucHJvcHN9IC8+O1xuICAgICAgICB9fVxuICAgICAgPC9Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcblxuICBjb25zdCBhcmlhQ3VycmVudFR5cGUgPSBQcm9wVHlwZXMub25lT2YoW1xuICAgIFwicGFnZVwiLFxuICAgIFwic3RlcFwiLFxuICAgIFwibG9jYXRpb25cIixcbiAgICBcImRhdGVcIixcbiAgICBcInRpbWVcIixcbiAgICBcInRydWVcIlxuICBdKTtcblxuICBOYXZMaW5rLnByb3BUeXBlcyA9IHtcbiAgICAuLi5MaW5rLnByb3BUeXBlcyxcbiAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudFR5cGUsXG4gICAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluaztcbiIsImltcG9ydCB7XG4gIERvY3VtZW50Tm9kZSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUsXG4gIFNlbGVjdGlvblNldE5vZGUsXG4gIEZpZWxkTm9kZSxcbiAgRnJhZ21lbnREZWZpbml0aW9uTm9kZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWVyeUZyb21Qb2pvKG9iajogYW55KTogRG9jdW1lbnROb2RlIHtcbiAgY29uc3Qgb3A6IE9wZXJhdGlvbkRlZmluaXRpb25Ob2RlID0ge1xuICAgIGtpbmQ6ICdPcGVyYXRpb25EZWZpbml0aW9uJyxcbiAgICBvcGVyYXRpb246ICdxdWVyeScsXG4gICAgbmFtZToge1xuICAgICAga2luZDogJ05hbWUnLFxuICAgICAgdmFsdWU6ICdHZW5lcmF0ZWRDbGllbnRRdWVyeScsXG4gICAgfSxcbiAgICBzZWxlY3Rpb25TZXQ6IHNlbGVjdGlvblNldEZyb21PYmoob2JqKSxcbiAgfTtcblxuICBjb25zdCBvdXQ6IERvY3VtZW50Tm9kZSA9IHtcbiAgICBraW5kOiAnRG9jdW1lbnQnLFxuICAgIGRlZmluaXRpb25zOiBbb3BdLFxuICB9O1xuXG4gIHJldHVybiBvdXQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcmFnbWVudEZyb21Qb2pvKG9iajogYW55LCB0eXBlbmFtZT86IHN0cmluZyk6IERvY3VtZW50Tm9kZSB7XG4gIGNvbnN0IGZyYWc6IEZyYWdtZW50RGVmaW5pdGlvbk5vZGUgPSB7XG4gICAga2luZDogJ0ZyYWdtZW50RGVmaW5pdGlvbicsXG4gICAgdHlwZUNvbmRpdGlvbjoge1xuICAgICAga2luZDogJ05hbWVkVHlwZScsXG4gICAgICBuYW1lOiB7XG4gICAgICAgIGtpbmQ6ICdOYW1lJyxcbiAgICAgICAgdmFsdWU6IHR5cGVuYW1lIHx8ICdfX0Zha2VUeXBlJyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICBuYW1lOiB7XG4gICAgICBraW5kOiAnTmFtZScsXG4gICAgICB2YWx1ZTogJ0dlbmVyYXRlZENsaWVudFF1ZXJ5JyxcbiAgICB9LFxuICAgIHNlbGVjdGlvblNldDogc2VsZWN0aW9uU2V0RnJvbU9iaihvYmopLFxuICB9O1xuXG4gIGNvbnN0IG91dDogRG9jdW1lbnROb2RlID0ge1xuICAgIGtpbmQ6ICdEb2N1bWVudCcsXG4gICAgZGVmaW5pdGlvbnM6IFtmcmFnXSxcbiAgfTtcblxuICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBzZWxlY3Rpb25TZXRGcm9tT2JqKG9iajogYW55KTogU2VsZWN0aW9uU2V0Tm9kZSB7XG4gIGlmIChcbiAgICB0eXBlb2Ygb2JqID09PSAnbnVtYmVyJyB8fFxuICAgIHR5cGVvZiBvYmogPT09ICdib29sZWFuJyB8fFxuICAgIHR5cGVvZiBvYmogPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICBvYmogPT09IG51bGxcbiAgKSB7XG4gICAgLy8gTm8gc2VsZWN0aW9uIHNldCBoZXJlXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgLy8gR3JhcGhRTCBxdWVyaWVzIGRvbid0IGluY2x1ZGUgYXJyYXlzXG4gICAgcmV0dXJuIHNlbGVjdGlvblNldEZyb21PYmoob2JqWzBdKTtcbiAgfVxuXG4gIC8vIE5vdyB3ZSBrbm93IGl0J3MgYW4gb2JqZWN0XG4gIGNvbnN0IHNlbGVjdGlvbnM6IEZpZWxkTm9kZVtdID0gW107XG5cbiAgT2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgY29uc3QgbmVzdGVkU2VsU2V0OiBTZWxlY3Rpb25TZXROb2RlID0gc2VsZWN0aW9uU2V0RnJvbU9iaihvYmpba2V5XSk7XG5cbiAgICBjb25zdCBmaWVsZDogRmllbGROb2RlID0ge1xuICAgICAga2luZDogJ0ZpZWxkJyxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICB2YWx1ZToga2V5LFxuICAgICAgfSxcbiAgICAgIHNlbGVjdGlvblNldDogbmVzdGVkU2VsU2V0IHx8IHVuZGVmaW5lZCxcbiAgICB9O1xuXG4gICAgc2VsZWN0aW9ucy5wdXNoKGZpZWxkKTtcbiAgfSk7XG5cbiAgY29uc3Qgc2VsZWN0aW9uU2V0OiBTZWxlY3Rpb25TZXROb2RlID0ge1xuICAgIGtpbmQ6ICdTZWxlY3Rpb25TZXQnLFxuICAgIHNlbGVjdGlvbnMsXG4gIH07XG5cbiAgcmV0dXJuIHNlbGVjdGlvblNldDtcbn1cblxuZXhwb3J0IGNvbnN0IGp1c3RUeXBlbmFtZVF1ZXJ5OiBEb2N1bWVudE5vZGUgPSB7XG4gIGtpbmQ6ICdEb2N1bWVudCcsXG4gIGRlZmluaXRpb25zOiBbXG4gICAge1xuICAgICAga2luZDogJ09wZXJhdGlvbkRlZmluaXRpb24nLFxuICAgICAgb3BlcmF0aW9uOiAncXVlcnknLFxuICAgICAgbmFtZTogbnVsbCxcbiAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6IG51bGwsXG4gICAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICAgIHNlbGVjdGlvblNldDoge1xuICAgICAgICBraW5kOiAnU2VsZWN0aW9uU2V0JyxcbiAgICAgICAgc2VsZWN0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtpbmQ6ICdGaWVsZCcsXG4gICAgICAgICAgICBhbGlhczogbnVsbCxcbiAgICAgICAgICAgIG5hbWU6IHtcbiAgICAgICAgICAgICAga2luZDogJ05hbWUnLFxuICAgICAgICAgICAgICB2YWx1ZTogJ19fdHlwZW5hbWUnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogW10sXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBbXSxcbiAgICAgICAgICAgIHNlbGVjdGlvblNldDogbnVsbCxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICB9LFxuICBdLFxufTtcbiIsImltcG9ydCB7IERhdGFQcm94eSB9IGZyb20gJy4vRGF0YVByb3h5JztcblxuZXhwb3J0IG5hbWVzcGFjZSBDYWNoZSB7XG4gIGV4cG9ydCB0eXBlIFdhdGNoQ2FsbGJhY2sgPSAobmV3RGF0YTogYW55KSA9PiB2b2lkO1xuICBleHBvcnQgaW50ZXJmYWNlIEV2aWN0aW9uUmVzdWx0IHtcbiAgICBzdWNjZXNzOiBCb29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBSZWFkT3B0aW9uczxUVmFyaWFibGVzID0gYW55PlxuICAgIGV4dGVuZHMgRGF0YVByb3h5LlF1ZXJ5PFRWYXJpYWJsZXM+IHtcbiAgICByb290SWQ/OiBzdHJpbmc7XG4gICAgcHJldmlvdXNSZXN1bHQ/OiBhbnk7XG4gICAgb3B0aW1pc3RpYzogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgV3JpdGVPcHRpb25zPFRSZXN1bHQgPSBhbnksIFRWYXJpYWJsZXMgPSBhbnk+XG4gICAgZXh0ZW5kcyBEYXRhUHJveHkuUXVlcnk8VFZhcmlhYmxlcz4ge1xuICAgIGRhdGFJZDogc3RyaW5nO1xuICAgIHJlc3VsdDogVFJlc3VsdDtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgRGlmZk9wdGlvbnMgZXh0ZW5kcyBSZWFkT3B0aW9ucyB7XG4gICAgcmV0dXJuUGFydGlhbERhdGE/OiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBXYXRjaE9wdGlvbnMgZXh0ZW5kcyBSZWFkT3B0aW9ucyB7XG4gICAgY2FsbGJhY2s6IFdhdGNoQ2FsbGJhY2s7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEV2aWN0T3B0aW9uczxUVmFyaWFibGVzID0gYW55PlxuICAgIGV4dGVuZHMgRGF0YVByb3h5LlF1ZXJ5PFRWYXJpYWJsZXM+IHtcbiAgICByb290SWQ/OiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgaW1wb3J0IERpZmZSZXN1bHQgPSBEYXRhUHJveHkuRGlmZlJlc3VsdDtcbiAgZXhwb3J0IGltcG9ydCBXcml0ZVF1ZXJ5T3B0aW9ucyA9IERhdGFQcm94eS5Xcml0ZVF1ZXJ5T3B0aW9ucztcbiAgZXhwb3J0IGltcG9ydCBXcml0ZUZyYWdtZW50T3B0aW9ucyA9IERhdGFQcm94eS5Xcml0ZUZyYWdtZW50T3B0aW9ucztcbiAgZXhwb3J0IGltcG9ydCBXcml0ZURhdGFPcHRpb25zID0gRGF0YVByb3h5LldyaXRlRGF0YU9wdGlvbnM7XG4gIGV4cG9ydCBpbXBvcnQgRnJhZ21lbnQgPSBEYXRhUHJveHkuRnJhZ21lbnQ7XG59XG4iLCJpbnRlcmZhY2UgTm9kZTxLLCBWPiB7XG4gIGtleTogSztcbiAgdmFsdWU6IFY7XG4gIG5ld2VyOiBOb2RlPEssIFY+IHwgbnVsbDtcbiAgb2xkZXI6IE5vZGU8SywgVj4gfCBudWxsO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0RGlzcG9zZSgpIHt9XG5cbmV4cG9ydCBjbGFzcyBDYWNoZTxLID0gYW55LCBWID0gYW55PiB7XG4gIHByaXZhdGUgbWFwID0gbmV3IE1hcDxLLCBOb2RlPEssIFY+PigpO1xuICBwcml2YXRlIG5ld2VzdDogTm9kZTxLLCBWPiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIG9sZGVzdDogTm9kZTxLLCBWPiB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbWF4ID0gSW5maW5pdHksXG4gICAgcHVibGljIGRpc3Bvc2U6ICh2YWx1ZTogViwga2V5OiBLKSA9PiB2b2lkID0gZGVmYXVsdERpc3Bvc2UsXG4gICkge31cblxuICBwdWJsaWMgaGFzKGtleTogSykge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXMoa2V5KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQoa2V5OiBLKSB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLmdldEVudHJ5KGtleSk7XG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRFbnRyeShrZXk6IEspOiBOb2RlPEssIFY+IHwgdm9pZCB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLm1hcC5nZXQoa2V5KTtcblxuICAgIGlmIChlbnRyeSAmJiBlbnRyeSAhPT0gdGhpcy5uZXdlc3QpIHtcbiAgICAgIGNvbnN0IHsgb2xkZXIsIG5ld2VyIH0gPSBlbnRyeTtcblxuICAgICAgaWYgKG5ld2VyKSB7XG4gICAgICAgIG5ld2VyLm9sZGVyID0gb2xkZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGRlcikge1xuICAgICAgICBvbGRlci5uZXdlciA9IG5ld2VyO1xuICAgICAgfVxuXG4gICAgICBlbnRyeS5vbGRlciA9IHRoaXMubmV3ZXN0O1xuICAgICAgZW50cnkub2xkZXIhLm5ld2VyID0gZW50cnk7XG5cbiAgICAgIGVudHJ5Lm5ld2VyID0gbnVsbDtcbiAgICAgIHRoaXMubmV3ZXN0ID0gZW50cnk7XG5cbiAgICAgIGlmIChlbnRyeSA9PT0gdGhpcy5vbGRlc3QpIHtcbiAgICAgICAgdGhpcy5vbGRlc3QgPSBuZXdlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZW50cnk7XG4gIH1cblxuICBwdWJsaWMgc2V0KGtleTogSywgdmFsdWU6IFYpIHtcbiAgICBsZXQgZW50cnkgPSB0aGlzLmdldEVudHJ5KGtleSk7XG4gICAgaWYgKGVudHJ5KSB7XG4gICAgICByZXR1cm4gZW50cnkudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG5cbiAgICBlbnRyeSA9IHtcbiAgICAgIGtleToga2V5LFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgbmV3ZXI6IG51bGwsXG4gICAgICBvbGRlcjogdGhpcy5uZXdlc3RcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMubmV3ZXN0KSB7XG4gICAgICB0aGlzLm5ld2VzdC5uZXdlciA9IGVudHJ5O1xuICAgIH1cblxuICAgIHRoaXMubmV3ZXN0ID0gZW50cnk7XG4gICAgdGhpcy5vbGRlc3QgPSB0aGlzLm9sZGVzdCB8fCBlbnRyeTtcblxuICAgIHRoaXMubWFwLnNldChrZXksIGVudHJ5KTtcblxuICAgIHJldHVybiBlbnRyeS52YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhbigpIHtcbiAgICB3aGlsZSAodGhpcy5vbGRlc3QgJiYgdGhpcy5tYXAuc2l6ZSA+IHRoaXMubWF4KSB7XG4gICAgICB0aGlzLmRlbGV0ZSh0aGlzLm9sZGVzdC5rZXkpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBkZWxldGUoa2V5OiBLKSB7XG4gICAgY29uc3QgZW50cnkgPSB0aGlzLm1hcC5nZXQoa2V5KTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGlmIChlbnRyeSA9PT0gdGhpcy5uZXdlc3QpIHtcbiAgICAgICAgdGhpcy5uZXdlc3QgPSBlbnRyeS5vbGRlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVudHJ5ID09PSB0aGlzLm9sZGVzdCkge1xuICAgICAgICB0aGlzLm9sZGVzdCA9IGVudHJ5Lm5ld2VyO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW50cnkubmV3ZXIpIHtcbiAgICAgICAgZW50cnkubmV3ZXIub2xkZXIgPSBlbnRyeS5vbGRlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGVudHJ5Lm9sZGVyKSB7XG4gICAgICAgIGVudHJ5Lm9sZGVyLm5ld2VyID0gZW50cnkubmV3ZXI7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWFwLmRlbGV0ZShrZXkpO1xuICAgICAgdGhpcy5kaXNwb3NlKGVudHJ5LnZhbHVlLCBrZXkpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiIsInR5cGUgQ29udGV4dCA9IHtcbiAgcGFyZW50OiBDb250ZXh0IHwgbnVsbDtcbiAgc2xvdHM6IHsgW3Nsb3RJZDogc3RyaW5nXTogYW55IH07XG59XG5cbi8vIFRoaXMgY3VycmVudENvbnRleHQgdmFyaWFibGUgd2lsbCBvbmx5IGJlIHVzZWQgaWYgdGhlIG1ha2VTbG90Q2xhc3Ncbi8vIGZ1bmN0aW9uIGlzIGNhbGxlZCwgd2hpY2ggaGFwcGVucyBvbmx5IGlmIHRoaXMgaXMgdGhlIGZpcnN0IGNvcHkgb2YgdGhlXG4vLyBAd3J5L2NvbnRleHQgcGFja2FnZSB0byBiZSBpbXBvcnRlZC5cbmxldCBjdXJyZW50Q29udGV4dDogQ29udGV4dCB8IG51bGwgPSBudWxsO1xuXG4vLyBUaGlzIHVuaXF1ZSBpbnRlcm5hbCBvYmplY3QgaXMgdXNlZCB0byBkZW5vdGUgdGhlIGFic2VuY2Ugb2YgYSB2YWx1ZVxuLy8gZm9yIGEgZ2l2ZW4gU2xvdCwgYW5kIGlzIG5ldmVyIGV4cG9zZWQgdG8gb3V0c2lkZSBjb2RlLlxuY29uc3QgTUlTU0lOR19WQUxVRTogYW55ID0ge307XG5cbmxldCBpZENvdW50ZXIgPSAxO1xuXG4vLyBBbHRob3VnaCB3ZSBjYW4ndCBkbyBhbnl0aGluZyBhYm91dCB0aGUgY29zdCBvZiBkdXBsaWNhdGVkIGNvZGUgZnJvbVxuLy8gYWNjaWRlbnRhbGx5IGJ1bmRsaW5nIG11bHRpcGxlIGNvcGllcyBvZiB0aGUgQHdyeS9jb250ZXh0IHBhY2thZ2UsIHdlIGNhblxuLy8gYXZvaWQgY3JlYXRpbmcgdGhlIFNsb3QgY2xhc3MgbW9yZSB0aGFuIG9uY2UgdXNpbmcgbWFrZVNsb3RDbGFzcy5cbmNvbnN0IG1ha2VTbG90Q2xhc3MgPSAoKSA9PiBjbGFzcyBTbG90PFRWYWx1ZT4ge1xuICAvLyBJZiB5b3UgaGF2ZSBhIFNsb3Qgb2JqZWN0LCB5b3UgY2FuIGZpbmQgb3V0IGl0cyBzbG90LmlkLCBidXQgeW91IGNhbm5vdFxuICAvLyBndWVzcyB0aGUgc2xvdC5pZCBvZiBhIFNsb3QgeW91IGRvbid0IGhhdmUgYWNjZXNzIHRvLCB0aGFua3MgdG8gdGhlXG4gIC8vIHJhbmRvbWl6ZWQgc3VmZml4LlxuICBwdWJsaWMgcmVhZG9ubHkgaWQgPSBbXG4gICAgXCJzbG90XCIsXG4gICAgaWRDb3VudGVyKyssXG4gICAgRGF0ZS5ub3coKSxcbiAgICBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxcbiAgXS5qb2luKFwiOlwiKTtcblxuICBwdWJsaWMgaGFzVmFsdWUoKSB7XG4gICAgZm9yIChsZXQgY29udGV4dCA9IGN1cnJlbnRDb250ZXh0OyBjb250ZXh0OyBjb250ZXh0ID0gY29udGV4dC5wYXJlbnQpIHtcbiAgICAgIC8vIFdlIHVzZSB0aGUgU2xvdCBvYmplY3QgaXNlbGYgYXMgYSBrZXkgdG8gaXRzIHZhbHVlLCB3aGljaCBtZWFucyB0aGVcbiAgICAgIC8vIHZhbHVlIGNhbm5vdCBiZSBvYnRhaW5lZCB3aXRob3V0IGEgcmVmZXJlbmNlIHRvIHRoZSBTbG90IG9iamVjdC5cbiAgICAgIGlmICh0aGlzLmlkIGluIGNvbnRleHQuc2xvdHMpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBjb250ZXh0LnNsb3RzW3RoaXMuaWRdO1xuICAgICAgICBpZiAodmFsdWUgPT09IE1JU1NJTkdfVkFMVUUpIGJyZWFrO1xuICAgICAgICBpZiAoY29udGV4dCAhPT0gY3VycmVudENvbnRleHQpIHtcbiAgICAgICAgICAvLyBDYWNoZSB0aGUgdmFsdWUgaW4gY3VycmVudENvbnRleHQuc2xvdHMgc28gdGhlIG5leHQgbG9va3VwIHdpbGxcbiAgICAgICAgICAvLyBiZSBmYXN0ZXIuIFRoaXMgY2FjaGluZyBpcyBzYWZlIGJlY2F1c2UgdGhlIHRyZWUgb2YgY29udGV4dHMgYW5kXG4gICAgICAgICAgLy8gdGhlIHZhbHVlcyBvZiB0aGUgc2xvdHMgYXJlIGxvZ2ljYWxseSBpbW11dGFibGUuXG4gICAgICAgICAgY3VycmVudENvbnRleHQhLnNsb3RzW3RoaXMuaWRdID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50Q29udGV4dCkge1xuICAgICAgLy8gSWYgYSB2YWx1ZSB3YXMgbm90IGZvdW5kIGZvciB0aGlzIFNsb3QsIGl0J3MgbmV2ZXIgZ29pbmcgdG8gYmUgZm91bmRcbiAgICAgIC8vIG5vIG1hdHRlciBob3cgbWFueSB0aW1lcyB3ZSBsb29rIGl0IHVwLCBzbyB3ZSBtaWdodCBhcyB3ZWxsIGNhY2hlXG4gICAgICAvLyB0aGUgYWJzZW5jZSBvZiB0aGUgdmFsdWUsIHRvby5cbiAgICAgIGN1cnJlbnRDb250ZXh0LnNsb3RzW3RoaXMuaWRdID0gTUlTU0lOR19WQUxVRTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHVibGljIGdldFZhbHVlKCk6IFRWYWx1ZSB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuaGFzVmFsdWUoKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnRDb250ZXh0IS5zbG90c1t0aGlzLmlkXSBhcyBUVmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHdpdGhWYWx1ZTxUUmVzdWx0LCBUQXJncyBleHRlbmRzIGFueVtdLCBUVGhpcyA9IGFueT4oXG4gICAgdmFsdWU6IFRWYWx1ZSxcbiAgICBjYWxsYmFjazogKHRoaXM6IFRUaGlzLCAuLi5hcmdzOiBUQXJncykgPT4gVFJlc3VsdCxcbiAgICAvLyBHaXZlbiB0aGUgcHJldmFsZW5jZSBvZiBhcnJvdyBmdW5jdGlvbnMsIHNwZWNpZnlpbmcgYXJndW1lbnRzIGlzIGxpa2VseVxuICAgIC8vIHRvIGJlIG11Y2ggbW9yZSBjb21tb24gdGhhbiBzcGVjaWZ5aW5nIGB0aGlzYCwgaGVuY2UgdGhpcyBvcmRlcmluZzpcbiAgICBhcmdzPzogVEFyZ3MsXG4gICAgdGhpc0FyZz86IFRUaGlzLFxuICApOiBUUmVzdWx0IHtcbiAgICBjb25zdCBzbG90cyA9IHtcbiAgICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAgIFt0aGlzLmlkXTogdmFsdWUsXG4gICAgfTtcbiAgICBjb25zdCBwYXJlbnQgPSBjdXJyZW50Q29udGV4dDtcbiAgICBjdXJyZW50Q29udGV4dCA9IHsgcGFyZW50LCBzbG90cyB9O1xuICAgIHRyeSB7XG4gICAgICAvLyBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkgYWxsb3dzIHRoZSBhcmd1bWVudHMgYXJyYXkgYXJndW1lbnQgdG8gYmVcbiAgICAgIC8vIG9taXR0ZWQgb3IgdW5kZWZpbmVkLCBzbyBhcmdzISBpcyBmaW5lIGhlcmUuXG4gICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpc0FyZyEsIGFyZ3MhKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudENvbnRleHQgPSBwYXJlbnQ7XG4gICAgfVxuICB9XG5cbiAgLy8gQ2FwdHVyZSB0aGUgY3VycmVudCBjb250ZXh0IGFuZCB3cmFwIGEgY2FsbGJhY2sgZnVuY3Rpb24gc28gdGhhdCBpdFxuICAvLyByZWVzdGFibGlzaGVzIHRoZSBjYXB0dXJlZCBjb250ZXh0IHdoZW4gY2FsbGVkLlxuICBzdGF0aWMgYmluZDxUQXJncyBleHRlbmRzIGFueVtdLCBUUmVzdWx0PihcbiAgICBjYWxsYmFjazogKC4uLmFyZ3M6IFRBcmdzKSA9PiBUUmVzdWx0LFxuICApIHtcbiAgICBjb25zdCBjb250ZXh0ID0gY3VycmVudENvbnRleHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0aGlzOiBhbnkpIHtcbiAgICAgIGNvbnN0IHNhdmVkID0gY3VycmVudENvbnRleHQ7XG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50Q29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMgYXMgYW55KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGN1cnJlbnRDb250ZXh0ID0gc2F2ZWQ7XG4gICAgICB9XG4gICAgfSBhcyB0eXBlb2YgY2FsbGJhY2s7XG4gIH1cblxuICAvLyBJbW1lZGlhdGVseSBydW4gYSBjYWxsYmFjayBmdW5jdGlvbiB3aXRob3V0IGFueSBjYXB0dXJlZCBjb250ZXh0LlxuICBzdGF0aWMgbm9Db250ZXh0PFRSZXN1bHQsIFRBcmdzIGV4dGVuZHMgYW55W10sIFRUaGlzID0gYW55PihcbiAgICBjYWxsYmFjazogKHRoaXM6IFRUaGlzLCAuLi5hcmdzOiBUQXJncykgPT4gVFJlc3VsdCxcbiAgICAvLyBHaXZlbiB0aGUgcHJldmFsZW5jZSBvZiBhcnJvdyBmdW5jdGlvbnMsIHNwZWNpZnlpbmcgYXJndW1lbnRzIGlzIGxpa2VseVxuICAgIC8vIHRvIGJlIG11Y2ggbW9yZSBjb21tb24gdGhhbiBzcGVjaWZ5aW5nIGB0aGlzYCwgaGVuY2UgdGhpcyBvcmRlcmluZzpcbiAgICBhcmdzPzogVEFyZ3MsXG4gICAgdGhpc0FyZz86IFRUaGlzLFxuICApIHtcbiAgICBpZiAoY3VycmVudENvbnRleHQpIHtcbiAgICAgIGNvbnN0IHNhdmVkID0gY3VycmVudENvbnRleHQ7XG4gICAgICB0cnkge1xuICAgICAgICBjdXJyZW50Q29udGV4dCA9IG51bGw7XG4gICAgICAgIC8vIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSBhbGxvd3MgdGhlIGFyZ3VtZW50cyBhcnJheSBhcmd1bWVudCB0byBiZVxuICAgICAgICAvLyBvbWl0dGVkIG9yIHVuZGVmaW5lZCwgc28gYXJncyEgaXMgZmluZSBoZXJlLlxuICAgICAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpc0FyZyEsIGFyZ3MhKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGN1cnJlbnRDb250ZXh0ID0gc2F2ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjYWxsYmFjay5hcHBseSh0aGlzQXJnISwgYXJncyEpO1xuICAgIH1cbiAgfVxufTtcblxuLy8gV2Ugc3RvcmUgYSBzaW5nbGUgZ2xvYmFsIGltcGxlbWVudGF0aW9uIG9mIHRoZSBTbG90IGNsYXNzIGFzIGEgcGVybWFuZW50XG4vLyBub24tZW51bWVyYWJsZSBzeW1ib2wgcHJvcGVydHkgb2YgdGhlIEFycmF5IGNvbnN0cnVjdG9yLiBUaGlzIG9iZnVzY2F0aW9uXG4vLyBkb2VzIG5vdGhpbmcgdG8gcHJldmVudCBhY2Nlc3MgdG8gdGhlIFNsb3QgY2xhc3MsIGJ1dCBhdCBsZWFzdCBpdCBlbnN1cmVzXG4vLyB0aGUgaW1wbGVtZW50YXRpb24gKGkuZS4gY3VycmVudENvbnRleHQpIGNhbm5vdCBiZSB0YW1wZXJlZCB3aXRoLCBhbmQgYWxsXG4vLyBjb3BpZXMgb2YgdGhlIEB3cnkvY29udGV4dCBwYWNrYWdlIChob3BlZnVsbHkganVzdCBvbmUpIHdpbGwgc2hhcmUgdGhlXG4vLyBzYW1lIFNsb3QgaW1wbGVtZW50YXRpb24uIFNpbmNlIHRoZSBmaXJzdCBjb3B5IG9mIHRoZSBAd3J5L2NvbnRleHQgcGFja2FnZVxuLy8gdG8gYmUgaW1wb3J0ZWQgd2lucywgdGhpcyB0ZWNobmlxdWUgaW1wb3NlcyBhIHZlcnkgaGlnaCBjb3N0IGZvciBhbnlcbi8vIGZ1dHVyZSBicmVha2luZyBjaGFuZ2VzIHRvIHRoZSBTbG90IGNsYXNzLlxuY29uc3QgZ2xvYmFsS2V5ID0gXCJAd3J5L2NvbnRleHQ6U2xvdFwiO1xuY29uc3QgaG9zdCA9IEFycmF5IGFzIGFueTtcblxuZXhwb3J0IGNvbnN0IFNsb3Q6IFJldHVyblR5cGU8dHlwZW9mIG1ha2VTbG90Q2xhc3M+ID0gaG9zdFtnbG9iYWxLZXldIHx8IGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgU2xvdCA9IG1ha2VTbG90Q2xhc3MoKTtcbiAgdHJ5IHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaG9zdCwgZ2xvYmFsS2V5LCB7XG4gICAgICB2YWx1ZTogaG9zdFtnbG9iYWxLZXldID0gU2xvdCxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfSBmaW5hbGx5IHtcbiAgICByZXR1cm4gU2xvdDtcbiAgfVxufSgpO1xuIiwiaW1wb3J0IHsgQW55RW50cnkgfSBmcm9tIFwiLi9lbnRyeVwiO1xuaW1wb3J0IHsgU2xvdCB9IGZyb20gXCJAd3J5L2NvbnRleHRcIjtcblxuZXhwb3J0IGNvbnN0IHBhcmVudEVudHJ5U2xvdCA9IG5ldyBTbG90PEFueUVudHJ5PigpO1xuXG5leHBvcnQge1xuICBiaW5kIGFzIGJpbmRDb250ZXh0LFxuICBub0NvbnRleHQsXG4gIHNldFRpbWVvdXQsXG4gIGFzeW5jRnJvbUdlbixcbn0gZnJvbSBcIkB3cnkvY29udGV4dFwiO1xuIiwiaW1wb3J0IHsgcGFyZW50RW50cnlTbG90IH0gZnJvbSBcIi4vY29udGV4dFwiO1xuaW1wb3J0IHsgT3B0aW1pc3RpY1dyYXBPcHRpb25zIH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuY29uc3QgcmV1c2FibGVFbXB0eUFycmF5OiBBbnlFbnRyeVtdID0gW107XG5jb25zdCBlbXB0eVNldFBvb2w6IFNldDxBbnlFbnRyeT5bXSA9IFtdO1xuY29uc3QgUE9PTF9UQVJHRVRfU0laRSA9IDEwMDtcblxuLy8gU2luY2UgdGhpcyBwYWNrYWdlIG1pZ2h0IGJlIHVzZWQgYnJvd3NlcnMsIHdlIHNob3VsZCBhdm9pZCB1c2luZyB0aGVcbi8vIE5vZGUgYnVpbHQtaW4gYXNzZXJ0IG1vZHVsZS5cbmZ1bmN0aW9uIGFzc2VydChjb25kaXRpb246IGFueSwgb3B0aW9uYWxNZXNzYWdlPzogc3RyaW5nKSB7XG4gIGlmICghIGNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihvcHRpb25hbE1lc3NhZ2UgfHwgXCJhc3NlcnRpb24gZmFpbHVyZVwiKTtcbiAgfVxufVxuXG4vLyBTaW5jZSBleGNlcHRpb25zIGFyZSBjYWNoZWQganVzdCBsaWtlIG5vcm1hbCB2YWx1ZXMsIHdlIG5lZWQgYW4gZWZmaWNpZW50XG4vLyB3YXkgb2YgcmVwcmVzZW50aW5nIHVua25vd24sIG9yZGluYXJ5LCBhbmQgZXhjZXB0aW9uYWwgdmFsdWVzLlxudHlwZSBWYWx1ZTxUPiA9XG4gIHwgW10gICAgICAgICAgIC8vIHVua25vd25cbiAgfCBbVF0gICAgICAgICAgLy8ga25vd24gdmFsdWVcbiAgfCBbdm9pZCwgYW55XTsgLy8ga25vd24gZXhjZXB0aW9uXG5cbmZ1bmN0aW9uIHZhbHVlSXMoYTogVmFsdWU8YW55PiwgYjogVmFsdWU8YW55Pikge1xuICBjb25zdCBsZW4gPSBhLmxlbmd0aDtcbiAgcmV0dXJuIChcbiAgICAvLyBVbmtub3duIHZhbHVlcyBhcmUgbm90IGVxdWFsIHRvIGVhY2ggb3RoZXIuXG4gICAgbGVuID4gMCAmJlxuICAgIC8vIEJvdGggdmFsdWVzIG11c3QgYmUgb3JkaW5hcnkgKG9yIGJvdGggZXhjZXB0aW9uYWwpIHRvIGJlIGVxdWFsLlxuICAgIGxlbiA9PT0gYi5sZW5ndGggJiZcbiAgICAvLyBUaGUgdW5kZXJseWluZyB2YWx1ZSBvciBleGNlcHRpb24gbXVzdCBiZSB0aGUgc2FtZS5cbiAgICBhW2xlbiAtIDFdID09PSBiW2xlbiAtIDFdXG4gICk7XG59XG5cbmZ1bmN0aW9uIHZhbHVlR2V0PFQ+KHZhbHVlOiBWYWx1ZTxUPik6IFQge1xuICBzd2l0Y2ggKHZhbHVlLmxlbmd0aCkge1xuICAgIGNhc2UgMDogdGhyb3cgbmV3IEVycm9yKFwidW5rbm93biB2YWx1ZVwiKTtcbiAgICBjYXNlIDE6IHJldHVybiB2YWx1ZVswXTtcbiAgICBjYXNlIDI6IHRocm93IHZhbHVlWzFdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHZhbHVlQ29weTxUPih2YWx1ZTogVmFsdWU8VD4pOiBWYWx1ZTxUPiB7XG4gIHJldHVybiB2YWx1ZS5zbGljZSgwKSBhcyBWYWx1ZTxUPjtcbn1cblxuZXhwb3J0IHR5cGUgQW55RW50cnkgPSBFbnRyeTxhbnksIGFueT47XG5cbmV4cG9ydCBjbGFzcyBFbnRyeTxUQXJncyBleHRlbmRzIGFueVtdLCBUVmFsdWU+IHtcbiAgcHVibGljIHN0YXRpYyBjb3VudCA9IDA7XG5cbiAgcHVibGljIHN1YnNjcmliZTogT3B0aW1pc3RpY1dyYXBPcHRpb25zPFRBcmdzPltcInN1YnNjcmliZVwiXTtcbiAgcHVibGljIHVuc3Vic2NyaWJlPzogKCkgPT4gYW55O1xuICBwdWJsaWMgcmVwb3J0T3JwaGFuPzogKHRoaXM6IEVudHJ5PFRBcmdzLCBUVmFsdWU+KSA9PiBhbnk7XG5cbiAgcHVibGljIHJlYWRvbmx5IHBhcmVudHMgPSBuZXcgU2V0PEFueUVudHJ5PigpO1xuICBwdWJsaWMgcmVhZG9ubHkgY2hpbGRWYWx1ZXMgPSBuZXcgTWFwPEFueUVudHJ5LCBWYWx1ZTxhbnk+PigpO1xuXG4gIC8vIFdoZW4gdGhpcyBFbnRyeSBoYXMgY2hpbGRyZW4gdGhhdCBhcmUgZGlydHksIHRoaXMgcHJvcGVydHkgYmVjb21lc1xuICAvLyBhIFNldCBjb250YWluaW5nIG90aGVyIEVudHJ5IG9iamVjdHMsIGJvcnJvd2VkIGZyb20gZW1wdHlTZXRQb29sLlxuICAvLyBXaGVuIHRoZSBzZXQgYmVjb21lcyBlbXB0eSwgaXQgZ2V0cyByZWN5Y2xlZCBiYWNrIHRvIGVtcHR5U2V0UG9vbC5cbiAgcHVibGljIGRpcnR5Q2hpbGRyZW46IFNldDxBbnlFbnRyeT4gfCBudWxsID0gbnVsbDtcblxuICBwdWJsaWMgZGlydHkgPSB0cnVlO1xuICBwdWJsaWMgcmVjb21wdXRpbmcgPSBmYWxzZTtcbiAgcHVibGljIHJlYWRvbmx5IHZhbHVlOiBWYWx1ZTxUVmFsdWU+ID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGZuOiAoLi4uYXJnczogVEFyZ3MpID0+IFRWYWx1ZSxcbiAgICBwdWJsaWMgYXJnczogVEFyZ3MsXG4gICkge1xuICAgICsrRW50cnkuY291bnQ7XG4gIH1cblxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGltcG9ydGFudCBtZXRob2Qgb2YgdGhlIEVudHJ5IEFQSSwgYmVjYXVzZSBpdFxuICAvLyBkZXRlcm1pbmVzIHdoZXRoZXIgdGhlIGNhY2hlZCB0aGlzLnZhbHVlIGNhbiBiZSByZXR1cm5lZCBpbW1lZGlhdGVseSxcbiAgLy8gb3IgbXVzdCBiZSByZWNvbXB1dGVkLiBUaGUgb3ZlcmFsbCBwZXJmb3JtYW5jZSBvZiB0aGUgY2FjaGluZyBzeXN0ZW1cbiAgLy8gZGVwZW5kcyBvbiB0aGUgdHJ1dGggb2YgdGhlIGZvbGxvd2luZyBvYnNlcnZhdGlvbnM6ICgxKSB0aGlzLmRpcnR5IGlzXG4gIC8vIHVzdWFsbHkgZmFsc2UsICgyKSB0aGlzLmRpcnR5Q2hpbGRyZW4gaXMgdXN1YWxseSBudWxsL2VtcHR5LCBhbmQgdGh1c1xuICAvLyAoMykgdmFsdWVHZXQodGhpcy52YWx1ZSkgaXMgdXN1YWxseSByZXR1cm5lZCB3aXRob3V0IHJlY29tcHV0YXRpb24uXG4gIHB1YmxpYyByZWNvbXB1dGUoKTogVFZhbHVlIHtcbiAgICBhc3NlcnQoISB0aGlzLnJlY29tcHV0aW5nLCBcImFscmVhZHkgcmVjb21wdXRpbmdcIik7XG5cbiAgICBpZiAoISByZW1lbWJlclBhcmVudCh0aGlzKSAmJiBtYXliZVJlcG9ydE9ycGhhbih0aGlzKSkge1xuICAgICAgLy8gVGhlIHJlY2lwaWVudCBvZiB0aGUgZW50cnkucmVwb3J0T3JwaGFuIGNhbGxiYWNrIGRlY2lkZWQgdG8gZGlzcG9zZVxuICAgICAgLy8gb2YgdGhpcyBvcnBoYW4gZW50cnkgYnkgY2FsbGluZyBlbnRyeS5kaXNwb3NlKCksIHNvIHdlIGRvbid0IG5lZWQgdG9cbiAgICAgIC8vIChhbmQgc2hvdWxkIG5vdCkgcHJvY2VlZCB3aXRoIHRoZSByZWNvbXB1dGF0aW9uLlxuICAgICAgcmV0dXJuIHZvaWQgMCBhcyBhbnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1pZ2h0QmVEaXJ0eSh0aGlzKVxuICAgICAgPyByZWFsbHlSZWNvbXB1dGUodGhpcylcbiAgICAgIDogdmFsdWVHZXQodGhpcy52YWx1ZSk7XG4gIH1cblxuICBwdWJsaWMgc2V0RGlydHkoKSB7XG4gICAgaWYgKHRoaXMuZGlydHkpIHJldHVybjtcbiAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcbiAgICB0aGlzLnZhbHVlLmxlbmd0aCA9IDA7XG4gICAgcmVwb3J0RGlydHkodGhpcyk7XG4gICAgLy8gV2UgY2FuIGdvIGFoZWFkIGFuZCB1bnN1YnNjcmliZSBoZXJlLCBzaW5jZSBhbnkgZnVydGhlciBkaXJ0eVxuICAgIC8vIG5vdGlmaWNhdGlvbnMgd2UgcmVjZWl2ZSB3aWxsIGJlIHJlZHVuZGFudCwgYW5kIHVuc3Vic2NyaWJpbmcgbWF5XG4gICAgLy8gZnJlZSB1cCBzb21lIHJlc291cmNlcywgZS5nLiBmaWxlIHdhdGNoZXJzLlxuICAgIG1heWJlVW5zdWJzY3JpYmUodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgZGlzcG9zZSgpIHtcbiAgICBmb3JnZXRDaGlsZHJlbih0aGlzKS5mb3JFYWNoKG1heWJlUmVwb3J0T3JwaGFuKTtcbiAgICBtYXliZVVuc3Vic2NyaWJlKHRoaXMpO1xuXG4gICAgLy8gQmVjYXVzZSB0aGlzIGVudHJ5IGhhcyBiZWVuIGtpY2tlZCBvdXQgb2YgdGhlIGNhY2hlIChpbiBpbmRleC5qcyksXG4gICAgLy8gd2UndmUgbG9zdCB0aGUgYWJpbGl0eSB0byBmaW5kIG91dCBpZi93aGVuIHRoaXMgZW50cnkgYmVjb21lcyBkaXJ0eSxcbiAgICAvLyB3aGV0aGVyIHRoYXQgaGFwcGVucyB0aHJvdWdoIGEgc3Vic2NyaXB0aW9uLCBiZWNhdXNlIG9mIGEgZGlyZWN0IGNhbGxcbiAgICAvLyB0byBlbnRyeS5zZXREaXJ0eSgpLCBvciBiZWNhdXNlIG9uZSBvZiBpdHMgY2hpbGRyZW4gYmVjb21lcyBkaXJ0eS5cbiAgICAvLyBCZWNhdXNlIG9mIHRoaXMgbG9zcyBvZiBmdXR1cmUgaW5mb3JtYXRpb24sIHdlIGhhdmUgdG8gYXNzdW1lIHRoZVxuICAgIC8vIHdvcnN0ICh0aGF0IHRoaXMgZW50cnkgbWlnaHQgaGF2ZSBiZWNvbWUgZGlydHkgdmVyeSBzb29uKSwgc28gd2UgbXVzdFxuICAgIC8vIGltbWVkaWF0ZWx5IG1hcmsgdGhpcyBlbnRyeSdzIHBhcmVudHMgYXMgZGlydHkuIE5vcm1hbGx5IHdlIGNvdWxkXG4gICAgLy8ganVzdCBjYWxsIGVudHJ5LnNldERpcnR5KCkgcmF0aGVyIHRoYW4gY2FsbGluZyBwYXJlbnQuc2V0RGlydHkoKSBmb3JcbiAgICAvLyBlYWNoIHBhcmVudCwgYnV0IHRoYXQgd291bGQgbGVhdmUgdGhpcyBlbnRyeSBpbiBwYXJlbnQuY2hpbGRWYWx1ZXNcbiAgICAvLyBhbmQgcGFyZW50LmRpcnR5Q2hpbGRyZW4sIHdoaWNoIHdvdWxkIHByZXZlbnQgdGhlIGNoaWxkIGZyb20gYmVpbmdcbiAgICAvLyB0cnVseSBmb3Jnb3R0ZW4uXG4gICAgdGhpcy5wYXJlbnRzLmZvckVhY2gocGFyZW50ID0+IHtcbiAgICAgIHBhcmVudC5zZXREaXJ0eSgpO1xuICAgICAgZm9yZ2V0Q2hpbGQocGFyZW50LCB0aGlzKTtcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1lbWJlclBhcmVudChjaGlsZDogQW55RW50cnkpIHtcbiAgY29uc3QgcGFyZW50ID0gcGFyZW50RW50cnlTbG90LmdldFZhbHVlKCk7XG4gIGlmIChwYXJlbnQpIHtcbiAgICBjaGlsZC5wYXJlbnRzLmFkZChwYXJlbnQpO1xuXG4gICAgaWYgKCEgcGFyZW50LmNoaWxkVmFsdWVzLmhhcyhjaGlsZCkpIHtcbiAgICAgIHBhcmVudC5jaGlsZFZhbHVlcy5zZXQoY2hpbGQsIFtdKTtcbiAgICB9XG5cbiAgICBpZiAobWlnaHRCZURpcnR5KGNoaWxkKSkge1xuICAgICAgcmVwb3J0RGlydHlDaGlsZChwYXJlbnQsIGNoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVwb3J0Q2xlYW5DaGlsZChwYXJlbnQsIGNoaWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFyZW50O1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlYWxseVJlY29tcHV0ZShlbnRyeTogQW55RW50cnkpIHtcbiAgLy8gU2luY2UgdGhpcyByZWNvbXB1dGF0aW9uIGlzIGxpa2VseSB0byByZS1yZW1lbWJlciBzb21lIG9mIHRoaXNcbiAgLy8gZW50cnkncyBjaGlsZHJlbiwgd2UgZm9yZ2V0IG91ciBjaGlsZHJlbiBoZXJlIGJ1dCBkbyBub3QgY2FsbFxuICAvLyBtYXliZVJlcG9ydE9ycGhhbiB1bnRpbCBhZnRlciB0aGUgcmVjb21wdXRhdGlvbiBmaW5pc2hlcy5cbiAgY29uc3Qgb3JpZ2luYWxDaGlsZHJlbiA9IGZvcmdldENoaWxkcmVuKGVudHJ5KTtcblxuICAvLyBTZXQgZW50cnkgYXMgdGhlIHBhcmVudCBlbnRyeSB3aGlsZSBjYWxsaW5nIHJlY29tcHV0ZU5ld1ZhbHVlKGVudHJ5KS5cbiAgcGFyZW50RW50cnlTbG90LndpdGhWYWx1ZShlbnRyeSwgcmVjb21wdXRlTmV3VmFsdWUsIFtlbnRyeV0pO1xuXG4gIGlmIChtYXliZVN1YnNjcmliZShlbnRyeSkpIHtcbiAgICAvLyBJZiB3ZSBzdWNjZXNzZnVsbHkgcmVjb21wdXRlZCBlbnRyeS52YWx1ZSBhbmQgZGlkIG5vdCBmYWlsIHRvXG4gICAgLy8gKHJlKXN1YnNjcmliZSwgdGhlbiB0aGlzIEVudHJ5IGlzIG5vIGxvbmdlciBleHBsaWNpdGx5IGRpcnR5LlxuICAgIHNldENsZWFuKGVudHJ5KTtcbiAgfVxuXG4gIC8vIE5vdyB0aGF0IHdlJ3ZlIGhhZCBhIGNoYW5jZSB0byByZS1yZW1lbWJlciBhbnkgY2hpbGRyZW4gdGhhdCB3ZXJlXG4gIC8vIGludm9sdmVkIGluIHRoZSByZWNvbXB1dGF0aW9uLCB3ZSBjYW4gc2FmZWx5IHJlcG9ydCBhbnkgb3JwaGFuXG4gIC8vIGNoaWxkcmVuIHRoYXQgcmVtYWluLlxuICBvcmlnaW5hbENoaWxkcmVuLmZvckVhY2gobWF5YmVSZXBvcnRPcnBoYW4pO1xuXG4gIHJldHVybiB2YWx1ZUdldChlbnRyeS52YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlY29tcHV0ZU5ld1ZhbHVlKGVudHJ5OiBBbnlFbnRyeSkge1xuICBlbnRyeS5yZWNvbXB1dGluZyA9IHRydWU7XG4gIC8vIFNldCBlbnRyeS52YWx1ZSBhcyB1bmtub3duLlxuICBlbnRyeS52YWx1ZS5sZW5ndGggPSAwO1xuICB0cnkge1xuICAgIC8vIElmIGVudHJ5LmZuIHN1Y2NlZWRzLCBlbnRyeS52YWx1ZSB3aWxsIGJlY29tZSBhIG5vcm1hbCBWYWx1ZS5cbiAgICBlbnRyeS52YWx1ZVswXSA9IGVudHJ5LmZuLmFwcGx5KG51bGwsIGVudHJ5LmFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSWYgZW50cnkuZm4gdGhyb3dzLCBlbnRyeS52YWx1ZSB3aWxsIGJlY29tZSBleGNlcHRpb25hbC5cbiAgICBlbnRyeS52YWx1ZVsxXSA9IGU7XG4gIH1cbiAgLy8gRWl0aGVyIHdheSwgdGhpcyBsaW5lIGlzIGFsd2F5cyByZWFjaGVkLlxuICBlbnRyeS5yZWNvbXB1dGluZyA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBtaWdodEJlRGlydHkoZW50cnk6IEFueUVudHJ5KSB7XG4gIHJldHVybiBlbnRyeS5kaXJ0eSB8fCAhIShlbnRyeS5kaXJ0eUNoaWxkcmVuICYmIGVudHJ5LmRpcnR5Q2hpbGRyZW4uc2l6ZSk7XG59XG5cbmZ1bmN0aW9uIHNldENsZWFuKGVudHJ5OiBBbnlFbnRyeSkge1xuICBlbnRyeS5kaXJ0eSA9IGZhbHNlO1xuXG4gIGlmIChtaWdodEJlRGlydHkoZW50cnkpKSB7XG4gICAgLy8gVGhpcyBFbnRyeSBtYXkgc3RpbGwgaGF2ZSBkaXJ0eSBjaGlsZHJlbiwgaW4gd2hpY2ggY2FzZSB3ZSBjYW4ndFxuICAgIC8vIGxldCBvdXIgcGFyZW50cyBrbm93IHdlJ3JlIGNsZWFuIGp1c3QgeWV0LlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHJlcG9ydENsZWFuKGVudHJ5KTtcbn1cblxuZnVuY3Rpb24gcmVwb3J0RGlydHkoY2hpbGQ6IEFueUVudHJ5KSB7XG4gIGNoaWxkLnBhcmVudHMuZm9yRWFjaChwYXJlbnQgPT4gcmVwb3J0RGlydHlDaGlsZChwYXJlbnQsIGNoaWxkKSk7XG59XG5cbmZ1bmN0aW9uIHJlcG9ydENsZWFuKGNoaWxkOiBBbnlFbnRyeSkge1xuICBjaGlsZC5wYXJlbnRzLmZvckVhY2gocGFyZW50ID0+IHJlcG9ydENsZWFuQ2hpbGQocGFyZW50LCBjaGlsZCkpO1xufVxuXG4vLyBMZXQgYSBwYXJlbnQgRW50cnkga25vdyB0aGF0IG9uZSBvZiBpdHMgY2hpbGRyZW4gbWF5IGJlIGRpcnR5LlxuZnVuY3Rpb24gcmVwb3J0RGlydHlDaGlsZChwYXJlbnQ6IEFueUVudHJ5LCBjaGlsZDogQW55RW50cnkpIHtcbiAgLy8gTXVzdCBoYXZlIGNhbGxlZCByZW1lbWJlclBhcmVudChjaGlsZCkgYmVmb3JlIGNhbGxpbmdcbiAgLy8gcmVwb3J0RGlydHlDaGlsZChwYXJlbnQsIGNoaWxkKS5cbiAgYXNzZXJ0KHBhcmVudC5jaGlsZFZhbHVlcy5oYXMoY2hpbGQpKTtcbiAgYXNzZXJ0KG1pZ2h0QmVEaXJ0eShjaGlsZCkpO1xuXG4gIGlmICghIHBhcmVudC5kaXJ0eUNoaWxkcmVuKSB7XG4gICAgcGFyZW50LmRpcnR5Q2hpbGRyZW4gPSBlbXB0eVNldFBvb2wucG9wKCkgfHwgbmV3IFNldDtcblxuICB9IGVsc2UgaWYgKHBhcmVudC5kaXJ0eUNoaWxkcmVuLmhhcyhjaGlsZCkpIHtcbiAgICAvLyBJZiB3ZSBhbHJlYWR5IGtub3cgdGhpcyBjaGlsZCBpcyBkaXJ0eSwgdGhlbiB3ZSBtdXN0IGhhdmUgYWxyZWFkeVxuICAgIC8vIGluZm9ybWVkIG91ciBvd24gcGFyZW50cyB0aGF0IHdlIGFyZSBkaXJ0eSwgc28gd2UgY2FuIHRlcm1pbmF0ZVxuICAgIC8vIHRoZSByZWN1cnNpb24gZWFybHkuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcGFyZW50LmRpcnR5Q2hpbGRyZW4uYWRkKGNoaWxkKTtcbiAgcmVwb3J0RGlydHkocGFyZW50KTtcbn1cblxuLy8gTGV0IGEgcGFyZW50IEVudHJ5IGtub3cgdGhhdCBvbmUgb2YgaXRzIGNoaWxkcmVuIGlzIG5vIGxvbmdlciBkaXJ0eS5cbmZ1bmN0aW9uIHJlcG9ydENsZWFuQ2hpbGQocGFyZW50OiBBbnlFbnRyeSwgY2hpbGQ6IEFueUVudHJ5KSB7XG4gIC8vIE11c3QgaGF2ZSBjYWxsZWQgcmVtZW1iZXJDaGlsZChjaGlsZCkgYmVmb3JlIGNhbGxpbmdcbiAgLy8gcmVwb3J0Q2xlYW5DaGlsZChwYXJlbnQsIGNoaWxkKS5cbiAgYXNzZXJ0KHBhcmVudC5jaGlsZFZhbHVlcy5oYXMoY2hpbGQpKTtcbiAgYXNzZXJ0KCEgbWlnaHRCZURpcnR5KGNoaWxkKSk7XG5cbiAgY29uc3QgY2hpbGRWYWx1ZSA9IHBhcmVudC5jaGlsZFZhbHVlcy5nZXQoY2hpbGQpITtcbiAgaWYgKGNoaWxkVmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgcGFyZW50LmNoaWxkVmFsdWVzLnNldChjaGlsZCwgdmFsdWVDb3B5KGNoaWxkLnZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoISB2YWx1ZUlzKGNoaWxkVmFsdWUsIGNoaWxkLnZhbHVlKSkge1xuICAgIHBhcmVudC5zZXREaXJ0eSgpO1xuICB9XG5cbiAgcmVtb3ZlRGlydHlDaGlsZChwYXJlbnQsIGNoaWxkKTtcblxuICBpZiAobWlnaHRCZURpcnR5KHBhcmVudCkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXBvcnRDbGVhbihwYXJlbnQpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVEaXJ0eUNoaWxkKHBhcmVudDogQW55RW50cnksIGNoaWxkOiBBbnlFbnRyeSkge1xuICBjb25zdCBkYyA9IHBhcmVudC5kaXJ0eUNoaWxkcmVuO1xuICBpZiAoZGMpIHtcbiAgICBkYy5kZWxldGUoY2hpbGQpO1xuICAgIGlmIChkYy5zaXplID09PSAwKSB7XG4gICAgICBpZiAoZW1wdHlTZXRQb29sLmxlbmd0aCA8IFBPT0xfVEFSR0VUX1NJWkUpIHtcbiAgICAgICAgZW1wdHlTZXRQb29sLnB1c2goZGMpO1xuICAgICAgfVxuICAgICAgcGFyZW50LmRpcnR5Q2hpbGRyZW4gPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG4vLyBJZiB0aGUgZ2l2ZW4gZW50cnkgaGFzIGEgcmVwb3J0T3JwaGFuIG1ldGhvZCwgYW5kIG5vIHJlbWFpbmluZyBwYXJlbnRzLFxuLy8gY2FsbCBlbnRyeS5yZXBvcnRPcnBoYW4gYW5kIHJldHVybiB0cnVlIGlmZiBpdCByZXR1cm5zIHRydWUuIFRoZVxuLy8gcmVwb3J0T3JwaGFuIGZ1bmN0aW9uIHNob3VsZCByZXR1cm4gdHJ1ZSB0byBpbmRpY2F0ZSBlbnRyeS5kaXNwb3NlKClcbi8vIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHRoZSBlbnRyeSBoYXMgYmVlbiByZW1vdmVkIGZyb20gYW55IG90aGVyIGNhY2hlc1xuLy8gKHNlZSBpbmRleC5qcyBmb3IgdGhlIG9ubHkgY3VycmVudCBleGFtcGxlKS5cbmZ1bmN0aW9uIG1heWJlUmVwb3J0T3JwaGFuKGVudHJ5OiBBbnlFbnRyeSkge1xuICByZXR1cm4gZW50cnkucGFyZW50cy5zaXplID09PSAwICYmXG4gICAgdHlwZW9mIGVudHJ5LnJlcG9ydE9ycGhhbiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgZW50cnkucmVwb3J0T3JwaGFuKCkgPT09IHRydWU7XG59XG5cbi8vIFJlbW92ZXMgYWxsIGNoaWxkcmVuIGZyb20gdGhpcyBlbnRyeSBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVcbi8vIHJlbW92ZWQgY2hpbGRyZW4uXG5mdW5jdGlvbiBmb3JnZXRDaGlsZHJlbihwYXJlbnQ6IEFueUVudHJ5KSB7XG4gIGxldCBjaGlsZHJlbiA9IHJldXNhYmxlRW1wdHlBcnJheTtcblxuICBpZiAocGFyZW50LmNoaWxkVmFsdWVzLnNpemUgPiAwKSB7XG4gICAgY2hpbGRyZW4gPSBbXTtcbiAgICBwYXJlbnQuY2hpbGRWYWx1ZXMuZm9yRWFjaCgoX3ZhbHVlLCBjaGlsZCkgPT4ge1xuICAgICAgZm9yZ2V0Q2hpbGQocGFyZW50LCBjaGlsZCk7XG4gICAgICBjaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEFmdGVyIHdlIGZvcmdldCBhbGwgb3VyIGNoaWxkcmVuLCB0aGlzLmRpcnR5Q2hpbGRyZW4gbXVzdCBiZSBlbXB0eVxuICAvLyBhbmQgdGhlcmVmb3JlIG11c3QgaGF2ZSBiZWVuIHJlc2V0IHRvIG51bGwuXG4gIGFzc2VydChwYXJlbnQuZGlydHlDaGlsZHJlbiA9PT0gbnVsbCk7XG5cbiAgcmV0dXJuIGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBmb3JnZXRDaGlsZChwYXJlbnQ6IEFueUVudHJ5LCBjaGlsZDogQW55RW50cnkpIHtcbiAgY2hpbGQucGFyZW50cy5kZWxldGUocGFyZW50KTtcbiAgcGFyZW50LmNoaWxkVmFsdWVzLmRlbGV0ZShjaGlsZCk7XG4gIHJlbW92ZURpcnR5Q2hpbGQocGFyZW50LCBjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIG1heWJlU3Vic2NyaWJlKGVudHJ5OiBBbnlFbnRyeSkge1xuICBpZiAodHlwZW9mIGVudHJ5LnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdHJ5IHtcbiAgICAgIG1heWJlVW5zdWJzY3JpYmUoZW50cnkpOyAvLyBQcmV2ZW50IGRvdWJsZSBzdWJzY3JpcHRpb25zLlxuICAgICAgZW50cnkudW5zdWJzY3JpYmUgPSBlbnRyeS5zdWJzY3JpYmUuYXBwbHkobnVsbCwgZW50cnkuYXJncyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gSWYgdGhpcyBFbnRyeSBoYXMgYSBzdWJzY3JpYmUgZnVuY3Rpb24gYW5kIGl0IHRocmV3IGFuIGV4Y2VwdGlvblxuICAgICAgLy8gKG9yIGFuIHVuc3Vic2NyaWJlIGZ1bmN0aW9uIGl0IHByZXZpb3VzbHkgcmV0dXJuZWQgbm93IHRocm93cyksXG4gICAgICAvLyByZXR1cm4gZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCB3ZSB3ZXJlIG5vdCBhYmxlIHRvIHN1YnNjcmliZSAob3JcbiAgICAgIC8vIHVuc3Vic2NyaWJlKSwgYW5kIHRoaXMgRW50cnkgc2hvdWxkIHJlbWFpbiBkaXJ0eS5cbiAgICAgIGVudHJ5LnNldERpcnR5KCk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuaW5nIHRydWUgaW5kaWNhdGVzIGVpdGhlciB0aGF0IHRoZXJlIHdhcyBubyBlbnRyeS5zdWJzY3JpYmVcbiAgLy8gZnVuY3Rpb24gb3IgdGhhdCBpdCBzdWNjZWVkZWQuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBtYXliZVVuc3Vic2NyaWJlKGVudHJ5OiBBbnlFbnRyeSkge1xuICBjb25zdCB7IHVuc3Vic2NyaWJlIH0gPSBlbnRyeTtcbiAgaWYgKHR5cGVvZiB1bnN1YnNjcmliZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgZW50cnkudW5zdWJzY3JpYmUgPSB2b2lkIDA7XG4gICAgdW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuIiwiLy8gQSB0cmllIGRhdGEgc3RydWN0dXJlIHRoYXQgaG9sZHMgb2JqZWN0IGtleXMgd2Vha2x5LCB5ZXQgY2FuIGFsc28gaG9sZFxuLy8gbm9uLW9iamVjdCBrZXlzLCB1bmxpa2UgdGhlIG5hdGl2ZSBgV2Vha01hcGAuXG5leHBvcnQgY2xhc3MgS2V5VHJpZTxLPiB7XG4gIC8vIFNpbmNlIGEgYFdlYWtNYXBgIGNhbm5vdCBob2xkIHByaW1pdGl2ZSB2YWx1ZXMgYXMga2V5cywgd2UgbmVlZCBhXG4gIC8vIGJhY2t1cCBgTWFwYCBpbnN0YW5jZSB0byBob2xkIHByaW1pdGl2ZSBrZXlzLiBCb3RoIGB0aGlzLl93ZWFrTWFwYFxuICAvLyBhbmQgYHRoaXMuX3N0cm9uZ01hcGAgYXJlIGxhemlseSBpbml0aWFsaXplZC5cbiAgcHJpdmF0ZSB3ZWFrPzogV2Vha01hcDxhbnksIEtleVRyaWU8Sz4+O1xuICBwcml2YXRlIHN0cm9uZz86IE1hcDxhbnksIEtleVRyaWU8Sz4+O1xuICBwcml2YXRlIGRhdGE/OiBLO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgd2Vha25lc3M6IGJvb2xlYW4pIHt9XG5cbiAgcHVibGljIGxvb2t1cDxUIGV4dGVuZHMgYW55W10+KC4uLmFycmF5OiBUKTogSyB7XG4gICAgcmV0dXJuIHRoaXMubG9va3VwQXJyYXkoYXJyYXkpO1xuICB9XG5cbiAgcHVibGljIGxvb2t1cEFycmF5PFQgZXh0ZW5kcyBhbnlbXT4oYXJyYXk6IFQpOiBLIHtcbiAgICBsZXQgbm9kZTogS2V5VHJpZTxLPiA9IHRoaXM7XG4gICAgYXJyYXkuZm9yRWFjaChrZXkgPT4gbm9kZSA9IG5vZGUuZ2V0Q2hpbGRUcmllKGtleSkpO1xuICAgIHJldHVybiBub2RlLmRhdGEgfHwgKG5vZGUuZGF0YSA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDaGlsZFRyaWUoa2V5OiBhbnkpIHtcbiAgICBjb25zdCBtYXAgPSB0aGlzLndlYWtuZXNzICYmIGlzT2JqUmVmKGtleSlcbiAgICAgID8gdGhpcy53ZWFrIHx8ICh0aGlzLndlYWsgPSBuZXcgV2Vha01hcDxhbnksIEtleVRyaWU8Sz4+KCkpXG4gICAgICA6IHRoaXMuc3Ryb25nIHx8ICh0aGlzLnN0cm9uZyA9IG5ldyBNYXA8YW55LCBLZXlUcmllPEs+PigpKTtcbiAgICBsZXQgY2hpbGQgPSBtYXAuZ2V0KGtleSk7XG4gICAgaWYgKCFjaGlsZCkgbWFwLnNldChrZXksIGNoaWxkID0gbmV3IEtleVRyaWU8Sz4odGhpcy53ZWFrbmVzcykpO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc09ialJlZih2YWx1ZTogYW55KSB7XG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gIGNhc2UgXCJvYmplY3RcIjpcbiAgICBpZiAodmFsdWUgPT09IG51bGwpIGJyZWFrO1xuICAgIC8vIEZhbGwgdGhyb3VnaCB0byByZXR1cm4gdHJ1ZS4uLlxuICBjYXNlIFwiZnVuY3Rpb25cIjpcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG4iLCJpbXBvcnQgeyBPcGVyYXRpb24gfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBwcmludCB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvcHJpbnRlcic7XG5pbXBvcnQgeyBJbnZhcmlhbnRFcnJvciB9IGZyb20gJ3RzLWludmFyaWFudCc7XG5cbi8qXG4gKiBIdHRwIFV0aWxpdGllczogc2hhcmVkIGFjcm9zcyBsaW5rcyB0aGF0IG1ha2UgaHR0cCByZXF1ZXN0c1xuICovXG5cbi8vIFhYWCByZXBsYWNlIHdpdGggYWN0dWFsIHR5cGluZ3Mgd2hlbiBhdmFpbGFibGVcbmRlY2xhcmUgdmFyIEFib3J0Q29udHJvbGxlcjogYW55O1xuXG4vL1VzZWQgZm9yIGFueSBFcnJvciBmb3IgZGF0YSBmcm9tIHRoZSBzZXJ2ZXJcbi8vb24gYSByZXF1ZXN0IHdpdGggYSBTdGF0dXMgPj0gMzAwXG4vL3Jlc3BvbnNlIGNvbnRhaW5zIG5vIGRhdGEgb3IgZXJyb3JzXG5leHBvcnQgdHlwZSBTZXJ2ZXJFcnJvciA9IEVycm9yICYge1xuICByZXNwb25zZTogUmVzcG9uc2U7XG4gIHJlc3VsdDogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgc3RhdHVzQ29kZTogbnVtYmVyO1xufTtcblxuLy9UaHJvd24gd2hlbiBzZXJ2ZXIncyByZXNvbnNlIGlzIGNhbm5vdCBiZSBwYXJzZWRcbmV4cG9ydCB0eXBlIFNlcnZlclBhcnNlRXJyb3IgPSBFcnJvciAmIHtcbiAgcmVzcG9uc2U6IFJlc3BvbnNlO1xuICBzdGF0dXNDb2RlOiBudW1iZXI7XG4gIGJvZHlUZXh0OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBDbGllbnRQYXJzZUVycm9yID0gSW52YXJpYW50RXJyb3IgJiB7XG4gIHBhcnNlRXJyb3I6IEVycm9yO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBIdHRwUXVlcnlPcHRpb25zIHtcbiAgaW5jbHVkZVF1ZXJ5PzogYm9vbGVhbjtcbiAgaW5jbHVkZUV4dGVuc2lvbnM/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEh0dHBDb25maWcge1xuICBodHRwPzogSHR0cFF1ZXJ5T3B0aW9ucztcbiAgb3B0aW9ucz86IGFueTtcbiAgaGVhZGVycz86IGFueTsgLy9vdmVycmlkZXMgaGVhZGVycyBpbiBvcHRpb25zXG4gIGNyZWRlbnRpYWxzPzogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVyaUZ1bmN0aW9uIHtcbiAgKG9wZXJhdGlvbjogT3BlcmF0aW9uKTogc3RyaW5nO1xufVxuXG4vLyBUaGUgYm9keSBvZiBhIEdyYXBoUUwtb3Zlci1IVFRQLVBPU1QgcmVxdWVzdC5cbmV4cG9ydCBpbnRlcmZhY2UgQm9keSB7XG4gIHF1ZXJ5Pzogc3RyaW5nO1xuICBvcGVyYXRpb25OYW1lPzogc3RyaW5nO1xuICB2YXJpYWJsZXM/OiBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuICBleHRlbnNpb25zPzogUmVjb3JkPHN0cmluZywgYW55Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIdHRwT3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgVVJJIHRvIHVzZSB3aGVuIGZldGNoaW5nIG9wZXJhdGlvbnMuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvICcvZ3JhcGhxbCcuXG4gICAqL1xuICB1cmk/OiBzdHJpbmcgfCBVcmlGdW5jdGlvbjtcblxuICAvKipcbiAgICogUGFzc2VzIHRoZSBleHRlbnNpb25zIGZpZWxkIHRvIHlvdXIgZ3JhcGhxbCBzZXJ2ZXIuXG4gICAqXG4gICAqIERlZmF1bHRzIHRvIGZhbHNlLlxuICAgKi9cbiAgaW5jbHVkZUV4dGVuc2lvbnM/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGBmZXRjaGAtY29tcGF0aWJsZSBBUEkgdG8gdXNlIHdoZW4gbWFraW5nIHJlcXVlc3RzLlxuICAgKi9cbiAgZmV0Y2g/OiBXaW5kb3dPcldvcmtlckdsb2JhbFNjb3BlWydmZXRjaCddO1xuXG4gIC8qKlxuICAgKiBBbiBvYmplY3QgcmVwcmVzZW50aW5nIHZhbHVlcyB0byBiZSBzZW50IGFzIGhlYWRlcnMgb24gdGhlIHJlcXVlc3QuXG4gICAqL1xuICBoZWFkZXJzPzogYW55O1xuXG4gIC8qKlxuICAgKiBUaGUgY3JlZGVudGlhbHMgcG9saWN5IHlvdSB3YW50IHRvIHVzZSBmb3IgdGhlIGZldGNoIGNhbGwuXG4gICAqL1xuICBjcmVkZW50aWFscz86IHN0cmluZztcblxuICAvKipcbiAgICogQW55IG92ZXJyaWRlcyBvZiB0aGUgZmV0Y2ggb3B0aW9ucyBhcmd1bWVudCB0byBwYXNzIHRvIHRoZSBmZXRjaCBjYWxsLlxuICAgKi9cbiAgZmV0Y2hPcHRpb25zPzogYW55O1xufVxuXG5jb25zdCBkZWZhdWx0SHR0cE9wdGlvbnM6IEh0dHBRdWVyeU9wdGlvbnMgPSB7XG4gIGluY2x1ZGVRdWVyeTogdHJ1ZSxcbiAgaW5jbHVkZUV4dGVuc2lvbnM6IGZhbHNlLFxufTtcblxuY29uc3QgZGVmYXVsdEhlYWRlcnMgPSB7XG4gIC8vIGhlYWRlcnMgYXJlIGNhc2UgaW5zZW5zaXRpdmUgKGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MjU5MDA0KVxuICBhY2NlcHQ6ICcqLyonLFxuICAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxufTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIG1ldGhvZDogJ1BPU1QnLFxufTtcblxuZXhwb3J0IGNvbnN0IGZhbGxiYWNrSHR0cENvbmZpZyA9IHtcbiAgaHR0cDogZGVmYXVsdEh0dHBPcHRpb25zLFxuICBoZWFkZXJzOiBkZWZhdWx0SGVhZGVycyxcbiAgb3B0aW9uczogZGVmYXVsdE9wdGlvbnMsXG59O1xuXG5leHBvcnQgY29uc3QgdGhyb3dTZXJ2ZXJFcnJvciA9IChyZXNwb25zZSwgcmVzdWx0LCBtZXNzYWdlKSA9PiB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpIGFzIFNlcnZlckVycm9yO1xuXG4gIGVycm9yLm5hbWUgPSAnU2VydmVyRXJyb3InO1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzO1xuICBlcnJvci5yZXN1bHQgPSByZXN1bHQ7XG5cbiAgdGhyb3cgZXJyb3I7XG59O1xuXG4vL1RPRE86IHdoZW4gY29uZGl0aW9uYWwgdHlwZXMgY29tZSBpbiB0cyAyLjgsIG9wZXJhdGlvbnMgc2hvdWxkIGJlIGEgZ2VuZXJpYyB0eXBlIHRoYXQgZXh0ZW5kcyBPcGVyYXRpb24gfCBBcnJheTxPcGVyYXRpb24+XG5leHBvcnQgY29uc3QgcGFyc2VBbmRDaGVja0h0dHBSZXNwb25zZSA9IG9wZXJhdGlvbnMgPT4gKHJlc3BvbnNlOiBSZXNwb25zZSkgPT4ge1xuICByZXR1cm4gKFxuICAgIHJlc3BvbnNlXG4gICAgICAudGV4dCgpXG4gICAgICAudGhlbihib2R5VGV4dCA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoYm9keVRleHQpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zdCBwYXJzZUVycm9yID0gZXJyIGFzIFNlcnZlclBhcnNlRXJyb3I7XG4gICAgICAgICAgcGFyc2VFcnJvci5uYW1lID0gJ1NlcnZlclBhcnNlRXJyb3InO1xuICAgICAgICAgIHBhcnNlRXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgICAgICAgICBwYXJzZUVycm9yLnN0YXR1c0NvZGUgPSByZXNwb25zZS5zdGF0dXM7XG4gICAgICAgICAgcGFyc2VFcnJvci5ib2R5VGV4dCA9IGJvZHlUZXh0O1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChwYXJzZUVycm9yKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC8vVE9ETzogd2hlbiBjb25kaXRpb25hbCB0eXBlcyBjb21lIG91dCB0aGVuIHJlc3VsdCBzaG91bGQgYmUgVCBleHRlbmRzIEFycmF5ID8gQXJyYXk8RmV0Y2hSZXN1bHQ+IDogRmV0Y2hSZXN1bHRcbiAgICAgIC50aGVuKChyZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDMwMCkge1xuICAgICAgICAgIC8vTmV0d29yayBlcnJvclxuICAgICAgICAgIHRocm93U2VydmVyRXJyb3IoXG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgIGBSZXNwb25zZSBub3Qgc3VjY2Vzc2Z1bDogUmVjZWl2ZWQgc3RhdHVzIGNvZGUgJHtyZXNwb25zZS5zdGF0dXN9YCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIC8vVE9ETyBzaG91bGQgcmVhbGx5IGVycm9yIHBlciByZXNwb25zZSBpbiBhIEJhdGNoIGJhc2VkIG9uIHByb3BlcnRpZXNcbiAgICAgICAgLy8gICAgLSBjb3VsZCBiZSBkb25lIGluIGEgdmFsaWRhdGlvbiBsaW5rXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhQXJyYXkuaXNBcnJheShyZXN1bHQpICYmXG4gICAgICAgICAgIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnZGF0YScpICYmXG4gICAgICAgICAgIXJlc3VsdC5oYXNPd25Qcm9wZXJ0eSgnZXJyb3JzJylcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy9EYXRhIGVycm9yXG4gICAgICAgICAgdGhyb3dTZXJ2ZXJFcnJvcihcbiAgICAgICAgICAgIHJlc3BvbnNlLFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgYFNlcnZlciByZXNwb25zZSB3YXMgbWlzc2luZyBmb3IgcXVlcnkgJyR7XG4gICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkob3BlcmF0aW9ucylcbiAgICAgICAgICAgICAgICA/IG9wZXJhdGlvbnMubWFwKG9wID0+IG9wLm9wZXJhdGlvbk5hbWUpXG4gICAgICAgICAgICAgICAgOiBvcGVyYXRpb25zLm9wZXJhdGlvbk5hbWVcbiAgICAgICAgICAgIH0nLmAsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSlcbiAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBjaGVja0ZldGNoZXIgPSAoZmV0Y2hlcjogV2luZG93T3JXb3JrZXJHbG9iYWxTY29wZVsnZmV0Y2gnXSkgPT4ge1xuICBpZiAoIWZldGNoZXIgJiYgdHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xuICAgIGxldCBsaWJyYXJ5OiBzdHJpbmcgPSAndW5mZXRjaCc7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSBsaWJyYXJ5ID0gJ25vZGUtZmV0Y2gnO1xuICAgIHRocm93IG5ldyBJbnZhcmlhbnRFcnJvcihgXG5mZXRjaCBpcyBub3QgZm91bmQgZ2xvYmFsbHkgYW5kIG5vIGZldGNoZXIgcGFzc2VkLCB0byBmaXggcGFzcyBhIGZldGNoIGZvclxueW91ciBlbnZpcm9ubWVudCBsaWtlIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlLyR7bGlicmFyeX0uXG5cbkZvciBleGFtcGxlOlxuaW1wb3J0IGZldGNoIGZyb20gJyR7bGlicmFyeX0nO1xuaW1wb3J0IHsgY3JlYXRlSHR0cExpbmsgfSBmcm9tICdhcG9sbG8tbGluay1odHRwJztcblxuY29uc3QgbGluayA9IGNyZWF0ZUh0dHBMaW5rKHsgdXJpOiAnL2dyYXBocWwnLCBmZXRjaDogZmV0Y2ggfSk7YCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVTaWduYWxJZlN1cHBvcnRlZCA9ICgpID0+IHtcbiAgaWYgKHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICd1bmRlZmluZWQnKVxuICAgIHJldHVybiB7IGNvbnRyb2xsZXI6IGZhbHNlLCBzaWduYWw6IGZhbHNlIH07XG5cbiAgY29uc3QgY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgY29uc3Qgc2lnbmFsID0gY29udHJvbGxlci5zaWduYWw7XG4gIHJldHVybiB7IGNvbnRyb2xsZXIsIHNpZ25hbCB9O1xufTtcblxuZXhwb3J0IGNvbnN0IHNlbGVjdEh0dHBPcHRpb25zQW5kQm9keSA9IChcbiAgb3BlcmF0aW9uOiBPcGVyYXRpb24sXG4gIGZhbGxiYWNrQ29uZmlnOiBIdHRwQ29uZmlnLFxuICAuLi5jb25maWdzOiBBcnJheTxIdHRwQ29uZmlnPlxuKSA9PiB7XG4gIGxldCBvcHRpb25zOiBIdHRwQ29uZmlnICYgUmVjb3JkPHN0cmluZywgYW55PiA9IHtcbiAgICAuLi5mYWxsYmFja0NvbmZpZy5vcHRpb25zLFxuICAgIGhlYWRlcnM6IGZhbGxiYWNrQ29uZmlnLmhlYWRlcnMsXG4gICAgY3JlZGVudGlhbHM6IGZhbGxiYWNrQ29uZmlnLmNyZWRlbnRpYWxzLFxuICB9O1xuICBsZXQgaHR0cDogSHR0cFF1ZXJ5T3B0aW9ucyA9IGZhbGxiYWNrQ29uZmlnLmh0dHA7XG5cbiAgLypcbiAgICogdXNlIHRoZSByZXN0IG9mIHRoZSBjb25maWdzIHRvIHBvcHVsYXRlIHRoZSBvcHRpb25zXG4gICAqIGNvbmZpZ3MgbGF0ZXIgaW4gdGhlIGxpc3Qgd2lsbCBvdmVyd3JpdGUgZWFybGllciBmaWVsZHNcbiAgICovXG4gIGNvbmZpZ3MuZm9yRWFjaChjb25maWcgPT4ge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgLi4uY29uZmlnLm9wdGlvbnMsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIC4uLm9wdGlvbnMuaGVhZGVycyxcbiAgICAgICAgLi4uY29uZmlnLmhlYWRlcnMsXG4gICAgICB9LFxuICAgIH07XG4gICAgaWYgKGNvbmZpZy5jcmVkZW50aWFscykgb3B0aW9ucy5jcmVkZW50aWFscyA9IGNvbmZpZy5jcmVkZW50aWFscztcblxuICAgIGh0dHAgPSB7XG4gICAgICAuLi5odHRwLFxuICAgICAgLi4uY29uZmlnLmh0dHAsXG4gICAgfTtcbiAgfSk7XG5cbiAgLy9UaGUgYm9keSBkZXBlbmRzIG9uIHRoZSBodHRwIG9wdGlvbnNcbiAgY29uc3QgeyBvcGVyYXRpb25OYW1lLCBleHRlbnNpb25zLCB2YXJpYWJsZXMsIHF1ZXJ5IH0gPSBvcGVyYXRpb247XG4gIGNvbnN0IGJvZHk6IEJvZHkgPSB7IG9wZXJhdGlvbk5hbWUsIHZhcmlhYmxlcyB9O1xuXG4gIGlmIChodHRwLmluY2x1ZGVFeHRlbnNpb25zKSAoYm9keSBhcyBhbnkpLmV4dGVuc2lvbnMgPSBleHRlbnNpb25zO1xuXG4gIC8vIG5vdCBzZW5kaW5nIHRoZSBxdWVyeSAoaS5lIHBlcnNpc3RlZCBxdWVyaWVzKVxuICBpZiAoaHR0cC5pbmNsdWRlUXVlcnkpIChib2R5IGFzIGFueSkucXVlcnkgPSBwcmludChxdWVyeSk7XG5cbiAgcmV0dXJuIHtcbiAgICBvcHRpb25zLFxuICAgIGJvZHksXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3Qgc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIgPSAocCwgbGFiZWwpID0+IHtcbiAgbGV0IHNlcmlhbGl6ZWQ7XG4gIHRyeSB7XG4gICAgc2VyaWFsaXplZCA9IEpTT04uc3RyaW5naWZ5KHApO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc3QgcGFyc2VFcnJvciA9IG5ldyBJbnZhcmlhbnRFcnJvcihcbiAgICAgIGBOZXR3b3JrIHJlcXVlc3QgZmFpbGVkLiAke2xhYmVsfSBpcyBub3Qgc2VyaWFsaXphYmxlOiAke2UubWVzc2FnZX1gLFxuICAgICkgYXMgQ2xpZW50UGFyc2VFcnJvcjtcbiAgICBwYXJzZUVycm9yLnBhcnNlRXJyb3IgPSBlO1xuICAgIHRocm93IHBhcnNlRXJyb3I7XG4gIH1cbiAgcmV0dXJuIHNlcmlhbGl6ZWQ7XG59O1xuXG4vL3NlbGVjdHMgXCIvZ3JhcGhxbFwiIGJ5IGRlZmF1bHRcbmV4cG9ydCBjb25zdCBzZWxlY3RVUkkgPSAoXG4gIG9wZXJhdGlvbixcbiAgZmFsbGJhY2tVUkk/OiBzdHJpbmcgfCAoKG9wZXJhdGlvbjogT3BlcmF0aW9uKSA9PiBzdHJpbmcpLFxuKSA9PiB7XG4gIGNvbnN0IGNvbnRleHQgPSBvcGVyYXRpb24uZ2V0Q29udGV4dCgpO1xuICBjb25zdCBjb250ZXh0VVJJID0gY29udGV4dC51cmk7XG5cbiAgaWYgKGNvbnRleHRVUkkpIHtcbiAgICByZXR1cm4gY29udGV4dFVSSTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZmFsbGJhY2tVUkkgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZmFsbGJhY2tVUkkob3BlcmF0aW9uKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKGZhbGxiYWNrVVJJIGFzIHN0cmluZykgfHwgJy9ncmFwaHFsJztcbiAgfVxufTtcbiIsImltcG9ydCB7IGlzVGVzdCwgSWRWYWx1ZSB9IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAndHMtaW52YXJpYW50JztcblxuaW1wb3J0IHtcbiAgUmVhZFN0b3JlQ29udGV4dCxcbiAgRnJhZ21lbnRNYXRjaGVySW50ZXJmYWNlLFxuICBQb3NzaWJsZVR5cGVzTWFwLFxuICBJbnRyb3NwZWN0aW9uUmVzdWx0RGF0YSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmxldCBoYXZlV2FybmVkID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNob3VsZFdhcm4oKSB7XG4gIGNvbnN0IGFuc3dlciA9ICFoYXZlV2FybmVkO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpc1Rlc3QoKSkge1xuICAgIGhhdmVXYXJuZWQgPSB0cnVlO1xuICB9XG4gIHJldHVybiBhbnN3ZXI7XG59XG5cbi8qKlxuICogVGhpcyBmcmFnbWVudCBtYXRjaGVyIGlzIHZlcnkgYmFzaWMgYW5kIHVuYWJsZSB0byBtYXRjaCB1bmlvbiBvciBpbnRlcmZhY2UgdHlwZSBjb25kaXRpb25zXG4gKi9cbmV4cG9ydCBjbGFzcyBIZXVyaXN0aWNGcmFnbWVudE1hdGNoZXIgaW1wbGVtZW50cyBGcmFnbWVudE1hdGNoZXJJbnRlcmZhY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBwdWJsaWMgZW5zdXJlUmVhZHkoKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG5cbiAgcHVibGljIGNhbkJ5cGFzc0luaXQoKSB7XG4gICAgcmV0dXJuIHRydWU7IC8vIHdlIGRvbid0IG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGlzIGZyYWdtZW50IG1hdGNoZXIuXG4gIH1cblxuICBwdWJsaWMgbWF0Y2goXG4gICAgaWRWYWx1ZTogSWRWYWx1ZSxcbiAgICB0eXBlQ29uZGl0aW9uOiBzdHJpbmcsXG4gICAgY29udGV4dDogUmVhZFN0b3JlQ29udGV4dCxcbiAgKTogYm9vbGVhbiB8ICdoZXVyaXN0aWMnIHtcbiAgICBjb25zdCBvYmogPSBjb250ZXh0LnN0b3JlLmdldChpZFZhbHVlLmlkKTtcbiAgICBjb25zdCBpc1Jvb3RRdWVyeSA9IGlkVmFsdWUuaWQgPT09ICdST09UX1FVRVJZJztcblxuICAgIGlmICghb2JqKSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYXBvbGxvZ3JhcGhxbC9hcG9sbG8tY2xpZW50L3B1bGwvMzUwN1xuICAgICAgcmV0dXJuIGlzUm9vdFF1ZXJ5O1xuICAgIH1cblxuICAgIGNvbnN0IHsgX190eXBlbmFtZSA9IGlzUm9vdFF1ZXJ5ICYmICdRdWVyeScgfSA9IG9iajtcblxuICAgIGlmICghX190eXBlbmFtZSkge1xuICAgICAgaWYgKHNob3VsZFdhcm4oKSkge1xuICAgICAgICBpbnZhcmlhbnQud2FybihgWW91J3JlIHVzaW5nIGZyYWdtZW50cyBpbiB5b3VyIHF1ZXJpZXMsIGJ1dCBlaXRoZXIgZG9uJ3QgaGF2ZSB0aGUgYWRkVHlwZW5hbWU6XG4gIHRydWUgb3B0aW9uIHNldCBpbiBBcG9sbG8gQ2xpZW50LCBvciB5b3UgYXJlIHRyeWluZyB0byB3cml0ZSBhIGZyYWdtZW50IHRvIHRoZSBzdG9yZSB3aXRob3V0IHRoZSBfX3R5cGVuYW1lLlxuICAgUGxlYXNlIHR1cm4gb24gdGhlIGFkZFR5cGVuYW1lIG9wdGlvbiBhbmQgaW5jbHVkZSBfX3R5cGVuYW1lIHdoZW4gd3JpdGluZyBmcmFnbWVudHMgc28gdGhhdCBBcG9sbG8gQ2xpZW50XG4gICBjYW4gYWNjdXJhdGVseSBtYXRjaCBmcmFnbWVudHMuYCk7XG4gICAgICAgIGludmFyaWFudC53YXJuKFxuICAgICAgICAgICdDb3VsZCBub3QgZmluZCBfX3R5cGVuYW1lIG9uIEZyYWdtZW50ICcsXG4gICAgICAgICAgdHlwZUNvbmRpdGlvbixcbiAgICAgICAgICBvYmosXG4gICAgICAgICk7XG4gICAgICAgIGludmFyaWFudC53YXJuKFxuICAgICAgICAgIGBERVBSRUNBVElPTiBXQVJOSU5HOiB1c2luZyBmcmFnbWVudHMgd2l0aG91dCBfX3R5cGVuYW1lIGlzIHVuc3VwcG9ydGVkIGJlaGF2aW9yIGAgK1xuICAgICAgICAgICAgYGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIEFwb2xsbyBjbGllbnQuIFlvdSBzaG91bGQgZml4IHRoaXMgYW5kIHNldCBhZGRUeXBlbmFtZSB0byB0cnVlIG5vdy5gLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJ2hldXJpc3RpYyc7XG4gICAgfVxuXG4gICAgaWYgKF9fdHlwZW5hbWUgPT09IHR5cGVDb25kaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQgd2UgZG9uJ3Qga25vdyBpZiB0aGlzIGZyYWdtZW50IHNob3VsZCBtYXRjaCBvciBub3QuIEl0J3NcbiAgICAvLyBlaXRoZXI6XG4gICAgLy9cbiAgICAvLyAxLiAoR09PRCkgQSBmcmFnbWVudCBvbiBhIG1hdGNoaW5nIGludGVyZmFjZSBvciB1bmlvbi5cbiAgICAvLyAyLiAoQkFEKSBBIGZyYWdtZW50IG9uIGEgbm9uLW1hdGNoaW5nIGNvbmNyZXRlIHR5cGUgb3IgaW50ZXJmYWNlIG9yIHVuaW9uLlxuICAgIC8vXG4gICAgLy8gSWYgaXQncyAyLCB3ZSBkb24ndCB3YW50IGl0IHRvIG1hdGNoLiBJZiBpdCdzIDEsIHdlIHdhbnQgaXQgdG8gbWF0Y2guIFdlXG4gICAgLy8gY2FuJ3QgdGVsbCB0aGUgZGlmZmVyZW5jZSwgc28gd2Ugd2FybiB0aGUgdXNlciwgYnV0IHN0aWxsIHRyeSB0byBtYXRjaFxuICAgIC8vIGl0IChmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgcmVhc29ucykuIFRoaXMgdW5mb3J0dW5hdGVseSBtZWFucyB0aGF0XG4gICAgLy8gdXNpbmcgdGhlIGBIZXVyaXN0aWNGcmFnbWVudE1hdGNoZXJgIHdpdGggdW5pb25zIGFuZCBpbnRlcmZhY2VzIGlzXG4gICAgLy8gdmVyeSB1bnJlbGlhYmxlLiBUaGlzIHdpbGwgYmUgYWRkcmVzc2VkIGluIGEgZnV0dXJlIG1ham9yIHZlcnNpb24gb2ZcbiAgICAvLyBBcG9sbG8gQ2xpZW50LCBidXQgZm9yIG5vdyB0aGUgcmVjb21tZW5kYXRpb24gaXMgdG8gdXNlIHRoZVxuICAgIC8vIGBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyYCB3aGVuIHdvcmtpbmcgd2l0aCB1bmlvbnMvaW50ZXJmYWNlcy5cblxuICAgIGlmIChzaG91bGRXYXJuKCkpIHtcbiAgICAgIGludmFyaWFudC5lcnJvcihcbiAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHNpbXBsZSAoaGV1cmlzdGljKSBmcmFnbWVudCBtYXRjaGVyLCBidXQgeW91ciAnICtcbiAgICAgICAgICAncXVlcmllcyBjb250YWluIHVuaW9uIG9yIGludGVyZmFjZSB0eXBlcy4gQXBvbGxvIENsaWVudCB3aWxsIG5vdCBiZSAnICtcbiAgICAgICAgICAnYWJsZSB0byBhY2N1cmF0ZWx5IG1hcCBmcmFnbWVudHMuIFRvIG1ha2UgdGhpcyBlcnJvciBnbyBhd2F5LCB1c2UgJyArXG4gICAgICAgICAgJ3RoZSBgSW50cm9zcGVjdGlvbkZyYWdtZW50TWF0Y2hlcmAgYXMgZGVzY3JpYmVkIGluIHRoZSBkb2NzOiAnICtcbiAgICAgICAgICAnaHR0cHM6Ly93d3cuYXBvbGxvZ3JhcGhxbC5jb20vZG9jcy9yZWFjdC9hZHZhbmNlZC9mcmFnbWVudHMuaHRtbCNmcmFnbWVudC1tYXRjaGVyJyxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuICdoZXVyaXN0aWMnO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRyb3NwZWN0aW9uRnJhZ21lbnRNYXRjaGVyIGltcGxlbWVudHMgRnJhZ21lbnRNYXRjaGVySW50ZXJmYWNlIHtcbiAgcHJpdmF0ZSBpc1JlYWR5OiBib29sZWFuO1xuICBwcml2YXRlIHBvc3NpYmxlVHlwZXNNYXA6IFBvc3NpYmxlVHlwZXNNYXA7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucz86IHtcbiAgICBpbnRyb3NwZWN0aW9uUXVlcnlSZXN1bHREYXRhPzogSW50cm9zcGVjdGlvblJlc3VsdERhdGE7XG4gIH0pIHtcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLmludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGEpIHtcbiAgICAgIHRoaXMucG9zc2libGVUeXBlc01hcCA9IHRoaXMucGFyc2VJbnRyb3NwZWN0aW9uUmVzdWx0KFxuICAgICAgICBvcHRpb25zLmludHJvc3BlY3Rpb25RdWVyeVJlc3VsdERhdGEsXG4gICAgICApO1xuICAgICAgdGhpcy5pc1JlYWR5ID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pc1JlYWR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5tYXRjaCA9IHRoaXMubWF0Y2guYmluZCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBtYXRjaChcbiAgICBpZFZhbHVlOiBJZFZhbHVlLFxuICAgIHR5cGVDb25kaXRpb246IHN0cmluZyxcbiAgICBjb250ZXh0OiBSZWFkU3RvcmVDb250ZXh0LFxuICApIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0aGlzLmlzUmVhZHksXG4gICAgICAnRnJhZ21lbnRNYXRjaGVyLm1hdGNoKCkgd2FzIGNhbGxlZCBiZWZvcmUgRnJhZ21lbnRNYXRjaGVyLmluaXQoKScsXG4gICAgKTtcblxuICAgIGNvbnN0IG9iaiA9IGNvbnRleHQuc3RvcmUuZ2V0KGlkVmFsdWUuaWQpO1xuICAgIGNvbnN0IGlzUm9vdFF1ZXJ5ID0gaWRWYWx1ZS5pZCA9PT0gJ1JPT1RfUVVFUlknO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9ncmFwaHFsL2Fwb2xsby1jbGllbnQvcHVsbC80NjIwXG4gICAgICByZXR1cm4gaXNSb290UXVlcnk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBfX3R5cGVuYW1lID0gaXNSb290UXVlcnkgJiYgJ1F1ZXJ5JyB9ID0gb2JqO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgX190eXBlbmFtZSxcbiAgICAgIGBDYW5ub3QgbWF0Y2ggZnJhZ21lbnQgYmVjYXVzZSBfX3R5cGVuYW1lIHByb3BlcnR5IGlzIG1pc3Npbmc6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIG9iaixcbiAgICAgICl9YCxcbiAgICApO1xuXG4gICAgaWYgKF9fdHlwZW5hbWUgPT09IHR5cGVDb25kaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGltcGxlbWVudGluZ1R5cGVzID0gdGhpcy5wb3NzaWJsZVR5cGVzTWFwW3R5cGVDb25kaXRpb25dO1xuICAgIGlmIChcbiAgICAgIF9fdHlwZW5hbWUgJiZcbiAgICAgIGltcGxlbWVudGluZ1R5cGVzICYmXG4gICAgICBpbXBsZW1lbnRpbmdUeXBlcy5pbmRleE9mKF9fdHlwZW5hbWUpID4gLTFcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VJbnRyb3NwZWN0aW9uUmVzdWx0KFxuICAgIGludHJvc3BlY3Rpb25SZXN1bHREYXRhOiBJbnRyb3NwZWN0aW9uUmVzdWx0RGF0YSxcbiAgKTogUG9zc2libGVUeXBlc01hcCB7XG4gICAgY29uc3QgdHlwZU1hcDogUG9zc2libGVUeXBlc01hcCA9IHt9O1xuICAgIGludHJvc3BlY3Rpb25SZXN1bHREYXRhLl9fc2NoZW1hLnR5cGVzLmZvckVhY2godHlwZSA9PiB7XG4gICAgICBpZiAodHlwZS5raW5kID09PSAnVU5JT04nIHx8IHR5cGUua2luZCA9PT0gJ0lOVEVSRkFDRScpIHtcbiAgICAgICAgdHlwZU1hcFt0eXBlLm5hbWVdID0gdHlwZS5wb3NzaWJsZVR5cGVzLm1hcChcbiAgICAgICAgICBpbXBsZW1lbnRpbmdUeXBlID0+IGltcGxlbWVudGluZ1R5cGUubmFtZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdHlwZU1hcDtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTm9ybWFsaXplZENhY2hlLCBOb3JtYWxpemVkQ2FjaGVPYmplY3QsIFN0b3JlT2JqZWN0IH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyB3cmFwLCBPcHRpbWlzdGljV3JhcHBlckZ1bmN0aW9uIH0gZnJvbSAnb3B0aW1pc20nO1xuXG5jb25zdCBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG5leHBvcnQgY2xhc3MgRGVwVHJhY2tpbmdDYWNoZSBpbXBsZW1lbnRzIE5vcm1hbGl6ZWRDYWNoZSB7XG4gIC8vIFdyYXBwZXIgZnVuY3Rpb24gcHJvZHVjZWQgYnkgdGhlIG9wdGltaXNtIGxpYnJhcnksIHVzZWQgdG8gZGVwZW5kIG9uXG4gIC8vIGRhdGFJZCBzdHJpbmdzLCBmb3IgZWFzeSBpbnZhbGlkYXRpb24gb2Ygc3BlY2lmaWMgSURzLlxuICBwcml2YXRlIGRlcGVuZDogT3B0aW1pc3RpY1dyYXBwZXJGdW5jdGlvbjxbc3RyaW5nXSwgU3RvcmVPYmplY3QgfCB1bmRlZmluZWQ+O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZGF0YTogTm9ybWFsaXplZENhY2hlT2JqZWN0ID0gT2JqZWN0LmNyZWF0ZShudWxsKSkge1xuICAgIHRoaXMuZGVwZW5kID0gd3JhcCgoZGF0YUlkOiBzdHJpbmcpID0+IHRoaXMuZGF0YVtkYXRhSWRdLCB7XG4gICAgICBkaXNwb3NhYmxlOiB0cnVlLFxuICAgICAgbWFrZUNhY2hlS2V5KGRhdGFJZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBkYXRhSWQ7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHRvT2JqZWN0KCk6IE5vcm1hbGl6ZWRDYWNoZU9iamVjdCB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQoZGF0YUlkOiBzdHJpbmcpOiBTdG9yZU9iamVjdCB7XG4gICAgdGhpcy5kZXBlbmQoZGF0YUlkKTtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2RhdGFJZF0hO1xuICB9XG5cbiAgcHVibGljIHNldChkYXRhSWQ6IHN0cmluZywgdmFsdWU/OiBTdG9yZU9iamVjdCkge1xuICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5kYXRhW2RhdGFJZF07XG4gICAgaWYgKHZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgdGhpcy5kYXRhW2RhdGFJZF0gPSB2YWx1ZTtcbiAgICAgIHRoaXMuZGVwZW5kLmRpcnR5KGRhdGFJZCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGRlbGV0ZShkYXRhSWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGlmIChoYXNPd24uY2FsbCh0aGlzLmRhdGEsIGRhdGFJZCkpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmRhdGFbZGF0YUlkXTtcbiAgICAgIHRoaXMuZGVwZW5kLmRpcnR5KGRhdGFJZCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMucmVwbGFjZShudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyByZXBsYWNlKG5ld0RhdGE6IE5vcm1hbGl6ZWRDYWNoZU9iamVjdCB8IG51bGwpOiB2b2lkIHtcbiAgICBpZiAobmV3RGF0YSkge1xuICAgICAgT2JqZWN0LmtleXMobmV3RGF0YSkuZm9yRWFjaChkYXRhSWQgPT4ge1xuICAgICAgICB0aGlzLnNldChkYXRhSWQsIG5ld0RhdGFbZGF0YUlkXSk7XG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuZGF0YSkuZm9yRWFjaChkYXRhSWQgPT4ge1xuICAgICAgICBpZiAoIWhhc093bi5jYWxsKG5ld0RhdGEsIGRhdGFJZCkpIHtcbiAgICAgICAgICB0aGlzLmRlbGV0ZShkYXRhSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmtleXModGhpcy5kYXRhKS5mb3JFYWNoKGRhdGFJZCA9PiB7XG4gICAgICAgIHRoaXMuZGVsZXRlKGRhdGFJZCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHROb3JtYWxpemVkQ2FjaGVGYWN0b3J5KFxuICBzZWVkPzogTm9ybWFsaXplZENhY2hlT2JqZWN0LFxuKTogTm9ybWFsaXplZENhY2hlIHtcbiAgcmV0dXJuIG5ldyBEZXBUcmFja2luZ0NhY2hlKHNlZWQpO1xufVxuIiwiaW1wb3J0IHtcbiAgYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkLFxuICBhc3NpZ24sXG4gIGNhblVzZVdlYWtNYXAsXG4gIGNyZWF0ZUZyYWdtZW50TWFwLFxuICBEaXJlY3RpdmVJbmZvLFxuICBGcmFnbWVudE1hcCxcbiAgZ2V0RGVmYXVsdFZhbHVlcyxcbiAgZ2V0RGlyZWN0aXZlSW5mb0Zyb21GaWVsZCxcbiAgZ2V0RnJhZ21lbnREZWZpbml0aW9ucyxcbiAgZ2V0TWFpbkRlZmluaXRpb24sXG4gIGdldFF1ZXJ5RGVmaW5pdGlvbixcbiAgZ2V0U3RvcmVLZXlOYW1lLFxuICBJZFZhbHVlLFxuICBpc0VxdWFsLFxuICBpc0ZpZWxkLFxuICBpc0lkVmFsdWUsXG4gIGlzSW5saW5lRnJhZ21lbnQsXG4gIGlzSnNvblZhbHVlLFxuICBtYXliZURlZXBGcmVlemUsXG4gIG1lcmdlRGVlcEFycmF5LFxuICByZXN1bHRLZXlOYW1lRnJvbUZpZWxkLFxuICBzaG91bGRJbmNsdWRlLFxuICBTdG9yZVZhbHVlLFxuICB0b0lkVmFsdWUsXG59IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xuXG5pbXBvcnQgeyBDYWNoZSB9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5cbmltcG9ydCB7XG4gIFJlYWRTdG9yZUNvbnRleHQsXG4gIERpZmZRdWVyeUFnYWluc3RTdG9yZU9wdGlvbnMsXG4gIFJlYWRRdWVyeU9wdGlvbnMsXG4gIFN0b3JlT2JqZWN0LFxufSBmcm9tICcuL3R5cGVzJztcblxuaW1wb3J0IHtcbiAgRG9jdW1lbnROb2RlLFxuICBGaWVsZE5vZGUsXG4gIEZyYWdtZW50RGVmaW5pdGlvbk5vZGUsXG4gIElubGluZUZyYWdtZW50Tm9kZSxcbiAgU2VsZWN0aW9uU2V0Tm9kZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IHdyYXAsIEtleVRyaWUgfSBmcm9tICdvcHRpbWlzbSc7XG5pbXBvcnQgeyBEZXBUcmFja2luZ0NhY2hlIH0gZnJvbSAnLi9kZXBUcmFja2luZ0NhY2hlJztcbmltcG9ydCB7IGludmFyaWFudCwgSW52YXJpYW50RXJyb3IgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuXG5leHBvcnQgdHlwZSBWYXJpYWJsZU1hcCA9IHsgW25hbWU6IHN0cmluZ106IGFueSB9O1xuXG5leHBvcnQgdHlwZSBGcmFnbWVudE1hdGNoZXIgPSAoXG4gIHJvb3RWYWx1ZTogYW55LFxuICB0eXBlQ29uZGl0aW9uOiBzdHJpbmcsXG4gIGNvbnRleHQ6IFJlYWRTdG9yZUNvbnRleHQsXG4pID0+IGJvb2xlYW4gfCAnaGV1cmlzdGljJztcblxudHlwZSBFeGVjQ29udGV4dCA9IHtcbiAgcXVlcnk6IERvY3VtZW50Tm9kZTtcbiAgZnJhZ21lbnRNYXA6IEZyYWdtZW50TWFwO1xuICBjb250ZXh0VmFsdWU6IFJlYWRTdG9yZUNvbnRleHQ7XG4gIHZhcmlhYmxlVmFsdWVzOiBWYXJpYWJsZU1hcDtcbiAgZnJhZ21lbnRNYXRjaGVyOiBGcmFnbWVudE1hdGNoZXI7XG59O1xuXG50eXBlIEV4ZWNJbmZvID0ge1xuICByZXN1bHRLZXk6IHN0cmluZztcbiAgZGlyZWN0aXZlczogRGlyZWN0aXZlSW5mbztcbn07XG5cbmV4cG9ydCB0eXBlIEV4ZWNSZXN1bHRNaXNzaW5nRmllbGQgPSB7XG4gIG9iamVjdDogU3RvcmVPYmplY3Q7XG4gIGZpZWxkTmFtZTogc3RyaW5nO1xuICB0b2xlcmFibGU6IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBFeGVjUmVzdWx0PFIgPSBhbnk+ID0ge1xuICByZXN1bHQ6IFI7XG4gIC8vIEVtcHR5IGFycmF5IGlmIG5vIG1pc3NpbmcgZmllbGRzIGVuY291bnRlcmVkIHdoaWxlIGNvbXB1dGluZyByZXN1bHQuXG4gIG1pc3Npbmc/OiBFeGVjUmVzdWx0TWlzc2luZ0ZpZWxkW107XG59O1xuXG50eXBlIEV4ZWNTdG9yZVF1ZXJ5T3B0aW9ucyA9IHtcbiAgcXVlcnk6IERvY3VtZW50Tm9kZTtcbiAgcm9vdFZhbHVlOiBJZFZhbHVlO1xuICBjb250ZXh0VmFsdWU6IFJlYWRTdG9yZUNvbnRleHQ7XG4gIHZhcmlhYmxlVmFsdWVzOiBWYXJpYWJsZU1hcDtcbiAgLy8gRGVmYXVsdCBtYXRjaGVyIGFsd2F5cyBtYXRjaGVzIGFsbCBmcmFnbWVudHNcbiAgZnJhZ21lbnRNYXRjaGVyPzogRnJhZ21lbnRNYXRjaGVyO1xufTtcblxudHlwZSBFeGVjU2VsZWN0aW9uU2V0T3B0aW9ucyA9IHtcbiAgc2VsZWN0aW9uU2V0OiBTZWxlY3Rpb25TZXROb2RlO1xuICByb290VmFsdWU6IGFueTtcbiAgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0O1xufTtcblxudHlwZSBFeGVjU3ViU2VsZWN0ZWRBcnJheU9wdGlvbnMgPSB7XG4gIGZpZWxkOiBGaWVsZE5vZGU7XG4gIGFycmF5OiBhbnlbXTtcbiAgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0O1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBTdG9yZVJlYWRlckNvbmZpZyB7XG4gIGNhY2hlS2V5Um9vdD86IEtleVRyaWU8b2JqZWN0PjtcbiAgZnJlZXplUmVzdWx0cz86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBTdG9yZVJlYWRlciB7XG4gIHByaXZhdGUgZnJlZXplUmVzdWx0czogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcih7XG4gICAgY2FjaGVLZXlSb290ID0gbmV3IEtleVRyaWU8b2JqZWN0PihjYW5Vc2VXZWFrTWFwKSxcbiAgICBmcmVlemVSZXN1bHRzID0gZmFsc2UsXG4gIH06IFN0b3JlUmVhZGVyQ29uZmlnID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBleGVjdXRlU3RvcmVRdWVyeSxcbiAgICAgIGV4ZWN1dGVTZWxlY3Rpb25TZXQsXG4gICAgICBleGVjdXRlU3ViU2VsZWN0ZWRBcnJheSxcbiAgICB9ID0gdGhpcztcblxuICAgIHRoaXMuZnJlZXplUmVzdWx0cyA9IGZyZWV6ZVJlc3VsdHM7XG5cbiAgICB0aGlzLmV4ZWN1dGVTdG9yZVF1ZXJ5ID0gd3JhcCgob3B0aW9uczogRXhlY1N0b3JlUXVlcnlPcHRpb25zKSA9PiB7XG4gICAgICByZXR1cm4gZXhlY3V0ZVN0b3JlUXVlcnkuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9LCB7XG4gICAgICBtYWtlQ2FjaGVLZXkoe1xuICAgICAgICBxdWVyeSxcbiAgICAgICAgcm9vdFZhbHVlLFxuICAgICAgICBjb250ZXh0VmFsdWUsXG4gICAgICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgICAgICBmcmFnbWVudE1hdGNoZXIsXG4gICAgICB9OiBFeGVjU3RvcmVRdWVyeU9wdGlvbnMpIHtcbiAgICAgICAgLy8gVGhlIHJlc3VsdCBvZiBleGVjdXRlU3RvcmVRdWVyeSBjYW4gYmUgc2FmZWx5IGNhY2hlZCBvbmx5IGlmIHRoZVxuICAgICAgICAvLyB1bmRlcmx5aW5nIHN0b3JlIGlzIGNhcGFibGUgb2YgdHJhY2tpbmcgZGVwZW5kZW5jaWVzIGFuZCBpbnZhbGlkYXRpbmdcbiAgICAgICAgLy8gdGhlIGNhY2hlIHdoZW4gcmVsZXZhbnQgZGF0YSBoYXZlIGNoYW5nZWQuXG4gICAgICAgIGlmIChjb250ZXh0VmFsdWUuc3RvcmUgaW5zdGFuY2VvZiBEZXBUcmFja2luZ0NhY2hlKSB7XG4gICAgICAgICAgcmV0dXJuIGNhY2hlS2V5Um9vdC5sb29rdXAoXG4gICAgICAgICAgICBjb250ZXh0VmFsdWUuc3RvcmUsXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIGZyYWdtZW50TWF0Y2hlcixcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHZhcmlhYmxlVmFsdWVzKSxcbiAgICAgICAgICAgIHJvb3RWYWx1ZS5pZCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB0aGlzLmV4ZWN1dGVTZWxlY3Rpb25TZXQgPSB3cmFwKChvcHRpb25zOiBFeGVjU2VsZWN0aW9uU2V0T3B0aW9ucykgPT4ge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVTZWxlY3Rpb25TZXQuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgICB9LCB7XG4gICAgICBtYWtlQ2FjaGVLZXkoe1xuICAgICAgICBzZWxlY3Rpb25TZXQsXG4gICAgICAgIHJvb3RWYWx1ZSxcbiAgICAgICAgZXhlY0NvbnRleHQsXG4gICAgICB9OiBFeGVjU2VsZWN0aW9uU2V0T3B0aW9ucykge1xuICAgICAgICBpZiAoZXhlY0NvbnRleHQuY29udGV4dFZhbHVlLnN0b3JlIGluc3RhbmNlb2YgRGVwVHJhY2tpbmdDYWNoZSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZUtleVJvb3QubG9va3VwKFxuICAgICAgICAgICAgZXhlY0NvbnRleHQuY29udGV4dFZhbHVlLnN0b3JlLFxuICAgICAgICAgICAgc2VsZWN0aW9uU2V0LFxuICAgICAgICAgICAgZXhlY0NvbnRleHQuZnJhZ21lbnRNYXRjaGVyLFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZXhlY0NvbnRleHQudmFyaWFibGVWYWx1ZXMpLFxuICAgICAgICAgICAgcm9vdFZhbHVlLmlkLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHRoaXMuZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXkgPSB3cmFwKChvcHRpb25zOiBFeGVjU3ViU2VsZWN0ZWRBcnJheU9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiBleGVjdXRlU3ViU2VsZWN0ZWRBcnJheS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICAgIH0sIHtcbiAgICAgIG1ha2VDYWNoZUtleSh7IGZpZWxkLCBhcnJheSwgZXhlY0NvbnRleHQgfSkge1xuICAgICAgICBpZiAoZXhlY0NvbnRleHQuY29udGV4dFZhbHVlLnN0b3JlIGluc3RhbmNlb2YgRGVwVHJhY2tpbmdDYWNoZSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZUtleVJvb3QubG9va3VwKFxuICAgICAgICAgICAgZXhlY0NvbnRleHQuY29udGV4dFZhbHVlLnN0b3JlLFxuICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICBhcnJheSxcbiAgICAgICAgICAgIEpTT04uc3RyaW5naWZ5KGV4ZWNDb250ZXh0LnZhcmlhYmxlVmFsdWVzKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZXMgdGhlIHJlc3VsdCBvZiBhIHF1ZXJ5IHNvbGVseSBmcm9tIHRoZSBzdG9yZSAoaS5lLiBuZXZlciBoaXRzIHRoZSBzZXJ2ZXIpLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0b3JlfSBzdG9yZSBUaGUge0BsaW5rIE5vcm1hbGl6ZWRDYWNoZX0gdXNlZCBieSBBcG9sbG8gZm9yIHRoZSBgZGF0YWAgcG9ydGlvbiBvZiB0aGVcbiAgICogc3RvcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7RG9jdW1lbnROb2RlfSBxdWVyeSBUaGUgcXVlcnkgZG9jdW1lbnQgdG8gcmVzb2x2ZSBmcm9tIHRoZSBkYXRhIGF2YWlsYWJsZSBpbiB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbdmFyaWFibGVzXSBBIG1hcCBmcm9tIHRoZSBuYW1lIG9mIGEgdmFyaWFibGUgdG8gaXRzIHZhbHVlLiBUaGVzZSB2YXJpYWJsZXMgY2FuXG4gICAqIGJlIHJlZmVyZW5jZWQgYnkgdGhlIHF1ZXJ5IGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0ge2FueX0gcHJldmlvdXNSZXN1bHQgVGhlIHByZXZpb3VzIHJlc3VsdCByZXR1cm5lZCBieSB0aGlzIGZ1bmN0aW9uIGZvciB0aGUgc2FtZSBxdWVyeS5cbiAgICogSWYgbm90aGluZyBpbiB0aGUgc3RvcmUgY2hhbmdlZCBzaW5jZSB0aGF0IHByZXZpb3VzIHJlc3VsdCB0aGVuIHZhbHVlcyBmcm9tIHRoZSBwcmV2aW91cyByZXN1bHRcbiAgICogd2lsbCBiZSByZXR1cm5lZCB0byBwcmVzZXJ2ZSByZWZlcmVudGlhbCBlcXVhbGl0eS5cbiAgICovXG4gIHB1YmxpYyByZWFkUXVlcnlGcm9tU3RvcmU8UXVlcnlUeXBlPihcbiAgICBvcHRpb25zOiBSZWFkUXVlcnlPcHRpb25zLFxuICApOiBRdWVyeVR5cGUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmRpZmZRdWVyeUFnYWluc3RTdG9yZTxRdWVyeVR5cGU+KHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICByZXR1cm5QYXJ0aWFsRGF0YTogZmFsc2UsXG4gICAgfSkucmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdpdmVuIGEgc3RvcmUgYW5kIGEgcXVlcnksIHJldHVybiBhcyBtdWNoIG9mIHRoZSByZXN1bHQgYXMgcG9zc2libGUgYW5kXG4gICAqIGlkZW50aWZ5IGlmIGFueSBkYXRhIHdhcyBtaXNzaW5nIGZyb20gdGhlIHN0b3JlLlxuICAgKiBAcGFyYW0gIHtEb2N1bWVudE5vZGV9IHF1ZXJ5IEEgcGFyc2VkIEdyYXBoUUwgcXVlcnkgZG9jdW1lbnRcbiAgICogQHBhcmFtICB7U3RvcmV9IHN0b3JlIFRoZSBBcG9sbG8gQ2xpZW50IHN0b3JlIG9iamVjdFxuICAgKiBAcGFyYW0gIHthbnl9IHByZXZpb3VzUmVzdWx0IFRoZSBwcmV2aW91cyByZXN1bHQgcmV0dXJuZWQgYnkgdGhpcyBmdW5jdGlvbiBmb3IgdGhlIHNhbWUgcXVlcnlcbiAgICogQHJldHVybiB7cmVzdWx0OiBPYmplY3QsIGNvbXBsZXRlOiBbYm9vbGVhbl19XG4gICAqL1xuICBwdWJsaWMgZGlmZlF1ZXJ5QWdhaW5zdFN0b3JlPFQ+KHtcbiAgICBzdG9yZSxcbiAgICBxdWVyeSxcbiAgICB2YXJpYWJsZXMsXG4gICAgcHJldmlvdXNSZXN1bHQsXG4gICAgcmV0dXJuUGFydGlhbERhdGEgPSB0cnVlLFxuICAgIHJvb3RJZCA9ICdST09UX1FVRVJZJyxcbiAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbixcbiAgICBjb25maWcsXG4gIH06IERpZmZRdWVyeUFnYWluc3RTdG9yZU9wdGlvbnMpOiBDYWNoZS5EaWZmUmVzdWx0PFQ+IHtcbiAgICAvLyBUaHJvdyB0aGUgcmlnaHQgdmFsaWRhdGlvbiBlcnJvciBieSB0cnlpbmcgdG8gZmluZCBhIHF1ZXJ5IGluIHRoZSBkb2N1bWVudFxuICAgIGNvbnN0IHF1ZXJ5RGVmaW5pdGlvbiA9IGdldFF1ZXJ5RGVmaW5pdGlvbihxdWVyeSk7XG5cbiAgICB2YXJpYWJsZXMgPSBhc3NpZ24oe30sIGdldERlZmF1bHRWYWx1ZXMocXVlcnlEZWZpbml0aW9uKSwgdmFyaWFibGVzKTtcblxuICAgIGNvbnN0IGNvbnRleHQ6IFJlYWRTdG9yZUNvbnRleHQgPSB7XG4gICAgICAvLyBHbG9iYWwgc2V0dGluZ3NcbiAgICAgIHN0b3JlLFxuICAgICAgZGF0YUlkRnJvbU9iamVjdDogY29uZmlnICYmIGNvbmZpZy5kYXRhSWRGcm9tT2JqZWN0LFxuICAgICAgY2FjaGVSZWRpcmVjdHM6IChjb25maWcgJiYgY29uZmlnLmNhY2hlUmVkaXJlY3RzKSB8fCB7fSxcbiAgICB9O1xuXG4gICAgY29uc3QgZXhlY1Jlc3VsdCA9IHRoaXMuZXhlY3V0ZVN0b3JlUXVlcnkoe1xuICAgICAgcXVlcnksXG4gICAgICByb290VmFsdWU6IHtcbiAgICAgICAgdHlwZTogJ2lkJyxcbiAgICAgICAgaWQ6IHJvb3RJZCxcbiAgICAgICAgZ2VuZXJhdGVkOiB0cnVlLFxuICAgICAgICB0eXBlbmFtZTogJ1F1ZXJ5JyxcbiAgICAgIH0sXG4gICAgICBjb250ZXh0VmFsdWU6IGNvbnRleHQsXG4gICAgICB2YXJpYWJsZVZhbHVlczogdmFyaWFibGVzLFxuICAgICAgZnJhZ21lbnRNYXRjaGVyOiBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbixcbiAgICB9KTtcblxuICAgIGNvbnN0IGhhc01pc3NpbmdGaWVsZHMgPVxuICAgICAgZXhlY1Jlc3VsdC5taXNzaW5nICYmIGV4ZWNSZXN1bHQubWlzc2luZy5sZW5ndGggPiAwO1xuXG4gICAgaWYgKGhhc01pc3NpbmdGaWVsZHMgJiYgISByZXR1cm5QYXJ0aWFsRGF0YSkge1xuICAgICAgZXhlY1Jlc3VsdC5taXNzaW5nIS5mb3JFYWNoKGluZm8gPT4ge1xuICAgICAgICBpZiAoaW5mby50b2xlcmFibGUpIHJldHVybjtcbiAgICAgICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKFxuICAgICAgICAgIGBDYW4ndCBmaW5kIGZpZWxkICR7aW5mby5maWVsZE5hbWV9IG9uIG9iamVjdCAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgaW5mby5vYmplY3QsXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgMixcbiAgICAgICAgICApfS5gLFxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzUmVzdWx0KSB7XG4gICAgICBpZiAoaXNFcXVhbChwcmV2aW91c1Jlc3VsdCwgZXhlY1Jlc3VsdC5yZXN1bHQpKSB7XG4gICAgICAgIGV4ZWNSZXN1bHQucmVzdWx0ID0gcHJldmlvdXNSZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3VsdDogZXhlY1Jlc3VsdC5yZXN1bHQsXG4gICAgICBjb21wbGV0ZTogIWhhc01pc3NpbmdGaWVsZHMsXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCYXNlZCBvbiBncmFwaHFsIGZ1bmN0aW9uIGZyb20gZ3JhcGhxbC1qczpcbiAgICpcbiAgICogZ3JhcGhxbChcbiAgICogICBzY2hlbWE6IEdyYXBoUUxTY2hlbWEsXG4gICAqICAgcmVxdWVzdFN0cmluZzogc3RyaW5nLFxuICAgKiAgIHJvb3RWYWx1ZT86ID9hbnksXG4gICAqICAgY29udGV4dFZhbHVlPzogP2FueSxcbiAgICogICB2YXJpYWJsZVZhbHVlcz86ID97W2tleTogc3RyaW5nXTogYW55fSxcbiAgICogICBvcGVyYXRpb25OYW1lPzogP3N0cmluZ1xuICAgKiApOiBQcm9taXNlPEdyYXBoUUxSZXN1bHQ+XG4gICAqXG4gICAqIFRoZSBkZWZhdWx0IGV4cG9ydCBhcyBvZiBncmFwaHFsLWFueXdoZXJlIGlzIHN5bmMgYXMgb2YgNC4wLFxuICAgKiBidXQgYmVsb3cgaXMgYW4gZXhwb3J0ZWQgYWx0ZXJuYXRpdmUgdGhhdCBpcyBhc3luYy5cbiAgICogSW4gdGhlIDUuMCB2ZXJzaW9uLCB0aGlzIHdpbGwgYmUgdGhlIG9ubHkgZXhwb3J0IGFnYWluXG4gICAqIGFuZCBpdCB3aWxsIGJlIGFzeW5jXG4gICAqXG4gICAqL1xuICBwcml2YXRlIGV4ZWN1dGVTdG9yZVF1ZXJ5KHtcbiAgICBxdWVyeSxcbiAgICByb290VmFsdWUsXG4gICAgY29udGV4dFZhbHVlLFxuICAgIHZhcmlhYmxlVmFsdWVzLFxuICAgIC8vIERlZmF1bHQgbWF0Y2hlciBhbHdheXMgbWF0Y2hlcyBhbGwgZnJhZ21lbnRzXG4gICAgZnJhZ21lbnRNYXRjaGVyID0gZGVmYXVsdEZyYWdtZW50TWF0Y2hlcixcbiAgfTogRXhlY1N0b3JlUXVlcnlPcHRpb25zKTogRXhlY1Jlc3VsdCB7XG4gICAgY29uc3QgbWFpbkRlZmluaXRpb24gPSBnZXRNYWluRGVmaW5pdGlvbihxdWVyeSk7XG4gICAgY29uc3QgZnJhZ21lbnRzID0gZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhxdWVyeSk7XG4gICAgY29uc3QgZnJhZ21lbnRNYXAgPSBjcmVhdGVGcmFnbWVudE1hcChmcmFnbWVudHMpO1xuICAgIGNvbnN0IGV4ZWNDb250ZXh0OiBFeGVjQ29udGV4dCA9IHtcbiAgICAgIHF1ZXJ5LFxuICAgICAgZnJhZ21lbnRNYXAsXG4gICAgICBjb250ZXh0VmFsdWUsXG4gICAgICB2YXJpYWJsZVZhbHVlcyxcbiAgICAgIGZyYWdtZW50TWF0Y2hlcixcbiAgICB9O1xuXG4gICAgcmV0dXJuIHRoaXMuZXhlY3V0ZVNlbGVjdGlvblNldCh7XG4gICAgICBzZWxlY3Rpb25TZXQ6IG1haW5EZWZpbml0aW9uLnNlbGVjdGlvblNldCxcbiAgICAgIHJvb3RWYWx1ZSxcbiAgICAgIGV4ZWNDb250ZXh0LFxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBleGVjdXRlU2VsZWN0aW9uU2V0KHtcbiAgICBzZWxlY3Rpb25TZXQsXG4gICAgcm9vdFZhbHVlLFxuICAgIGV4ZWNDb250ZXh0LFxuICB9OiBFeGVjU2VsZWN0aW9uU2V0T3B0aW9ucyk6IEV4ZWNSZXN1bHQge1xuICAgIGNvbnN0IHsgZnJhZ21lbnRNYXAsIGNvbnRleHRWYWx1ZSwgdmFyaWFibGVWYWx1ZXM6IHZhcmlhYmxlcyB9ID0gZXhlY0NvbnRleHQ7XG4gICAgY29uc3QgZmluYWxSZXN1bHQ6IEV4ZWNSZXN1bHQgPSB7IHJlc3VsdDogbnVsbCB9O1xuXG4gICAgY29uc3Qgb2JqZWN0c1RvTWVyZ2U6IHsgW2tleTogc3RyaW5nXTogYW55IH1bXSA9IFtdO1xuXG4gICAgY29uc3Qgb2JqZWN0OiBTdG9yZU9iamVjdCA9IGNvbnRleHRWYWx1ZS5zdG9yZS5nZXQocm9vdFZhbHVlLmlkKTtcblxuICAgIGNvbnN0IHR5cGVuYW1lID1cbiAgICAgIChvYmplY3QgJiYgb2JqZWN0Ll9fdHlwZW5hbWUpIHx8XG4gICAgICAocm9vdFZhbHVlLmlkID09PSAnUk9PVF9RVUVSWScgJiYgJ1F1ZXJ5JykgfHxcbiAgICAgIHZvaWQgMDtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1pc3Npbmc8VD4ocmVzdWx0OiBFeGVjUmVzdWx0PFQ+KTogVCB7XG4gICAgICBpZiAocmVzdWx0Lm1pc3NpbmcpIHtcbiAgICAgICAgZmluYWxSZXN1bHQubWlzc2luZyA9IGZpbmFsUmVzdWx0Lm1pc3NpbmcgfHwgW107XG4gICAgICAgIGZpbmFsUmVzdWx0Lm1pc3NpbmcucHVzaCguLi5yZXN1bHQubWlzc2luZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0LnJlc3VsdDtcbiAgICB9XG5cbiAgICBzZWxlY3Rpb25TZXQuc2VsZWN0aW9ucy5mb3JFYWNoKHNlbGVjdGlvbiA9PiB7XG4gICAgICBpZiAoIXNob3VsZEluY2x1ZGUoc2VsZWN0aW9uLCB2YXJpYWJsZXMpKSB7XG4gICAgICAgIC8vIFNraXAgdGhpcyBlbnRpcmVseVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZpZWxkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgY29uc3QgZmllbGRSZXN1bHQgPSBoYW5kbGVNaXNzaW5nKFxuICAgICAgICAgIHRoaXMuZXhlY3V0ZUZpZWxkKG9iamVjdCwgdHlwZW5hbWUsIHNlbGVjdGlvbiwgZXhlY0NvbnRleHQpLFxuICAgICAgICApO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZmllbGRSZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgb2JqZWN0c1RvTWVyZ2UucHVzaCh7XG4gICAgICAgICAgICBbcmVzdWx0S2V5TmFtZUZyb21GaWVsZChzZWxlY3Rpb24pXTogZmllbGRSZXN1bHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGZyYWdtZW50OiBJbmxpbmVGcmFnbWVudE5vZGUgfCBGcmFnbWVudERlZmluaXRpb25Ob2RlO1xuXG4gICAgICAgIGlmIChpc0lubGluZUZyYWdtZW50KHNlbGVjdGlvbikpIHtcbiAgICAgICAgICBmcmFnbWVudCA9IHNlbGVjdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgbmFtZWQgZnJhZ21lbnRcbiAgICAgICAgICBmcmFnbWVudCA9IGZyYWdtZW50TWFwW3NlbGVjdGlvbi5uYW1lLnZhbHVlXTtcblxuICAgICAgICAgIGlmICghZnJhZ21lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBJbnZhcmlhbnRFcnJvcihgTm8gZnJhZ21lbnQgbmFtZWQgJHtzZWxlY3Rpb24ubmFtZS52YWx1ZX1gKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0eXBlQ29uZGl0aW9uID1cbiAgICAgICAgICBmcmFnbWVudC50eXBlQ29uZGl0aW9uICYmIGZyYWdtZW50LnR5cGVDb25kaXRpb24ubmFtZS52YWx1ZTtcblxuICAgICAgICBjb25zdCBtYXRjaCA9XG4gICAgICAgICAgIXR5cGVDb25kaXRpb24gfHxcbiAgICAgICAgICBleGVjQ29udGV4dC5mcmFnbWVudE1hdGNoZXIocm9vdFZhbHVlLCB0eXBlQ29uZGl0aW9uLCBjb250ZXh0VmFsdWUpO1xuXG4gICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgIGxldCBmcmFnbWVudEV4ZWNSZXN1bHQgPSB0aGlzLmV4ZWN1dGVTZWxlY3Rpb25TZXQoe1xuICAgICAgICAgICAgc2VsZWN0aW9uU2V0OiBmcmFnbWVudC5zZWxlY3Rpb25TZXQsXG4gICAgICAgICAgICByb290VmFsdWUsXG4gICAgICAgICAgICBleGVjQ29udGV4dCxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChtYXRjaCA9PT0gJ2hldXJpc3RpYycgJiYgZnJhZ21lbnRFeGVjUmVzdWx0Lm1pc3NpbmcpIHtcbiAgICAgICAgICAgIGZyYWdtZW50RXhlY1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgLi4uZnJhZ21lbnRFeGVjUmVzdWx0LFxuICAgICAgICAgICAgICBtaXNzaW5nOiBmcmFnbWVudEV4ZWNSZXN1bHQubWlzc2luZy5tYXAoaW5mbyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4uaW5mbywgdG9sZXJhYmxlOiB0cnVlIH07XG4gICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBvYmplY3RzVG9NZXJnZS5wdXNoKGhhbmRsZU1pc3NpbmcoZnJhZ21lbnRFeGVjUmVzdWx0KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFBlcmZvcm0gYSBzaW5nbGUgbWVyZ2UgYXQgdGhlIGVuZCBzbyB0aGF0IHdlIGNhbiBhdm9pZCBtYWtpbmcgbW9yZVxuICAgIC8vIGRlZmVuc2l2ZSBzaGFsbG93IGNvcGllcyB0aGFuIG5lY2Vzc2FyeS5cbiAgICBmaW5hbFJlc3VsdC5yZXN1bHQgPSBtZXJnZURlZXBBcnJheShvYmplY3RzVG9NZXJnZSk7XG5cbiAgICBpZiAodGhpcy5mcmVlemVSZXN1bHRzICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIE9iamVjdC5mcmVlemUoZmluYWxSZXN1bHQucmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmluYWxSZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIGV4ZWN1dGVGaWVsZChcbiAgICBvYmplY3Q6IFN0b3JlT2JqZWN0LFxuICAgIHR5cGVuYW1lOiBzdHJpbmcgfCB2b2lkLFxuICAgIGZpZWxkOiBGaWVsZE5vZGUsXG4gICAgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0LFxuICApOiBFeGVjUmVzdWx0IHtcbiAgICBjb25zdCB7IHZhcmlhYmxlVmFsdWVzOiB2YXJpYWJsZXMsIGNvbnRleHRWYWx1ZSB9ID0gZXhlY0NvbnRleHQ7XG4gICAgY29uc3QgZmllbGROYW1lID0gZmllbGQubmFtZS52YWx1ZTtcbiAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzT2JqZWN0RnJvbUZpZWxkKGZpZWxkLCB2YXJpYWJsZXMpO1xuXG4gICAgY29uc3QgaW5mbzogRXhlY0luZm8gPSB7XG4gICAgICByZXN1bHRLZXk6IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoZmllbGQpLFxuICAgICAgZGlyZWN0aXZlczogZ2V0RGlyZWN0aXZlSW5mb0Zyb21GaWVsZChmaWVsZCwgdmFyaWFibGVzKSxcbiAgICB9O1xuXG4gICAgY29uc3QgcmVhZFN0b3JlUmVzdWx0ID0gcmVhZFN0b3JlUmVzb2x2ZXIoXG4gICAgICBvYmplY3QsXG4gICAgICB0eXBlbmFtZSxcbiAgICAgIGZpZWxkTmFtZSxcbiAgICAgIGFyZ3MsXG4gICAgICBjb250ZXh0VmFsdWUsXG4gICAgICBpbmZvLFxuICAgICk7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWFkU3RvcmVSZXN1bHQucmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHRoaXMuY29tYmluZUV4ZWNSZXN1bHRzKFxuICAgICAgICByZWFkU3RvcmVSZXN1bHQsXG4gICAgICAgIHRoaXMuZXhlY3V0ZVN1YlNlbGVjdGVkQXJyYXkoe1xuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIGFycmF5OiByZWFkU3RvcmVSZXN1bHQucmVzdWx0LFxuICAgICAgICAgIGV4ZWNDb250ZXh0LFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGFsbCBzY2FsYXIgdHlwZXMgaGVyZVxuICAgIGlmICghZmllbGQuc2VsZWN0aW9uU2V0KSB7XG4gICAgICBhc3NlcnRTZWxlY3Rpb25TZXRGb3JJZFZhbHVlKGZpZWxkLCByZWFkU3RvcmVSZXN1bHQucmVzdWx0KTtcbiAgICAgIGlmICh0aGlzLmZyZWV6ZVJlc3VsdHMgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBtYXliZURlZXBGcmVlemUocmVhZFN0b3JlUmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZWFkU3RvcmVSZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRnJvbSBoZXJlIGRvd24sIHRoZSBmaWVsZCBoYXMgYSBzZWxlY3Rpb24gc2V0LCB3aGljaCBtZWFucyBpdCdzIHRyeWluZyB0b1xuICAgIC8vIHF1ZXJ5IGEgR3JhcGhRTE9iamVjdFR5cGVcbiAgICBpZiAocmVhZFN0b3JlUmVzdWx0LnJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAvLyBCYXNpY2FsbHkgYW55IGZpZWxkIGluIGEgR3JhcGhRTCByZXNwb25zZSBjYW4gYmUgbnVsbCwgb3IgbWlzc2luZ1xuICAgICAgcmV0dXJuIHJlYWRTdG9yZVJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm5lZCB2YWx1ZSBpcyBhbiBvYmplY3QsIGFuZCB0aGUgcXVlcnkgaGFzIGEgc3ViLXNlbGVjdGlvbi4gUmVjdXJzZS5cbiAgICByZXR1cm4gdGhpcy5jb21iaW5lRXhlY1Jlc3VsdHMoXG4gICAgICByZWFkU3RvcmVSZXN1bHQsXG4gICAgICB0aGlzLmV4ZWN1dGVTZWxlY3Rpb25TZXQoe1xuICAgICAgICBzZWxlY3Rpb25TZXQ6IGZpZWxkLnNlbGVjdGlvblNldCxcbiAgICAgICAgcm9vdFZhbHVlOiByZWFkU3RvcmVSZXN1bHQucmVzdWx0LFxuICAgICAgICBleGVjQ29udGV4dCxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNvbWJpbmVFeGVjUmVzdWx0czxUPihcbiAgICAuLi5leGVjUmVzdWx0czogRXhlY1Jlc3VsdDxUPltdXG4gICk6IEV4ZWNSZXN1bHQ8VD4ge1xuICAgIGxldCBtaXNzaW5nOiBFeGVjUmVzdWx0TWlzc2luZ0ZpZWxkW10gfCB1bmRlZmluZWQ7XG4gICAgZXhlY1Jlc3VsdHMuZm9yRWFjaChleGVjUmVzdWx0ID0+IHtcbiAgICAgIGlmIChleGVjUmVzdWx0Lm1pc3NpbmcpIHtcbiAgICAgICAgbWlzc2luZyA9IG1pc3NpbmcgfHwgW107XG4gICAgICAgIG1pc3NpbmcucHVzaCguLi5leGVjUmVzdWx0Lm1pc3NpbmcpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHQ6IGV4ZWNSZXN1bHRzLnBvcCgpIS5yZXN1bHQsXG4gICAgICBtaXNzaW5nLFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGV4ZWN1dGVTdWJTZWxlY3RlZEFycmF5KHtcbiAgICBmaWVsZCxcbiAgICBhcnJheSxcbiAgICBleGVjQ29udGV4dCxcbiAgfTogRXhlY1N1YlNlbGVjdGVkQXJyYXlPcHRpb25zKTogRXhlY1Jlc3VsdCB7XG4gICAgbGV0IG1pc3Npbmc6IEV4ZWNSZXN1bHRNaXNzaW5nRmllbGRbXSB8IHVuZGVmaW5lZDtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZU1pc3Npbmc8VD4oY2hpbGRSZXN1bHQ6IEV4ZWNSZXN1bHQ8VD4pOiBUIHtcbiAgICAgIGlmIChjaGlsZFJlc3VsdC5taXNzaW5nKSB7XG4gICAgICAgIG1pc3NpbmcgPSBtaXNzaW5nIHx8IFtdO1xuICAgICAgICBtaXNzaW5nLnB1c2goLi4uY2hpbGRSZXN1bHQubWlzc2luZyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjaGlsZFJlc3VsdC5yZXN1bHQ7XG4gICAgfVxuXG4gICAgYXJyYXkgPSBhcnJheS5tYXAoaXRlbSA9PiB7XG4gICAgICAvLyBudWxsIHZhbHVlIGluIGFycmF5XG4gICAgICBpZiAoaXRlbSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBpcyBhIG5lc3RlZCBhcnJheSwgcmVjdXJzZVxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZU1pc3NpbmcodGhpcy5leGVjdXRlU3ViU2VsZWN0ZWRBcnJheSh7XG4gICAgICAgICAgZmllbGQsXG4gICAgICAgICAgYXJyYXk6IGl0ZW0sXG4gICAgICAgICAgZXhlY0NvbnRleHQsXG4gICAgICAgIH0pKTtcbiAgICAgIH1cblxuICAgICAgLy8gVGhpcyBpcyBhbiBvYmplY3QsIHJ1biB0aGUgc2VsZWN0aW9uIHNldCBvbiBpdFxuICAgICAgaWYgKGZpZWxkLnNlbGVjdGlvblNldCkge1xuICAgICAgICByZXR1cm4gaGFuZGxlTWlzc2luZyh0aGlzLmV4ZWN1dGVTZWxlY3Rpb25TZXQoe1xuICAgICAgICAgIHNlbGVjdGlvblNldDogZmllbGQuc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIHJvb3RWYWx1ZTogaXRlbSxcbiAgICAgICAgICBleGVjQ29udGV4dCxcbiAgICAgICAgfSkpO1xuICAgICAgfVxuXG4gICAgICBhc3NlcnRTZWxlY3Rpb25TZXRGb3JJZFZhbHVlKGZpZWxkLCBpdGVtKTtcblxuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfSk7XG5cbiAgICBpZiAodGhpcy5mcmVlemVSZXN1bHRzICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIE9iamVjdC5mcmVlemUoYXJyYXkpO1xuICAgIH1cblxuICAgIHJldHVybiB7IHJlc3VsdDogYXJyYXksIG1pc3NpbmcgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTZWxlY3Rpb25TZXRGb3JJZFZhbHVlKFxuICBmaWVsZDogRmllbGROb2RlLFxuICB2YWx1ZTogYW55LFxuKSB7XG4gIGlmICghZmllbGQuc2VsZWN0aW9uU2V0ICYmIGlzSWRWYWx1ZSh2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgSW52YXJpYW50RXJyb3IoXG4gICAgICBgTWlzc2luZyBzZWxlY3Rpb24gc2V0IGZvciBvYmplY3Qgb2YgdHlwZSAke1xuICAgICAgICB2YWx1ZS50eXBlbmFtZVxuICAgICAgfSByZXR1cm5lZCBmb3IgcXVlcnkgZmllbGQgJHtmaWVsZC5uYW1lLnZhbHVlfWBcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRGcmFnbWVudE1hdGNoZXIoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0SWRWYWx1ZShpZFZhbHVlOiBJZFZhbHVlKSB7XG4gIGludmFyaWFudChpc0lkVmFsdWUoaWRWYWx1ZSksIGBcXFxuRW5jb3VudGVyZWQgYSBzdWItc2VsZWN0aW9uIG9uIHRoZSBxdWVyeSwgYnV0IHRoZSBzdG9yZSBkb2Vzbid0IGhhdmUgXFxcbmFuIG9iamVjdCByZWZlcmVuY2UuIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiBkdXJpbmcgbm9ybWFsIHVzZSB1bmxlc3MgeW91IGhhdmUgY3VzdG9tIGNvZGUgXFxcbnRoYXQgaXMgZGlyZWN0bHkgbWFuaXB1bGF0aW5nIHRoZSBzdG9yZTsgcGxlYXNlIGZpbGUgYW4gaXNzdWUuYCk7XG59XG5cbmZ1bmN0aW9uIHJlYWRTdG9yZVJlc29sdmVyKFxuICBvYmplY3Q6IFN0b3JlT2JqZWN0LFxuICB0eXBlbmFtZTogc3RyaW5nIHwgdm9pZCxcbiAgZmllbGROYW1lOiBzdHJpbmcsXG4gIGFyZ3M6IGFueSxcbiAgY29udGV4dDogUmVhZFN0b3JlQ29udGV4dCxcbiAgeyByZXN1bHRLZXksIGRpcmVjdGl2ZXMgfTogRXhlY0luZm8sXG4pOiBFeGVjUmVzdWx0PFN0b3JlVmFsdWU+IHtcbiAgbGV0IHN0b3JlS2V5TmFtZSA9IGZpZWxkTmFtZTtcbiAgaWYgKGFyZ3MgfHwgZGlyZWN0aXZlcykge1xuICAgIC8vIFdlIGhhcHBlbiB0byBrbm93IGhlcmUgdGhhdCBnZXRTdG9yZUtleU5hbWUgcmV0dXJucyBpdHMgZmlyc3RcbiAgICAvLyBhcmd1bWVudCB1bm1vZGlmaWVkIGlmIHRoZXJlIGFyZSBubyBhcmdzIG9yIGRpcmVjdGl2ZXMsIHNvIHdlIGNhblxuICAgIC8vIGF2b2lkIGNhbGxpbmcgdGhlIGZ1bmN0aW9uIGF0IGFsbCBpbiB0aGF0IGNhc2UsIGFzIGEgc21hbGwgYnV0XG4gICAgLy8gaW1wb3J0YW50IG9wdGltaXphdGlvbiB0byB0aGlzIGZyZXF1ZW50bHkgZXhlY3V0ZWQgY29kZS5cbiAgICBzdG9yZUtleU5hbWUgPSBnZXRTdG9yZUtleU5hbWUoc3RvcmVLZXlOYW1lLCBhcmdzLCBkaXJlY3RpdmVzKTtcbiAgfVxuXG4gIGxldCBmaWVsZFZhbHVlOiBTdG9yZVZhbHVlIHwgdm9pZCA9IHZvaWQgMDtcblxuICBpZiAob2JqZWN0KSB7XG4gICAgZmllbGRWYWx1ZSA9IG9iamVjdFtzdG9yZUtleU5hbWVdO1xuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGZpZWxkVmFsdWUgPT09ICd1bmRlZmluZWQnICYmXG4gICAgICBjb250ZXh0LmNhY2hlUmVkaXJlY3RzICYmXG4gICAgICB0eXBlb2YgdHlwZW5hbWUgPT09ICdzdHJpbmcnXG4gICAgKSB7XG4gICAgICAvLyBMb29rIGZvciB0aGUgdHlwZSBpbiB0aGUgY3VzdG9tIHJlc29sdmVyIG1hcFxuICAgICAgY29uc3QgdHlwZSA9IGNvbnRleHQuY2FjaGVSZWRpcmVjdHNbdHlwZW5hbWVdO1xuICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgLy8gTG9vayBmb3IgdGhlIGZpZWxkIGluIHRoZSBjdXN0b20gcmVzb2x2ZXIgbWFwXG4gICAgICAgIGNvbnN0IHJlc29sdmVyID0gdHlwZVtmaWVsZE5hbWVdO1xuICAgICAgICBpZiAocmVzb2x2ZXIpIHtcbiAgICAgICAgICBmaWVsZFZhbHVlID0gcmVzb2x2ZXIob2JqZWN0LCBhcmdzLCB7XG4gICAgICAgICAgICBnZXRDYWNoZUtleShzdG9yZU9iajogU3RvcmVPYmplY3QpIHtcbiAgICAgICAgICAgICAgY29uc3QgaWQgPSBjb250ZXh0LmRhdGFJZEZyb21PYmplY3QhKHN0b3JlT2JqKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGlkICYmIHRvSWRWYWx1ZSh7XG4gICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgdHlwZW5hbWU6IHN0b3JlT2JqLl9fdHlwZW5hbWUsXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgZmllbGRWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVzdWx0OiBmaWVsZFZhbHVlLFxuICAgICAgbWlzc2luZzogW3tcbiAgICAgICAgb2JqZWN0LFxuICAgICAgICBmaWVsZE5hbWU6IHN0b3JlS2V5TmFtZSxcbiAgICAgICAgdG9sZXJhYmxlOiBmYWxzZSxcbiAgICAgIH1dLFxuICAgIH07XG4gIH1cblxuICBpZiAoaXNKc29uVmFsdWUoZmllbGRWYWx1ZSkpIHtcbiAgICBmaWVsZFZhbHVlID0gZmllbGRWYWx1ZS5qc29uO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICByZXN1bHQ6IGZpZWxkVmFsdWUsXG4gIH07XG59XG4iLCJpbXBvcnQgeyBOb3JtYWxpemVkQ2FjaGUsIE5vcm1hbGl6ZWRDYWNoZU9iamVjdCwgU3RvcmVPYmplY3QgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIE9iamVjdENhY2hlIGltcGxlbWVudHMgTm9ybWFsaXplZENhY2hlIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGRhdGE6IE5vcm1hbGl6ZWRDYWNoZU9iamVjdCA9IE9iamVjdC5jcmVhdGUobnVsbCkpIHt9XG5cbiAgcHVibGljIHRvT2JqZWN0KCkge1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH1cblxuICBwdWJsaWMgZ2V0KGRhdGFJZDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtkYXRhSWRdITtcbiAgfVxuXG4gIHB1YmxpYyBzZXQoZGF0YUlkOiBzdHJpbmcsIHZhbHVlOiBTdG9yZU9iamVjdCkge1xuICAgIHRoaXMuZGF0YVtkYXRhSWRdID0gdmFsdWU7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlKGRhdGFJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5kYXRhW2RhdGFJZF0gPSB2b2lkIDA7XG4gIH1cblxuICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgdGhpcy5kYXRhID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyByZXBsYWNlKG5ld0RhdGE6IE5vcm1hbGl6ZWRDYWNoZU9iamVjdCkge1xuICAgIHRoaXMuZGF0YSA9IG5ld0RhdGEgfHwgT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdE5vcm1hbGl6ZWRDYWNoZUZhY3RvcnkoXG4gIHNlZWQ/OiBOb3JtYWxpemVkQ2FjaGVPYmplY3QsXG4pOiBOb3JtYWxpemVkQ2FjaGUge1xuICByZXR1cm4gbmV3IE9iamVjdENhY2hlKHNlZWQpO1xufVxuIiwiaW1wb3J0IHtcbiAgU2VsZWN0aW9uU2V0Tm9kZSxcbiAgRmllbGROb2RlLFxuICBEb2N1bWVudE5vZGUsXG4gIElubGluZUZyYWdtZW50Tm9kZSxcbiAgRnJhZ21lbnREZWZpbml0aW9uTm9kZSxcbn0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBGcmFnbWVudE1hdGNoZXIgfSBmcm9tICcuL3JlYWRGcm9tU3RvcmUnO1xuXG5pbXBvcnQge1xuICBhc3NpZ24sXG4gIGNyZWF0ZUZyYWdtZW50TWFwLFxuICBGcmFnbWVudE1hcCxcbiAgZ2V0RGVmYXVsdFZhbHVlcyxcbiAgZ2V0RnJhZ21lbnREZWZpbml0aW9ucyxcbiAgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbixcbiAgSWRWYWx1ZSxcbiAgaXNGaWVsZCxcbiAgaXNJZFZhbHVlLFxuICBpc0lubGluZUZyYWdtZW50LFxuICBpc1Byb2R1Y3Rpb24sXG4gIHJlc3VsdEtleU5hbWVGcm9tRmllbGQsXG4gIHNob3VsZEluY2x1ZGUsXG4gIHN0b3JlS2V5TmFtZUZyb21GaWVsZCxcbiAgU3RvcmVWYWx1ZSxcbiAgdG9JZFZhbHVlLFxuICBpc0VxdWFsLFxufSBmcm9tICdhcG9sbG8tdXRpbGl0aWVzJztcblxuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAndHMtaW52YXJpYW50JztcblxuaW1wb3J0IHsgT2JqZWN0Q2FjaGUgfSBmcm9tICcuL29iamVjdENhY2hlJztcbmltcG9ydCB7IGRlZmF1bHROb3JtYWxpemVkQ2FjaGVGYWN0b3J5IH0gZnJvbSAnLi9kZXBUcmFja2luZ0NhY2hlJztcblxuaW1wb3J0IHtcbiAgSWRHZXR0ZXIsXG4gIE5vcm1hbGl6ZWRDYWNoZSxcbiAgUmVhZFN0b3JlQ29udGV4dCxcbiAgU3RvcmVPYmplY3QsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgV3JpdGVFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHVibGljIHR5cGUgPSAnV3JpdGVFcnJvcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmhhbmNlRXJyb3JXaXRoRG9jdW1lbnQoZXJyb3I6IEVycm9yLCBkb2N1bWVudDogRG9jdW1lbnROb2RlKSB7XG4gIC8vIFhYWCBBIGJpdCBoYWNreSBtYXliZSAuLi5cbiAgY29uc3QgZW5oYW5jZWRFcnJvciA9IG5ldyBXcml0ZUVycm9yKFxuICAgIGBFcnJvciB3cml0aW5nIHJlc3VsdCB0byBzdG9yZSBmb3IgcXVlcnk6XFxuICR7SlNPTi5zdHJpbmdpZnkoZG9jdW1lbnQpfWAsXG4gICk7XG4gIGVuaGFuY2VkRXJyb3IubWVzc2FnZSArPSAnXFxuJyArIGVycm9yLm1lc3NhZ2U7XG4gIGVuaGFuY2VkRXJyb3Iuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgcmV0dXJuIGVuaGFuY2VkRXJyb3I7XG59XG5cbmV4cG9ydCB0eXBlIFdyaXRlQ29udGV4dCA9IHtcbiAgcmVhZG9ubHkgc3RvcmU6IE5vcm1hbGl6ZWRDYWNoZTtcbiAgcmVhZG9ubHkgcHJvY2Vzc2VkRGF0YT86IHsgW3g6IHN0cmluZ106IEZpZWxkTm9kZVtdIH07XG4gIHJlYWRvbmx5IHZhcmlhYmxlcz86IGFueTtcbiAgcmVhZG9ubHkgZGF0YUlkRnJvbU9iamVjdD86IElkR2V0dGVyO1xuICByZWFkb25seSBmcmFnbWVudE1hcD86IEZyYWdtZW50TWFwO1xuICByZWFkb25seSBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbj86IEZyYWdtZW50TWF0Y2hlcjtcbn07XG5cbmV4cG9ydCBjbGFzcyBTdG9yZVdyaXRlciB7XG4gIC8qKlxuICAgKiBXcml0ZXMgdGhlIHJlc3VsdCBvZiBhIHF1ZXJ5IHRvIHRoZSBzdG9yZS5cbiAgICpcbiAgICogQHBhcmFtIHJlc3VsdCBUaGUgcmVzdWx0IG9iamVjdCByZXR1cm5lZCBmb3IgdGhlIHF1ZXJ5IGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gcXVlcnkgVGhlIHF1ZXJ5IGRvY3VtZW50IHdob3NlIHJlc3VsdCB3ZSBhcmUgd3JpdGluZyB0byB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEBwYXJhbSBzdG9yZSBUaGUge0BsaW5rIE5vcm1hbGl6ZWRDYWNoZX0gdXNlZCBieSBBcG9sbG8gZm9yIHRoZSBgZGF0YWAgcG9ydGlvbiBvZiB0aGUgc3RvcmUuXG4gICAqXG4gICAqIEBwYXJhbSB2YXJpYWJsZXMgQSBtYXAgZnJvbSB0aGUgbmFtZSBvZiBhIHZhcmlhYmxlIHRvIGl0cyB2YWx1ZS4gVGhlc2UgdmFyaWFibGVzIGNhbiBiZVxuICAgKiByZWZlcmVuY2VkIGJ5IHRoZSBxdWVyeSBkb2N1bWVudC5cbiAgICpcbiAgICogQHBhcmFtIGRhdGFJZEZyb21PYmplY3QgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gb2JqZWN0IGlkZW50aWZpZXIgZ2l2ZW4gYSBwYXJ0aWN1bGFyIHJlc3VsdFxuICAgKiBvYmplY3QuIFNlZSB0aGUgc3RvcmUgZG9jdW1lbnRhdGlvbiBmb3IgZGV0YWlscyBhbmQgYW4gZXhhbXBsZSBvZiB0aGlzIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gZnJhZ21lbnRNYXRjaGVyRnVuY3Rpb24gQSBmdW5jdGlvbiB0byB1c2UgZm9yIG1hdGNoaW5nIGZyYWdtZW50IGNvbmRpdGlvbnMgaW4gR3JhcGhRTCBkb2N1bWVudHNcbiAgICovXG4gIHB1YmxpYyB3cml0ZVF1ZXJ5VG9TdG9yZSh7XG4gICAgcXVlcnksXG4gICAgcmVzdWx0LFxuICAgIHN0b3JlID0gZGVmYXVsdE5vcm1hbGl6ZWRDYWNoZUZhY3RvcnkoKSxcbiAgICB2YXJpYWJsZXMsXG4gICAgZGF0YUlkRnJvbU9iamVjdCxcbiAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbixcbiAgfToge1xuICAgIHF1ZXJ5OiBEb2N1bWVudE5vZGU7XG4gICAgcmVzdWx0OiBPYmplY3Q7XG4gICAgc3RvcmU/OiBOb3JtYWxpemVkQ2FjaGU7XG4gICAgdmFyaWFibGVzPzogT2JqZWN0O1xuICAgIGRhdGFJZEZyb21PYmplY3Q/OiBJZEdldHRlcjtcbiAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbj86IEZyYWdtZW50TWF0Y2hlcjtcbiAgfSk6IE5vcm1hbGl6ZWRDYWNoZSB7XG4gICAgcmV0dXJuIHRoaXMud3JpdGVSZXN1bHRUb1N0b3JlKHtcbiAgICAgIGRhdGFJZDogJ1JPT1RfUVVFUlknLFxuICAgICAgcmVzdWx0LFxuICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LFxuICAgICAgc3RvcmUsXG4gICAgICB2YXJpYWJsZXMsXG4gICAgICBkYXRhSWRGcm9tT2JqZWN0LFxuICAgICAgZnJhZ21lbnRNYXRjaGVyRnVuY3Rpb24sXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgd3JpdGVSZXN1bHRUb1N0b3JlKHtcbiAgICBkYXRhSWQsXG4gICAgcmVzdWx0LFxuICAgIGRvY3VtZW50LFxuICAgIHN0b3JlID0gZGVmYXVsdE5vcm1hbGl6ZWRDYWNoZUZhY3RvcnkoKSxcbiAgICB2YXJpYWJsZXMsXG4gICAgZGF0YUlkRnJvbU9iamVjdCxcbiAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbixcbiAgfToge1xuICAgIGRhdGFJZDogc3RyaW5nO1xuICAgIHJlc3VsdDogYW55O1xuICAgIGRvY3VtZW50OiBEb2N1bWVudE5vZGU7XG4gICAgc3RvcmU/OiBOb3JtYWxpemVkQ2FjaGU7XG4gICAgdmFyaWFibGVzPzogT2JqZWN0O1xuICAgIGRhdGFJZEZyb21PYmplY3Q/OiBJZEdldHRlcjtcbiAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbj86IEZyYWdtZW50TWF0Y2hlcjtcbiAgfSk6IE5vcm1hbGl6ZWRDYWNoZSB7XG4gICAgLy8gWFhYIFRPRE8gUkVGQUNUT1I6IHRoaXMgaXMgYSB0ZW1wb3Jhcnkgd29ya2Fyb3VuZCB1bnRpbCBxdWVyeSBub3JtYWxpemF0aW9uIGlzIG1hZGUgdG8gd29yayB3aXRoIGRvY3VtZW50cy5cbiAgICBjb25zdCBvcGVyYXRpb25EZWZpbml0aW9uID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihkb2N1bWVudCkhO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLndyaXRlU2VsZWN0aW9uU2V0VG9TdG9yZSh7XG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgZGF0YUlkLFxuICAgICAgICBzZWxlY3Rpb25TZXQ6IG9wZXJhdGlvbkRlZmluaXRpb24uc2VsZWN0aW9uU2V0LFxuICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgc3RvcmUsXG4gICAgICAgICAgcHJvY2Vzc2VkRGF0YToge30sXG4gICAgICAgICAgdmFyaWFibGVzOiBhc3NpZ24oXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGdldERlZmF1bHRWYWx1ZXMob3BlcmF0aW9uRGVmaW5pdGlvbiksXG4gICAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgKSxcbiAgICAgICAgICBkYXRhSWRGcm9tT2JqZWN0LFxuICAgICAgICAgIGZyYWdtZW50TWFwOiBjcmVhdGVGcmFnbWVudE1hcChnZXRGcmFnbWVudERlZmluaXRpb25zKGRvY3VtZW50KSksXG4gICAgICAgICAgZnJhZ21lbnRNYXRjaGVyRnVuY3Rpb24sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB0aHJvdyBlbmhhbmNlRXJyb3JXaXRoRG9jdW1lbnQoZSwgZG9jdW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB3cml0ZVNlbGVjdGlvblNldFRvU3RvcmUoe1xuICAgIHJlc3VsdCxcbiAgICBkYXRhSWQsXG4gICAgc2VsZWN0aW9uU2V0LFxuICAgIGNvbnRleHQsXG4gIH06IHtcbiAgICBkYXRhSWQ6IHN0cmluZztcbiAgICByZXN1bHQ6IGFueTtcbiAgICBzZWxlY3Rpb25TZXQ6IFNlbGVjdGlvblNldE5vZGU7XG4gICAgY29udGV4dDogV3JpdGVDb250ZXh0O1xuICB9KTogTm9ybWFsaXplZENhY2hlIHtcbiAgICBjb25zdCB7IHZhcmlhYmxlcywgc3RvcmUsIGZyYWdtZW50TWFwIH0gPSBjb250ZXh0O1xuXG4gICAgc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMuZm9yRWFjaChzZWxlY3Rpb24gPT4ge1xuICAgICAgaWYgKCFzaG91bGRJbmNsdWRlKHNlbGVjdGlvbiwgdmFyaWFibGVzKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZpZWxkKHNlbGVjdGlvbikpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0RmllbGRLZXk6IHN0cmluZyA9IHJlc3VsdEtleU5hbWVGcm9tRmllbGQoc2VsZWN0aW9uKTtcbiAgICAgICAgY29uc3QgdmFsdWU6IGFueSA9IHJlc3VsdFtyZXN1bHRGaWVsZEtleV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB0aGlzLndyaXRlRmllbGRUb1N0b3JlKHtcbiAgICAgICAgICAgIGRhdGFJZCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgZmllbGQ6IHNlbGVjdGlvbixcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGV0IGlzRGVmZXJlZCA9IGZhbHNlO1xuICAgICAgICAgIGxldCBpc0NsaWVudCA9IGZhbHNlO1xuICAgICAgICAgIGlmIChzZWxlY3Rpb24uZGlyZWN0aXZlcyAmJiBzZWxlY3Rpb24uZGlyZWN0aXZlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgYSBkZWZlcmVkIGZpZWxkIHdlIGRvbid0IG5lZWQgdG8gdGhyb3cgLyB3YXJuLlxuICAgICAgICAgICAgaXNEZWZlcmVkID0gc2VsZWN0aW9uLmRpcmVjdGl2ZXMuc29tZShcbiAgICAgICAgICAgICAgZGlyZWN0aXZlID0+IGRpcmVjdGl2ZS5uYW1lICYmIGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSAnZGVmZXInLFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gV2hlbiB1c2luZyB0aGUgQGNsaWVudCBkaXJlY3RpdmUsIGl0IG1pZ2h0IGJlIGRlc2lyYWJsZSBpblxuICAgICAgICAgICAgLy8gc29tZSBjYXNlcyB0byB3YW50IHRvIHdyaXRlIGEgc2VsZWN0aW9uIHNldCB0byB0aGUgc3RvcmUsXG4gICAgICAgICAgICAvLyB3aXRob3V0IGhhdmluZyBhbGwgb2YgdGhlIHNlbGVjdGlvbiBzZXQgdmFsdWVzIGF2YWlsYWJsZS5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYmVjYXVzZSB0aGUgQGNsaWVudCBmaWVsZCB2YWx1ZXMgbWlnaHQgaGF2ZSBhbHJlYWR5XG4gICAgICAgICAgICAvLyBiZWVuIHdyaXR0ZW4gdG8gdGhlIGNhY2hlIHNlcGFyYXRlbHkgKGUuZy4gdmlhIEFwb2xsb1xuICAgICAgICAgICAgLy8gQ2FjaGUncyBgd3JpdGVEYXRhYCBjYXBhYmlsaXRpZXMpLiBCZWNhdXNlIG9mIHRoaXMsIHdlJ2xsXG4gICAgICAgICAgICAvLyBza2lwIHRoZSBtaXNzaW5nIGZpZWxkIHdhcm5pbmcgZm9yIGZpZWxkcyB3aXRoIEBjbGllbnRcbiAgICAgICAgICAgIC8vIGRpcmVjdGl2ZXMuXG4gICAgICAgICAgICBpc0NsaWVudCA9IHNlbGVjdGlvbi5kaXJlY3RpdmVzLnNvbWUoXG4gICAgICAgICAgICAgIGRpcmVjdGl2ZSA9PiBkaXJlY3RpdmUubmFtZSAmJiBkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gJ2NsaWVudCcsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghaXNEZWZlcmVkICYmICFpc0NsaWVudCAmJiBjb250ZXh0LmZyYWdtZW50TWF0Y2hlckZ1bmN0aW9uKSB7XG4gICAgICAgICAgICAvLyBYWFggV2UnZCBsaWtlIHRvIHRocm93IGFuIGVycm9yLCBidXQgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5J3Mgc2FrZVxuICAgICAgICAgICAgLy8gd2UganVzdCBwcmludCBhIHdhcm5pbmcgZm9yIHRoZSB0aW1lIGJlaW5nLlxuICAgICAgICAgICAgLy90aHJvdyBuZXcgV3JpdGVFcnJvcihgTWlzc2luZyBmaWVsZCAke3Jlc3VsdEZpZWxkS2V5fSBpbiAke0pTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikuc3Vic3RyaW5nKDAsIDEwMCl9YCk7XG4gICAgICAgICAgICBpbnZhcmlhbnQud2FybihcbiAgICAgICAgICAgICAgYE1pc3NpbmcgZmllbGQgJHtyZXN1bHRGaWVsZEtleX0gaW4gJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAyLFxuICAgICAgICAgICAgICApLnN1YnN0cmluZygwLCAxMDApfWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyBub3QgYSBmaWVsZCwgc28gaXQgbXVzdCBiZSBhIGZyYWdtZW50LCBlaXRoZXIgaW5saW5lIG9yIG5hbWVkXG4gICAgICAgIGxldCBmcmFnbWVudDogSW5saW5lRnJhZ21lbnROb2RlIHwgRnJhZ21lbnREZWZpbml0aW9uTm9kZTtcblxuICAgICAgICBpZiAoaXNJbmxpbmVGcmFnbWVudChzZWxlY3Rpb24pKSB7XG4gICAgICAgICAgZnJhZ21lbnQgPSBzZWxlY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTmFtZWQgZnJhZ21lbnRcbiAgICAgICAgICBmcmFnbWVudCA9IChmcmFnbWVudE1hcCB8fCB7fSlbc2VsZWN0aW9uLm5hbWUudmFsdWVdO1xuICAgICAgICAgIGludmFyaWFudChmcmFnbWVudCwgYE5vIGZyYWdtZW50IG5hbWVkICR7c2VsZWN0aW9uLm5hbWUudmFsdWV9LmApO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG1hdGNoZXMgPSB0cnVlO1xuICAgICAgICBpZiAoY29udGV4dC5mcmFnbWVudE1hdGNoZXJGdW5jdGlvbiAmJiBmcmFnbWVudC50eXBlQ29uZGl0aW9uKSB7XG4gICAgICAgICAgLy8gVE9ETyB3ZSBuZWVkIHRvIHJld3JpdGUgdGhlIGZyYWdtZW50IG1hdGNoZXJzIGZvciB0aGlzIHRvIHdvcmsgcHJvcGVybHkgYW5kIGVmZmljaWVudGx5XG4gICAgICAgICAgLy8gUmlnaHQgbm93IHdlIGhhdmUgdG8gcHJldGVuZCB0aGF0IHdlJ3JlIHBhc3NpbmcgaW4gYW4gaWRWYWx1ZSBhbmQgdGhhdCB0aGVyZSdzIGEgc3RvcmVcbiAgICAgICAgICAvLyBvbiB0aGUgY29udGV4dC5cbiAgICAgICAgICBjb25zdCBpZCA9IGRhdGFJZCB8fCAnc2VsZic7XG4gICAgICAgICAgY29uc3QgaWRWYWx1ZSA9IHRvSWRWYWx1ZSh7IGlkLCB0eXBlbmFtZTogdW5kZWZpbmVkIH0pO1xuICAgICAgICAgIGNvbnN0IGZha2VDb250ZXh0OiBSZWFkU3RvcmVDb250ZXh0ID0ge1xuICAgICAgICAgICAgLy8gTk9URTogZmFrZUNvbnRleHQgYWx3YXlzIHVzZXMgT2JqZWN0Q2FjaGVcbiAgICAgICAgICAgIC8vIHNpbmNlIHRoaXMgaXMgb25seSB0byBlbnN1cmUgdGhlIHJldHVybiB2YWx1ZSBvZiAnbWF0Y2hlcydcbiAgICAgICAgICAgIHN0b3JlOiBuZXcgT2JqZWN0Q2FjaGUoeyBbaWRdOiByZXN1bHQgfSksXG4gICAgICAgICAgICBjYWNoZVJlZGlyZWN0czoge30sXG4gICAgICAgICAgfTtcbiAgICAgICAgICBjb25zdCBtYXRjaCA9IGNvbnRleHQuZnJhZ21lbnRNYXRjaGVyRnVuY3Rpb24oXG4gICAgICAgICAgICBpZFZhbHVlLFxuICAgICAgICAgICAgZnJhZ21lbnQudHlwZUNvbmRpdGlvbi5uYW1lLnZhbHVlLFxuICAgICAgICAgICAgZmFrZUNvbnRleHQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWlzUHJvZHVjdGlvbigpICYmIG1hdGNoID09PSAnaGV1cmlzdGljJykge1xuICAgICAgICAgICAgaW52YXJpYW50LmVycm9yKCdXQVJOSU5HOiBoZXVyaXN0aWMgZnJhZ21lbnQgbWF0Y2hpbmcgZ29pbmcgb24hJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG1hdGNoZXMgPSAhIW1hdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICB0aGlzLndyaXRlU2VsZWN0aW9uU2V0VG9TdG9yZSh7XG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICBzZWxlY3Rpb25TZXQ6IGZyYWdtZW50LnNlbGVjdGlvblNldCxcbiAgICAgICAgICAgIGRhdGFJZCxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBzdG9yZTtcbiAgfVxuXG4gIHByaXZhdGUgd3JpdGVGaWVsZFRvU3RvcmUoe1xuICAgIGZpZWxkLFxuICAgIHZhbHVlLFxuICAgIGRhdGFJZCxcbiAgICBjb250ZXh0LFxuICB9OiB7XG4gICAgZmllbGQ6IEZpZWxkTm9kZTtcbiAgICB2YWx1ZTogYW55O1xuICAgIGRhdGFJZDogc3RyaW5nO1xuICAgIGNvbnRleHQ6IFdyaXRlQ29udGV4dDtcbiAgfSkge1xuICAgIGNvbnN0IHsgdmFyaWFibGVzLCBkYXRhSWRGcm9tT2JqZWN0LCBzdG9yZSB9ID0gY29udGV4dDtcblxuICAgIGxldCBzdG9yZVZhbHVlOiBTdG9yZVZhbHVlO1xuICAgIGxldCBzdG9yZU9iamVjdDogU3RvcmVPYmplY3Q7XG5cbiAgICBjb25zdCBzdG9yZUZpZWxkTmFtZTogc3RyaW5nID0gc3RvcmVLZXlOYW1lRnJvbUZpZWxkKGZpZWxkLCB2YXJpYWJsZXMpO1xuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHNjYWxhciB2YWx1ZS4uLlxuICAgIGlmICghZmllbGQuc2VsZWN0aW9uU2V0IHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICBzdG9yZVZhbHVlID1cbiAgICAgICAgdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG4gICAgICAgICAgPyAvLyBJZiB0aGUgc2NhbGFyIHZhbHVlIGlzIGEgSlNPTiBibG9iLCB3ZSBoYXZlIHRvIFwiZXNjYXBlXCIgaXQgc28gaXQgY2Fu4oCZdCBwcmV0ZW5kIHRvIGJlXG4gICAgICAgICAgICAvLyBhbiBpZC5cbiAgICAgICAgICAgIHsgdHlwZTogJ2pzb24nLCBqc29uOiB2YWx1ZSB9XG4gICAgICAgICAgOiAvLyBPdGhlcndpc2UsIGp1c3Qgc3RvcmUgdGhlIHNjYWxhciBkaXJlY3RseSBpbiB0aGUgc3RvcmUuXG4gICAgICAgICAgICB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBjb25zdCBnZW5lcmF0ZWRJZCA9IGAke2RhdGFJZH0uJHtzdG9yZUZpZWxkTmFtZX1gO1xuXG4gICAgICBzdG9yZVZhbHVlID0gdGhpcy5wcm9jZXNzQXJyYXlWYWx1ZShcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGdlbmVyYXRlZElkLFxuICAgICAgICBmaWVsZC5zZWxlY3Rpb25TZXQsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJdCdzIGFuIG9iamVjdFxuICAgICAgbGV0IHZhbHVlRGF0YUlkID0gYCR7ZGF0YUlkfS4ke3N0b3JlRmllbGROYW1lfWA7XG4gICAgICBsZXQgZ2VuZXJhdGVkID0gdHJ1ZTtcblxuICAgICAgLy8gV2Ugb25seSBwcmVwZW5kIHRoZSAnJCcgaWYgdGhlIHZhbHVlRGF0YUlkIGlzbid0IGFscmVhZHkgYSBnZW5lcmF0ZWRcbiAgICAgIC8vIGlkLlxuICAgICAgaWYgKCFpc0dlbmVyYXRlZElkKHZhbHVlRGF0YUlkKSkge1xuICAgICAgICB2YWx1ZURhdGFJZCA9ICckJyArIHZhbHVlRGF0YUlkO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YUlkRnJvbU9iamVjdCkge1xuICAgICAgICBjb25zdCBzZW1hbnRpY0lkID0gZGF0YUlkRnJvbU9iamVjdCh2YWx1ZSk7XG5cbiAgICAgICAgLy8gV2UgdGhyb3cgYW4gZXJyb3IgaWYgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiB0aGUgaWQgaXMgJyQuIFRoaXMgaXNcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSB1c2UgdGhhdCBjaGFyYWN0ZXIgdG8gZGVzaWduYXRlIGFuIEFwb2xsby1nZW5lcmF0ZWQgaWRcbiAgICAgICAgLy8gYW5kIHdlIHVzZSB0aGUgZGlzdGluY3Rpb24gYmV0d2VlbiB1c2VyLWRlc2lnaW5hdGVkIGFuZCBhcHBsaWNhdGlvbi1wcm92aWRlZFxuICAgICAgICAvLyBpZHMgd2hlbiBtYW5hZ2luZyBvdmVyd3JpdGVzLlxuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgIXNlbWFudGljSWQgfHwgIWlzR2VuZXJhdGVkSWQoc2VtYW50aWNJZCksXG4gICAgICAgICAgJ0lEcyByZXR1cm5lZCBieSBkYXRhSWRGcm9tT2JqZWN0IGNhbm5vdCBiZWdpbiB3aXRoIHRoZSBcIiRcIiBjaGFyYWN0ZXIuJyxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgc2VtYW50aWNJZCB8fFxuICAgICAgICAgICh0eXBlb2Ygc2VtYW50aWNJZCA9PT0gJ251bWJlcicgJiYgc2VtYW50aWNJZCA9PT0gMClcbiAgICAgICAgKSB7XG4gICAgICAgICAgdmFsdWVEYXRhSWQgPSBzZW1hbnRpY0lkO1xuICAgICAgICAgIGdlbmVyYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNEYXRhUHJvY2Vzc2VkKHZhbHVlRGF0YUlkLCBmaWVsZCwgY29udGV4dC5wcm9jZXNzZWREYXRhKSkge1xuICAgICAgICB0aGlzLndyaXRlU2VsZWN0aW9uU2V0VG9TdG9yZSh7XG4gICAgICAgICAgZGF0YUlkOiB2YWx1ZURhdGFJZCxcbiAgICAgICAgICByZXN1bHQ6IHZhbHVlLFxuICAgICAgICAgIHNlbGVjdGlvblNldDogZmllbGQuc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBXZSB0YWtlIHRoZSBpZCBhbmQgZXNjYXBlIGl0IChpLmUuIHdyYXAgaXQgd2l0aCBhbiBlbmNsb3Npbmcgb2JqZWN0KS5cbiAgICAgIC8vIFRoaXMgYWxsb3dzIHVzIHRvIGRpc3Rpbmd1aXNoIElEcyBmcm9tIG5vcm1hbCBzY2FsYXJzLlxuICAgICAgY29uc3QgdHlwZW5hbWUgPSB2YWx1ZS5fX3R5cGVuYW1lO1xuICAgICAgc3RvcmVWYWx1ZSA9IHRvSWRWYWx1ZSh7IGlkOiB2YWx1ZURhdGFJZCwgdHlwZW5hbWUgfSwgZ2VuZXJhdGVkKTtcblxuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgd2FzIGEgZ2VuZXJhdGVkIGlkIGF0IHRoZSBsb2NhdGlvbiB3aGVyZSB3ZSdyZVxuICAgICAgLy8gYWJvdXQgdG8gcGxhY2UgdGhpcyBuZXcgaWQuIElmIHRoZXJlIHdhcywgd2UgaGF2ZSB0byBtZXJnZSB0aGVcbiAgICAgIC8vIGRhdGEgZnJvbSB0aGF0IGlkIHdpdGggdGhlIGRhdGEgd2UncmUgYWJvdXQgdG8gd3JpdGUgaW4gdGhlIHN0b3JlLlxuICAgICAgc3RvcmVPYmplY3QgPSBzdG9yZS5nZXQoZGF0YUlkKTtcbiAgICAgIGNvbnN0IGVzY2FwZWRJZCA9XG4gICAgICAgIHN0b3JlT2JqZWN0ICYmIChzdG9yZU9iamVjdFtzdG9yZUZpZWxkTmFtZV0gYXMgSWRWYWx1ZSB8IHVuZGVmaW5lZCk7XG4gICAgICBpZiAoZXNjYXBlZElkICE9PSBzdG9yZVZhbHVlICYmIGlzSWRWYWx1ZShlc2NhcGVkSWQpKSB7XG4gICAgICAgIGNvbnN0IGhhZFR5cGVuYW1lID0gZXNjYXBlZElkLnR5cGVuYW1lICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGhhc1R5cGVuYW1lID0gdHlwZW5hbWUgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgdHlwZW5hbWVDaGFuZ2VkID1cbiAgICAgICAgICBoYWRUeXBlbmFtZSAmJiBoYXNUeXBlbmFtZSAmJiBlc2NhcGVkSWQudHlwZW5hbWUgIT09IHR5cGVuYW1lO1xuXG4gICAgICAgIC8vIElmIHRoZXJlIGlzIGFscmVhZHkgYSByZWFsIGlkIGluIHRoZSBzdG9yZSBhbmQgdGhlIGN1cnJlbnQgaWQgd2VcbiAgICAgICAgLy8gYXJlIGRlYWxpbmcgd2l0aCBpcyBnZW5lcmF0ZWQsIHdlIHRocm93IGFuIGVycm9yLlxuICAgICAgICAvLyBPbmUgZXhjZXB0aW9uIHdlIGFsbG93IGlzIHdoZW4gdGhlIHR5cGVuYW1lIGhhcyBjaGFuZ2VkLCB3aGljaCBvY2N1cnNcbiAgICAgICAgLy8gd2hlbiBzY2hlbWEgZGVmaW5lcyBhIHVuaW9uLCBib3RoIHdpdGggYW5kIHdpdGhvdXQgYW4gSUQgaW4gdGhlIHNhbWUgcGxhY2UuXG4gICAgICAgIC8vIGNoZWNrcyBpZiB3ZSBcImxvc3RcIiB0aGUgcmVhZCBpZFxuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgIWdlbmVyYXRlZCB8fCBlc2NhcGVkSWQuZ2VuZXJhdGVkIHx8IHR5cGVuYW1lQ2hhbmdlZCxcbiAgICAgICAgICBgU3RvcmUgZXJyb3I6IHRoZSBhcHBsaWNhdGlvbiBhdHRlbXB0ZWQgdG8gd3JpdGUgYW4gb2JqZWN0IHdpdGggbm8gcHJvdmlkZWQgaWQgYnV0IHRoZSBzdG9yZSBhbHJlYWR5IGNvbnRhaW5zIGFuIGlkIG9mICR7XG4gICAgICAgICAgICBlc2NhcGVkSWQuaWRcbiAgICAgICAgICB9IGZvciB0aGlzIG9iamVjdC4gVGhlIHNlbGVjdGlvblNldCB0aGF0IHdhcyB0cnlpbmcgdG8gYmUgd3JpdHRlbiBpczpcXG4ke1xuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkoZmllbGQpXG4gICAgICAgICAgfWAsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gY2hlY2tzIGlmIHdlIFwibG9zdFwiIHRoZSB0eXBlbmFtZVxuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgIWhhZFR5cGVuYW1lIHx8IGhhc1R5cGVuYW1lLFxuICAgICAgICAgIGBTdG9yZSBlcnJvcjogdGhlIGFwcGxpY2F0aW9uIGF0dGVtcHRlZCB0byB3cml0ZSBhbiBvYmplY3Qgd2l0aCBubyBwcm92aWRlZCB0eXBlbmFtZSBidXQgdGhlIHN0b3JlIGFscmVhZHkgY29udGFpbnMgYW4gb2JqZWN0IHdpdGggdHlwZW5hbWUgb2YgJHtcbiAgICAgICAgICAgIGVzY2FwZWRJZC50eXBlbmFtZVxuICAgICAgICAgIH0gZm9yIHRoZSBvYmplY3Qgb2YgaWQgJHtlc2NhcGVkSWQuaWR9LiBUaGUgc2VsZWN0aW9uU2V0IHRoYXQgd2FzIHRyeWluZyB0byBiZSB3cml0dGVuIGlzOlxcbiR7XG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShmaWVsZClcbiAgICAgICAgICB9YCxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoZXNjYXBlZElkLmdlbmVyYXRlZCkge1xuICAgICAgICAgIC8vIFdlIHNob3VsZCBvbmx5IG1lcmdlIGlmIGl0J3MgYW4gb2JqZWN0IG9mIHRoZSBzYW1lIHR5cGUsXG4gICAgICAgICAgLy8gb3RoZXJ3aXNlIHdlIHNob3VsZCBkZWxldGUgdGhlIGdlbmVyYXRlZCBvYmplY3RcbiAgICAgICAgICBpZiAodHlwZW5hbWVDaGFuZ2VkKSB7XG4gICAgICAgICAgICAvLyBPbmx5IGRlbGV0ZSB0aGUgZ2VuZXJhdGVkIG9iamVjdCB3aGVuIHRoZSBvbGQgb2JqZWN0IHdhc1xuICAgICAgICAgICAgLy8gaW5saW5lZCwgYW5kIHRoZSBuZXcgb2JqZWN0IGlzIG5vdC4gVGhpcyBpcyBpbmRpY2F0ZWQgYnlcbiAgICAgICAgICAgIC8vIHRoZSBvbGQgaWQgYmVpbmcgZ2VuZXJhdGVkLCBhbmQgdGhlIG5ldyBpZCBiZWluZyByZWFsLlxuICAgICAgICAgICAgaWYgKCFnZW5lcmF0ZWQpIHtcbiAgICAgICAgICAgICAgc3RvcmUuZGVsZXRlKGVzY2FwZWRJZC5pZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1lcmdlV2l0aEdlbmVyYXRlZChlc2NhcGVkSWQuaWQsIChzdG9yZVZhbHVlIGFzIElkVmFsdWUpLmlkLCBzdG9yZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RvcmVPYmplY3QgPSBzdG9yZS5nZXQoZGF0YUlkKTtcbiAgICBpZiAoIXN0b3JlT2JqZWN0IHx8ICFpc0VxdWFsKHN0b3JlVmFsdWUsIHN0b3JlT2JqZWN0W3N0b3JlRmllbGROYW1lXSkpIHtcbiAgICAgIHN0b3JlLnNldChkYXRhSWQsIHtcbiAgICAgICAgLi4uc3RvcmVPYmplY3QsXG4gICAgICAgIFtzdG9yZUZpZWxkTmFtZV06IHN0b3JlVmFsdWUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHByb2Nlc3NBcnJheVZhbHVlKFxuICAgIHZhbHVlOiBhbnlbXSxcbiAgICBnZW5lcmF0ZWRJZDogc3RyaW5nLFxuICAgIHNlbGVjdGlvblNldDogU2VsZWN0aW9uU2V0Tm9kZSxcbiAgICBjb250ZXh0OiBXcml0ZUNvbnRleHQsXG4gICk6IGFueVtdIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKChpdGVtOiBhbnksIGluZGV4OiBhbnkpID0+IHtcbiAgICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBsZXQgaXRlbURhdGFJZCA9IGAke2dlbmVyYXRlZElkfS4ke2luZGV4fWA7XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NBcnJheVZhbHVlKGl0ZW0sIGl0ZW1EYXRhSWQsIHNlbGVjdGlvblNldCwgY29udGV4dCk7XG4gICAgICB9XG5cbiAgICAgIGxldCBnZW5lcmF0ZWQgPSB0cnVlO1xuXG4gICAgICBpZiAoY29udGV4dC5kYXRhSWRGcm9tT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IHNlbWFudGljSWQgPSBjb250ZXh0LmRhdGFJZEZyb21PYmplY3QoaXRlbSk7XG5cbiAgICAgICAgaWYgKHNlbWFudGljSWQpIHtcbiAgICAgICAgICBpdGVtRGF0YUlkID0gc2VtYW50aWNJZDtcbiAgICAgICAgICBnZW5lcmF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIWlzRGF0YVByb2Nlc3NlZChpdGVtRGF0YUlkLCBzZWxlY3Rpb25TZXQsIGNvbnRleHQucHJvY2Vzc2VkRGF0YSkpIHtcbiAgICAgICAgdGhpcy53cml0ZVNlbGVjdGlvblNldFRvU3RvcmUoe1xuICAgICAgICAgIGRhdGFJZDogaXRlbURhdGFJZCxcbiAgICAgICAgICByZXN1bHQ6IGl0ZW0sXG4gICAgICAgICAgc2VsZWN0aW9uU2V0LFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9JZFZhbHVlKFxuICAgICAgICB7IGlkOiBpdGVtRGF0YUlkLCB0eXBlbmFtZTogaXRlbS5fX3R5cGVuYW1lIH0sXG4gICAgICAgIGdlbmVyYXRlZCxcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn1cblxuLy8gQ2hlY2tzIGlmIHRoZSBpZCBnaXZlbiBpcyBhbiBpZCB0aGF0IHdhcyBnZW5lcmF0ZWQgYnkgQXBvbGxvXG4vLyByYXRoZXIgdGhhbiBieSBkYXRhSWRGcm9tT2JqZWN0LlxuZnVuY3Rpb24gaXNHZW5lcmF0ZWRJZChpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBpZFswXSA9PT0gJyQnO1xufVxuXG5mdW5jdGlvbiBtZXJnZVdpdGhHZW5lcmF0ZWQoXG4gIGdlbmVyYXRlZEtleTogc3RyaW5nLFxuICByZWFsS2V5OiBzdHJpbmcsXG4gIGNhY2hlOiBOb3JtYWxpemVkQ2FjaGUsXG4pOiBib29sZWFuIHtcbiAgaWYgKGdlbmVyYXRlZEtleSA9PT0gcmVhbEtleSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGdlbmVyYXRlZCA9IGNhY2hlLmdldChnZW5lcmF0ZWRLZXkpO1xuICBjb25zdCByZWFsID0gY2FjaGUuZ2V0KHJlYWxLZXkpO1xuICBsZXQgbWFkZUNoYW5nZXMgPSBmYWxzZTtcblxuICBPYmplY3Qua2V5cyhnZW5lcmF0ZWQpLmZvckVhY2goa2V5ID0+IHtcbiAgICBjb25zdCB2YWx1ZSA9IGdlbmVyYXRlZFtrZXldO1xuICAgIGNvbnN0IHJlYWxWYWx1ZSA9IHJlYWxba2V5XTtcblxuICAgIGlmIChcbiAgICAgIGlzSWRWYWx1ZSh2YWx1ZSkgJiZcbiAgICAgIGlzR2VuZXJhdGVkSWQodmFsdWUuaWQpICYmXG4gICAgICBpc0lkVmFsdWUocmVhbFZhbHVlKSAmJlxuICAgICAgIWlzRXF1YWwodmFsdWUsIHJlYWxWYWx1ZSkgJiZcbiAgICAgIG1lcmdlV2l0aEdlbmVyYXRlZCh2YWx1ZS5pZCwgcmVhbFZhbHVlLmlkLCBjYWNoZSlcbiAgICApIHtcbiAgICAgIG1hZGVDaGFuZ2VzID0gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIGNhY2hlLmRlbGV0ZShnZW5lcmF0ZWRLZXkpO1xuICBjb25zdCBuZXdSZWFsVmFsdWUgPSB7IC4uLmdlbmVyYXRlZCwgLi4ucmVhbCB9O1xuXG4gIGlmIChpc0VxdWFsKG5ld1JlYWxWYWx1ZSwgcmVhbCkpIHtcbiAgICByZXR1cm4gbWFkZUNoYW5nZXM7XG4gIH1cblxuICBjYWNoZS5zZXQocmVhbEtleSwgbmV3UmVhbFZhbHVlKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzRGF0YVByb2Nlc3NlZChcbiAgZGF0YUlkOiBzdHJpbmcsXG4gIGZpZWxkOiBGaWVsZE5vZGUgfCBTZWxlY3Rpb25TZXROb2RlLFxuICBwcm9jZXNzZWREYXRhPzogeyBbeDogc3RyaW5nXTogKEZpZWxkTm9kZSB8IFNlbGVjdGlvblNldE5vZGUpW10gfSxcbik6IGJvb2xlYW4ge1xuICBpZiAoIXByb2Nlc3NlZERhdGEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocHJvY2Vzc2VkRGF0YVtkYXRhSWRdKSB7XG4gICAgaWYgKHByb2Nlc3NlZERhdGFbZGF0YUlkXS5pbmRleE9mKGZpZWxkKSA+PSAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvY2Vzc2VkRGF0YVtkYXRhSWRdLnB1c2goZmllbGQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwcm9jZXNzZWREYXRhW2RhdGFJZF0gPSBbZmllbGRdO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuIiwiLy8gTWFrZSBidWlsdGlucyBsaWtlIE1hcCBhbmQgU2V0IHNhZmUgdG8gdXNlIHdpdGggbm9uLWV4dGVuc2libGUgb2JqZWN0cy5cbmltcG9ydCAnLi9maXhQb2x5ZmlsbHMnO1xuXG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgQ2FjaGUsIEFwb2xsb0NhY2hlLCBUcmFuc2FjdGlvbiB9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5cbmltcG9ydCB7IGFkZFR5cGVuYW1lVG9Eb2N1bWVudCwgY2FuVXNlV2Vha01hcCB9IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xuXG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnb3B0aW1pc20nO1xuXG5pbXBvcnQgeyBpbnZhcmlhbnQsIEludmFyaWFudEVycm9yIH0gZnJvbSAndHMtaW52YXJpYW50JztcblxuaW1wb3J0IHsgSGV1cmlzdGljRnJhZ21lbnRNYXRjaGVyIH0gZnJvbSAnLi9mcmFnbWVudE1hdGNoZXInO1xuaW1wb3J0IHtcbiAgQXBvbGxvUmVkdWNlckNvbmZpZyxcbiAgTm9ybWFsaXplZENhY2hlLFxuICBOb3JtYWxpemVkQ2FjaGVPYmplY3QsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQgeyBTdG9yZVJlYWRlciB9IGZyb20gJy4vcmVhZEZyb21TdG9yZSc7XG5pbXBvcnQgeyBTdG9yZVdyaXRlciB9IGZyb20gJy4vd3JpdGVUb1N0b3JlJztcbmltcG9ydCB7IERlcFRyYWNraW5nQ2FjaGUgfSBmcm9tICcuL2RlcFRyYWNraW5nQ2FjaGUnO1xuaW1wb3J0IHsgS2V5VHJpZSB9IGZyb20gJ29wdGltaXNtJztcbmltcG9ydCB7IE9iamVjdENhY2hlIH0gZnJvbSAnLi9vYmplY3RDYWNoZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5NZW1vcnlDYWNoZUNvbmZpZyBleHRlbmRzIEFwb2xsb1JlZHVjZXJDb25maWcge1xuICByZXN1bHRDYWNoaW5nPzogYm9vbGVhbjtcbiAgZnJlZXplUmVzdWx0cz86IGJvb2xlYW47XG59XG5cbmNvbnN0IGRlZmF1bHRDb25maWc6IEluTWVtb3J5Q2FjaGVDb25maWcgPSB7XG4gIGZyYWdtZW50TWF0Y2hlcjogbmV3IEhldXJpc3RpY0ZyYWdtZW50TWF0Y2hlcigpLFxuICBkYXRhSWRGcm9tT2JqZWN0OiBkZWZhdWx0RGF0YUlkRnJvbU9iamVjdCxcbiAgYWRkVHlwZW5hbWU6IHRydWUsXG4gIHJlc3VsdENhY2hpbmc6IHRydWUsXG4gIGZyZWV6ZVJlc3VsdHM6IGZhbHNlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHREYXRhSWRGcm9tT2JqZWN0KHJlc3VsdDogYW55KTogc3RyaW5nIHwgbnVsbCB7XG4gIGlmIChyZXN1bHQuX190eXBlbmFtZSkge1xuICAgIGlmIChyZXN1bHQuaWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGAke3Jlc3VsdC5fX3R5cGVuYW1lfToke3Jlc3VsdC5pZH1gO1xuICAgIH1cbiAgICBpZiAocmVzdWx0Ll9pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gYCR7cmVzdWx0Ll9fdHlwZW5hbWV9OiR7cmVzdWx0Ll9pZH1gO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuY29uc3QgaGFzT3duID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZXhwb3J0IGNsYXNzIE9wdGltaXN0aWNDYWNoZUxheWVyIGV4dGVuZHMgT2JqZWN0Q2FjaGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgb3B0aW1pc3RpY0lkOiBzdHJpbmcsXG4gICAgLy8gT3B0aW1pc3RpY0NhY2hlTGF5ZXIgb2JqZWN0cyBhbHdheXMgd3JhcCBzb21lIG90aGVyIHBhcmVudCBjYWNoZSwgc29cbiAgICAvLyB0aGlzLnBhcmVudCBzaG91bGQgbmV2ZXIgYmUgbnVsbC5cbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyZW50OiBOb3JtYWxpemVkQ2FjaGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHRyYW5zYWN0aW9uOiBUcmFuc2FjdGlvbjxOb3JtYWxpemVkQ2FjaGVPYmplY3Q+LFxuICApIHtcbiAgICBzdXBlcihPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgfVxuXG4gIHB1YmxpYyB0b09iamVjdCgpOiBOb3JtYWxpemVkQ2FjaGVPYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLnBhcmVudC50b09iamVjdCgpLFxuICAgICAgLi4udGhpcy5kYXRhLFxuICAgIH07XG4gIH1cblxuICAvLyBBbGwgdGhlIG90aGVyIGFjY2Vzc29yIG1ldGhvZHMgb2YgT2JqZWN0Q2FjaGUgd29yayB3aXRob3V0IGtub3dpbmcgYWJvdXRcbiAgLy8gdGhpcy5wYXJlbnQsIGJ1dCB0aGUgZ2V0IG1ldGhvZCBuZWVkcyB0byBiZSBvdmVycmlkZGVuIHRvIGltcGxlbWVudCB0aGVcbiAgLy8gZmFsbGJhY2sgdGhpcy5wYXJlbnQuZ2V0KGRhdGFJZCkgYmVoYXZpb3IuXG4gIHB1YmxpYyBnZXQoZGF0YUlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzT3duLmNhbGwodGhpcy5kYXRhLCBkYXRhSWQpXG4gICAgICA/IHRoaXMuZGF0YVtkYXRhSWRdXG4gICAgICA6IHRoaXMucGFyZW50LmdldChkYXRhSWQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbk1lbW9yeUNhY2hlIGV4dGVuZHMgQXBvbGxvQ2FjaGU8Tm9ybWFsaXplZENhY2hlT2JqZWN0PiB7XG4gIHByaXZhdGUgZGF0YTogTm9ybWFsaXplZENhY2hlO1xuICBwcml2YXRlIG9wdGltaXN0aWNEYXRhOiBOb3JtYWxpemVkQ2FjaGU7XG5cbiAgcHJvdGVjdGVkIGNvbmZpZzogSW5NZW1vcnlDYWNoZUNvbmZpZztcbiAgcHJpdmF0ZSB3YXRjaGVzID0gbmV3IFNldDxDYWNoZS5XYXRjaE9wdGlvbnM+KCk7XG4gIHByaXZhdGUgYWRkVHlwZW5hbWU6IGJvb2xlYW47XG4gIHByaXZhdGUgdHlwZW5hbWVEb2N1bWVudENhY2hlID0gbmV3IE1hcDxEb2N1bWVudE5vZGUsIERvY3VtZW50Tm9kZT4oKTtcbiAgcHJpdmF0ZSBzdG9yZVJlYWRlcjogU3RvcmVSZWFkZXI7XG4gIHByaXZhdGUgc3RvcmVXcml0ZXI6IFN0b3JlV3JpdGVyO1xuICBwcml2YXRlIGNhY2hlS2V5Um9vdCA9IG5ldyBLZXlUcmllPG9iamVjdD4oY2FuVXNlV2Vha01hcCk7XG5cbiAgLy8gU2V0IHRoaXMgd2hpbGUgaW4gYSB0cmFuc2FjdGlvbiB0byBwcmV2ZW50IGJyb2FkY2FzdHMuLi5cbiAgLy8gZG9uJ3QgZm9yZ2V0IHRvIHR1cm4gaXQgYmFjayBvbiFcbiAgcHJpdmF0ZSBzaWxlbmNlQnJvYWRjYXN0OiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IoY29uZmlnOiBJbk1lbW9yeUNhY2hlQ29uZmlnID0ge30pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuY29uZmlnID0geyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5jb25maWcgfTtcblxuICAgIC8vIGJhY2t3YXJkcyBjb21wYXRcbiAgICBpZiAoKHRoaXMuY29uZmlnIGFzIGFueSkuY3VzdG9tUmVzb2x2ZXJzKSB7XG4gICAgICBpbnZhcmlhbnQud2FybihcbiAgICAgICAgJ2N1c3RvbVJlc29sdmVycyBoYXZlIGJlZW4gcmVuYW1lZCB0byBjYWNoZVJlZGlyZWN0cy4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNvbmZpZyBhcyB3ZSB3aWxsIGJlIGRlcHJlY2F0aW5nIGN1c3RvbVJlc29sdmVycyBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uLicsXG4gICAgICApO1xuICAgICAgdGhpcy5jb25maWcuY2FjaGVSZWRpcmVjdHMgPSAodGhpcy5jb25maWcgYXMgYW55KS5jdXN0b21SZXNvbHZlcnM7XG4gICAgfVxuXG4gICAgaWYgKCh0aGlzLmNvbmZpZyBhcyBhbnkpLmNhY2hlUmVzb2x2ZXJzKSB7XG4gICAgICBpbnZhcmlhbnQud2FybihcbiAgICAgICAgJ2NhY2hlUmVzb2x2ZXJzIGhhdmUgYmVlbiByZW5hbWVkIHRvIGNhY2hlUmVkaXJlY3RzLiBQbGVhc2UgdXBkYXRlIHlvdXIgY29uZmlnIGFzIHdlIHdpbGwgYmUgZGVwcmVjYXRpbmcgY2FjaGVSZXNvbHZlcnMgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbi4nLFxuICAgICAgKTtcbiAgICAgIHRoaXMuY29uZmlnLmNhY2hlUmVkaXJlY3RzID0gKHRoaXMuY29uZmlnIGFzIGFueSkuY2FjaGVSZXNvbHZlcnM7XG4gICAgfVxuXG4gICAgdGhpcy5hZGRUeXBlbmFtZSA9ICEhdGhpcy5jb25maWcuYWRkVHlwZW5hbWU7XG5cbiAgICAvLyBQYXNzaW5nIHsgcmVzdWx0Q2FjaGluZzogZmFsc2UgfSBpbiB0aGUgSW5NZW1vcnlDYWNoZSBjb25zdHJ1Y3RvciBvcHRpb25zXG4gICAgLy8gd2lsbCBjb21wbGV0ZWx5IGRpc2FibGUgZGVwZW5kZW5jeSB0cmFja2luZywgd2hpY2ggd2lsbCBpbXByb3ZlIG1lbW9yeVxuICAgIC8vIHVzYWdlIGJ1dCB3b3JzZW4gdGhlIHBlcmZvcm1hbmNlIG9mIHJlcGVhdGVkIHJlYWRzLlxuICAgIHRoaXMuZGF0YSA9IHRoaXMuY29uZmlnLnJlc3VsdENhY2hpbmdcbiAgICAgID8gbmV3IERlcFRyYWNraW5nQ2FjaGUoKVxuICAgICAgOiBuZXcgT2JqZWN0Q2FjaGUoKTtcblxuICAgIC8vIFdoZW4gbm8gb3B0aW1pc3RpYyB3cml0ZXMgYXJlIGN1cnJlbnRseSBhY3RpdmUsIGNhY2hlLm9wdGltaXN0aWNEYXRhID09PVxuICAgIC8vIGNhY2hlLmRhdGEsIHNvIHRoZXJlIGFyZSBubyBhZGRpdGlvbmFsIGxheWVycyBvbiB0b3Agb2YgdGhlIGFjdHVhbCBkYXRhLlxuICAgIC8vIFdoZW4gYW4gb3B0aW1pc3RpYyB1cGRhdGUgaGFwcGVucywgdGhpcy5vcHRpbWlzdGljRGF0YSB3aWxsIGJlY29tZSBhXG4gICAgLy8gbGlua2VkIGxpc3Qgb2YgT3B0aW1pc3RpY0NhY2hlTGF5ZXIgb2JqZWN0cyB0aGF0IHRlcm1pbmF0ZXMgd2l0aCB0aGVcbiAgICAvLyBvcmlnaW5hbCB0aGlzLmRhdGEgY2FjaGUgb2JqZWN0LlxuICAgIHRoaXMub3B0aW1pc3RpY0RhdGEgPSB0aGlzLmRhdGE7XG5cbiAgICB0aGlzLnN0b3JlV3JpdGVyID0gbmV3IFN0b3JlV3JpdGVyKCk7XG4gICAgdGhpcy5zdG9yZVJlYWRlciA9IG5ldyBTdG9yZVJlYWRlcih7XG4gICAgICBjYWNoZUtleVJvb3Q6IHRoaXMuY2FjaGVLZXlSb290LFxuICAgICAgZnJlZXplUmVzdWx0czogY29uZmlnLmZyZWV6ZVJlc3VsdHMsXG4gICAgfSk7XG5cbiAgICBjb25zdCBjYWNoZSA9IHRoaXM7XG4gICAgY29uc3QgeyBtYXliZUJyb2FkY2FzdFdhdGNoIH0gPSBjYWNoZTtcbiAgICB0aGlzLm1heWJlQnJvYWRjYXN0V2F0Y2ggPSB3cmFwKChjOiBDYWNoZS5XYXRjaE9wdGlvbnMpID0+IHtcbiAgICAgIHJldHVybiBtYXliZUJyb2FkY2FzdFdhdGNoLmNhbGwodGhpcywgYyk7XG4gICAgfSwge1xuICAgICAgbWFrZUNhY2hlS2V5KGM6IENhY2hlLldhdGNoT3B0aW9ucykge1xuICAgICAgICBpZiAoYy5vcHRpbWlzdGljKSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgcmVhZGluZyBvcHRpbWlzdGljIGRhdGEsIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHRoaXMuZGF0YVxuICAgICAgICAgIC8vIGlzIGEgRGVwVHJhY2tpbmdDYWNoZSwgc2luY2UgaXQgd2lsbCBiZSBpZ25vcmVkLlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjLnByZXZpb3VzUmVzdWx0KSB7XG4gICAgICAgICAgLy8gSWYgYSBwcmV2aW91c1Jlc3VsdCB3YXMgcHJvdmlkZWQsIGFzc3VtZSB0aGUgY2FsbGVyIHdvdWxkIHByZWZlclxuICAgICAgICAgIC8vIHRvIGNvbXBhcmUgdGhlIHByZXZpb3VzIGRhdGEgdG8gdGhlIG5ldyBkYXRhIHRvIGRldGVybWluZSB3aGV0aGVyXG4gICAgICAgICAgLy8gdG8gYnJvYWRjYXN0LCBzbyB3ZSBzaG91bGQgZGlzYWJsZSBjYWNoaW5nIGJ5IHJldHVybmluZyBoZXJlLCB0b1xuICAgICAgICAgIC8vIGdpdmUgbWF5YmVCcm9hZGNhc3RXYXRjaCBhIGNoYW5jZSB0byBkbyB0aGF0IGNvbXBhcmlzb24uXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNhY2hlLmRhdGEgaW5zdGFuY2VvZiBEZXBUcmFja2luZ0NhY2hlKSB7XG4gICAgICAgICAgLy8gUmV0dXJuIGEgY2FjaGUga2V5ICh0aHVzIGVuYWJsaW5nIGNhY2hpbmcpIG9ubHkgaWYgd2UncmUgY3VycmVudGx5XG4gICAgICAgICAgLy8gdXNpbmcgYSBkYXRhIHN0b3JlIHRoYXQgY2FuIHRyYWNrIGNhY2hlIGRlcGVuZGVuY2llcy5cbiAgICAgICAgICByZXR1cm4gY2FjaGUuY2FjaGVLZXlSb290Lmxvb2t1cChcbiAgICAgICAgICAgIGMucXVlcnksXG4gICAgICAgICAgICBKU09OLnN0cmluZ2lmeShjLnZhcmlhYmxlcyksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHJlc3RvcmUoZGF0YTogTm9ybWFsaXplZENhY2hlT2JqZWN0KTogdGhpcyB7XG4gICAgaWYgKGRhdGEpIHRoaXMuZGF0YS5yZXBsYWNlKGRhdGEpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIGV4dHJhY3Qob3B0aW1pc3RpYzogYm9vbGVhbiA9IGZhbHNlKTogTm9ybWFsaXplZENhY2hlT2JqZWN0IHtcbiAgICByZXR1cm4gKG9wdGltaXN0aWMgPyB0aGlzLm9wdGltaXN0aWNEYXRhIDogdGhpcy5kYXRhKS50b09iamVjdCgpO1xuICB9XG5cbiAgcHVibGljIHJlYWQ8VD4ob3B0aW9uczogQ2FjaGUuUmVhZE9wdGlvbnMpOiBUIHwgbnVsbCB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnJvb3RJZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgdHlwZW9mIHRoaXMuZGF0YS5nZXQob3B0aW9ucy5yb290SWQpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgeyBmcmFnbWVudE1hdGNoZXIgfSA9IHRoaXMuY29uZmlnO1xuICAgIGNvbnN0IGZyYWdtZW50TWF0Y2hlckZ1bmN0aW9uID0gZnJhZ21lbnRNYXRjaGVyICYmIGZyYWdtZW50TWF0Y2hlci5tYXRjaDtcblxuICAgIHJldHVybiB0aGlzLnN0b3JlUmVhZGVyLnJlYWRRdWVyeUZyb21TdG9yZSh7XG4gICAgICBzdG9yZTogb3B0aW9ucy5vcHRpbWlzdGljID8gdGhpcy5vcHRpbWlzdGljRGF0YSA6IHRoaXMuZGF0YSxcbiAgICAgIHF1ZXJ5OiB0aGlzLnRyYW5zZm9ybURvY3VtZW50KG9wdGlvbnMucXVlcnkpLFxuICAgICAgdmFyaWFibGVzOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgIHJvb3RJZDogb3B0aW9ucy5yb290SWQsXG4gICAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbixcbiAgICAgIHByZXZpb3VzUmVzdWx0OiBvcHRpb25zLnByZXZpb3VzUmVzdWx0LFxuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICB9KSB8fCBudWxsO1xuICB9XG5cbiAgcHVibGljIHdyaXRlKHdyaXRlOiBDYWNoZS5Xcml0ZU9wdGlvbnMpOiB2b2lkIHtcbiAgICBjb25zdCB7IGZyYWdtZW50TWF0Y2hlciB9ID0gdGhpcy5jb25maWc7XG4gICAgY29uc3QgZnJhZ21lbnRNYXRjaGVyRnVuY3Rpb24gPSBmcmFnbWVudE1hdGNoZXIgJiYgZnJhZ21lbnRNYXRjaGVyLm1hdGNoO1xuXG4gICAgdGhpcy5zdG9yZVdyaXRlci53cml0ZVJlc3VsdFRvU3RvcmUoe1xuICAgICAgZGF0YUlkOiB3cml0ZS5kYXRhSWQsXG4gICAgICByZXN1bHQ6IHdyaXRlLnJlc3VsdCxcbiAgICAgIHZhcmlhYmxlczogd3JpdGUudmFyaWFibGVzLFxuICAgICAgZG9jdW1lbnQ6IHRoaXMudHJhbnNmb3JtRG9jdW1lbnQod3JpdGUucXVlcnkpLFxuICAgICAgc3RvcmU6IHRoaXMuZGF0YSxcbiAgICAgIGRhdGFJZEZyb21PYmplY3Q6IHRoaXMuY29uZmlnLmRhdGFJZEZyb21PYmplY3QsXG4gICAgICBmcmFnbWVudE1hdGNoZXJGdW5jdGlvbixcbiAgICB9KTtcblxuICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcygpO1xuICB9XG5cbiAgcHVibGljIGRpZmY8VD4ocXVlcnk6IENhY2hlLkRpZmZPcHRpb25zKTogQ2FjaGUuRGlmZlJlc3VsdDxUPiB7XG4gICAgY29uc3QgeyBmcmFnbWVudE1hdGNoZXIgfSA9IHRoaXMuY29uZmlnO1xuICAgIGNvbnN0IGZyYWdtZW50TWF0Y2hlckZ1bmN0aW9uID0gZnJhZ21lbnRNYXRjaGVyICYmIGZyYWdtZW50TWF0Y2hlci5tYXRjaDtcblxuICAgIHJldHVybiB0aGlzLnN0b3JlUmVhZGVyLmRpZmZRdWVyeUFnYWluc3RTdG9yZSh7XG4gICAgICBzdG9yZTogcXVlcnkub3B0aW1pc3RpYyA/IHRoaXMub3B0aW1pc3RpY0RhdGEgOiB0aGlzLmRhdGEsXG4gICAgICBxdWVyeTogdGhpcy50cmFuc2Zvcm1Eb2N1bWVudChxdWVyeS5xdWVyeSksXG4gICAgICB2YXJpYWJsZXM6IHF1ZXJ5LnZhcmlhYmxlcyxcbiAgICAgIHJldHVyblBhcnRpYWxEYXRhOiBxdWVyeS5yZXR1cm5QYXJ0aWFsRGF0YSxcbiAgICAgIHByZXZpb3VzUmVzdWx0OiBxdWVyeS5wcmV2aW91c1Jlc3VsdCxcbiAgICAgIGZyYWdtZW50TWF0Y2hlckZ1bmN0aW9uLFxuICAgICAgY29uZmlnOiB0aGlzLmNvbmZpZyxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB3YXRjaCh3YXRjaDogQ2FjaGUuV2F0Y2hPcHRpb25zKTogKCkgPT4gdm9pZCB7XG4gICAgdGhpcy53YXRjaGVzLmFkZCh3YXRjaCk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy53YXRjaGVzLmRlbGV0ZSh3YXRjaCk7XG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBldmljdChxdWVyeTogQ2FjaGUuRXZpY3RPcHRpb25zKTogQ2FjaGUuRXZpY3Rpb25SZXN1bHQge1xuICAgIHRocm93IG5ldyBJbnZhcmlhbnRFcnJvcihgZXZpY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIG9uIEluTWVtb3J5IENhY2hlYCk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5kYXRhLmNsZWFyKCk7XG4gICAgdGhpcy5icm9hZGNhc3RXYXRjaGVzKCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlT3B0aW1pc3RpYyhpZFRvUmVtb3ZlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB0b1JlYXBwbHk6IE9wdGltaXN0aWNDYWNoZUxheWVyW10gPSBbXTtcbiAgICBsZXQgcmVtb3ZlZENvdW50ID0gMDtcbiAgICBsZXQgbGF5ZXIgPSB0aGlzLm9wdGltaXN0aWNEYXRhO1xuXG4gICAgd2hpbGUgKGxheWVyIGluc3RhbmNlb2YgT3B0aW1pc3RpY0NhY2hlTGF5ZXIpIHtcbiAgICAgIGlmIChsYXllci5vcHRpbWlzdGljSWQgPT09IGlkVG9SZW1vdmUpIHtcbiAgICAgICAgKytyZW1vdmVkQ291bnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0b1JlYXBwbHkucHVzaChsYXllcik7XG4gICAgICB9XG4gICAgICBsYXllciA9IGxheWVyLnBhcmVudDtcbiAgICB9XG5cbiAgICBpZiAocmVtb3ZlZENvdW50ID4gMCkge1xuICAgICAgLy8gUmVzZXQgdGhpcy5vcHRpbWlzdGljRGF0YSB0byB0aGUgZmlyc3Qgbm9uLU9wdGltaXN0aWNDYWNoZUxheWVyIG9iamVjdCxcbiAgICAgIC8vIHdoaWNoIGlzIGFsbW9zdCBjZXJ0YWlubHkgdGhpcy5kYXRhLlxuICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YSA9IGxheWVyO1xuXG4gICAgICAvLyBSZWFwcGx5IHRoZSBsYXllcnMgd2hvc2Ugb3B0aW1pc3RpYyBJRHMgZG8gbm90IG1hdGNoIHRoZSByZW1vdmVkIElELlxuICAgICAgd2hpbGUgKHRvUmVhcHBseS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnN0IGxheWVyID0gdG9SZWFwcGx5LnBvcCgpITtcbiAgICAgICAgdGhpcy5wZXJmb3JtVHJhbnNhY3Rpb24obGF5ZXIudHJhbnNhY3Rpb24sIGxheWVyLm9wdGltaXN0aWNJZCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcygpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBwZXJmb3JtVHJhbnNhY3Rpb24oXG4gICAgdHJhbnNhY3Rpb246IFRyYW5zYWN0aW9uPE5vcm1hbGl6ZWRDYWNoZU9iamVjdD4sXG4gICAgLy8gVGhpcyBwYXJhbWV0ZXIgaXMgbm90IHBhcnQgb2YgdGhlIHBlcmZvcm1UcmFuc2FjdGlvbiBzaWduYXR1cmUgaW5oZXJpdGVkXG4gICAgLy8gZnJvbSB0aGUgQXBvbGxvQ2FjaGUgYWJzdHJhY3QgY2xhc3MsIGJ1dCBpdCdzIHVzZWZ1bCBiZWNhdXNlIGl0IHNhdmVzIHVzXG4gICAgLy8gZnJvbSBkdXBsaWNhdGluZyB0aGlzIGltcGxlbWVudGF0aW9uIGluIHJlY29yZE9wdGltaXN0aWNUcmFuc2FjdGlvbi5cbiAgICBvcHRpbWlzdGljSWQ/OiBzdHJpbmcsXG4gICkge1xuICAgIGNvbnN0IHsgZGF0YSwgc2lsZW5jZUJyb2FkY2FzdCB9ID0gdGhpcztcbiAgICB0aGlzLnNpbGVuY2VCcm9hZGNhc3QgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpbWlzdGljSWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBBZGQgYSBuZXcgb3B0aW1pc3RpYyBsYXllciBhbmQgdGVtcG9yYXJpbHkgbWFrZSB0aGlzLmRhdGEgcmVmZXIgdG9cbiAgICAgIC8vIHRoYXQgbGF5ZXIgZm9yIHRoZSBkdXJhdGlvbiBvZiB0aGUgdHJhbnNhY3Rpb24uXG4gICAgICB0aGlzLmRhdGEgPSB0aGlzLm9wdGltaXN0aWNEYXRhID0gbmV3IE9wdGltaXN0aWNDYWNoZUxheWVyKFxuICAgICAgICAvLyBOb3RlIHRoYXQgdGhlcmUgY2FuIGJlIG11bHRpcGxlIGxheWVycyB3aXRoIHRoZSBzYW1lIG9wdGltaXN0aWNJZC5cbiAgICAgICAgLy8gV2hlbiByZW1vdmVPcHRpbWlzdGljKGlkKSBpcyBjYWxsZWQgZm9yIHRoYXQgaWQsIGFsbCBtYXRjaGluZyBsYXllcnNcbiAgICAgICAgLy8gd2lsbCBiZSByZW1vdmVkLCBhbmQgdGhlIHJlbWFpbmluZyBsYXllcnMgd2lsbCBiZSByZWFwcGxpZWQuXG4gICAgICAgIG9wdGltaXN0aWNJZCxcbiAgICAgICAgdGhpcy5vcHRpbWlzdGljRGF0YSxcbiAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICApO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0cmFuc2FjdGlvbih0aGlzKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5zaWxlbmNlQnJvYWRjYXN0ID0gc2lsZW5jZUJyb2FkY2FzdDtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBicm9hZGNhc3QgZG9lcyBub3RoaW5nIGlmIHRoaXMuc2lsZW5jZUJyb2FkY2FzdCBpcyB0cnVlLlxuICAgIHRoaXMuYnJvYWRjYXN0V2F0Y2hlcygpO1xuICB9XG5cbiAgcHVibGljIHJlY29yZE9wdGltaXN0aWNUcmFuc2FjdGlvbihcbiAgICB0cmFuc2FjdGlvbjogVHJhbnNhY3Rpb248Tm9ybWFsaXplZENhY2hlT2JqZWN0PixcbiAgICBpZDogc3RyaW5nLFxuICApIHtcbiAgICByZXR1cm4gdGhpcy5wZXJmb3JtVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIGlkKTtcbiAgfVxuXG4gIHB1YmxpYyB0cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudDogRG9jdW1lbnROb2RlKTogRG9jdW1lbnROb2RlIHtcbiAgICBpZiAodGhpcy5hZGRUeXBlbmFtZSkge1xuICAgICAgbGV0IHJlc3VsdCA9IHRoaXMudHlwZW5hbWVEb2N1bWVudENhY2hlLmdldChkb2N1bWVudCk7XG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXN1bHQgPSBhZGRUeXBlbmFtZVRvRG9jdW1lbnQoZG9jdW1lbnQpO1xuICAgICAgICB0aGlzLnR5cGVuYW1lRG9jdW1lbnRDYWNoZS5zZXQoZG9jdW1lbnQsIHJlc3VsdCk7XG4gICAgICAgIC8vIElmIHNvbWVvbmUgY2FsbHMgdHJhbnNmb3JtRG9jdW1lbnQgYW5kIHRoZW4gbWlzdGFrZW5seSBwYXNzZXMgdGhlXG4gICAgICAgIC8vIHJlc3VsdCBiYWNrIGludG8gYW4gQVBJIHRoYXQgYWxzbyBjYWxscyB0cmFuc2Zvcm1Eb2N1bWVudCwgbWFrZSBzdXJlXG4gICAgICAgIC8vIHdlIGRvbid0IGtlZXAgY3JlYXRpbmcgbmV3IHF1ZXJ5IGRvY3VtZW50cy5cbiAgICAgICAgdGhpcy50eXBlbmFtZURvY3VtZW50Q2FjaGUuc2V0KHJlc3VsdCwgcmVzdWx0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiBkb2N1bWVudDtcbiAgfVxuXG4gIHByb3RlY3RlZCBicm9hZGNhc3RXYXRjaGVzKCkge1xuICAgIGlmICghdGhpcy5zaWxlbmNlQnJvYWRjYXN0KSB7XG4gICAgICB0aGlzLndhdGNoZXMuZm9yRWFjaChjID0+IHRoaXMubWF5YmVCcm9hZGNhc3RXYXRjaChjKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhpcyBtZXRob2QgaXMgd3JhcHBlZCBpbiB0aGUgY29uc3RydWN0b3Igc28gdGhhdCBpdCB3aWxsIGJlIGNhbGxlZCBvbmx5XG4gIC8vIGlmIHRoZSBkYXRhIHRoYXQgd291bGQgYmUgYnJvYWRjYXN0IGhhcyBjaGFuZ2VkLlxuICBwcml2YXRlIG1heWJlQnJvYWRjYXN0V2F0Y2goYzogQ2FjaGUuV2F0Y2hPcHRpb25zKSB7XG4gICAgYy5jYWxsYmFjayhcbiAgICAgIHRoaXMuZGlmZih7XG4gICAgICAgIHF1ZXJ5OiBjLnF1ZXJ5LFxuICAgICAgICB2YXJpYWJsZXM6IGMudmFyaWFibGVzLFxuICAgICAgICBwcmV2aW91c1Jlc3VsdDogYy5wcmV2aW91c1Jlc3VsdCAmJiBjLnByZXZpb3VzUmVzdWx0KCksXG4gICAgICAgIG9wdGltaXN0aWM6IGMub3B0aW1pc3RpYyxcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiIsIi8qIHRzbGludDpkaXNhYmxlICovXG5cbmltcG9ydCB6ZW5PYnNlcnZhYmxlIGZyb20gJ3plbi1vYnNlcnZhYmxlJztcblxubmFtZXNwYWNlIE9ic2VydmFibGUge1xuXG59XG5cbmltcG9ydCB7IFplbk9ic2VydmFibGUgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IHsgWmVuT2JzZXJ2YWJsZSB9O1xuXG5leHBvcnQgdHlwZSBPYnNlcnZlcjxUPiA9IFplbk9ic2VydmFibGUuT2JzZXJ2ZXI8VD47XG5leHBvcnQgdHlwZSBTdWJzY3JpYmVyPFQ+ID0gWmVuT2JzZXJ2YWJsZS5TdWJzY3JpYmVyPFQ+O1xuZXhwb3J0IHR5cGUgT2JzZXJ2YWJsZUxpa2U8VD4gPSBaZW5PYnNlcnZhYmxlLk9ic2VydmFibGVMaWtlPFQ+O1xuXG5leHBvcnQgY29uc3QgT2JzZXJ2YWJsZToge1xuICBuZXcgPFQ+KHN1YnNjcmliZXI6IFN1YnNjcmliZXI8VD4pOiBPYnNlcnZhYmxlPFQ+O1xuICBmcm9tPFI+KFxuICAgIG9ic2VydmFibGU6IE9ic2VydmFibGU8Uj4gfCBaZW5PYnNlcnZhYmxlLk9ic2VydmFibGVMaWtlPFI+IHwgQXJyYXlMaWtlPFI+LFxuICApOiBPYnNlcnZhYmxlPFI+O1xuICBvZjxSPiguLi5hcmdzOiBBcnJheTxSPik6IE9ic2VydmFibGU8Uj47XG59ID0gPGFueT56ZW5PYnNlcnZhYmxlO1xuXG5leHBvcnQgaW50ZXJmYWNlIE9ic2VydmFibGU8VD4ge1xuICBzdWJzY3JpYmUoXG4gICAgb2JzZXJ2ZXJPck5leHQ6ICgodmFsdWU6IFQpID0+IHZvaWQpIHwgWmVuT2JzZXJ2YWJsZS5PYnNlcnZlcjxUPixcbiAgICBlcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkLFxuICAgIGNvbXBsZXRlPzogKCkgPT4gdm9pZCxcbiAgKTogWmVuT2JzZXJ2YWJsZS5TdWJzY3JpcHRpb247XG5cbiAgZm9yRWFjaChmbjogKHZhbHVlOiBUKSA9PiB2b2lkKTogUHJvbWlzZTx2b2lkPjtcblxuICBtYXA8Uj4oZm46ICh2YWx1ZTogVCkgPT4gUik6IE9ic2VydmFibGU8Uj47XG5cbiAgZmlsdGVyKGZuOiAodmFsdWU6IFQpID0+IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFQ+O1xuXG4gIHJlZHVjZTxSID0gVD4oXG4gICAgZm46IChwcmV2aW91c1ZhbHVlOiBSIHwgVCwgY3VycmVudFZhbHVlOiBUKSA9PiBSIHwgVCxcbiAgICBpbml0aWFsVmFsdWU/OiBSIHwgVCxcbiAgKTogT2JzZXJ2YWJsZTxSIHwgVD47XG5cbiAgZmxhdE1hcDxSPihmbjogKHZhbHVlOiBUKSA9PiBaZW5PYnNlcnZhYmxlLk9ic2VydmFibGVMaWtlPFI+KTogT2JzZXJ2YWJsZTxSPjtcblxuICBmcm9tPFI+KFxuICAgIG9ic2VydmFibGU6IE9ic2VydmFibGU8Uj4gfCBaZW5PYnNlcnZhYmxlLk9ic2VydmFibGVMaWtlPFI+IHwgQXJyYXlMaWtlPFI+LFxuICApOiBPYnNlcnZhYmxlPFI+O1xuICBvZjxSPiguLi5hcmdzOiBBcnJheTxSPik6IE9ic2VydmFibGU8Uj47XG59XG4iLCJpbXBvcnQgT2JzZXJ2YWJsZSBmcm9tICd6ZW4tb2JzZXJ2YWJsZS10cyc7XG5cbmltcG9ydCB7IEdyYXBoUUxSZXF1ZXN0LCBPcGVyYXRpb24gfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEFwb2xsb0xpbmsgfSBmcm9tICcuL2xpbmsnO1xuXG5pbXBvcnQgeyBnZXRPcGVyYXRpb25OYW1lIH0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQsIEludmFyaWFudEVycm9yIH0gZnJvbSAndHMtaW52YXJpYW50JztcbmV4cG9ydCB7IGdldE9wZXJhdGlvbk5hbWUgfTtcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlT3BlcmF0aW9uKG9wZXJhdGlvbjogR3JhcGhRTFJlcXVlc3QpOiBHcmFwaFFMUmVxdWVzdCB7XG4gIGNvbnN0IE9QRVJBVElPTl9GSUVMRFMgPSBbXG4gICAgJ3F1ZXJ5JyxcbiAgICAnb3BlcmF0aW9uTmFtZScsXG4gICAgJ3ZhcmlhYmxlcycsXG4gICAgJ2V4dGVuc2lvbnMnLFxuICAgICdjb250ZXh0JyxcbiAgXTtcbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKG9wZXJhdGlvbikpIHtcbiAgICBpZiAoT1BFUkFUSU9OX0ZJRUxEUy5pbmRleE9mKGtleSkgPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YXJpYW50RXJyb3IoYGlsbGVnYWwgYXJndW1lbnQ6ICR7a2V5fWApO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvcGVyYXRpb247XG59XG5cbmV4cG9ydCBjbGFzcyBMaW5rRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHB1YmxpYyBsaW5rOiBBcG9sbG9MaW5rO1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlPzogc3RyaW5nLCBsaW5rPzogQXBvbGxvTGluaykge1xuICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgIHRoaXMubGluayA9IGxpbms7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVGVybWluYXRpbmcobGluazogQXBvbGxvTGluayk6IGJvb2xlYW4ge1xuICByZXR1cm4gbGluay5yZXF1ZXN0Lmxlbmd0aCA8PSAxO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9Qcm9taXNlPFI+KG9ic2VydmFibGU6IE9ic2VydmFibGU8Uj4pOiBQcm9taXNlPFI+IHtcbiAgbGV0IGNvbXBsZXRlZCA9IGZhbHNlO1xuICByZXR1cm4gbmV3IFByb21pc2U8Uj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6IGRhdGEgPT4ge1xuICAgICAgICBpZiAoY29tcGxldGVkKSB7XG4gICAgICAgICAgaW52YXJpYW50Lndhcm4oXG4gICAgICAgICAgICBgUHJvbWlzZSBXcmFwcGVyIGRvZXMgbm90IHN1cHBvcnQgbXVsdGlwbGUgcmVzdWx0cyBmcm9tIE9ic2VydmFibGVgLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRcbmV4cG9ydCBjb25zdCBtYWtlUHJvbWlzZSA9IHRvUHJvbWlzZTtcblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlPFQ+KHByb21pc2U6IFByb21pc2U8VD4pOiBPYnNlcnZhYmxlPFQ+IHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFQ+KG9ic2VydmVyID0+IHtcbiAgICBwcm9taXNlXG4gICAgICAudGhlbigodmFsdWU6IFQpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKG9ic2VydmVyLmVycm9yLmJpbmQob2JzZXJ2ZXIpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXJyb3I8VD4oZXJyb3JWYWx1ZTogYW55KTogT2JzZXJ2YWJsZTxUPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxUPihvYnNlcnZlciA9PiB7XG4gICAgb2JzZXJ2ZXIuZXJyb3IoZXJyb3JWYWx1ZSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdHJhbnNmb3JtT3BlcmF0aW9uKG9wZXJhdGlvbjogR3JhcGhRTFJlcXVlc3QpOiBHcmFwaFFMUmVxdWVzdCB7XG4gIGNvbnN0IHRyYW5zZm9ybWVkT3BlcmF0aW9uOiBHcmFwaFFMUmVxdWVzdCA9IHtcbiAgICB2YXJpYWJsZXM6IG9wZXJhdGlvbi52YXJpYWJsZXMgfHwge30sXG4gICAgZXh0ZW5zaW9uczogb3BlcmF0aW9uLmV4dGVuc2lvbnMgfHwge30sXG4gICAgb3BlcmF0aW9uTmFtZTogb3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUsXG4gICAgcXVlcnk6IG9wZXJhdGlvbi5xdWVyeSxcbiAgfTtcblxuICAvLyBiZXN0IGd1ZXNzIGF0IGFuIG9wZXJhdGlvbiBuYW1lXG4gIGlmICghdHJhbnNmb3JtZWRPcGVyYXRpb24ub3BlcmF0aW9uTmFtZSkge1xuICAgIHRyYW5zZm9ybWVkT3BlcmF0aW9uLm9wZXJhdGlvbk5hbWUgPVxuICAgICAgdHlwZW9mIHRyYW5zZm9ybWVkT3BlcmF0aW9uLnF1ZXJ5ICE9PSAnc3RyaW5nJ1xuICAgICAgICA/IGdldE9wZXJhdGlvbk5hbWUodHJhbnNmb3JtZWRPcGVyYXRpb24ucXVlcnkpXG4gICAgICAgIDogJyc7XG4gIH1cblxuICByZXR1cm4gdHJhbnNmb3JtZWRPcGVyYXRpb24gYXMgT3BlcmF0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uKFxuICBzdGFydGluZzogYW55LFxuICBvcGVyYXRpb246IEdyYXBoUUxSZXF1ZXN0LFxuKTogT3BlcmF0aW9uIHtcbiAgbGV0IGNvbnRleHQgPSB7IC4uLnN0YXJ0aW5nIH07XG4gIGNvbnN0IHNldENvbnRleHQgPSBuZXh0ID0+IHtcbiAgICBpZiAodHlwZW9mIG5leHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbnRleHQgPSB7IC4uLmNvbnRleHQsIC4uLm5leHQoY29udGV4dCkgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGV4dCA9IHsgLi4uY29udGV4dCwgLi4ubmV4dCB9O1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZ2V0Q29udGV4dCA9ICgpID0+ICh7IC4uLmNvbnRleHQgfSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wZXJhdGlvbiwgJ3NldENvbnRleHQnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IHNldENvbnRleHQsXG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcGVyYXRpb24sICdnZXRDb250ZXh0Jywge1xuICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgIHZhbHVlOiBnZXRDb250ZXh0LFxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3BlcmF0aW9uLCAndG9LZXknLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6ICgpID0+IGdldEtleShvcGVyYXRpb24pLFxuICB9KTtcblxuICByZXR1cm4gb3BlcmF0aW9uIGFzIE9wZXJhdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEtleShvcGVyYXRpb246IEdyYXBoUUxSZXF1ZXN0KSB7XG4gIC8vIFhYWCBXZSdyZSBhc3N1bWluZyBoZXJlIHRoYXQgcXVlcnkgYW5kIHZhcmlhYmxlcyB3aWxsIGJlIHNlcmlhbGl6ZWQgaW5cbiAgLy8gdGhlIHNhbWUgb3JkZXIsIHdoaWNoIG1pZ2h0IG5vdCBhbHdheXMgYmUgdHJ1ZS5cbiAgY29uc3QgeyBxdWVyeSwgdmFyaWFibGVzLCBvcGVyYXRpb25OYW1lIH0gPSBvcGVyYXRpb247XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShbb3BlcmF0aW9uTmFtZSwgcXVlcnksIHZhcmlhYmxlc10pO1xufVxuIiwiaW1wb3J0IE9ic2VydmFibGUgZnJvbSAnemVuLW9ic2VydmFibGUtdHMnO1xuaW1wb3J0IHsgaW52YXJpYW50LCBJbnZhcmlhbnRFcnJvciB9IGZyb20gJ3RzLWludmFyaWFudCc7XG5cbmltcG9ydCB7XG4gIEdyYXBoUUxSZXF1ZXN0LFxuICBOZXh0TGluayxcbiAgT3BlcmF0aW9uLFxuICBSZXF1ZXN0SGFuZGxlcixcbiAgRmV0Y2hSZXN1bHQsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5pbXBvcnQge1xuICB2YWxpZGF0ZU9wZXJhdGlvbixcbiAgaXNUZXJtaW5hdGluZyxcbiAgTGlua0Vycm9yLFxuICB0cmFuc2Zvcm1PcGVyYXRpb24sXG4gIGNyZWF0ZU9wZXJhdGlvbixcbn0gZnJvbSAnLi9saW5rVXRpbHMnO1xuXG5mdW5jdGlvbiBwYXNzdGhyb3VnaChvcCwgZm9yd2FyZCkge1xuICByZXR1cm4gZm9yd2FyZCA/IGZvcndhcmQob3ApIDogT2JzZXJ2YWJsZS5vZigpO1xufVxuXG5mdW5jdGlvbiB0b0xpbmsoaGFuZGxlcjogUmVxdWVzdEhhbmRsZXIgfCBBcG9sbG9MaW5rKSB7XG4gIHJldHVybiB0eXBlb2YgaGFuZGxlciA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBBcG9sbG9MaW5rKGhhbmRsZXIpIDogaGFuZGxlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVtcHR5KCk6IEFwb2xsb0xpbmsge1xuICByZXR1cm4gbmV3IEFwb2xsb0xpbmsoKCkgPT4gT2JzZXJ2YWJsZS5vZigpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb20obGlua3M6IEFwb2xsb0xpbmtbXSk6IEFwb2xsb0xpbmsge1xuICBpZiAobGlua3MubGVuZ3RoID09PSAwKSByZXR1cm4gZW1wdHkoKTtcbiAgcmV0dXJuIGxpbmtzLm1hcCh0b0xpbmspLnJlZHVjZSgoeCwgeSkgPT4geC5jb25jYXQoeSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3BsaXQoXG4gIHRlc3Q6IChvcDogT3BlcmF0aW9uKSA9PiBib29sZWFuLFxuICBsZWZ0OiBBcG9sbG9MaW5rIHwgUmVxdWVzdEhhbmRsZXIsXG4gIHJpZ2h0PzogQXBvbGxvTGluayB8IFJlcXVlc3RIYW5kbGVyLFxuKTogQXBvbGxvTGluayB7XG4gIGNvbnN0IGxlZnRMaW5rID0gdG9MaW5rKGxlZnQpO1xuICBjb25zdCByaWdodExpbmsgPSB0b0xpbmsocmlnaHQgfHwgbmV3IEFwb2xsb0xpbmsocGFzc3Rocm91Z2gpKTtcblxuICBpZiAoaXNUZXJtaW5hdGluZyhsZWZ0TGluaykgJiYgaXNUZXJtaW5hdGluZyhyaWdodExpbmspKSB7XG4gICAgcmV0dXJuIG5ldyBBcG9sbG9MaW5rKG9wZXJhdGlvbiA9PiB7XG4gICAgICByZXR1cm4gdGVzdChvcGVyYXRpb24pXG4gICAgICAgID8gbGVmdExpbmsucmVxdWVzdChvcGVyYXRpb24pIHx8IE9ic2VydmFibGUub2YoKVxuICAgICAgICA6IHJpZ2h0TGluay5yZXF1ZXN0KG9wZXJhdGlvbikgfHwgT2JzZXJ2YWJsZS5vZigpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQXBvbGxvTGluaygob3BlcmF0aW9uLCBmb3J3YXJkKSA9PiB7XG4gICAgICByZXR1cm4gdGVzdChvcGVyYXRpb24pXG4gICAgICAgID8gbGVmdExpbmsucmVxdWVzdChvcGVyYXRpb24sIGZvcndhcmQpIHx8IE9ic2VydmFibGUub2YoKVxuICAgICAgICA6IHJpZ2h0TGluay5yZXF1ZXN0KG9wZXJhdGlvbiwgZm9yd2FyZCkgfHwgT2JzZXJ2YWJsZS5vZigpO1xuICAgIH0pO1xuICB9XG59XG5cbi8vIGpvaW4gdHdvIExpbmtzIHRvZ2V0aGVyXG5leHBvcnQgY29uc3QgY29uY2F0ID0gKFxuICBmaXJzdDogQXBvbGxvTGluayB8IFJlcXVlc3RIYW5kbGVyLFxuICBzZWNvbmQ6IEFwb2xsb0xpbmsgfCBSZXF1ZXN0SGFuZGxlcixcbikgPT4ge1xuICBjb25zdCBmaXJzdExpbmsgPSB0b0xpbmsoZmlyc3QpO1xuICBpZiAoaXNUZXJtaW5hdGluZyhmaXJzdExpbmspKSB7XG4gICAgaW52YXJpYW50Lndhcm4oXG4gICAgICBuZXcgTGlua0Vycm9yKFxuICAgICAgICBgWW91IGFyZSBjYWxsaW5nIGNvbmNhdCBvbiBhIHRlcm1pbmF0aW5nIGxpbmssIHdoaWNoIHdpbGwgaGF2ZSBubyBlZmZlY3RgLFxuICAgICAgICBmaXJzdExpbmssXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuIGZpcnN0TGluaztcbiAgfVxuICBjb25zdCBuZXh0TGluayA9IHRvTGluayhzZWNvbmQpO1xuXG4gIGlmIChpc1Rlcm1pbmF0aW5nKG5leHRMaW5rKSkge1xuICAgIHJldHVybiBuZXcgQXBvbGxvTGluayhcbiAgICAgIG9wZXJhdGlvbiA9PlxuICAgICAgICBmaXJzdExpbmsucmVxdWVzdChcbiAgICAgICAgICBvcGVyYXRpb24sXG4gICAgICAgICAgb3AgPT4gbmV4dExpbmsucmVxdWVzdChvcCkgfHwgT2JzZXJ2YWJsZS5vZigpLFxuICAgICAgICApIHx8IE9ic2VydmFibGUub2YoKSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgQXBvbGxvTGluaygob3BlcmF0aW9uLCBmb3J3YXJkKSA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBmaXJzdExpbmsucmVxdWVzdChvcGVyYXRpb24sIG9wID0+IHtcbiAgICAgICAgICByZXR1cm4gbmV4dExpbmsucmVxdWVzdChvcCwgZm9yd2FyZCkgfHwgT2JzZXJ2YWJsZS5vZigpO1xuICAgICAgICB9KSB8fCBPYnNlcnZhYmxlLm9mKClcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbn07XG5cbmV4cG9ydCBjbGFzcyBBcG9sbG9MaW5rIHtcbiAgcHVibGljIHN0YXRpYyBlbXB0eSA9IGVtcHR5O1xuICBwdWJsaWMgc3RhdGljIGZyb20gPSBmcm9tO1xuICBwdWJsaWMgc3RhdGljIHNwbGl0ID0gc3BsaXQ7XG4gIHB1YmxpYyBzdGF0aWMgZXhlY3V0ZSA9IGV4ZWN1dGU7XG5cbiAgY29uc3RydWN0b3IocmVxdWVzdD86IFJlcXVlc3RIYW5kbGVyKSB7XG4gICAgaWYgKHJlcXVlc3QpIHRoaXMucmVxdWVzdCA9IHJlcXVlc3Q7XG4gIH1cblxuICBwdWJsaWMgc3BsaXQoXG4gICAgdGVzdDogKG9wOiBPcGVyYXRpb24pID0+IGJvb2xlYW4sXG4gICAgbGVmdDogQXBvbGxvTGluayB8IFJlcXVlc3RIYW5kbGVyLFxuICAgIHJpZ2h0PzogQXBvbGxvTGluayB8IFJlcXVlc3RIYW5kbGVyLFxuICApOiBBcG9sbG9MaW5rIHtcbiAgICByZXR1cm4gdGhpcy5jb25jYXQoc3BsaXQodGVzdCwgbGVmdCwgcmlnaHQgfHwgbmV3IEFwb2xsb0xpbmsocGFzc3Rocm91Z2gpKSk7XG4gIH1cblxuICBwdWJsaWMgY29uY2F0KG5leHQ6IEFwb2xsb0xpbmsgfCBSZXF1ZXN0SGFuZGxlcik6IEFwb2xsb0xpbmsge1xuICAgIHJldHVybiBjb25jYXQodGhpcywgbmV4dCk7XG4gIH1cblxuICBwdWJsaWMgcmVxdWVzdChcbiAgICBvcGVyYXRpb246IE9wZXJhdGlvbixcbiAgICBmb3J3YXJkPzogTmV4dExpbmssXG4gICk6IE9ic2VydmFibGU8RmV0Y2hSZXN1bHQ+IHwgbnVsbCB7XG4gICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKCdyZXF1ZXN0IGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlKFxuICBsaW5rOiBBcG9sbG9MaW5rLFxuICBvcGVyYXRpb246IEdyYXBoUUxSZXF1ZXN0LFxuKTogT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdD4ge1xuICByZXR1cm4gKFxuICAgIGxpbmsucmVxdWVzdChcbiAgICAgIGNyZWF0ZU9wZXJhdGlvbihcbiAgICAgICAgb3BlcmF0aW9uLmNvbnRleHQsXG4gICAgICAgIHRyYW5zZm9ybU9wZXJhdGlvbih2YWxpZGF0ZU9wZXJhdGlvbihvcGVyYXRpb24pKSxcbiAgICAgICksXG4gICAgKSB8fCBPYnNlcnZhYmxlLm9mKClcbiAgKTtcbn1cbiIsIi8qIHRzbGludDpkaXNhYmxlICovXG5cbmltcG9ydCB7IEFwb2xsb0xpbmssIE9ic2VydmFibGUsIFJlcXVlc3RIYW5kbGVyLCBmcm9tRXJyb3IgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQge1xuICBzZXJpYWxpemVGZXRjaFBhcmFtZXRlcixcbiAgc2VsZWN0VVJJLFxuICBwYXJzZUFuZENoZWNrSHR0cFJlc3BvbnNlLFxuICBjaGVja0ZldGNoZXIsXG4gIHNlbGVjdEh0dHBPcHRpb25zQW5kQm9keSxcbiAgY3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQsXG4gIGZhbGxiYWNrSHR0cENvbmZpZyxcbiAgQm9keSxcbiAgSHR0cE9wdGlvbnMsXG4gIFVyaUZ1bmN0aW9uIGFzIF9VcmlGdW5jdGlvbixcbn0gZnJvbSAnYXBvbGxvLWxpbmstaHR0cC1jb21tb24nO1xuaW1wb3J0IHsgRGVmaW5pdGlvbk5vZGUgfSBmcm9tICdncmFwaHFsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBIdHRwTGluayB7XG4gIC8vVE9ETyBXb3VsZCBtdWNoIHJhdGhlciBiZSBhYmxlIHRvIGV4cG9ydCBkaXJlY3RseVxuICBleHBvcnQgaW50ZXJmYWNlIFVyaUZ1bmN0aW9uIGV4dGVuZHMgX1VyaUZ1bmN0aW9uIHt9XG4gIGV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyBleHRlbmRzIEh0dHBPcHRpb25zIHtcbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSwgdXNlIHRoZSBIVFRQIEdFVCBtZXRob2QgZm9yIHF1ZXJ5IG9wZXJhdGlvbnMuIE11dGF0aW9uc1xuICAgICAqIHdpbGwgc3RpbGwgdXNlIHRoZSBtZXRob2Qgc3BlY2lmaWVkIGluIGZldGNoT3B0aW9ucy5tZXRob2QgKHdoaWNoIGRlZmF1bHRzXG4gICAgICogdG8gUE9TVCkuXG4gICAgICovXG4gICAgdXNlR0VURm9yUXVlcmllcz86IGJvb2xlYW47XG4gIH1cbn1cblxuLy8gRm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuZXhwb3J0IGltcG9ydCBGZXRjaE9wdGlvbnMgPSBIdHRwTGluay5PcHRpb25zO1xuZXhwb3J0IGltcG9ydCBVcmlGdW5jdGlvbiA9IEh0dHBMaW5rLlVyaUZ1bmN0aW9uO1xuXG5leHBvcnQgY29uc3QgY3JlYXRlSHR0cExpbmsgPSAobGlua09wdGlvbnM6IEh0dHBMaW5rLk9wdGlvbnMgPSB7fSkgPT4ge1xuICBsZXQge1xuICAgIHVyaSA9ICcvZ3JhcGhxbCcsXG4gICAgLy8gdXNlIGRlZmF1bHQgZ2xvYmFsIGZldGNoIGlmIG5vdGhpbmcgcGFzc2VkIGluXG4gICAgZmV0Y2g6IGZldGNoZXIsXG4gICAgaW5jbHVkZUV4dGVuc2lvbnMsXG4gICAgdXNlR0VURm9yUXVlcmllcyxcbiAgICAuLi5yZXF1ZXN0T3B0aW9uc1xuICB9ID0gbGlua09wdGlvbnM7XG5cbiAgLy8gZGV2IHdhcm5pbmdzIHRvIGVuc3VyZSBmZXRjaCBpcyBwcmVzZW50XG4gIGNoZWNrRmV0Y2hlcihmZXRjaGVyKTtcblxuICAvL2ZldGNoZXIgaXMgc2V0IGhlcmUgcmF0aGVyIHRoYW4gdGhlIGRlc3RydWN0dXJpbmcgdG8gZW5zdXJlIGZldGNoIGlzXG4gIC8vZGVjbGFyZWQgYmVmb3JlIHJlZmVyZW5jaW5nIGl0LiBSZWZlcmVuY2UgaW4gdGhlIGRlc3RydWN0dXJpbmcgd291bGQgY2F1c2VcbiAgLy9hIFJlZmVyZW5jZUVycm9yXG4gIGlmICghZmV0Y2hlcikge1xuICAgIGZldGNoZXIgPSBmZXRjaDtcbiAgfVxuXG4gIGNvbnN0IGxpbmtDb25maWcgPSB7XG4gICAgaHR0cDogeyBpbmNsdWRlRXh0ZW5zaW9ucyB9LFxuICAgIG9wdGlvbnM6IHJlcXVlc3RPcHRpb25zLmZldGNoT3B0aW9ucyxcbiAgICBjcmVkZW50aWFsczogcmVxdWVzdE9wdGlvbnMuY3JlZGVudGlhbHMsXG4gICAgaGVhZGVyczogcmVxdWVzdE9wdGlvbnMuaGVhZGVycyxcbiAgfTtcblxuICByZXR1cm4gbmV3IEFwb2xsb0xpbmsob3BlcmF0aW9uID0+IHtcbiAgICBsZXQgY2hvc2VuVVJJID0gc2VsZWN0VVJJKG9wZXJhdGlvbiwgdXJpKTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBvcGVyYXRpb24uZ2V0Q29udGV4dCgpO1xuXG4gICAgLy8gYGFwb2xsb2dyYXBocWwtY2xpZW50LSpgIGhlYWRlcnMgYXJlIGF1dG9tYXRpY2FsbHkgc2V0IGlmIGFcbiAgICAvLyBgY2xpZW50QXdhcmVuZXNzYCBvYmplY3QgaXMgZm91bmQgaW4gdGhlIGNvbnRleHQuIFRoZXNlIGhlYWRlcnMgYXJlXG4gICAgLy8gc2V0IGZpcnN0LCBmb2xsb3dlZCBieSB0aGUgcmVzdCBvZiB0aGUgaGVhZGVycyBwdWxsZWQgZnJvbVxuICAgIC8vIGBjb250ZXh0LmhlYWRlcnNgLiBJZiBkZXNpcmVkLCBgYXBvbGxvZ3JhcGhxbC1jbGllbnQtKmAgaGVhZGVycyBzZXQgYnlcbiAgICAvLyB0aGUgYGNsaWVudEF3YXJlbmVzc2Agb2JqZWN0IGNhbiBiZSBvdmVycmlkZGVuIGJ5XG4gICAgLy8gYGFwb2xsb2dyYXBocWwtY2xpZW50LSpgIGhlYWRlcnMgc2V0IGluIGBjb250ZXh0LmhlYWRlcnNgLlxuICAgIGNvbnN0IGNsaWVudEF3YXJlbmVzc0hlYWRlcnMgPSB7fTtcbiAgICBpZiAoY29udGV4dC5jbGllbnRBd2FyZW5lc3MpIHtcbiAgICAgIGNvbnN0IHsgbmFtZSwgdmVyc2lvbiB9ID0gY29udGV4dC5jbGllbnRBd2FyZW5lc3M7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBjbGllbnRBd2FyZW5lc3NIZWFkZXJzWydhcG9sbG9ncmFwaHFsLWNsaWVudC1uYW1lJ10gPSBuYW1lO1xuICAgICAgfVxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgY2xpZW50QXdhcmVuZXNzSGVhZGVyc1snYXBvbGxvZ3JhcGhxbC1jbGllbnQtdmVyc2lvbiddID0gdmVyc2lvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb250ZXh0SGVhZGVycyA9IHsgLi4uY2xpZW50QXdhcmVuZXNzSGVhZGVycywgLi4uY29udGV4dC5oZWFkZXJzIH07XG5cbiAgICBjb25zdCBjb250ZXh0Q29uZmlnID0ge1xuICAgICAgaHR0cDogY29udGV4dC5odHRwLFxuICAgICAgb3B0aW9uczogY29udGV4dC5mZXRjaE9wdGlvbnMsXG4gICAgICBjcmVkZW50aWFsczogY29udGV4dC5jcmVkZW50aWFscyxcbiAgICAgIGhlYWRlcnM6IGNvbnRleHRIZWFkZXJzLFxuICAgIH07XG5cbiAgICAvL3VzZXMgZmFsbGJhY2ssIGxpbmssIGFuZCB0aGVuIGNvbnRleHQgdG8gYnVpbGQgb3B0aW9uc1xuICAgIGNvbnN0IHsgb3B0aW9ucywgYm9keSB9ID0gc2VsZWN0SHR0cE9wdGlvbnNBbmRCb2R5KFxuICAgICAgb3BlcmF0aW9uLFxuICAgICAgZmFsbGJhY2tIdHRwQ29uZmlnLFxuICAgICAgbGlua0NvbmZpZyxcbiAgICAgIGNvbnRleHRDb25maWcsXG4gICAgKTtcblxuICAgIGxldCBjb250cm9sbGVyO1xuICAgIGlmICghKG9wdGlvbnMgYXMgYW55KS5zaWduYWwpIHtcbiAgICAgIGNvbnN0IHsgY29udHJvbGxlcjogX2NvbnRyb2xsZXIsIHNpZ25hbCB9ID0gY3JlYXRlU2lnbmFsSWZTdXBwb3J0ZWQoKTtcbiAgICAgIGNvbnRyb2xsZXIgPSBfY29udHJvbGxlcjtcbiAgICAgIGlmIChjb250cm9sbGVyKSAob3B0aW9ucyBhcyBhbnkpLnNpZ25hbCA9IHNpZ25hbDtcbiAgICB9XG5cbiAgICAvLyBJZiByZXF1ZXN0ZWQsIHNldCBtZXRob2QgdG8gR0VUIGlmIHRoZXJlIGFyZSBubyBtdXRhdGlvbnMuXG4gICAgY29uc3QgZGVmaW5pdGlvbklzTXV0YXRpb24gPSAoZDogRGVmaW5pdGlvbk5vZGUpID0+IHtcbiAgICAgIHJldHVybiBkLmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJyAmJiBkLm9wZXJhdGlvbiA9PT0gJ211dGF0aW9uJztcbiAgICB9O1xuICAgIGlmIChcbiAgICAgIHVzZUdFVEZvclF1ZXJpZXMgJiZcbiAgICAgICFvcGVyYXRpb24ucXVlcnkuZGVmaW5pdGlvbnMuc29tZShkZWZpbml0aW9uSXNNdXRhdGlvbilcbiAgICApIHtcbiAgICAgIG9wdGlvbnMubWV0aG9kID0gJ0dFVCc7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWV0aG9kID09PSAnR0VUJykge1xuICAgICAgY29uc3QgeyBuZXdVUkksIHBhcnNlRXJyb3IgfSA9IHJld3JpdGVVUklGb3JHRVQoY2hvc2VuVVJJLCBib2R5KTtcbiAgICAgIGlmIChwYXJzZUVycm9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXJyb3IocGFyc2VFcnJvcik7XG4gICAgICB9XG4gICAgICBjaG9zZW5VUkkgPSBuZXdVUkk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIChvcHRpb25zIGFzIGFueSkuYm9keSA9IHNlcmlhbGl6ZUZldGNoUGFyYW1ldGVyKGJvZHksICdQYXlsb2FkJyk7XG4gICAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXJyb3IocGFyc2VFcnJvcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKG9ic2VydmVyID0+IHtcbiAgICAgIGZldGNoZXIoY2hvc2VuVVJJLCBvcHRpb25zKVxuICAgICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgICAgb3BlcmF0aW9uLnNldENvbnRleHQoeyByZXNwb25zZSB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKHBhcnNlQW5kQ2hlY2tIdHRwUmVzcG9uc2Uob3BlcmF0aW9uKSlcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgICAvLyB3ZSBoYXZlIGRhdGEgYW5kIGNhbiBzZW5kIGl0IHRvIGJhY2sgdXAgdGhlIGxpbmsgY2hhaW5cbiAgICAgICAgICBvYnNlcnZlci5uZXh0KHJlc3VsdCk7XG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICAvLyBmZXRjaCB3YXMgY2FuY2VsbGVkIHNvIGl0J3MgYWxyZWFkeSBiZWVuIGNsZWFuZWQgdXAgaW4gdGhlIHVuc3Vic2NyaWJlXG4gICAgICAgICAgaWYgKGVyci5uYW1lID09PSAnQWJvcnRFcnJvcicpIHJldHVybjtcbiAgICAgICAgICAvLyBpZiBpdCBpcyBhIG5ldHdvcmsgZXJyb3IsIEJVVCB0aGVyZSBpcyBncmFwaHFsIHJlc3VsdCBpbmZvXG4gICAgICAgICAgLy8gZmlyZSB0aGUgbmV4dCBvYnNlcnZlciBiZWZvcmUgY2FsbGluZyBlcnJvclxuICAgICAgICAgIC8vIHRoaXMgZ2l2ZXMgYXBvbGxvLWNsaWVudCAoYW5kIHJlYWN0LWFwb2xsbykgdGhlIGBncmFwaHFsRXJyb3JzYCBhbmQgYG5ldHdvckVycm9yc2BcbiAgICAgICAgICAvLyB0byBwYXNzIHRvIFVJXG4gICAgICAgICAgLy8gdGhpcyBzaG91bGQgb25seSBoYXBwZW4gaWYgd2UgKmFsc28qIGhhdmUgZGF0YSBhcyBwYXJ0IG9mIHRoZSByZXNwb25zZSBrZXkgcGVyXG4gICAgICAgICAgLy8gdGhlIHNwZWNcbiAgICAgICAgICBpZiAoZXJyLnJlc3VsdCAmJiBlcnIucmVzdWx0LmVycm9ycyAmJiBlcnIucmVzdWx0LmRhdGEpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGRvbid0IGNhbGwgbmV4dCwgdGhlIFVJIGNhbiBvbmx5IHNob3cgbmV0d29ya0Vycm9yIGJlY2F1c2UgQUMgZGlkbid0XG4gICAgICAgICAgICAvLyBnZXQgYW55IGdyYXBocWxFcnJvcnNcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgZ3JhcGhxbCBleGVjdXRpb24gcmVzdWx0IGluZm8gKGkuZSBlcnJvcnMgYW5kIHBvc3NpYmx5IGRhdGEpXG4gICAgICAgICAgICAvLyB0aGlzIGlzIGJlY2F1c2UgdGhlcmUgaXMgbm8gZm9ybWFsIHNwZWMgaG93IGVycm9ycyBzaG91bGQgdHJhbnNsYXRlIHRvXG4gICAgICAgICAgICAvLyBodHRwIHN0YXR1cyBjb2Rlcy4gU28gYW4gYXV0aCBlcnJvciAoNDAxKSBjb3VsZCBoYXZlIGJvdGggZGF0YVxuICAgICAgICAgICAgLy8gZnJvbSBhIHB1YmxpYyBmaWVsZCwgZXJyb3JzIGZyb20gYSBwcml2YXRlIGZpZWxkLCBhbmQgYSBzdGF0dXMgb2YgNDAxXG4gICAgICAgICAgICAvLyB7XG4gICAgICAgICAgICAvLyAgdXNlciB7IC8vIHRoaXMgd2lsbCBoYXZlIGVycm9yc1xuICAgICAgICAgICAgLy8gICAgZmlyc3ROYW1lXG4gICAgICAgICAgICAvLyAgfVxuICAgICAgICAgICAgLy8gIHByb2R1Y3RzIHsgLy8gdGhpcyBpcyBwdWJsaWMgc28gd2lsbCBoYXZlIGRhdGFcbiAgICAgICAgICAgIC8vICAgIGNvc3RcbiAgICAgICAgICAgIC8vICB9XG4gICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy8gdGhlIHJlc3VsdCBvZiBhYm92ZSAqY291bGQqIGxvb2sgbGlrZSB0aGlzOlxuICAgICAgICAgICAgLy8ge1xuICAgICAgICAgICAgLy8gICBkYXRhOiB7IHByb2R1Y3RzOiBbeyBjb3N0OiBcIiQxMFwiIH1dIH0sXG4gICAgICAgICAgICAvLyAgIGVycm9yczogW3tcbiAgICAgICAgICAgIC8vICAgICAgbWVzc2FnZTogJ3lvdXIgc2Vzc2lvbiBoYXMgdGltZWQgb3V0JyxcbiAgICAgICAgICAgIC8vICAgICAgcGF0aDogW11cbiAgICAgICAgICAgIC8vICAgfV1cbiAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgIC8vIHN0YXR1cyBjb2RlIG9mIGFib3ZlIHdvdWxkIGJlIGEgNDAxXG4gICAgICAgICAgICAvLyBpbiB0aGUgVUkgeW91IHdhbnQgdG8gc2hvdyBkYXRhIHdoZXJlIHlvdSBjYW4sIGVycm9ycyBhcyBkYXRhIHdoZXJlIHlvdSBjYW5cbiAgICAgICAgICAgIC8vIGFuZCB1c2UgY29ycmVjdCBodHRwIHN0YXR1cyBjb2Rlc1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChlcnIucmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIC8vIFhYWCBzdXBwb3J0IGNhbmNlbGluZyB0aGlzIHJlcXVlc3RcbiAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL3VwZGF0ZXMvMjAxNy8wOS9hYm9ydGFibGUtZmV0Y2hcbiAgICAgICAgaWYgKGNvbnRyb2xsZXIpIGNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH0pO1xufTtcblxuLy8gRm9yIEdFVCBvcGVyYXRpb25zLCByZXR1cm5zIHRoZSBnaXZlbiBVUkkgcmV3cml0dGVuIHdpdGggcGFyYW1ldGVycywgb3IgYVxuLy8gcGFyc2UgZXJyb3IuXG5mdW5jdGlvbiByZXdyaXRlVVJJRm9yR0VUKGNob3NlblVSSTogc3RyaW5nLCBib2R5OiBCb2R5KSB7XG4gIC8vIEltcGxlbWVudCB0aGUgc3RhbmRhcmQgSFRUUCBHRVQgc2VyaWFsaXphdGlvbiwgcGx1cyAnZXh0ZW5zaW9ucycuIE5vdGVcbiAgLy8gdGhlIGV4dHJhIGxldmVsIG9mIEpTT04gc2VyaWFsaXphdGlvbiFcbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBbXTtcbiAgY29uc3QgYWRkUXVlcnlQYXJhbSA9IChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgIHF1ZXJ5UGFyYW1zLnB1c2goYCR7a2V5fT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YCk7XG4gIH07XG5cbiAgaWYgKCdxdWVyeScgaW4gYm9keSkge1xuICAgIGFkZFF1ZXJ5UGFyYW0oJ3F1ZXJ5JywgYm9keS5xdWVyeSk7XG4gIH1cbiAgaWYgKGJvZHkub3BlcmF0aW9uTmFtZSkge1xuICAgIGFkZFF1ZXJ5UGFyYW0oJ29wZXJhdGlvbk5hbWUnLCBib2R5Lm9wZXJhdGlvbk5hbWUpO1xuICB9XG4gIGlmIChib2R5LnZhcmlhYmxlcykge1xuICAgIGxldCBzZXJpYWxpemVkVmFyaWFibGVzO1xuICAgIHRyeSB7XG4gICAgICBzZXJpYWxpemVkVmFyaWFibGVzID0gc2VyaWFsaXplRmV0Y2hQYXJhbWV0ZXIoXG4gICAgICAgIGJvZHkudmFyaWFibGVzLFxuICAgICAgICAnVmFyaWFibGVzIG1hcCcsXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKHBhcnNlRXJyb3IpIHtcbiAgICAgIHJldHVybiB7IHBhcnNlRXJyb3IgfTtcbiAgICB9XG4gICAgYWRkUXVlcnlQYXJhbSgndmFyaWFibGVzJywgc2VyaWFsaXplZFZhcmlhYmxlcyk7XG4gIH1cbiAgaWYgKGJvZHkuZXh0ZW5zaW9ucykge1xuICAgIGxldCBzZXJpYWxpemVkRXh0ZW5zaW9ucztcbiAgICB0cnkge1xuICAgICAgc2VyaWFsaXplZEV4dGVuc2lvbnMgPSBzZXJpYWxpemVGZXRjaFBhcmFtZXRlcihcbiAgICAgICAgYm9keS5leHRlbnNpb25zLFxuICAgICAgICAnRXh0ZW5zaW9ucyBtYXAnLFxuICAgICAgKTtcbiAgICB9IGNhdGNoIChwYXJzZUVycm9yKSB7XG4gICAgICByZXR1cm4geyBwYXJzZUVycm9yIH07XG4gICAgfVxuICAgIGFkZFF1ZXJ5UGFyYW0oJ2V4dGVuc2lvbnMnLCBzZXJpYWxpemVkRXh0ZW5zaW9ucyk7XG4gIH1cblxuICAvLyBSZWNvbnN0cnVjdCB0aGUgVVJJIHdpdGggYWRkZWQgcXVlcnkgcGFyYW1zLlxuICAvLyBYWFggVGhpcyBhc3N1bWVzIHRoYXQgdGhlIFVSSSBpcyB3ZWxsLWZvcm1lZCBhbmQgdGhhdCBpdCBkb2Vzbid0XG4gIC8vICAgICBhbHJlYWR5IGNvbnRhaW4gYW55IG9mIHRoZXNlIHF1ZXJ5IHBhcmFtcy4gV2UgY291bGQgaW5zdGVhZCB1c2UgdGhlXG4gIC8vICAgICBVUkwgQVBJIGFuZCB0YWtlIGEgcG9seWZpbGwgKHdoYXR3Zy11cmxANikgZm9yIG9sZGVyIGJyb3dzZXJzIHRoYXRcbiAgLy8gICAgIGRvbid0IHN1cHBvcnQgVVJMU2VhcmNoUGFyYW1zLiBOb3RlIHRoYXQgc29tZSBicm93c2VycyAoYW5kXG4gIC8vICAgICB2ZXJzaW9ucyBvZiB3aGF0d2ctdXJsKSBzdXBwb3J0IFVSTCBidXQgbm90IFVSTFNlYXJjaFBhcmFtcyFcbiAgbGV0IGZyYWdtZW50ID0gJycsXG4gICAgcHJlRnJhZ21lbnQgPSBjaG9zZW5VUkk7XG4gIGNvbnN0IGZyYWdtZW50U3RhcnQgPSBjaG9zZW5VUkkuaW5kZXhPZignIycpO1xuICBpZiAoZnJhZ21lbnRTdGFydCAhPT0gLTEpIHtcbiAgICBmcmFnbWVudCA9IGNob3NlblVSSS5zdWJzdHIoZnJhZ21lbnRTdGFydCk7XG4gICAgcHJlRnJhZ21lbnQgPSBjaG9zZW5VUkkuc3Vic3RyKDAsIGZyYWdtZW50U3RhcnQpO1xuICB9XG4gIGNvbnN0IHF1ZXJ5UGFyYW1zUHJlZml4ID0gcHJlRnJhZ21lbnQuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJztcbiAgY29uc3QgbmV3VVJJID1cbiAgICBwcmVGcmFnbWVudCArIHF1ZXJ5UGFyYW1zUHJlZml4ICsgcXVlcnlQYXJhbXMuam9pbignJicpICsgZnJhZ21lbnQ7XG4gIHJldHVybiB7IG5ld1VSSSB9O1xufVxuXG5leHBvcnQgY2xhc3MgSHR0cExpbmsgZXh0ZW5kcyBBcG9sbG9MaW5rIHtcbiAgcHVibGljIHJlcXVlc3RlcjogUmVxdWVzdEhhbmRsZXI7XG4gIGNvbnN0cnVjdG9yKG9wdHM/OiBIdHRwTGluay5PcHRpb25zKSB7XG4gICAgc3VwZXIoY3JlYXRlSHR0cExpbmsob3B0cykucmVxdWVzdCk7XG4gIH1cbn1cbiIsIi8qKlxuICogVGhlIGN1cnJlbnQgc3RhdHVzIG9mIGEgcXVlcnnigJlzIGV4ZWN1dGlvbiBpbiBvdXIgc3lzdGVtLlxuICovXG5leHBvcnQgZW51bSBOZXR3b3JrU3RhdHVzIHtcbiAgLyoqXG4gICAqIFRoZSBxdWVyeSBoYXMgbmV2ZXIgYmVlbiBydW4gYmVmb3JlIGFuZCB0aGUgcXVlcnkgaXMgbm93IGN1cnJlbnRseSBydW5uaW5nLiBBIHF1ZXJ5IHdpbGwgc3RpbGxcbiAgICogaGF2ZSB0aGlzIG5ldHdvcmsgc3RhdHVzIGV2ZW4gaWYgYSBwYXJ0aWFsIGRhdGEgcmVzdWx0IHdhcyByZXR1cm5lZCBmcm9tIHRoZSBjYWNoZSwgYnV0IGFcbiAgICogcXVlcnkgd2FzIGRpc3BhdGNoZWQgYW55d2F5LlxuICAgKi9cbiAgbG9hZGluZyA9IDEsXG5cbiAgLyoqXG4gICAqIElmIGBzZXRWYXJpYWJsZXNgIHdhcyBjYWxsZWQgYW5kIGEgcXVlcnkgd2FzIGZpcmVkIGJlY2F1c2Ugb2YgdGhhdCB0aGVuIHRoZSBuZXR3b3JrIHN0YXR1c1xuICAgKiB3aWxsIGJlIGBzZXRWYXJpYWJsZXNgIHVudGlsIHRoZSByZXN1bHQgb2YgdGhhdCBxdWVyeSBjb21lcyBiYWNrLlxuICAgKi9cbiAgc2V0VmFyaWFibGVzID0gMixcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgYGZldGNoTW9yZWAgd2FzIGNhbGxlZCBvbiB0aGlzIHF1ZXJ5IGFuZCB0aGF0IHRoZSBxdWVyeSBjcmVhdGVkIGlzIGN1cnJlbnRseSBpblxuICAgKiBmbGlnaHQuXG4gICAqL1xuICBmZXRjaE1vcmUgPSAzLFxuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIHRoZSBgc2V0VmFyaWFibGVzYCBuZXR3b3JrIHN0YXR1cy4gSXQgbWVhbnMgdGhhdCBgcmVmZXRjaGAgd2FzIGNhbGxlZCBvbiBhIHF1ZXJ5XG4gICAqIGFuZCB0aGUgcmVmZXRjaCByZXF1ZXN0IGlzIGN1cnJlbnRseSBpbiBmbGlnaHQuXG4gICAqL1xuICByZWZldGNoID0gNCxcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHRoYXQgYSBwb2xsaW5nIHF1ZXJ5IGlzIGN1cnJlbnRseSBpbiBmbGlnaHQuIFNvIGZvciBleGFtcGxlIGlmIHlvdSBhcmUgcG9sbGluZyBhXG4gICAqIHF1ZXJ5IGV2ZXJ5IDEwIHNlY29uZHMgdGhlbiB0aGUgbmV0d29yayBzdGF0dXMgd2lsbCBzd2l0Y2ggdG8gYHBvbGxgIGV2ZXJ5IDEwIHNlY29uZHMgd2hlbmV2ZXJcbiAgICogYSBwb2xsIHJlcXVlc3QgaGFzIGJlZW4gc2VudCBidXQgbm90IHJlc29sdmVkLlxuICAgKi9cbiAgcG9sbCA9IDYsXG5cbiAgLyoqXG4gICAqIE5vIHJlcXVlc3QgaXMgaW4gZmxpZ2h0IGZvciB0aGlzIHF1ZXJ5LCBhbmQgbm8gZXJyb3JzIGhhcHBlbmVkLiBFdmVyeXRoaW5nIGlzIE9LLlxuICAgKi9cbiAgcmVhZHkgPSA3LFxuXG4gIC8qKlxuICAgKiBObyByZXF1ZXN0IGlzIGluIGZsaWdodCBmb3IgdGhpcyBxdWVyeSwgYnV0IG9uZSBvciBtb3JlIGVycm9ycyB3ZXJlIGRldGVjdGVkLlxuICAgKi9cbiAgZXJyb3IgPSA4LFxufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSBuZXR3b3JrIHJlcXVlc3QgaW4gZmxpZ2h0IGFjY29yZGluZyB0byBhIGdpdmVuIG5ldHdvcmtcbiAqIHN0YXR1cy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChcbiAgbmV0d29ya1N0YXR1czogTmV0d29ya1N0YXR1cyxcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gbmV0d29ya1N0YXR1cyA8IDc7XG59XG4iLCIvLyBUaGlzIHNpbXBsaWZpZWQgcG9seWZpbGwgYXR0ZW1wdHMgdG8gZm9sbG93IHRoZSBFQ01BU2NyaXB0IE9ic2VydmFibGUgcHJvcG9zYWwuXG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxuaW1wb3J0IHsgT2JzZXJ2YWJsZSBhcyBMaW5rT2JzZXJ2YWJsZSB9IGZyb20gJ2Fwb2xsby1saW5rJztcblxuZXhwb3J0IHR5cGUgU3Vic2NyaXB0aW9uID0gWmVuT2JzZXJ2YWJsZS5TdWJzY3JpcHRpb247XG5leHBvcnQgdHlwZSBPYnNlcnZlcjxUPiA9IFplbk9ic2VydmFibGUuT2JzZXJ2ZXI8VD47XG5cbmltcG9ydCAkJG9ic2VydmFibGUgZnJvbSAnc3ltYm9sLW9ic2VydmFibGUnO1xuXG4vLyByeGpzIGludGVyb3B0XG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZTxUPiBleHRlbmRzIExpbmtPYnNlcnZhYmxlPFQ+IHtcbiAgcHVibGljIFskJG9ic2VydmFibGVdKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcHVibGljIFsnQEBvYnNlcnZhYmxlJyBhcyBhbnldKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gaXNOb25FbXB0eUFycmF5PFQ+KHZhbHVlPzogQXJyYXlMaWtlPFQ+KTogdmFsdWUgaXMgQXJyYXk8VD4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbn1cbiIsImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSAnLi4vdXRpbC9hcnJheXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNBcG9sbG9FcnJvcihlcnI6IEVycm9yKTogZXJyIGlzIEFwb2xsb0Vycm9yIHtcbiAgcmV0dXJuIGVyci5oYXNPd25Qcm9wZXJ0eSgnZ3JhcGhRTEVycm9ycycpO1xufVxuXG4vLyBTZXRzIHRoZSBlcnJvciBtZXNzYWdlIG9uIHRoaXMgZXJyb3IgYWNjb3JkaW5nIHRvIHRoZVxuLy8gdGhlIEdyYXBoUUwgYW5kIG5ldHdvcmsgZXJyb3JzIHRoYXQgYXJlIHByZXNlbnQuXG4vLyBJZiB0aGUgZXJyb3IgbWVzc2FnZSBoYXMgYWxyZWFkeSBiZWVuIHNldCB0aHJvdWdoIHRoZVxuLy8gY29uc3RydWN0b3Igb3Igb3RoZXJ3aXNlLCB0aGlzIGZ1bmN0aW9uIGlzIGEgbm9wLlxuY29uc3QgZ2VuZXJhdGVFcnJvck1lc3NhZ2UgPSAoZXJyOiBBcG9sbG9FcnJvcikgPT4ge1xuICBsZXQgbWVzc2FnZSA9ICcnO1xuICAvLyBJZiB3ZSBoYXZlIEdyYXBoUUwgZXJyb3JzIHByZXNlbnQsIGFkZCB0aGF0IHRvIHRoZSBlcnJvciBtZXNzYWdlLlxuICBpZiAoaXNOb25FbXB0eUFycmF5KGVyci5ncmFwaFFMRXJyb3JzKSkge1xuICAgIGVyci5ncmFwaFFMRXJyb3JzLmZvckVhY2goKGdyYXBoUUxFcnJvcjogR3JhcGhRTEVycm9yKSA9PiB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBncmFwaFFMRXJyb3JcbiAgICAgICAgPyBncmFwaFFMRXJyb3IubWVzc2FnZVxuICAgICAgICA6ICdFcnJvciBtZXNzYWdlIG5vdCBmb3VuZC4nO1xuICAgICAgbWVzc2FnZSArPSBgR3JhcGhRTCBlcnJvcjogJHtlcnJvck1lc3NhZ2V9XFxuYDtcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChlcnIubmV0d29ya0Vycm9yKSB7XG4gICAgbWVzc2FnZSArPSAnTmV0d29yayBlcnJvcjogJyArIGVyci5uZXR3b3JrRXJyb3IubWVzc2FnZSArICdcXG4nO1xuICB9XG5cbiAgLy8gc3RyaXAgbmV3bGluZSBmcm9tIHRoZSBlbmQgb2YgdGhlIG1lc3NhZ2VcbiAgbWVzc2FnZSA9IG1lc3NhZ2UucmVwbGFjZSgvXFxuJC8sICcnKTtcbiAgcmV0dXJuIG1lc3NhZ2U7XG59O1xuXG5leHBvcnQgY2xhc3MgQXBvbGxvRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XG4gIHB1YmxpYyBncmFwaFFMRXJyb3JzOiBSZWFkb25seUFycmF5PEdyYXBoUUxFcnJvcj47XG4gIHB1YmxpYyBuZXR3b3JrRXJyb3I6IEVycm9yIHwgbnVsbDtcblxuICAvLyBBbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byBwcm92aWRlIHNvbWUgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuICAvLyBhYm91dCBhbiBlcnJvciwgZS5nLiBzcGVjaWZ5aW5nIHRoZSB0eXBlIG9mIGVycm9yIHRoaXMgaXMuIFVzZWRcbiAgLy8gaW50ZXJuYWxseSB3aXRoaW4gQXBvbGxvIENsaWVudC5cbiAgcHVibGljIGV4dHJhSW5mbzogYW55O1xuXG4gIC8vIENvbnN0cnVjdHMgYW4gaW5zdGFuY2Ugb2YgQXBvbGxvRXJyb3IgZ2l2ZW4gYSBHcmFwaFFMRXJyb3JcbiAgLy8gb3IgYSBuZXR3b3JrIGVycm9yLiBOb3RlIHRoYXQgb25lIG9mIHRoZXNlIGhhcyB0byBiZSBhIHZhbGlkXG4gIC8vIHZhbHVlIG9yIHRoZSBjb25zdHJ1Y3RlZCBlcnJvciB3aWxsIGJlIG1lYW5pbmdsZXNzLlxuICBjb25zdHJ1Y3Rvcih7XG4gICAgZ3JhcGhRTEVycm9ycyxcbiAgICBuZXR3b3JrRXJyb3IsXG4gICAgZXJyb3JNZXNzYWdlLFxuICAgIGV4dHJhSW5mbyxcbiAgfToge1xuICAgIGdyYXBoUUxFcnJvcnM/OiBSZWFkb25seUFycmF5PEdyYXBoUUxFcnJvcj47XG4gICAgbmV0d29ya0Vycm9yPzogRXJyb3IgfCBudWxsO1xuICAgIGVycm9yTWVzc2FnZT86IHN0cmluZztcbiAgICBleHRyYUluZm8/OiBhbnk7XG4gIH0pIHtcbiAgICBzdXBlcihlcnJvck1lc3NhZ2UpO1xuICAgIHRoaXMuZ3JhcGhRTEVycm9ycyA9IGdyYXBoUUxFcnJvcnMgfHwgW107XG4gICAgdGhpcy5uZXR3b3JrRXJyb3IgPSBuZXR3b3JrRXJyb3IgfHwgbnVsbDtcblxuICAgIGlmICghZXJyb3JNZXNzYWdlKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgPSBnZW5lcmF0ZUVycm9yTWVzc2FnZSh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JNZXNzYWdlO1xuICAgIH1cblxuICAgIHRoaXMuZXh0cmFJbmZvID0gZXh0cmFJbmZvO1xuXG4gICAgLy8gV2UncmUgbm90IHVzaW5nIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIGhlcmUgYXMgaXQgaXNuJ3QgZnVsbHlcbiAgICAvLyBzdXBwb3J0ZWQgb24gQW5kcm9pZCAoc2VlIGlzc3VlICMzMjM2KS5cbiAgICAodGhpcyBhcyBhbnkpLl9fcHJvdG9fXyA9IEFwb2xsb0Vycm9yLnByb3RvdHlwZTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgRmV0Y2hSZXN1bHQgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBEb2N1bWVudE5vZGUsIEdyYXBoUUxFcnJvciB9IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgeyBRdWVyeVN0b3JlVmFsdWUgfSBmcm9tICcuLi9kYXRhL3F1ZXJpZXMnO1xuaW1wb3J0IHsgTmV0d29ya1N0YXR1cyB9IGZyb20gJy4vbmV0d29ya1N0YXR1cyc7XG5pbXBvcnQgeyBSZXNvbHZlciB9IGZyb20gJy4vTG9jYWxTdGF0ZSc7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5TGlzdGVuZXIgPSAoXG4gIHF1ZXJ5U3RvcmVWYWx1ZTogUXVlcnlTdG9yZVZhbHVlLFxuICBuZXdEYXRhPzogYW55LFxuICBmb3JjZVJlc29sdmVycz86IGJvb2xlYW4sXG4pID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIE9wZXJhdGlvblZhcmlhYmxlcyA9IHsgW2tleTogc3RyaW5nXTogYW55IH07XG5cbmV4cG9ydCB0eXBlIFB1cmVRdWVyeU9wdGlvbnMgPSB7XG4gIHF1ZXJ5OiBEb2N1bWVudE5vZGU7XG4gIHZhcmlhYmxlcz86IHsgW2tleTogc3RyaW5nXTogYW55IH07XG4gIGNvbnRleHQ/OiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBBcG9sbG9RdWVyeVJlc3VsdDxUPiA9IHtcbiAgZGF0YTogVDtcbiAgZXJyb3JzPzogUmVhZG9ubHlBcnJheTxHcmFwaFFMRXJyb3I+O1xuICBsb2FkaW5nOiBib29sZWFuO1xuICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzO1xuICBzdGFsZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBlbnVtIEZldGNoVHlwZSB7XG4gIG5vcm1hbCA9IDEsXG4gIHJlZmV0Y2ggPSAyLFxuICBwb2xsID0gMyxcbn1cblxuLy8gVGhpcyBpcyBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJLCBwZW9wbGUgd3JpdGUgdGhlc2UgZnVuY3Rpb25zIGluIGB1cGRhdGVRdWVyaWVzYC5cbmV4cG9ydCB0eXBlIE11dGF0aW9uUXVlcnlSZWR1Y2VyPFQ+ID0gKFxuICBwcmV2aW91c1Jlc3VsdDogUmVjb3JkPHN0cmluZywgYW55PixcbiAgb3B0aW9uczoge1xuICAgIG11dGF0aW9uUmVzdWx0OiBGZXRjaFJlc3VsdDxUPjtcbiAgICBxdWVyeU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICBxdWVyeVZhcmlhYmxlczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgfSxcbikgPT4gUmVjb3JkPHN0cmluZywgYW55PjtcblxuZXhwb3J0IHR5cGUgTXV0YXRpb25RdWVyeVJlZHVjZXJzTWFwPFQgPSB7IFtrZXk6IHN0cmluZ106IGFueSB9PiA9IHtcbiAgW3F1ZXJ5TmFtZTogc3RyaW5nXTogTXV0YXRpb25RdWVyeVJlZHVjZXI8VD47XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlc29sdmVycyB7XG4gIFtrZXk6IHN0cmluZ106IHtcbiAgICBbIGZpZWxkOiBzdHJpbmcgXTogUmVzb2x2ZXI7XG4gIH07XG59XG4iLCJpbXBvcnQge1xuICBpc0VxdWFsLFxuICB0cnlGdW5jdGlvbk9yTG9nRXJyb3IsXG4gIGNsb25lRGVlcCxcbiAgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbixcbn0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5pbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMsIGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodCB9IGZyb20gJy4vbmV0d29ya1N0YXR1cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBPYnNlcnZlciwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi4vdXRpbC9PYnNlcnZhYmxlJztcbmltcG9ydCB7IEFwb2xsb0Vycm9yIH0gZnJvbSAnLi4vZXJyb3JzL0Fwb2xsb0Vycm9yJztcbmltcG9ydCB7IFF1ZXJ5TWFuYWdlciB9IGZyb20gJy4vUXVlcnlNYW5hZ2VyJztcbmltcG9ydCB7IEFwb2xsb1F1ZXJ5UmVzdWx0LCBGZXRjaFR5cGUsIE9wZXJhdGlvblZhcmlhYmxlcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgV2F0Y2hRdWVyeU9wdGlvbnMsXG4gIEZldGNoTW9yZVF1ZXJ5T3B0aW9ucyxcbiAgU3Vic2NyaWJlVG9Nb3JlT3B0aW9ucyxcbiAgRXJyb3JQb2xpY3ksXG59IGZyb20gJy4vd2F0Y2hRdWVyeU9wdGlvbnMnO1xuXG5pbXBvcnQgeyBRdWVyeVN0b3JlVmFsdWUgfSBmcm9tICcuLi9kYXRhL3F1ZXJpZXMnO1xuXG5pbXBvcnQgeyBpbnZhcmlhbnQsIEludmFyaWFudEVycm9yIH0gZnJvbSAndHMtaW52YXJpYW50JztcbmltcG9ydCB7IGlzTm9uRW1wdHlBcnJheSB9IGZyb20gJy4uL3V0aWwvYXJyYXlzJztcblxuLy8gWFhYIHJlbW92ZSBpbiB0aGUgbmV4dCBicmVha2luZyBzZW12ZXIgY2hhbmdlICgzLjApXG4vLyBEZXByZWNhdGVkLCB1c2UgQXBvbGxvQ3VycmVudFF1ZXJ5UmVzdWx0XG5leHBvcnQgdHlwZSBBcG9sbG9DdXJyZW50UmVzdWx0PFQ+ID0ge1xuICBkYXRhOiBUIHwge307XG4gIGVycm9ycz86IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEVycm9yPjtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgbmV0d29ya1N0YXR1czogTmV0d29ya1N0YXR1cztcbiAgZXJyb3I/OiBBcG9sbG9FcnJvcjtcbiAgcGFydGlhbD86IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBBcG9sbG9DdXJyZW50UXVlcnlSZXN1bHQ8VD4gPSB7XG4gIGRhdGE6IFQgfCB1bmRlZmluZWQ7XG4gIGVycm9ycz86IFJlYWRvbmx5QXJyYXk8R3JhcGhRTEVycm9yPjtcbiAgbG9hZGluZzogYm9vbGVhbjtcbiAgbmV0d29ya1N0YXR1czogTmV0d29ya1N0YXR1cztcbiAgZXJyb3I/OiBBcG9sbG9FcnJvcjtcbiAgcGFydGlhbD86IGJvb2xlYW47XG4gIHN0YWxlPzogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmV0Y2hNb3JlT3B0aW9uczxcbiAgVERhdGEgPSBhbnksXG4gIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXNcbj4ge1xuICB1cGRhdGVRdWVyeTogKFxuICAgIHByZXZpb3VzUXVlcnlSZXN1bHQ6IFREYXRhLFxuICAgIG9wdGlvbnM6IHtcbiAgICAgIGZldGNoTW9yZVJlc3VsdD86IFREYXRhO1xuICAgICAgdmFyaWFibGVzPzogVFZhcmlhYmxlcztcbiAgICB9LFxuICApID0+IFREYXRhO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZVF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzPiB7XG4gIHZhcmlhYmxlcz86IFRWYXJpYWJsZXM7XG59XG5cbmV4cG9ydCBjb25zdCBoYXNFcnJvciA9IChcbiAgc3RvcmVWYWx1ZTogUXVlcnlTdG9yZVZhbHVlLFxuICBwb2xpY3k6IEVycm9yUG9saWN5ID0gJ25vbmUnLFxuKSA9PiBzdG9yZVZhbHVlICYmIChcbiAgc3RvcmVWYWx1ZS5uZXR3b3JrRXJyb3IgfHxcbiAgKHBvbGljeSA9PT0gJ25vbmUnICYmIGlzTm9uRW1wdHlBcnJheShzdG9yZVZhbHVlLmdyYXBoUUxFcnJvcnMpKVxuKTtcblxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVRdWVyeTxcbiAgVERhdGEgPSBhbnksXG4gIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXNcbj4gZXh0ZW5kcyBPYnNlcnZhYmxlPEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPj4ge1xuICBwdWJsaWMgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnM8VFZhcmlhYmxlcz47XG4gIHB1YmxpYyByZWFkb25seSBxdWVyeUlkOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBxdWVyeU5hbWU/OiBzdHJpbmc7XG4gIC8qKlxuICAgKlxuICAgKiBUaGUgY3VycmVudCB2YWx1ZSBvZiB0aGUgdmFyaWFibGVzIGZvciB0aGlzIHF1ZXJ5LiBDYW4gY2hhbmdlLlxuICAgKi9cbiAgcHVibGljIHZhcmlhYmxlczogVFZhcmlhYmxlcztcblxuICBwcml2YXRlIHNob3VsZFN1YnNjcmliZTogYm9vbGVhbjtcbiAgcHJpdmF0ZSBpc1Rvcm5Eb3duOiBib29sZWFuO1xuICBwcml2YXRlIHF1ZXJ5TWFuYWdlcjogUXVlcnlNYW5hZ2VyPGFueT47XG4gIHByaXZhdGUgb2JzZXJ2ZXJzID0gbmV3IFNldDxPYnNlcnZlcjxBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4+PigpO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnMgPSBuZXcgU2V0PFN1YnNjcmlwdGlvbj4oKTtcblxuICBwcml2YXRlIGxhc3RSZXN1bHQ6IEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPjtcbiAgcHJpdmF0ZSBsYXN0UmVzdWx0U25hcHNob3Q6IEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPjtcbiAgcHJpdmF0ZSBsYXN0RXJyb3I6IEFwb2xsb0Vycm9yO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBxdWVyeU1hbmFnZXIsXG4gICAgb3B0aW9ucyxcbiAgICBzaG91bGRTdWJzY3JpYmUgPSB0cnVlLFxuICB9OiB7XG4gICAgcXVlcnlNYW5hZ2VyOiBRdWVyeU1hbmFnZXI8YW55PjtcbiAgICBvcHRpb25zOiBXYXRjaFF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzPjtcbiAgICBzaG91bGRTdWJzY3JpYmU/OiBib29sZWFuO1xuICB9KSB7XG4gICAgc3VwZXIoKG9ic2VydmVyOiBPYnNlcnZlcjxBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4+KSA9PlxuICAgICAgdGhpcy5vblN1YnNjcmliZShvYnNlcnZlciksXG4gICAgKTtcblxuICAgIC8vIGFjdGl2ZSBzdGF0ZVxuICAgIHRoaXMuaXNUb3JuRG93biA9IGZhbHNlO1xuXG4gICAgLy8gcXVlcnkgaW5mb3JtYXRpb25cbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMudmFyaWFibGVzID0gb3B0aW9ucy52YXJpYWJsZXMgfHwgKHt9IGFzIFRWYXJpYWJsZXMpO1xuICAgIHRoaXMucXVlcnlJZCA9IHF1ZXJ5TWFuYWdlci5nZW5lcmF0ZVF1ZXJ5SWQoKTtcbiAgICB0aGlzLnNob3VsZFN1YnNjcmliZSA9IHNob3VsZFN1YnNjcmliZTtcblxuICAgIGNvbnN0IG9wRGVmID0gZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbihvcHRpb25zLnF1ZXJ5KTtcbiAgICB0aGlzLnF1ZXJ5TmFtZSA9IG9wRGVmICYmIG9wRGVmLm5hbWUgJiYgb3BEZWYubmFtZS52YWx1ZTtcblxuICAgIC8vIHJlbGF0ZWQgY2xhc3Nlc1xuICAgIHRoaXMucXVlcnlNYW5hZ2VyID0gcXVlcnlNYW5hZ2VyO1xuICB9XG5cbiAgcHVibGljIHJlc3VsdCgpOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPj4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBvYnNlcnZlcjogT2JzZXJ2ZXI8QXBvbGxvUXVlcnlSZXN1bHQ8VERhdGE+PiA9IHtcbiAgICAgICAgbmV4dDogKHJlc3VsdDogQXBvbGxvUXVlcnlSZXN1bHQ8VERhdGE+KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuXG4gICAgICAgICAgLy8gU3RvcCB0aGUgcXVlcnkgd2l0aGluIHRoZSBRdWVyeU1hbmFnZXIgaWYgd2UgY2FuIGJlZm9yZVxuICAgICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gcmV0dXJucy5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdlIGRvIHRoaXMgaW4gb3JkZXIgdG8gcHJldmVudCBvYnNlcnZlcnMgcGlsaW5nIHVwIHdpdGhpblxuICAgICAgICAgIC8vIHRoZSBRdWVyeU1hbmFnZXIuIE5vdGljZSB0aGF0IHdlIG9ubHkgZnVsbHkgdW5zdWJzY3JpYmVcbiAgICAgICAgICAvLyBmcm9tIHRoZSBzdWJzY3JpcHRpb24gaW4gYSBzZXRUaW1lb3V0KC4uLiwgMCkgIGNhbGwuIFRoaXMgY2FsbCBjYW5cbiAgICAgICAgICAvLyBhY3R1YWxseSBiZSBoYW5kbGVkIGJ5IHRoZSBicm93c2VyIGF0IGEgbXVjaCBsYXRlciB0aW1lLiBJZiBxdWVyaWVzXG4gICAgICAgICAgLy8gYXJlIGZpcmVkIGluIHRoZSBtZWFudGltZSwgb2JzZXJ2ZXJzIHRoYXQgc2hvdWxkIGhhdmUgYmVlbiByZW1vdmVkXG4gICAgICAgICAgLy8gZnJvbSB0aGUgUXVlcnlNYW5hZ2VyIHdpbGwgY29udGludWUgdG8gZmlyZSwgY2F1c2luZyBhbiB1bm5lY2Vzc2FyeVxuICAgICAgICAgIC8vIHBlcmZvcm1hbmNlIGhpdC5cbiAgICAgICAgICB0aGlzLm9ic2VydmVycy5kZWxldGUob2JzZXJ2ZXIpO1xuICAgICAgICAgIGlmICghdGhpcy5vYnNlcnZlcnMuc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy5xdWVyeU1hbmFnZXIucmVtb3ZlUXVlcnkodGhpcy5xdWVyeUlkKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9LFxuICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFhYWCByZW1vdmUgaW4gdGhlIG5leHQgYnJlYWtpbmcgc2VtdmVyIGNoYW5nZSAoMy4wKVxuICAvLyBEZXByZWNhdGVkLCB1c2UgZ2V0Q3VycmVudFJlc3VsdCgpXG4gIHB1YmxpYyBjdXJyZW50UmVzdWx0KCk6IEFwb2xsb0N1cnJlbnRSZXN1bHQ8VERhdGE+IHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmdldEN1cnJlbnRSZXN1bHQoKSBhcyBBcG9sbG9DdXJyZW50UmVzdWx0PFREYXRhPjtcbiAgICBpZiAocmVzdWx0LmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzdWx0LmRhdGEgPSB7fTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgcXVlcnkgZnJvbSB0aGUgbG9jYWwgY2FjaGUgYXMgd2VsbCBhcyBzb21lIGZldGNoaW5nIHN0YXR1c1xuICAgKiBgbG9hZGluZ2AgYW5kIGBuZXR3b3JrU3RhdHVzYCBhbGxvdyB0byBrbm93IGlmIGEgcmVxdWVzdCBpcyBpbiBmbGlnaHRcbiAgICogYHBhcnRpYWxgIGxldHMgeW91IGtub3cgaWYgdGhlIHJlc3VsdCBmcm9tIHRoZSBsb2NhbCBjYWNoZSBpcyBjb21wbGV0ZSBvciBwYXJ0aWFsXG4gICAqIEByZXR1cm4ge2RhdGE6IE9iamVjdCwgZXJyb3I6IEFwb2xsb0Vycm9yLCBsb2FkaW5nOiBib29sZWFuLCBuZXR3b3JrU3RhdHVzOiBudW1iZXIsIHBhcnRpYWw6IGJvb2xlYW59XG4gICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFJlc3VsdCgpOiBBcG9sbG9DdXJyZW50UXVlcnlSZXN1bHQ8VERhdGE+IHtcbiAgICBpZiAodGhpcy5pc1Rvcm5Eb3duKSB7XG4gICAgICBjb25zdCB7IGxhc3RSZXN1bHQgfSA9IHRoaXM7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBkYXRhOiAhdGhpcy5sYXN0RXJyb3IgJiYgbGFzdFJlc3VsdCAmJiBsYXN0UmVzdWx0LmRhdGEgfHwgdm9pZCAwLFxuICAgICAgICBlcnJvcjogdGhpcy5sYXN0RXJyb3IsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzLmVycm9yLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGRhdGEsIHBhcnRpYWwgfSA9IHRoaXMucXVlcnlNYW5hZ2VyLmdldEN1cnJlbnRRdWVyeVJlc3VsdCh0aGlzKTtcbiAgICBjb25zdCBxdWVyeVN0b3JlVmFsdWUgPSB0aGlzLnF1ZXJ5TWFuYWdlci5xdWVyeVN0b3JlLmdldCh0aGlzLnF1ZXJ5SWQpO1xuICAgIGxldCByZXN1bHQ6IEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPjtcblxuICAgIGNvbnN0IHsgZmV0Y2hQb2xpY3kgfSA9IHRoaXMub3B0aW9ucztcblxuICAgIGNvbnN0IGlzTmV0d29ya0ZldGNoUG9saWN5ID1cbiAgICAgIGZldGNoUG9saWN5ID09PSAnbmV0d29yay1vbmx5JyB8fFxuICAgICAgZmV0Y2hQb2xpY3kgPT09ICduby1jYWNoZSc7XG5cbiAgICBpZiAocXVlcnlTdG9yZVZhbHVlKSB7XG4gICAgICBjb25zdCB7IG5ldHdvcmtTdGF0dXMgfSA9IHF1ZXJ5U3RvcmVWYWx1ZTtcblxuICAgICAgaWYgKGhhc0Vycm9yKHF1ZXJ5U3RvcmVWYWx1ZSwgdGhpcy5vcHRpb25zLmVycm9yUG9saWN5KSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IHZvaWQgMCxcbiAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBuZXR3b3JrU3RhdHVzLFxuICAgICAgICAgIGVycm9yOiBuZXcgQXBvbGxvRXJyb3Ioe1xuICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogcXVlcnlTdG9yZVZhbHVlLmdyYXBoUUxFcnJvcnMsXG4gICAgICAgICAgICBuZXR3b3JrRXJyb3I6IHF1ZXJ5U3RvcmVWYWx1ZS5uZXR3b3JrRXJyb3IsXG4gICAgICAgICAgfSksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIFZhcmlhYmxlcyBtaWdodCBoYXZlIGJlZW4gYWRkZWQgZHluYW1pY2FsbHkgYXQgcXVlcnkgdGltZSwgd2hlblxuICAgICAgLy8gdXNpbmcgYEBjbGllbnQgQGV4cG9ydChhczogXCJ2YXJuYW1lXCIpYCBmb3IgZXhhbXBsZS4gV2hlbiB0aGlzIGhhcHBlbnMsXG4gICAgICAvLyB0aGUgdmFyaWFibGVzIGhhdmUgYmVlbiB1cGRhdGVkIGluIHRoZSBxdWVyeSBzdG9yZSwgYnV0IG5vdCB1cGRhdGVkIG9uXG4gICAgICAvLyB0aGUgb3JpZ2luYWwgYE9ic2VydmFibGVRdWVyeWAuIFdlJ2xsIHVwZGF0ZSB0aGUgb2JzZXJ2YWJsZSBxdWVyeVxuICAgICAgLy8gdmFyaWFibGVzIGhlcmUgdG8gbWF0Y2gsIHNvIHJldHJpZXZpbmcgZnJvbSB0aGUgY2FjaGUgZG9lc24ndCBmYWlsLlxuICAgICAgaWYgKHF1ZXJ5U3RvcmVWYWx1ZS52YXJpYWJsZXMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnZhcmlhYmxlcyA9IHtcbiAgICAgICAgICAuLi50aGlzLm9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICAgIC4uLihxdWVyeVN0b3JlVmFsdWUudmFyaWFibGVzIGFzIFRWYXJpYWJsZXMpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IHRoaXMub3B0aW9ucy52YXJpYWJsZXM7XG4gICAgICB9XG5cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbG9hZGluZzogaXNOZXR3b3JrUmVxdWVzdEluRmxpZ2h0KG5ldHdvcmtTdGF0dXMpLFxuICAgICAgICBuZXR3b3JrU3RhdHVzLFxuICAgICAgfSBhcyBBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT47XG5cbiAgICAgIGlmIChxdWVyeVN0b3JlVmFsdWUuZ3JhcGhRTEVycm9ycyAmJiB0aGlzLm9wdGlvbnMuZXJyb3JQb2xpY3kgPT09ICdhbGwnKSB7XG4gICAgICAgIHJlc3VsdC5lcnJvcnMgPSBxdWVyeVN0b3JlVmFsdWUuZ3JhcGhRTEVycm9ycztcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGJlIGNhcmVmdWwgYWJvdXQgdGhlIGxvYWRpbmcgc3RhdGUgd2Ugc2hvdyB0byB0aGUgdXNlciwgdG8gdHJ5XG4gICAgICAvLyBhbmQgYmUgdmFndWVseSBpbiBsaW5lIHdpdGggd2hhdCB0aGUgdXNlciB3b3VsZCBoYXZlIHNlZW4gZnJvbSAuc3Vic2NyaWJlKClcbiAgICAgIC8vIGJ1dCB0byBzdGlsbCBwcm92aWRlIHVzZWZ1bCBpbmZvcm1hdGlvbiBzeW5jaHJvbm91c2x5IHdoZW4gdGhlIHF1ZXJ5XG4gICAgICAvLyB3aWxsIG5vdCBlbmQgdXAgaGl0dGluZyB0aGUgc2VydmVyLlxuICAgICAgLy8gU2VlIG1vcmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hcG9sbG9zdGFjay9hcG9sbG8tY2xpZW50L2lzc3Vlcy83MDdcbiAgICAgIC8vIEJhc2ljYWxseTogaXMgdGhlcmUgYSBxdWVyeSBpbiBmbGlnaHQgcmlnaHQgbm93IChtb2RvbG8gdGhlIG5leHQgdGljayk/XG4gICAgICBjb25zdCBsb2FkaW5nID0gaXNOZXR3b3JrRmV0Y2hQb2xpY3kgfHxcbiAgICAgICAgKHBhcnRpYWwgJiYgZmV0Y2hQb2xpY3kgIT09ICdjYWNoZS1vbmx5Jyk7XG5cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgZGF0YSxcbiAgICAgICAgbG9hZGluZyxcbiAgICAgICAgbmV0d29ya1N0YXR1czogbG9hZGluZyA/IE5ldHdvcmtTdGF0dXMubG9hZGluZyA6IE5ldHdvcmtTdGF0dXMucmVhZHksXG4gICAgICB9IGFzIEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPjtcbiAgICB9XG5cbiAgICBpZiAoIXBhcnRpYWwpIHtcbiAgICAgIHRoaXMudXBkYXRlTGFzdFJlc3VsdCh7IC4uLnJlc3VsdCwgc3RhbGU6IGZhbHNlIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7IC4uLnJlc3VsdCwgcGFydGlhbCB9O1xuICB9XG5cbiAgLy8gQ29tcGFyZXMgbmV3UmVzdWx0IHRvIHRoZSBzbmFwc2hvdCB3ZSB0b29rIG9mIHRoaXMubGFzdFJlc3VsdCB3aGVuIGl0IHdhc1xuICAvLyBmaXJzdCByZWNlaXZlZC5cbiAgcHVibGljIGlzRGlmZmVyZW50RnJvbUxhc3RSZXN1bHQobmV3UmVzdWx0OiBBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4pIHtcbiAgICBjb25zdCB7IGxhc3RSZXN1bHRTbmFwc2hvdDogc25hcHNob3QgfSA9IHRoaXM7XG4gICAgcmV0dXJuICEoXG4gICAgICBzbmFwc2hvdCAmJlxuICAgICAgbmV3UmVzdWx0ICYmXG4gICAgICBzbmFwc2hvdC5uZXR3b3JrU3RhdHVzID09PSBuZXdSZXN1bHQubmV0d29ya1N0YXR1cyAmJlxuICAgICAgc25hcHNob3Quc3RhbGUgPT09IG5ld1Jlc3VsdC5zdGFsZSAmJlxuICAgICAgaXNFcXVhbChzbmFwc2hvdC5kYXRhLCBuZXdSZXN1bHQuZGF0YSlcbiAgICApO1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgbGFzdCByZXN1bHQgdGhhdCBvYnNlcnZlci5uZXh0IHdhcyBjYWxsZWQgd2l0aC4gVGhpcyBpcyBub3QgdGhlIHNhbWUgYXNcbiAgLy8gZ2V0Q3VycmVudFJlc3VsdCEgSWYgeW91J3JlIG5vdCBzdXJlIHdoaWNoIHlvdSBuZWVkLCB0aGVuIHlvdSBwcm9iYWJseSBuZWVkIGdldEN1cnJlbnRSZXN1bHQuXG4gIHB1YmxpYyBnZXRMYXN0UmVzdWx0KCk6IEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPiB7XG4gICAgcmV0dXJuIHRoaXMubGFzdFJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMYXN0RXJyb3IoKTogQXBvbGxvRXJyb3Ige1xuICAgIHJldHVybiB0aGlzLmxhc3RFcnJvcjtcbiAgfVxuXG4gIHB1YmxpYyByZXNldExhc3RSZXN1bHRzKCk6IHZvaWQge1xuICAgIGRlbGV0ZSB0aGlzLmxhc3RSZXN1bHQ7XG4gICAgZGVsZXRlIHRoaXMubGFzdFJlc3VsdFNuYXBzaG90O1xuICAgIGRlbGV0ZSB0aGlzLmxhc3RFcnJvcjtcbiAgICB0aGlzLmlzVG9ybkRvd24gPSBmYWxzZTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldFF1ZXJ5U3RvcmVFcnJvcnMoKSB7XG4gICAgY29uc3QgcXVlcnlTdG9yZSA9IHRoaXMucXVlcnlNYW5hZ2VyLnF1ZXJ5U3RvcmUuZ2V0KHRoaXMucXVlcnlJZCk7XG4gICAgaWYgKHF1ZXJ5U3RvcmUpIHtcbiAgICAgIHF1ZXJ5U3RvcmUubmV0d29ya0Vycm9yID0gbnVsbDtcbiAgICAgIHF1ZXJ5U3RvcmUuZ3JhcGhRTEVycm9ycyA9IFtdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHZhcmlhYmxlcyBvZiB0aGlzIG9ic2VydmFibGUgcXVlcnksIGFuZCBmZXRjaCB0aGUgbmV3IHJlc3VsdHMuXG4gICAqIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBwcmVmZXJyZWQgb3ZlciBgc2V0VmFyaWFibGVzYCBpbiBtb3N0IHVzZSBjYXNlcy5cbiAgICpcbiAgICogQHBhcmFtIHZhcmlhYmxlczogVGhlIG5ldyBzZXQgb2YgdmFyaWFibGVzLiBJZiB0aGVyZSBhcmUgbWlzc2luZyB2YXJpYWJsZXMsXG4gICAqIHRoZSBwcmV2aW91cyB2YWx1ZXMgb2YgdGhvc2UgdmFyaWFibGVzIHdpbGwgYmUgdXNlZC5cbiAgICovXG4gIHB1YmxpYyByZWZldGNoKHZhcmlhYmxlcz86IFRWYXJpYWJsZXMpOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPj4ge1xuICAgIGxldCB7IGZldGNoUG9saWN5IH0gPSB0aGlzLm9wdGlvbnM7XG4gICAgLy8gZWFybHkgcmV0dXJuIGlmIHRyeWluZyB0byByZWFkIGZyb20gY2FjaGUgZHVyaW5nIHJlZmV0Y2hcbiAgICBpZiAoZmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1vbmx5Jykge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBJbnZhcmlhbnRFcnJvcihcbiAgICAgICAgJ2NhY2hlLW9ubHkgZmV0Y2hQb2xpY3kgb3B0aW9uIHNob3VsZCBub3QgYmUgdXNlZCB0b2dldGhlciB3aXRoIHF1ZXJ5IHJlZmV0Y2guJyxcbiAgICAgICkpO1xuICAgIH1cblxuICAgIC8vIFVubGVzcyB0aGUgcHJvdmlkZWQgZmV0Y2hQb2xpY3kgYWx3YXlzIGNvbnN1bHRzIHRoZSBuZXR3b3JrXG4gICAgLy8gKG5vLWNhY2hlLCBuZXR3b3JrLW9ubHksIG9yIGNhY2hlLWFuZC1uZXR3b3JrKSwgb3ZlcnJpZGUgaXQgd2l0aFxuICAgIC8vIG5ldHdvcmstb25seSB0byBmb3JjZSB0aGUgcmVmZXRjaCBmb3IgdGhpcyBmZXRjaFF1ZXJ5IGNhbGwuXG4gICAgaWYgKGZldGNoUG9saWN5ICE9PSAnbm8tY2FjaGUnICYmXG4gICAgICAgIGZldGNoUG9saWN5ICE9PSAnY2FjaGUtYW5kLW5ldHdvcmsnKSB7XG4gICAgICBmZXRjaFBvbGljeSA9ICduZXR3b3JrLW9ubHknO1xuICAgIH1cblxuICAgIGlmICghaXNFcXVhbCh0aGlzLnZhcmlhYmxlcywgdmFyaWFibGVzKSkge1xuICAgICAgLy8gdXBkYXRlIG9ic2VydmFibGUgdmFyaWFibGVzXG4gICAgICB0aGlzLnZhcmlhYmxlcyA9IHtcbiAgICAgICAgLi4udGhpcy52YXJpYWJsZXMsXG4gICAgICAgIC4uLnZhcmlhYmxlcyxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCFpc0VxdWFsKHRoaXMub3B0aW9ucy52YXJpYWJsZXMsIHRoaXMudmFyaWFibGVzKSkge1xuICAgICAgLy8gVXBkYXRlIHRoZSBleGlzdGluZyBvcHRpb25zIHdpdGggbmV3IHZhcmlhYmxlc1xuICAgICAgdGhpcy5vcHRpb25zLnZhcmlhYmxlcyA9IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgLi4udGhpcy52YXJpYWJsZXMsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnF1ZXJ5TWFuYWdlci5mZXRjaFF1ZXJ5KFxuICAgICAgdGhpcy5xdWVyeUlkLFxuICAgICAgeyAuLi50aGlzLm9wdGlvbnMsIGZldGNoUG9saWN5IH0sXG4gICAgICBGZXRjaFR5cGUucmVmZXRjaCxcbiAgICApIGFzIFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VERhdGE+PjtcbiAgfVxuXG4gIHB1YmxpYyBmZXRjaE1vcmU8SyBleHRlbmRzIGtleW9mIFRWYXJpYWJsZXM+KFxuICAgIGZldGNoTW9yZU9wdGlvbnM6IEZldGNoTW9yZVF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzLCBLPiAmXG4gICAgICBGZXRjaE1vcmVPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPixcbiAgKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4+IHtcbiAgICAvLyBlYXJseSByZXR1cm4gaWYgbm8gdXBkYXRlIFF1ZXJ5XG4gICAgaW52YXJpYW50KFxuICAgICAgZmV0Y2hNb3JlT3B0aW9ucy51cGRhdGVRdWVyeSxcbiAgICAgICd1cGRhdGVRdWVyeSBvcHRpb24gaXMgcmVxdWlyZWQuIFRoaXMgZnVuY3Rpb24gZGVmaW5lcyBob3cgdG8gdXBkYXRlIHRoZSBxdWVyeSBkYXRhIHdpdGggdGhlIG5ldyByZXN1bHRzLicsXG4gICAgKTtcblxuICAgIGNvbnN0IGNvbWJpbmVkT3B0aW9ucyA9IHtcbiAgICAgIC4uLihmZXRjaE1vcmVPcHRpb25zLnF1ZXJ5ID8gZmV0Y2hNb3JlT3B0aW9ucyA6IHtcbiAgICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgICAuLi5mZXRjaE1vcmVPcHRpb25zLFxuICAgICAgICB2YXJpYWJsZXM6IHtcbiAgICAgICAgICAuLi50aGlzLnZhcmlhYmxlcyxcbiAgICAgICAgICAuLi5mZXRjaE1vcmVPcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLFxuICAgIH0gYXMgV2F0Y2hRdWVyeU9wdGlvbnM7XG5cbiAgICBjb25zdCBxaWQgPSB0aGlzLnF1ZXJ5TWFuYWdlci5nZW5lcmF0ZVF1ZXJ5SWQoKTtcblxuICAgIHJldHVybiB0aGlzLnF1ZXJ5TWFuYWdlclxuICAgICAgLmZldGNoUXVlcnkoXG4gICAgICAgIHFpZCxcbiAgICAgICAgY29tYmluZWRPcHRpb25zLFxuICAgICAgICBGZXRjaFR5cGUubm9ybWFsLFxuICAgICAgICB0aGlzLnF1ZXJ5SWQsXG4gICAgICApXG4gICAgICAudGhlbihcbiAgICAgICAgZmV0Y2hNb3JlUmVzdWx0ID0+IHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZVF1ZXJ5KChwcmV2aW91c1Jlc3VsdDogYW55KSA9PlxuICAgICAgICAgICAgZmV0Y2hNb3JlT3B0aW9ucy51cGRhdGVRdWVyeShwcmV2aW91c1Jlc3VsdCwge1xuICAgICAgICAgICAgICBmZXRjaE1vcmVSZXN1bHQ6IGZldGNoTW9yZVJlc3VsdC5kYXRhIGFzIFREYXRhLFxuICAgICAgICAgICAgICB2YXJpYWJsZXM6IGNvbWJpbmVkT3B0aW9ucy52YXJpYWJsZXMgYXMgVFZhcmlhYmxlcyxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5xdWVyeU1hbmFnZXIuc3RvcFF1ZXJ5KHFpZCk7XG4gICAgICAgICAgcmV0dXJuIGZldGNoTW9yZVJlc3VsdCBhcyBBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT47XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yID0+IHtcbiAgICAgICAgICB0aGlzLnF1ZXJ5TWFuYWdlci5zdG9wUXVlcnkocWlkKTtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gIH1cblxuICAvLyBYWFggdGhlIHN1YnNjcmlwdGlvbiB2YXJpYWJsZXMgYXJlIHNlcGFyYXRlIGZyb20gdGhlIHF1ZXJ5IHZhcmlhYmxlcy5cbiAgLy8gaWYgeW91IHdhbnQgdG8gdXBkYXRlIHN1YnNjcmlwdGlvbiB2YXJpYWJsZXMsIHJpZ2h0IG5vdyB5b3UgaGF2ZSB0byBkbyB0aGF0IHNlcGFyYXRlbHksXG4gIC8vIGFuZCB5b3UgY2FuIG9ubHkgZG8gaXQgYnkgc3RvcHBpbmcgdGhlIHN1YnNjcmlwdGlvbiBhbmQgdGhlbiBzdWJzY3JpYmluZyBhZ2FpbiB3aXRoIG5ldyB2YXJpYWJsZXMuXG4gIHB1YmxpYyBzdWJzY3JpYmVUb01vcmU8XG4gICAgVFN1YnNjcmlwdGlvbkRhdGEgPSBURGF0YSxcbiAgICBUU3Vic2NyaXB0aW9uVmFyaWFibGVzID0gVFZhcmlhYmxlc1xuICA+KFxuICAgIG9wdGlvbnM6IFN1YnNjcmliZVRvTW9yZU9wdGlvbnM8XG4gICAgICBURGF0YSxcbiAgICAgIFRTdWJzY3JpcHRpb25WYXJpYWJsZXMsXG4gICAgICBUU3Vic2NyaXB0aW9uRGF0YVxuICAgID4sXG4gICkge1xuICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMucXVlcnlNYW5hZ2VyXG4gICAgICAuc3RhcnRHcmFwaFFMU3Vic2NyaXB0aW9uKHtcbiAgICAgICAgcXVlcnk6IG9wdGlvbnMuZG9jdW1lbnQsXG4gICAgICAgIHZhcmlhYmxlczogb3B0aW9ucy52YXJpYWJsZXMsXG4gICAgICB9KVxuICAgICAgLnN1YnNjcmliZSh7XG4gICAgICAgIG5leHQ6IChzdWJzY3JpcHRpb25EYXRhOiB7IGRhdGE6IFRTdWJzY3JpcHRpb25EYXRhIH0pID0+IHtcbiAgICAgICAgICBjb25zdCB7IHVwZGF0ZVF1ZXJ5IH0gPSBvcHRpb25zO1xuICAgICAgICAgIGlmICh1cGRhdGVRdWVyeSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVRdWVyeTxUU3Vic2NyaXB0aW9uVmFyaWFibGVzPihcbiAgICAgICAgICAgICAgKHByZXZpb3VzLCB7IHZhcmlhYmxlcyB9KSA9PlxuICAgICAgICAgICAgICAgIHVwZGF0ZVF1ZXJ5KHByZXZpb3VzLCB7XG4gICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb25EYXRhLFxuICAgICAgICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vbkVycm9yKSB7XG4gICAgICAgICAgICBvcHRpb25zLm9uRXJyb3IoZXJyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgaW52YXJpYW50LmVycm9yKCdVbmhhbmRsZWQgR3JhcGhRTCBzdWJzY3JpcHRpb24gZXJyb3InLCBlcnIpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMuYWRkKHN1YnNjcmlwdGlvbik7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9ucy5kZWxldGUoc3Vic2NyaXB0aW9uKSkge1xuICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLy8gTm90ZTogaWYgdGhlIHF1ZXJ5IGlzIG5vdCBhY3RpdmUgKHRoZXJlIGFyZSBubyBzdWJzY3JpYmVycyksIHRoZSBwcm9taXNlXG4gIC8vIHdpbGwgcmV0dXJuIG51bGwgaW1tZWRpYXRlbHkuXG4gIHB1YmxpYyBzZXRPcHRpb25zKFxuICAgIG9wdHM6IFdhdGNoUXVlcnlPcHRpb25zLFxuICApOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFREYXRhPiB8IHZvaWQ+IHtcbiAgICBjb25zdCB7IGZldGNoUG9saWN5OiBvbGRGZXRjaFBvbGljeSB9ID0gdGhpcy5vcHRpb25zO1xuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIC4uLm9wdHMsXG4gICAgfSBhcyBXYXRjaFF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzPjtcblxuICAgIGlmIChvcHRzLnBvbGxJbnRlcnZhbCkge1xuICAgICAgdGhpcy5zdGFydFBvbGxpbmcob3B0cy5wb2xsSW50ZXJ2YWwpO1xuICAgIH0gZWxzZSBpZiAob3B0cy5wb2xsSW50ZXJ2YWwgPT09IDApIHtcbiAgICAgIHRoaXMuc3RvcFBvbGxpbmcoKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGZldGNoUG9saWN5IH0gPSBvcHRzO1xuXG4gICAgcmV0dXJuIHRoaXMuc2V0VmFyaWFibGVzKFxuICAgICAgdGhpcy5vcHRpb25zLnZhcmlhYmxlcyBhcyBUVmFyaWFibGVzLFxuICAgICAgLy8gVHJ5IHRvIGZldGNoIHRoZSBxdWVyeSBpZiBmZXRjaFBvbGljeSBjaGFuZ2VkIGZyb20gZWl0aGVyIGNhY2hlLW9ubHlcbiAgICAgIC8vIG9yIHN0YW5kYnkgdG8gc29tZXRoaW5nIGVsc2UsIG9yIGNoYW5nZWQgdG8gbmV0d29yay1vbmx5LlxuICAgICAgb2xkRmV0Y2hQb2xpY3kgIT09IGZldGNoUG9saWN5ICYmIChcbiAgICAgICAgb2xkRmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1vbmx5JyB8fFxuICAgICAgICBvbGRGZXRjaFBvbGljeSA9PT0gJ3N0YW5kYnknIHx8XG4gICAgICAgIGZldGNoUG9saWN5ID09PSAnbmV0d29yay1vbmx5J1xuICAgICAgKSxcbiAgICAgIG9wdHMuZmV0Y2hSZXN1bHRzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpcyBmb3IgKmludGVybmFsKiB1c2Ugb25seS4gTW9zdCB1c2VycyBzaG91bGQgaW5zdGVhZCB1c2UgYHJlZmV0Y2hgXG4gICAqIGluIG9yZGVyIHRvIGJlIHByb3Blcmx5IG5vdGlmaWVkIG9mIHJlc3VsdHMgZXZlbiB3aGVuIHRoZXkgY29tZSBmcm9tIGNhY2hlLlxuICAgKlxuICAgKiBVcGRhdGUgdGhlIHZhcmlhYmxlcyBvZiB0aGlzIG9ic2VydmFibGUgcXVlcnksIGFuZCBmZXRjaCB0aGUgbmV3IHJlc3VsdHNcbiAgICogaWYgdGhleSd2ZSBjaGFuZ2VkLiBJZiB5b3Ugd2FudCB0byBmb3JjZSBuZXcgcmVzdWx0cywgdXNlIGByZWZldGNoYC5cbiAgICpcbiAgICogTm90ZTogdGhlIGBuZXh0YCBjYWxsYmFjayB3aWxsICpub3QqIGZpcmUgaWYgdGhlIHZhcmlhYmxlcyBoYXZlIG5vdCBjaGFuZ2VkXG4gICAqIG9yIGlmIHRoZSByZXN1bHQgaXMgY29taW5nIGZyb20gY2FjaGUuXG4gICAqXG4gICAqIE5vdGU6IHRoZSBwcm9taXNlIHdpbGwgcmV0dXJuIHRoZSBvbGQgcmVzdWx0cyBpbW1lZGlhdGVseSBpZiB0aGUgdmFyaWFibGVzXG4gICAqIGhhdmUgbm90IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IHRoZSBwcm9taXNlIHdpbGwgcmV0dXJuIG51bGwgaW1tZWRpYXRlbHkgaWYgdGhlIHF1ZXJ5IGlzIG5vdCBhY3RpdmVcbiAgICogKHRoZXJlIGFyZSBubyBzdWJzY3JpYmVycykuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqXG4gICAqIEBwYXJhbSB2YXJpYWJsZXM6IFRoZSBuZXcgc2V0IG9mIHZhcmlhYmxlcy4gSWYgdGhlcmUgYXJlIG1pc3NpbmcgdmFyaWFibGVzLFxuICAgKiB0aGUgcHJldmlvdXMgdmFsdWVzIG9mIHRob3NlIHZhcmlhYmxlcyB3aWxsIGJlIHVzZWQuXG4gICAqXG4gICAqIEBwYXJhbSB0cnlGZXRjaDogVHJ5IGFuZCBmZXRjaCBuZXcgcmVzdWx0cyBldmVuIGlmIHRoZSB2YXJpYWJsZXMgaGF2ZW4ndFxuICAgKiBjaGFuZ2VkICh3ZSBtYXkgc3RpbGwganVzdCBoaXQgdGhlIHN0b3JlLCBidXQgaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZXJlXG4gICAqIHRoaXMgd2lsbCByZWZldGNoKVxuICAgKlxuICAgKiBAcGFyYW0gZmV0Y2hSZXN1bHRzOiBPcHRpb24gdG8gaWdub3JlIGZldGNoaW5nIHJlc3VsdHMgd2hlbiB1cGRhdGluZyB2YXJpYWJsZXNcbiAgICovXG4gIHB1YmxpYyBzZXRWYXJpYWJsZXMoXG4gICAgdmFyaWFibGVzOiBUVmFyaWFibGVzLFxuICAgIHRyeUZldGNoOiBib29sZWFuID0gZmFsc2UsXG4gICAgZmV0Y2hSZXN1bHRzID0gdHJ1ZSxcbiAgKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4gfCB2b2lkPiB7XG4gICAgLy8gc2luY2Ugc2V0VmFyaWFibGVzIHJlc3RhcnRzIHRoZSBzdWJzY3JpcHRpb24sIHdlIHJlc2V0IHRoZSB0b3JuRG93biBzdGF0dXNcbiAgICB0aGlzLmlzVG9ybkRvd24gPSBmYWxzZTtcblxuICAgIHZhcmlhYmxlcyA9IHZhcmlhYmxlcyB8fCB0aGlzLnZhcmlhYmxlcztcblxuICAgIGlmICghdHJ5RmV0Y2ggJiYgaXNFcXVhbCh2YXJpYWJsZXMsIHRoaXMudmFyaWFibGVzKSkge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBubyBvYnNlcnZlcnMsIHRoZW4gd2UgZG9uJ3QgYWN0dWFsbHkgd2FudCB0byBtYWtlIGEgbmV0d29ya1xuICAgICAgLy8gcmVxdWVzdC4gQXMgc29vbiBhcyBzb21lb25lIG9ic2VydmVzIHRoZSBxdWVyeSwgdGhlIHJlcXVlc3Qgd2lsbCBraWNrXG4gICAgICAvLyBvZmYuIEZvciBub3csIHdlIGp1c3Qgc3RvcmUgYW55IGNoYW5nZXMuIChTZWUgIzEwNzcpXG4gICAgICByZXR1cm4gdGhpcy5vYnNlcnZlcnMuc2l6ZSAmJiBmZXRjaFJlc3VsdHNcbiAgICAgICAgPyB0aGlzLnJlc3VsdCgpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuXG4gICAgdGhpcy52YXJpYWJsZXMgPSB0aGlzLm9wdGlvbnMudmFyaWFibGVzID0gdmFyaWFibGVzO1xuXG4gICAgLy8gU2VlIGNvbW1lbnQgYWJvdmVcbiAgICBpZiAoIXRoaXMub2JzZXJ2ZXJzLnNpemUpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICAvLyBVc2UgdGhlIHNhbWUgb3B0aW9ucyBhcyBiZWZvcmUsIGJ1dCB3aXRoIG5ldyB2YXJpYWJsZXNcbiAgICByZXR1cm4gdGhpcy5xdWVyeU1hbmFnZXIuZmV0Y2hRdWVyeShcbiAgICAgIHRoaXMucXVlcnlJZCxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICApIGFzIFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VERhdGE+PjtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVRdWVyeTxUVmFycyA9IFRWYXJpYWJsZXM+KFxuICAgIG1hcEZuOiAoXG4gICAgICBwcmV2aW91c1F1ZXJ5UmVzdWx0OiBURGF0YSxcbiAgICAgIG9wdGlvbnM6IFVwZGF0ZVF1ZXJ5T3B0aW9uczxUVmFycz4sXG4gICAgKSA9PiBURGF0YSxcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgeyBxdWVyeU1hbmFnZXIgfSA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcHJldmlvdXNSZXN1bHQsXG4gICAgICB2YXJpYWJsZXMsXG4gICAgICBkb2N1bWVudCxcbiAgICB9ID0gcXVlcnlNYW5hZ2VyLmdldFF1ZXJ5V2l0aFByZXZpb3VzUmVzdWx0PFREYXRhLCBUVmFycz4oXG4gICAgICB0aGlzLnF1ZXJ5SWQsXG4gICAgKTtcblxuICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHRyeUZ1bmN0aW9uT3JMb2dFcnJvcigoKSA9PlxuICAgICAgbWFwRm4ocHJldmlvdXNSZXN1bHQsIHsgdmFyaWFibGVzIH0pLFxuICAgICk7XG5cbiAgICBpZiAobmV3UmVzdWx0KSB7XG4gICAgICBxdWVyeU1hbmFnZXIuZGF0YVN0b3JlLm1hcmtVcGRhdGVRdWVyeVJlc3VsdChcbiAgICAgICAgZG9jdW1lbnQsXG4gICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgbmV3UmVzdWx0LFxuICAgICAgKTtcbiAgICAgIHF1ZXJ5TWFuYWdlci5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0b3BQb2xsaW5nKCkge1xuICAgIHRoaXMucXVlcnlNYW5hZ2VyLnN0b3BQb2xsaW5nUXVlcnkodGhpcy5xdWVyeUlkKTtcbiAgICB0aGlzLm9wdGlvbnMucG9sbEludGVydmFsID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0UG9sbGluZyhwb2xsSW50ZXJ2YWw6IG51bWJlcikge1xuICAgIGFzc2VydE5vdENhY2hlRmlyc3RPck9ubHkodGhpcyk7XG4gICAgdGhpcy5vcHRpb25zLnBvbGxJbnRlcnZhbCA9IHBvbGxJbnRlcnZhbDtcbiAgICB0aGlzLnF1ZXJ5TWFuYWdlci5zdGFydFBvbGxpbmdRdWVyeSh0aGlzLm9wdGlvbnMsIHRoaXMucXVlcnlJZCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUxhc3RSZXN1bHQobmV3UmVzdWx0OiBBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4pIHtcbiAgICBjb25zdCBwcmV2aW91c1Jlc3VsdCA9IHRoaXMubGFzdFJlc3VsdDtcbiAgICB0aGlzLmxhc3RSZXN1bHQgPSBuZXdSZXN1bHQ7XG4gICAgdGhpcy5sYXN0UmVzdWx0U25hcHNob3QgPSB0aGlzLnF1ZXJ5TWFuYWdlci5hc3N1bWVJbW11dGFibGVSZXN1bHRzXG4gICAgICA/IG5ld1Jlc3VsdFxuICAgICAgOiBjbG9uZURlZXAobmV3UmVzdWx0KTtcbiAgICByZXR1cm4gcHJldmlvdXNSZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIG9uU3Vic2NyaWJlKG9ic2VydmVyOiBPYnNlcnZlcjxBcG9sbG9RdWVyeVJlc3VsdDxURGF0YT4+KSB7XG4gICAgLy8gWmVuIE9ic2VydmFibGUgaGFzIGl0cyBvd24gZXJyb3IgZnVuY3Rpb24sIHNvIGluIG9yZGVyIHRvIGxvZyBjb3JyZWN0bHlcbiAgICAvLyB3ZSBuZWVkIHRvIHByb3ZpZGUgYSBjdXN0b20gZXJyb3IgY2FsbGJhY2suXG4gICAgdHJ5IHtcbiAgICAgIHZhciBzdWJPYnNlcnZlciA9IChvYnNlcnZlciBhcyBhbnkpLl9zdWJzY3JpcHRpb24uX29ic2VydmVyO1xuICAgICAgaWYgKHN1Yk9ic2VydmVyICYmICFzdWJPYnNlcnZlci5lcnJvcikge1xuICAgICAgICBzdWJPYnNlcnZlci5lcnJvciA9IGRlZmF1bHRTdWJzY3JpcHRpb25PYnNlcnZlckVycm9yQ2FsbGJhY2s7XG4gICAgICB9XG4gICAgfSBjYXRjaCB7fVxuXG4gICAgY29uc3QgZmlyc3QgPSAhdGhpcy5vYnNlcnZlcnMuc2l6ZTtcbiAgICB0aGlzLm9ic2VydmVycy5hZGQob2JzZXJ2ZXIpO1xuXG4gICAgLy8gRGVsaXZlciBpbml0aWFsIHJlc3VsdFxuICAgIGlmIChvYnNlcnZlci5uZXh0ICYmIHRoaXMubGFzdFJlc3VsdCkgb2JzZXJ2ZXIubmV4dCh0aGlzLmxhc3RSZXN1bHQpO1xuICAgIGlmIChvYnNlcnZlci5lcnJvciAmJiB0aGlzLmxhc3RFcnJvcikgb2JzZXJ2ZXIuZXJyb3IodGhpcy5sYXN0RXJyb3IpO1xuXG4gICAgLy8gc2V0dXAgdGhlIHF1ZXJ5IGlmIGl0IGhhc24ndCBiZWVuIGRvbmUgYmVmb3JlXG4gICAgaWYgKGZpcnN0KSB7XG4gICAgICB0aGlzLnNldFVwUXVlcnkoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub2JzZXJ2ZXJzLmRlbGV0ZShvYnNlcnZlcikgJiYgIXRoaXMub2JzZXJ2ZXJzLnNpemUpIHtcbiAgICAgICAgdGhpcy50ZWFyRG93blF1ZXJ5KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VXBRdWVyeSgpIHtcbiAgICBjb25zdCB7IHF1ZXJ5TWFuYWdlciwgcXVlcnlJZCB9ID0gdGhpcztcblxuICAgIGlmICh0aGlzLnNob3VsZFN1YnNjcmliZSkge1xuICAgICAgcXVlcnlNYW5hZ2VyLmFkZE9ic2VydmFibGVRdWVyeTxURGF0YT4ocXVlcnlJZCwgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy5wb2xsSW50ZXJ2YWwpIHtcbiAgICAgIGFzc2VydE5vdENhY2hlRmlyc3RPck9ubHkodGhpcyk7XG4gICAgICBxdWVyeU1hbmFnZXIuc3RhcnRQb2xsaW5nUXVlcnkodGhpcy5vcHRpb25zLCBxdWVyeUlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBvbkVycm9yID0gKGVycm9yOiBBcG9sbG9FcnJvcikgPT4ge1xuICAgICAgLy8gU2luY2Ugd2UgZG9uJ3QgZ2V0IHRoZSBjdXJyZW50IHJlc3VsdCBvbiBlcnJvcnMsIG9ubHkgdGhlIGVycm9yLCB3ZVxuICAgICAgLy8gbXVzdCBtaXJyb3IgdGhlIHVwZGF0ZXMgdGhhdCBvY2N1ciBpbiBRdWVyeVN0b3JlLm1hcmtRdWVyeUVycm9yIGhlcmVcbiAgICAgIHRoaXMudXBkYXRlTGFzdFJlc3VsdCh7XG4gICAgICAgIC4uLnRoaXMubGFzdFJlc3VsdCxcbiAgICAgICAgZXJyb3JzOiBlcnJvci5ncmFwaFFMRXJyb3JzLFxuICAgICAgICBuZXR3b3JrU3RhdHVzOiBOZXR3b3JrU3RhdHVzLmVycm9yLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgICAgaXRlcmF0ZU9ic2VydmVyc1NhZmVseSh0aGlzLm9ic2VydmVycywgJ2Vycm9yJywgdGhpcy5sYXN0RXJyb3IgPSBlcnJvcik7XG4gICAgfTtcblxuICAgIHF1ZXJ5TWFuYWdlci5vYnNlcnZlUXVlcnk8VERhdGE+KHF1ZXJ5SWQsIHRoaXMub3B0aW9ucywge1xuICAgICAgbmV4dDogKHJlc3VsdDogQXBvbGxvUXVlcnlSZXN1bHQ8VERhdGE+KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmxhc3RFcnJvciB8fCB0aGlzLmlzRGlmZmVyZW50RnJvbUxhc3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzUmVzdWx0ID0gdGhpcy51cGRhdGVMYXN0UmVzdWx0KHJlc3VsdCk7XG4gICAgICAgICAgY29uc3QgeyBxdWVyeSwgdmFyaWFibGVzLCBmZXRjaFBvbGljeSB9ID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgICAgLy8gQmVmb3JlIGNhbGxpbmcgYG5leHRgIG9uIGVhY2ggb2JzZXJ2ZXIsIHdlIG5lZWQgdG8gZmlyc3Qgc2VlIGlmXG4gICAgICAgICAgLy8gdGhlIHF1ZXJ5IGlzIHVzaW5nIGBAY2xpZW50IEBleHBvcnRgIGRpcmVjdGl2ZXMsIGFuZCB1cGRhdGVcbiAgICAgICAgICAvLyBhbnkgdmFyaWFibGVzIHRoYXQgbWlnaHQgaGF2ZSBjaGFuZ2VkLiBJZiBgQGV4cG9ydGAgdmFyaWFibGVzIGhhdmVcbiAgICAgICAgICAvLyBjaGFuZ2VkLCBhbmQgdGhlIHF1ZXJ5IGlzIGNhbGxpbmcgYWdhaW5zdCBib3RoIGxvY2FsIGFuZCByZW1vdGVcbiAgICAgICAgICAvLyBkYXRhLCBhIHJlZmV0Y2ggaXMgbmVlZGVkIHRvIHB1bGwgaW4gbmV3IGRhdGEsIHVzaW5nIHRoZVxuICAgICAgICAgIC8vIHVwZGF0ZWQgYEBleHBvcnRgIHZhcmlhYmxlcy5cbiAgICAgICAgICBpZiAocXVlcnlNYW5hZ2VyLnRyYW5zZm9ybShxdWVyeSkuaGFzQ2xpZW50RXhwb3J0cykge1xuICAgICAgICAgICAgcXVlcnlNYW5hZ2VyLmdldExvY2FsU3RhdGUoKS5hZGRFeHBvcnRlZFZhcmlhYmxlcyhcbiAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgICkudGhlbigodmFyaWFibGVzOiBUVmFyaWFibGVzKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHByZXZpb3VzVmFyaWFibGVzID0gdGhpcy52YXJpYWJsZXM7XG4gICAgICAgICAgICAgIHRoaXMudmFyaWFibGVzID0gdGhpcy5vcHRpb25zLnZhcmlhYmxlcyA9IHZhcmlhYmxlcztcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFyZXN1bHQubG9hZGluZyAmJlxuICAgICAgICAgICAgICAgIHByZXZpb3VzUmVzdWx0ICYmXG4gICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3kgIT09ICdjYWNoZS1vbmx5JyAmJlxuICAgICAgICAgICAgICAgIHF1ZXJ5TWFuYWdlci50cmFuc2Zvcm0ocXVlcnkpLnNlcnZlclF1ZXJ5ICYmXG4gICAgICAgICAgICAgICAgIWlzRXF1YWwocHJldmlvdXNWYXJpYWJsZXMsIHZhcmlhYmxlcylcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZldGNoKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0ZU9ic2VydmVyc1NhZmVseSh0aGlzLm9ic2VydmVycywgJ25leHQnLCByZXN1bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlcmF0ZU9ic2VydmVyc1NhZmVseSh0aGlzLm9ic2VydmVycywgJ25leHQnLCByZXN1bHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGVycm9yOiBvbkVycm9yLFxuICAgIH0pLmNhdGNoKG9uRXJyb3IpO1xuICB9XG5cbiAgcHJpdmF0ZSB0ZWFyRG93blF1ZXJ5KCkge1xuICAgIGNvbnN0IHsgcXVlcnlNYW5hZ2VyIH0gPSB0aGlzO1xuXG4gICAgdGhpcy5pc1Rvcm5Eb3duID0gdHJ1ZTtcbiAgICBxdWVyeU1hbmFnZXIuc3RvcFBvbGxpbmdRdWVyeSh0aGlzLnF1ZXJ5SWQpO1xuXG4gICAgLy8gc3RvcCBhbGwgYWN0aXZlIEdyYXBoUUwgc3Vic2NyaXB0aW9uc1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmNsZWFyKCk7XG5cbiAgICBxdWVyeU1hbmFnZXIucmVtb3ZlT2JzZXJ2YWJsZVF1ZXJ5KHRoaXMucXVlcnlJZCk7XG4gICAgcXVlcnlNYW5hZ2VyLnN0b3BRdWVyeSh0aGlzLnF1ZXJ5SWQpO1xuXG4gICAgdGhpcy5vYnNlcnZlcnMuY2xlYXIoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0U3Vic2NyaXB0aW9uT2JzZXJ2ZXJFcnJvckNhbGxiYWNrKGVycm9yOiBBcG9sbG9FcnJvcikge1xuICBpbnZhcmlhbnQuZXJyb3IoJ1VuaGFuZGxlZCBlcnJvcicsIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrKTtcbn1cblxuZnVuY3Rpb24gaXRlcmF0ZU9ic2VydmVyc1NhZmVseTxFLCBBPihcbiAgb2JzZXJ2ZXJzOiBTZXQ8T2JzZXJ2ZXI8RT4+LFxuICBtZXRob2Q6IGtleW9mIE9ic2VydmVyPEU+LFxuICBhcmd1bWVudD86IEEsXG4pIHtcbiAgLy8gSW4gY2FzZSBvYnNlcnZlcnMgaXMgbW9kaWZpZWQgZHVyaW5nIGl0ZXJhdGlvbiwgd2UgbmVlZCB0byBjb21taXQgdG8gdGhlXG4gIC8vIG9yaWdpbmFsIGVsZW1lbnRzLCB3aGljaCBhbHNvIHByb3ZpZGVzIGFuIG9wcG9ydHVuaXR5IHRvIGZpbHRlciB0aGVtIGRvd25cbiAgLy8gdG8ganVzdCB0aGUgb2JzZXJ2ZXJzIHdpdGggdGhlIGdpdmVuIG1ldGhvZC5cbiAgY29uc3Qgb2JzZXJ2ZXJzV2l0aE1ldGhvZDogT2JzZXJ2ZXI8RT5bXSA9IFtdO1xuICBvYnNlcnZlcnMuZm9yRWFjaChvYnMgPT4gb2JzW21ldGhvZF0gJiYgb2JzZXJ2ZXJzV2l0aE1ldGhvZC5wdXNoKG9icykpO1xuICBvYnNlcnZlcnNXaXRoTWV0aG9kLmZvckVhY2gob2JzID0+IChvYnMgYXMgYW55KVttZXRob2RdKGFyZ3VtZW50KSk7XG59XG5cbmZ1bmN0aW9uIGFzc2VydE5vdENhY2hlRmlyc3RPck9ubHk8VERhdGEsIFRWYXJpYWJsZXM+KFxuICBvYnNRdWVyeTogT2JzZXJ2YWJsZVF1ZXJ5PFREYXRhLCBUVmFyaWFibGVzPixcbikge1xuICBjb25zdCB7IGZldGNoUG9saWN5IH0gPSBvYnNRdWVyeS5vcHRpb25zO1xuICBpbnZhcmlhbnQoXG4gICAgZmV0Y2hQb2xpY3kgIT09ICdjYWNoZS1maXJzdCcgJiYgZmV0Y2hQb2xpY3kgIT09ICdjYWNoZS1vbmx5JyxcbiAgICAnUXVlcmllcyB0aGF0IHNwZWNpZnkgdGhlIGNhY2hlLWZpcnN0IGFuZCBjYWNoZS1vbmx5IGZldGNoUG9saWNpZXMgY2Fubm90IGFsc28gYmUgcG9sbGluZyBxdWVyaWVzLicsXG4gICk7XG59XG4iLCJpbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcblxuZXhwb3J0IGNsYXNzIE11dGF0aW9uU3RvcmUge1xuICBwcml2YXRlIHN0b3JlOiB7IFttdXRhdGlvbklkOiBzdHJpbmddOiBNdXRhdGlvblN0b3JlVmFsdWUgfSA9IHt9O1xuXG4gIHB1YmxpYyBnZXRTdG9yZSgpOiB7IFttdXRhdGlvbklkOiBzdHJpbmddOiBNdXRhdGlvblN0b3JlVmFsdWUgfSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmU7XG4gIH1cblxuICBwdWJsaWMgZ2V0KG11dGF0aW9uSWQ6IHN0cmluZyk6IE11dGF0aW9uU3RvcmVWYWx1ZSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmVbbXV0YXRpb25JZF07XG4gIH1cblxuICBwdWJsaWMgaW5pdE11dGF0aW9uKFxuICAgIG11dGF0aW9uSWQ6IHN0cmluZyxcbiAgICBtdXRhdGlvbjogRG9jdW1lbnROb2RlLFxuICAgIHZhcmlhYmxlczogT2JqZWN0IHwgdW5kZWZpbmVkLFxuICApIHtcbiAgICB0aGlzLnN0b3JlW211dGF0aW9uSWRdID0ge1xuICAgICAgbXV0YXRpb24sXG4gICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyB8fCB7fSxcbiAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICBlcnJvcjogbnVsbCxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIG1hcmtNdXRhdGlvbkVycm9yKG11dGF0aW9uSWQ6IHN0cmluZywgZXJyb3I6IEVycm9yKSB7XG4gICAgY29uc3QgbXV0YXRpb24gPSB0aGlzLnN0b3JlW211dGF0aW9uSWRdO1xuICAgIGlmIChtdXRhdGlvbikge1xuICAgICAgbXV0YXRpb24ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgbXV0YXRpb24uZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgbWFya011dGF0aW9uUmVzdWx0KG11dGF0aW9uSWQ6IHN0cmluZykge1xuICAgIGNvbnN0IG11dGF0aW9uID0gdGhpcy5zdG9yZVttdXRhdGlvbklkXTtcbiAgICBpZiAobXV0YXRpb24pIHtcbiAgICAgIG11dGF0aW9uLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIG11dGF0aW9uLmVycm9yID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKSB7XG4gICAgdGhpcy5zdG9yZSA9IHt9O1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXV0YXRpb25TdG9yZVZhbHVlIHtcbiAgbXV0YXRpb246IERvY3VtZW50Tm9kZTtcbiAgdmFyaWFibGVzOiBPYmplY3Q7XG4gIGxvYWRpbmc6IGJvb2xlYW47XG4gIGVycm9yOiBFcnJvciB8IG51bGw7XG59XG4iLCJpbXBvcnQgeyBEb2N1bWVudE5vZGUsIEdyYXBoUUxFcnJvciwgRXhlY3V0aW9uUmVzdWx0IH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBpc0VxdWFsIH0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuaW1wb3J0IHsgTmV0d29ya1N0YXR1cyB9IGZyb20gJy4uL2NvcmUvbmV0d29ya1N0YXR1cyc7XG5pbXBvcnQgeyBpc05vbkVtcHR5QXJyYXkgfSBmcm9tICcuLi91dGlsL2FycmF5cyc7XG5cbmV4cG9ydCB0eXBlIFF1ZXJ5U3RvcmVWYWx1ZSA9IHtcbiAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZTtcbiAgdmFyaWFibGVzOiBPYmplY3Q7XG4gIHByZXZpb3VzVmFyaWFibGVzPzogT2JqZWN0IHwgbnVsbDtcbiAgbmV0d29ya1N0YXR1czogTmV0d29ya1N0YXR1cztcbiAgbmV0d29ya0Vycm9yPzogRXJyb3IgfCBudWxsO1xuICBncmFwaFFMRXJyb3JzPzogUmVhZG9ubHlBcnJheTxHcmFwaFFMRXJyb3I+O1xuICBtZXRhZGF0YTogYW55O1xufTtcblxuZXhwb3J0IGNsYXNzIFF1ZXJ5U3RvcmUge1xuICBwcml2YXRlIHN0b3JlOiB7IFtxdWVyeUlkOiBzdHJpbmddOiBRdWVyeVN0b3JlVmFsdWUgfSA9IHt9O1xuXG4gIHB1YmxpYyBnZXRTdG9yZSgpOiB7IFtxdWVyeUlkOiBzdHJpbmddOiBRdWVyeVN0b3JlVmFsdWUgfSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmU7XG4gIH1cblxuICBwdWJsaWMgZ2V0KHF1ZXJ5SWQ6IHN0cmluZyk6IFF1ZXJ5U3RvcmVWYWx1ZSB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcmVbcXVlcnlJZF07XG4gIH1cblxuICBwdWJsaWMgaW5pdFF1ZXJ5KHF1ZXJ5OiB7XG4gICAgcXVlcnlJZDogc3RyaW5nO1xuICAgIGRvY3VtZW50OiBEb2N1bWVudE5vZGU7XG4gICAgc3RvcmVQcmV2aW91c1ZhcmlhYmxlczogYm9vbGVhbjtcbiAgICB2YXJpYWJsZXM6IE9iamVjdDtcbiAgICBpc1BvbGw6IGJvb2xlYW47XG4gICAgaXNSZWZldGNoOiBib29sZWFuO1xuICAgIG1ldGFkYXRhOiBhbnk7XG4gICAgZmV0Y2hNb3JlRm9yUXVlcnlJZDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICB9KSB7XG4gICAgY29uc3QgcHJldmlvdXNRdWVyeSA9IHRoaXMuc3RvcmVbcXVlcnkucXVlcnlJZF07XG5cbiAgICAvLyBYWFggd2UncmUgdGhyb3dpbmcgYW4gZXJyb3IgaGVyZSB0byBjYXRjaCBidWdzIHdoZXJlIGEgcXVlcnkgZ2V0cyBvdmVyd3JpdHRlbiBieSBhIG5ldyBvbmUuXG4gICAgLy8gd2Ugc2hvdWxkIGltcGxlbWVudCBhIHNlcGFyYXRlIGFjdGlvbiBmb3IgcmVmZXRjaGluZyBzbyB0aGF0IFFVRVJZX0lOSVQgbWF5IG5ldmVyIG92ZXJ3cml0ZVxuICAgIC8vIGFuIGV4aXN0aW5nIHF1ZXJ5IChzZWUgYWxzbzogaHR0cHM6Ly9naXRodWIuY29tL2Fwb2xsb3N0YWNrL2Fwb2xsby1jbGllbnQvaXNzdWVzLzczMilcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhcHJldmlvdXNRdWVyeSB8fFxuICAgICAgcHJldmlvdXNRdWVyeS5kb2N1bWVudCA9PT0gcXVlcnkuZG9jdW1lbnQgfHxcbiAgICAgIGlzRXF1YWwocHJldmlvdXNRdWVyeS5kb2N1bWVudCwgcXVlcnkuZG9jdW1lbnQpLFxuICAgICAgJ0ludGVybmFsIEVycm9yOiBtYXkgbm90IHVwZGF0ZSBleGlzdGluZyBxdWVyeSBzdHJpbmcgaW4gc3RvcmUnLFxuICAgICk7XG5cbiAgICBsZXQgaXNTZXRWYXJpYWJsZXMgPSBmYWxzZTtcblxuICAgIGxldCBwcmV2aW91c1ZhcmlhYmxlczogT2JqZWN0IHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKFxuICAgICAgcXVlcnkuc3RvcmVQcmV2aW91c1ZhcmlhYmxlcyAmJlxuICAgICAgcHJldmlvdXNRdWVyeSAmJlxuICAgICAgcHJldmlvdXNRdWVyeS5uZXR3b3JrU3RhdHVzICE9PSBOZXR3b3JrU3RhdHVzLmxvYWRpbmdcbiAgICAgIC8vIGlmIHRoZSBwcmV2aW91cyBxdWVyeSB3YXMgc3RpbGwgbG9hZGluZywgd2UgZG9uJ3Qgd2FudCB0byByZW1lbWJlciBpdCBhdCBhbGwuXG4gICAgKSB7XG4gICAgICBpZiAoIWlzRXF1YWwocHJldmlvdXNRdWVyeS52YXJpYWJsZXMsIHF1ZXJ5LnZhcmlhYmxlcykpIHtcbiAgICAgICAgaXNTZXRWYXJpYWJsZXMgPSB0cnVlO1xuICAgICAgICBwcmV2aW91c1ZhcmlhYmxlcyA9IHByZXZpb3VzUXVlcnkudmFyaWFibGVzO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRPRE8gYnJlYWsgdGhpcyBvdXQgaW50byBhIHNlcGFyYXRlIGZ1bmN0aW9uXG4gICAgbGV0IG5ldHdvcmtTdGF0dXM7XG4gICAgaWYgKGlzU2V0VmFyaWFibGVzKSB7XG4gICAgICBuZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5zZXRWYXJpYWJsZXM7XG4gICAgfSBlbHNlIGlmIChxdWVyeS5pc1BvbGwpIHtcbiAgICAgIG5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLnBvbGw7XG4gICAgfSBlbHNlIGlmIChxdWVyeS5pc1JlZmV0Y2gpIHtcbiAgICAgIG5ldHdvcmtTdGF0dXMgPSBOZXR3b3JrU3RhdHVzLnJlZmV0Y2g7XG4gICAgICAvLyBUT0RPOiBjYW4gd2UgZGV0ZXJtaW5lIHNldFZhcmlhYmxlcyBoZXJlIGlmIGl0J3MgYSByZWZldGNoIGFuZCB0aGUgdmFyaWFibGVzIGhhdmUgY2hhbmdlZD9cbiAgICB9IGVsc2Uge1xuICAgICAgbmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMubG9hZGluZztcbiAgICB9XG5cbiAgICBsZXQgZ3JhcGhRTEVycm9yczogUmVhZG9ubHlBcnJheTxHcmFwaFFMRXJyb3I+ID0gW107XG4gICAgaWYgKHByZXZpb3VzUXVlcnkgJiYgcHJldmlvdXNRdWVyeS5ncmFwaFFMRXJyb3JzKSB7XG4gICAgICBncmFwaFFMRXJyb3JzID0gcHJldmlvdXNRdWVyeS5ncmFwaFFMRXJyb3JzO1xuICAgIH1cblxuICAgIC8vIFhYWCByaWdodCBub3cgaWYgUVVFUllfSU5JVCBpcyBmaXJlZCB0d2ljZSwgbGlrZSBpbiBhIHJlZmV0Y2ggc2l0dWF0aW9uLCB3ZSBqdXN0IG92ZXJ3cml0ZVxuICAgIC8vIHRoZSBzdG9yZS4gV2UgcHJvYmFibHkgd2FudCBhIHJlZmV0Y2ggYWN0aW9uIGluc3RlYWQsIGJlY2F1c2UgSSBzdXNwZWN0IHRoYXQgaWYgeW91IHJlZmV0Y2hcbiAgICAvLyBiZWZvcmUgdGhlIGluaXRpYWwgZmV0Y2ggaXMgZG9uZSwgeW91J2xsIGdldCBhbiBlcnJvci5cbiAgICB0aGlzLnN0b3JlW3F1ZXJ5LnF1ZXJ5SWRdID0ge1xuICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LmRvY3VtZW50LFxuICAgICAgdmFyaWFibGVzOiBxdWVyeS52YXJpYWJsZXMsXG4gICAgICBwcmV2aW91c1ZhcmlhYmxlcyxcbiAgICAgIG5ldHdvcmtFcnJvcjogbnVsbCxcbiAgICAgIGdyYXBoUUxFcnJvcnM6IGdyYXBoUUxFcnJvcnMsXG4gICAgICBuZXR3b3JrU3RhdHVzLFxuICAgICAgbWV0YWRhdGE6IHF1ZXJ5Lm1ldGFkYXRhLFxuICAgIH07XG5cbiAgICAvLyBJZiB0aGUgYWN0aW9uIGhhZCBhIGBtb3JlRm9yUXVlcnlJZGAgcHJvcGVydHkgdGhlbiB3ZSBuZWVkIHRvIHNldCB0aGVcbiAgICAvLyBuZXR3b3JrIHN0YXR1cyBvbiB0aGF0IHF1ZXJ5IGFzIHdlbGwgdG8gYGZldGNoTW9yZWAuXG4gICAgLy9cbiAgICAvLyBXZSBoYXZlIGEgY29tcGxlbWVudCB0byB0aGlzIGlmIHN0YXRlbWVudCBpbiB0aGUgcXVlcnkgcmVzdWx0IGFuZCBxdWVyeVxuICAgIC8vIGVycm9yIGFjdGlvbiBicmFuY2gsIGJ1dCBpbXBvcnRhbnRseSAqbm90KiBpbiB0aGUgY2xpZW50IHJlc3VsdCBicmFuY2guXG4gICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZSBpbXBsZW1lbnRhdGlvbiBvZiBgZmV0Y2hNb3JlYCAqYWx3YXlzKiBzZXRzXG4gICAgLy8gYGZldGNoUG9saWN5YCB0byBgbmV0d29yay1vbmx5YCBzbyB3ZSB3b3VsZCBuZXZlciBoYXZlIGEgY2xpZW50IHJlc3VsdC5cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgcXVlcnkuZmV0Y2hNb3JlRm9yUXVlcnlJZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgIHRoaXMuc3RvcmVbcXVlcnkuZmV0Y2hNb3JlRm9yUXVlcnlJZF1cbiAgICApIHtcbiAgICAgIHRoaXMuc3RvcmVbcXVlcnkuZmV0Y2hNb3JlRm9yUXVlcnlJZF0ubmV0d29ya1N0YXR1cyA9XG4gICAgICAgIE5ldHdvcmtTdGF0dXMuZmV0Y2hNb3JlO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtYXJrUXVlcnlSZXN1bHQoXG4gICAgcXVlcnlJZDogc3RyaW5nLFxuICAgIHJlc3VsdDogRXhlY3V0aW9uUmVzdWx0LFxuICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQ6IHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgKSB7XG4gICAgaWYgKCF0aGlzLnN0b3JlIHx8ICF0aGlzLnN0b3JlW3F1ZXJ5SWRdKSByZXR1cm47XG5cbiAgICB0aGlzLnN0b3JlW3F1ZXJ5SWRdLm5ldHdvcmtFcnJvciA9IG51bGw7XG4gICAgdGhpcy5zdG9yZVtxdWVyeUlkXS5ncmFwaFFMRXJyb3JzID0gaXNOb25FbXB0eUFycmF5KHJlc3VsdC5lcnJvcnMpID8gcmVzdWx0LmVycm9ycyA6IFtdO1xuICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ucHJldmlvdXNWYXJpYWJsZXMgPSBudWxsO1xuICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMucmVhZHk7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIGEgYGZldGNoTW9yZUZvclF1ZXJ5SWRgIHRoZW4gd2UgbmVlZCB0byB1cGRhdGUgdGhlIG5ldHdvcmtcbiAgICAvLyBzdGF0dXMgZm9yIHRoYXQgcXVlcnkuIFNlZSB0aGUgYnJhbmNoIGZvciBxdWVyeSBpbml0aWFsaXphdGlvbiBmb3IgbW9yZVxuICAgIC8vIGV4cGxhbmF0aW9uIGFib3V0IHRoaXMgcHJvY2Vzcy5cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgZmV0Y2hNb3JlRm9yUXVlcnlJZCA9PT0gJ3N0cmluZycgJiZcbiAgICAgIHRoaXMuc3RvcmVbZmV0Y2hNb3JlRm9yUXVlcnlJZF1cbiAgICApIHtcbiAgICAgIHRoaXMuc3RvcmVbZmV0Y2hNb3JlRm9yUXVlcnlJZF0ubmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMucmVhZHk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG1hcmtRdWVyeUVycm9yKFxuICAgIHF1ZXJ5SWQ6IHN0cmluZyxcbiAgICBlcnJvcjogRXJyb3IsXG4gICAgZmV0Y2hNb3JlRm9yUXVlcnlJZDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICApIHtcbiAgICBpZiAoIXRoaXMuc3RvcmUgfHwgIXRoaXMuc3RvcmVbcXVlcnlJZF0pIHJldHVybjtcblxuICAgIHRoaXMuc3RvcmVbcXVlcnlJZF0ubmV0d29ya0Vycm9yID0gZXJyb3I7XG4gICAgdGhpcy5zdG9yZVtxdWVyeUlkXS5uZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5lcnJvcjtcblxuICAgIC8vIElmIHdlIGhhdmUgYSBgZmV0Y2hNb3JlRm9yUXVlcnlJZGAgdGhlbiB3ZSBuZWVkIHRvIHVwZGF0ZSB0aGUgbmV0d29ya1xuICAgIC8vIHN0YXR1cyBmb3IgdGhhdCBxdWVyeS4gU2VlIHRoZSBicmFuY2ggZm9yIHF1ZXJ5IGluaXRpYWxpemF0aW9uIGZvciBtb3JlXG4gICAgLy8gZXhwbGFuYXRpb24gYWJvdXQgdGhpcyBwcm9jZXNzLlxuICAgIGlmICh0eXBlb2YgZmV0Y2hNb3JlRm9yUXVlcnlJZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMubWFya1F1ZXJ5UmVzdWx0Q2xpZW50KGZldGNoTW9yZUZvclF1ZXJ5SWQsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtYXJrUXVlcnlSZXN1bHRDbGllbnQocXVlcnlJZDogc3RyaW5nLCBjb21wbGV0ZTogYm9vbGVhbikge1xuICAgIGNvbnN0IHN0b3JlVmFsdWUgPSB0aGlzLnN0b3JlICYmIHRoaXMuc3RvcmVbcXVlcnlJZF07XG4gICAgaWYgKHN0b3JlVmFsdWUpIHtcbiAgICAgIHN0b3JlVmFsdWUubmV0d29ya0Vycm9yID0gbnVsbDtcbiAgICAgIHN0b3JlVmFsdWUucHJldmlvdXNWYXJpYWJsZXMgPSBudWxsO1xuICAgICAgaWYgKGNvbXBsZXRlKSB7XG4gICAgICAgIHN0b3JlVmFsdWUubmV0d29ya1N0YXR1cyA9IE5ldHdvcmtTdGF0dXMucmVhZHk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0b3BRdWVyeShxdWVyeUlkOiBzdHJpbmcpIHtcbiAgICBkZWxldGUgdGhpcy5zdG9yZVtxdWVyeUlkXTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldChvYnNlcnZhYmxlUXVlcnlJZHM6IHN0cmluZ1tdKSB7XG4gICAgT2JqZWN0LmtleXModGhpcy5zdG9yZSkuZm9yRWFjaChxdWVyeUlkID0+IHtcbiAgICAgIGlmIChvYnNlcnZhYmxlUXVlcnlJZHMuaW5kZXhPZihxdWVyeUlkKSA8IDApIHtcbiAgICAgICAgdGhpcy5zdG9wUXVlcnkocXVlcnlJZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBYWFggc2V0IGxvYWRpbmcgdG8gdHJ1ZSBzbyBsaXN0ZW5lcnMgZG9uJ3QgdHJpZ2dlciB1bmxlc3MgdGhleSB3YW50IHJlc3VsdHMgd2l0aCBwYXJ0aWFsIGRhdGFcbiAgICAgICAgdGhpcy5zdG9yZVtxdWVyeUlkXS5uZXR3b3JrU3RhdHVzID0gTmV0d29ya1N0YXR1cy5sb2FkaW5nO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCJpbXBvcnQge1xuICBFeGVjdXRpb25SZXN1bHQsXG4gIERvY3VtZW50Tm9kZSxcbiAgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGUsXG4gIFNlbGVjdGlvblNldE5vZGUsXG4gIFNlbGVjdGlvbk5vZGUsXG4gIElubGluZUZyYWdtZW50Tm9kZSxcbiAgRnJhZ21lbnREZWZpbml0aW9uTm9kZSxcbiAgRmllbGROb2RlLFxuICBBU1ROb2RlLFxufSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IHZpc2l0LCBCUkVBSyB9IGZyb20gJ2dyYXBocWwvbGFuZ3VhZ2UvdmlzaXRvcic7XG5cbmltcG9ydCB7IEFwb2xsb0NhY2hlIH0gZnJvbSAnYXBvbGxvLWNhY2hlJztcbmltcG9ydCB7XG4gIGdldE1haW5EZWZpbml0aW9uLFxuICBidWlsZFF1ZXJ5RnJvbVNlbGVjdGlvblNldCxcbiAgaGFzRGlyZWN0aXZlcyxcbiAgcmVtb3ZlQ2xpZW50U2V0c0Zyb21Eb2N1bWVudCxcbiAgbWVyZ2VEZWVwLFxuICBtZXJnZURlZXBBcnJheSxcbiAgRnJhZ21lbnRNYXAsXG4gIGFyZ3VtZW50c09iamVjdEZyb21GaWVsZCxcbiAgcmVzdWx0S2V5TmFtZUZyb21GaWVsZCxcbiAgZ2V0RnJhZ21lbnREZWZpbml0aW9ucyxcbiAgY3JlYXRlRnJhZ21lbnRNYXAsXG4gIHNob3VsZEluY2x1ZGUsXG4gIGlzRmllbGQsXG4gIGlzSW5saW5lRnJhZ21lbnQsXG59IGZyb20gJ2Fwb2xsby11dGlsaXRpZXMnO1xuXG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuXG5pbXBvcnQgQXBvbGxvQ2xpZW50IGZyb20gJy4uL0Fwb2xsb0NsaWVudCc7XG5pbXBvcnQgeyBSZXNvbHZlcnMsIE9wZXJhdGlvblZhcmlhYmxlcyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIH0gZnJvbSAnLi4vdXRpbC9jYXBpdGFsaXplRmlyc3RMZXR0ZXInO1xuXG5leHBvcnQgdHlwZSBSZXNvbHZlciA9IChcbiAgcm9vdFZhbHVlPzogYW55LFxuICBhcmdzPzogYW55LFxuICBjb250ZXh0PzogYW55LFxuICBpbmZvPzoge1xuICAgIGZpZWxkOiBGaWVsZE5vZGU7XG4gICAgZnJhZ21lbnRNYXA6IEZyYWdtZW50TWFwO1xuICB9LFxuKSA9PiBhbnk7XG5cbmV4cG9ydCB0eXBlIFZhcmlhYmxlTWFwID0geyBbbmFtZTogc3RyaW5nXTogYW55IH07XG5cbmV4cG9ydCB0eXBlIEZyYWdtZW50TWF0Y2hlciA9IChcbiAgcm9vdFZhbHVlOiBhbnksXG4gIHR5cGVDb25kaXRpb246IHN0cmluZyxcbiAgY29udGV4dDogYW55LFxuKSA9PiBib29sZWFuO1xuXG5leHBvcnQgdHlwZSBFeGVjQ29udGV4dCA9IHtcbiAgZnJhZ21lbnRNYXA6IEZyYWdtZW50TWFwO1xuICBjb250ZXh0OiBhbnk7XG4gIHZhcmlhYmxlczogVmFyaWFibGVNYXA7XG4gIGZyYWdtZW50TWF0Y2hlcjogRnJhZ21lbnRNYXRjaGVyO1xuICBkZWZhdWx0T3BlcmF0aW9uVHlwZTogc3RyaW5nO1xuICBleHBvcnRlZFZhcmlhYmxlczogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgb25seVJ1bkZvcmNlZFJlc29sdmVyczogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIExvY2FsU3RhdGVPcHRpb25zPFRDYWNoZVNoYXBlPiA9IHtcbiAgY2FjaGU6IEFwb2xsb0NhY2hlPFRDYWNoZVNoYXBlPjtcbiAgY2xpZW50PzogQXBvbGxvQ2xpZW50PFRDYWNoZVNoYXBlPjtcbiAgcmVzb2x2ZXJzPzogUmVzb2x2ZXJzIHwgUmVzb2x2ZXJzW107XG4gIGZyYWdtZW50TWF0Y2hlcj86IEZyYWdtZW50TWF0Y2hlcjtcbn07XG5cbmV4cG9ydCBjbGFzcyBMb2NhbFN0YXRlPFRDYWNoZVNoYXBlPiB7XG4gIHByaXZhdGUgY2FjaGU6IEFwb2xsb0NhY2hlPFRDYWNoZVNoYXBlPjtcbiAgcHJpdmF0ZSBjbGllbnQ6IEFwb2xsb0NsaWVudDxUQ2FjaGVTaGFwZT47XG4gIHByaXZhdGUgcmVzb2x2ZXJzPzogUmVzb2x2ZXJzO1xuICBwcml2YXRlIGZyYWdtZW50TWF0Y2hlcjogRnJhZ21lbnRNYXRjaGVyO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBjYWNoZSxcbiAgICBjbGllbnQsXG4gICAgcmVzb2x2ZXJzLFxuICAgIGZyYWdtZW50TWF0Y2hlcixcbiAgfTogTG9jYWxTdGF0ZU9wdGlvbnM8VENhY2hlU2hhcGU+KSB7XG4gICAgdGhpcy5jYWNoZSA9IGNhY2hlO1xuXG4gICAgaWYgKGNsaWVudCkge1xuICAgICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gICAgfVxuXG4gICAgaWYgKHJlc29sdmVycykge1xuICAgICAgdGhpcy5hZGRSZXNvbHZlcnMocmVzb2x2ZXJzKTtcbiAgICB9XG5cbiAgICBpZiAoZnJhZ21lbnRNYXRjaGVyKSB7XG4gICAgICB0aGlzLnNldEZyYWdtZW50TWF0Y2hlcihmcmFnbWVudE1hdGNoZXIpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhZGRSZXNvbHZlcnMocmVzb2x2ZXJzOiBSZXNvbHZlcnMgfCBSZXNvbHZlcnNbXSkge1xuICAgIHRoaXMucmVzb2x2ZXJzID0gdGhpcy5yZXNvbHZlcnMgfHwge307XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzb2x2ZXJzKSkge1xuICAgICAgcmVzb2x2ZXJzLmZvckVhY2gocmVzb2x2ZXJHcm91cCA9PiB7XG4gICAgICAgIHRoaXMucmVzb2x2ZXJzID0gbWVyZ2VEZWVwKHRoaXMucmVzb2x2ZXJzLCByZXNvbHZlckdyb3VwKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlc29sdmVycyA9IG1lcmdlRGVlcCh0aGlzLnJlc29sdmVycywgcmVzb2x2ZXJzKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2V0UmVzb2x2ZXJzKHJlc29sdmVyczogUmVzb2x2ZXJzIHwgUmVzb2x2ZXJzW10pIHtcbiAgICB0aGlzLnJlc29sdmVycyA9IHt9O1xuICAgIHRoaXMuYWRkUmVzb2x2ZXJzKHJlc29sdmVycyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0UmVzb2x2ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVycyB8fCB7fTtcbiAgfVxuXG4gIC8vIFJ1biBsb2NhbCBjbGllbnQgcmVzb2x2ZXJzIGFnYWluc3QgdGhlIGluY29taW5nIHF1ZXJ5IGFuZCByZW1vdGUgZGF0YS5cbiAgLy8gTG9jYWxseSByZXNvbHZlZCBmaWVsZCB2YWx1ZXMgYXJlIG1lcmdlZCB3aXRoIHRoZSBpbmNvbWluZyByZW1vdGUgZGF0YSxcbiAgLy8gYW5kIHJldHVybmVkLiBOb3RlIHRoYXQgbG9jYWxseSByZXNvbHZlZCBmaWVsZHMgd2lsbCBvdmVyd3JpdGVcbiAgLy8gcmVtb3RlIGRhdGEgdXNpbmcgdGhlIHNhbWUgZmllbGQgbmFtZS5cbiAgcHVibGljIGFzeW5jIHJ1blJlc29sdmVyczxURGF0YT4oe1xuICAgIGRvY3VtZW50LFxuICAgIHJlbW90ZVJlc3VsdCxcbiAgICBjb250ZXh0LFxuICAgIHZhcmlhYmxlcyxcbiAgICBvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzID0gZmFsc2UsXG4gIH06IHtcbiAgICBkb2N1bWVudDogRG9jdW1lbnROb2RlIHwgbnVsbDtcbiAgICByZW1vdGVSZXN1bHQ6IEV4ZWN1dGlvblJlc3VsdDxURGF0YT47XG4gICAgY29udGV4dD86IFJlY29yZDxzdHJpbmcsIGFueT47XG4gICAgdmFyaWFibGVzPzogUmVjb3JkPHN0cmluZywgYW55PjtcbiAgICBvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzPzogYm9vbGVhbjtcbiAgfSk6IFByb21pc2U8RXhlY3V0aW9uUmVzdWx0PFREYXRhPj4ge1xuICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZURvY3VtZW50KFxuICAgICAgICBkb2N1bWVudCxcbiAgICAgICAgcmVtb3RlUmVzdWx0LmRhdGEsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgdGhpcy5mcmFnbWVudE1hdGNoZXIsXG4gICAgICAgIG9ubHlSdW5Gb3JjZWRSZXNvbHZlcnMsXG4gICAgICApLnRoZW4obG9jYWxSZXN1bHQgPT4gKHtcbiAgICAgICAgLi4ucmVtb3RlUmVzdWx0LFxuICAgICAgICBkYXRhOiBsb2NhbFJlc3VsdC5yZXN1bHQsXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlbW90ZVJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRGcmFnbWVudE1hdGNoZXIoZnJhZ21lbnRNYXRjaGVyOiBGcmFnbWVudE1hdGNoZXIpIHtcbiAgICB0aGlzLmZyYWdtZW50TWF0Y2hlciA9IGZyYWdtZW50TWF0Y2hlcjtcbiAgfVxuXG4gIHB1YmxpYyBnZXRGcmFnbWVudE1hdGNoZXIoKTogRnJhZ21lbnRNYXRjaGVyIHtcbiAgICByZXR1cm4gdGhpcy5mcmFnbWVudE1hdGNoZXI7XG4gIH1cblxuICAvLyBDbGllbnQgcXVlcmllcyBjb250YWluIGV2ZXJ5dGhpbmcgaW4gdGhlIGluY29taW5nIGRvY3VtZW50IChpZiBhIEBjbGllbnRcbiAgLy8gZGlyZWN0aXZlIGlzIGZvdW5kKS5cbiAgcHVibGljIGNsaWVudFF1ZXJ5KGRvY3VtZW50OiBEb2N1bWVudE5vZGUpIHtcbiAgICBpZiAoaGFzRGlyZWN0aXZlcyhbJ2NsaWVudCddLCBkb2N1bWVudCkpIHtcbiAgICAgIGlmICh0aGlzLnJlc29sdmVycykge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQ7XG4gICAgICB9XG4gICAgICBpbnZhcmlhbnQud2FybihcbiAgICAgICAgJ0ZvdW5kIEBjbGllbnQgZGlyZWN0aXZlcyBpbiBhIHF1ZXJ5IGJ1dCBubyBBcG9sbG9DbGllbnQgcmVzb2x2ZXJzICcgK1xuICAgICAgICAnd2VyZSBzcGVjaWZpZWQuIFRoaXMgbWVhbnMgQXBvbGxvQ2xpZW50IGxvY2FsIHJlc29sdmVyIGhhbmRsaW5nICcgK1xuICAgICAgICAnaGFzIGJlZW4gZGlzYWJsZWQsIGFuZCBAY2xpZW50IGRpcmVjdGl2ZXMgd2lsbCBiZSBwYXNzZWQgdGhyb3VnaCAnICtcbiAgICAgICAgJ3RvIHlvdXIgbGluayBjaGFpbi4nLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBTZXJ2ZXIgcXVlcmllcyBhcmUgc3RyaXBwZWQgb2YgYWxsIEBjbGllbnQgYmFzZWQgc2VsZWN0aW9uIHNldHMuXG4gIHB1YmxpYyBzZXJ2ZXJRdWVyeShkb2N1bWVudDogRG9jdW1lbnROb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzb2x2ZXJzID8gcmVtb3ZlQ2xpZW50U2V0c0Zyb21Eb2N1bWVudChkb2N1bWVudCkgOiBkb2N1bWVudDtcbiAgfVxuXG4gIHB1YmxpYyBwcmVwYXJlQ29udGV4dChjb250ZXh0ID0ge30pIHtcbiAgICBjb25zdCB7IGNhY2hlIH0gPSB0aGlzO1xuXG4gICAgY29uc3QgbmV3Q29udGV4dCA9IHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICBjYWNoZSxcbiAgICAgIC8vIEdldHRpbmcgYW4gZW50cnkncyBjYWNoZSBrZXkgaXMgdXNlZnVsIGZvciBsb2NhbCBzdGF0ZSByZXNvbHZlcnMuXG4gICAgICBnZXRDYWNoZUtleTogKG9iajogeyBfX3R5cGVuYW1lOiBzdHJpbmc7IGlkOiBzdHJpbmcgfCBudW1iZXIgfSkgPT4ge1xuICAgICAgICBpZiAoKGNhY2hlIGFzIGFueSkuY29uZmlnKSB7XG4gICAgICAgICAgcmV0dXJuIChjYWNoZSBhcyBhbnkpLmNvbmZpZy5kYXRhSWRGcm9tT2JqZWN0KG9iaik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW52YXJpYW50KGZhbHNlLFxuICAgICAgICAgICAgJ1RvIHVzZSBjb250ZXh0LmdldENhY2hlS2V5LCB5b3UgbmVlZCB0byB1c2UgYSBjYWNoZSB0aGF0IGhhcyAnICtcbiAgICAgICAgICAgICAgJ2EgY29uZmlndXJhYmxlIGRhdGFJZEZyb21PYmplY3QsIGxpa2UgYXBvbGxvLWNhY2hlLWlubWVtb3J5LicsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgcmV0dXJuIG5ld0NvbnRleHQ7XG4gIH1cblxuICAvLyBUbyBzdXBwb3J0IGBAY2xpZW50IEBleHBvcnQoYXM6IFwic29tZVZhclwiKWAgc3ludGF4LCB3ZSdsbCBmaXJzdCByZXNvbHZlXG4gIC8vIEBjbGllbnQgQGV4cG9ydCBmaWVsZHMgbG9jYWxseSwgdGhlbiBwYXNzIHRoZSByZXNvbHZlZCB2YWx1ZXMgYmFjayB0byBiZVxuICAvLyB1c2VkIGFsb25nc2lkZSB0aGUgb3JpZ2luYWwgb3BlcmF0aW9uIHZhcmlhYmxlcy5cbiAgcHVibGljIGFzeW5jIGFkZEV4cG9ydGVkVmFyaWFibGVzKFxuICAgIGRvY3VtZW50OiBEb2N1bWVudE5vZGUsXG4gICAgdmFyaWFibGVzOiBPcGVyYXRpb25WYXJpYWJsZXMgPSB7fSxcbiAgICBjb250ZXh0ID0ge30sXG4gICkge1xuICAgIGlmIChkb2N1bWVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZURvY3VtZW50KFxuICAgICAgICBkb2N1bWVudCxcbiAgICAgICAgdGhpcy5idWlsZFJvb3RWYWx1ZUZyb21DYWNoZShkb2N1bWVudCwgdmFyaWFibGVzKSB8fCB7fSxcbiAgICAgICAgdGhpcy5wcmVwYXJlQ29udGV4dChjb250ZXh0KSxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgKS50aGVuKGRhdGEgPT4gKHtcbiAgICAgICAgLi4udmFyaWFibGVzLFxuICAgICAgICAuLi5kYXRhLmV4cG9ydGVkVmFyaWFibGVzLFxuICAgICAgfSkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAuLi52YXJpYWJsZXMsXG4gICAgfTtcbiAgfVxuXG4gIHB1YmxpYyBzaG91bGRGb3JjZVJlc29sdmVycyhkb2N1bWVudDogQVNUTm9kZSkge1xuICAgIGxldCBmb3JjZVJlc29sdmVycyA9IGZhbHNlO1xuICAgIHZpc2l0KGRvY3VtZW50LCB7XG4gICAgICBEaXJlY3RpdmU6IHtcbiAgICAgICAgZW50ZXIobm9kZSkge1xuICAgICAgICAgIGlmIChub2RlLm5hbWUudmFsdWUgPT09ICdjbGllbnQnICYmIG5vZGUuYXJndW1lbnRzKSB7XG4gICAgICAgICAgICBmb3JjZVJlc29sdmVycyA9IG5vZGUuYXJndW1lbnRzLnNvbWUoXG4gICAgICAgICAgICAgIGFyZyA9PlxuICAgICAgICAgICAgICAgIGFyZy5uYW1lLnZhbHVlID09PSAnYWx3YXlzJyAmJlxuICAgICAgICAgICAgICAgIGFyZy52YWx1ZS5raW5kID09PSAnQm9vbGVhblZhbHVlJyAmJlxuICAgICAgICAgICAgICAgIGFyZy52YWx1ZS52YWx1ZSA9PT0gdHJ1ZSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAoZm9yY2VSZXNvbHZlcnMpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGZvcmNlUmVzb2x2ZXJzO1xuICB9XG5cbiAgLy8gUXVlcnkgdGhlIGNhY2hlIGFuZCByZXR1cm4gbWF0Y2hpbmcgZGF0YS5cbiAgcHJpdmF0ZSBidWlsZFJvb3RWYWx1ZUZyb21DYWNoZShcbiAgICBkb2N1bWVudDogRG9jdW1lbnROb2RlLFxuICAgIHZhcmlhYmxlcz86IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICkge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLmRpZmYoe1xuICAgICAgcXVlcnk6IGJ1aWxkUXVlcnlGcm9tU2VsZWN0aW9uU2V0KGRvY3VtZW50KSxcbiAgICAgIHZhcmlhYmxlcyxcbiAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgb3B0aW1pc3RpYzogZmFsc2UsXG4gICAgfSkucmVzdWx0O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZXNvbHZlRG9jdW1lbnQ8VERhdGE+KFxuICAgIGRvY3VtZW50OiBEb2N1bWVudE5vZGUsXG4gICAgcm9vdFZhbHVlOiBURGF0YSxcbiAgICBjb250ZXh0OiBhbnkgPSB7fSxcbiAgICB2YXJpYWJsZXM6IFZhcmlhYmxlTWFwID0ge30sXG4gICAgZnJhZ21lbnRNYXRjaGVyOiBGcmFnbWVudE1hdGNoZXIgPSAoKSA9PiB0cnVlLFxuICAgIG9ubHlSdW5Gb3JjZWRSZXNvbHZlcnM6IGJvb2xlYW4gPSBmYWxzZSxcbiAgKSB7XG4gICAgY29uc3QgbWFpbkRlZmluaXRpb24gPSBnZXRNYWluRGVmaW5pdGlvbihkb2N1bWVudCk7XG4gICAgY29uc3QgZnJhZ21lbnRzID0gZ2V0RnJhZ21lbnREZWZpbml0aW9ucyhkb2N1bWVudCk7XG4gICAgY29uc3QgZnJhZ21lbnRNYXAgPSBjcmVhdGVGcmFnbWVudE1hcChmcmFnbWVudHMpO1xuXG4gICAgY29uc3QgZGVmaW5pdGlvbk9wZXJhdGlvbiA9IChtYWluRGVmaW5pdGlvbiBhcyBPcGVyYXRpb25EZWZpbml0aW9uTm9kZSlcbiAgICAgIC5vcGVyYXRpb247XG5cbiAgICBjb25zdCBkZWZhdWx0T3BlcmF0aW9uVHlwZSA9IGRlZmluaXRpb25PcGVyYXRpb25cbiAgICAgID8gY2FwaXRhbGl6ZUZpcnN0TGV0dGVyKGRlZmluaXRpb25PcGVyYXRpb24pXG4gICAgICA6ICdRdWVyeSc7XG5cbiAgICBjb25zdCB7IGNhY2hlLCBjbGllbnQgfSA9IHRoaXM7XG4gICAgY29uc3QgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0ID0ge1xuICAgICAgZnJhZ21lbnRNYXAsXG4gICAgICBjb250ZXh0OiB7XG4gICAgICAgIC4uLmNvbnRleHQsXG4gICAgICAgIGNhY2hlLFxuICAgICAgICBjbGllbnQsXG4gICAgICB9LFxuICAgICAgdmFyaWFibGVzLFxuICAgICAgZnJhZ21lbnRNYXRjaGVyLFxuICAgICAgZGVmYXVsdE9wZXJhdGlvblR5cGUsXG4gICAgICBleHBvcnRlZFZhcmlhYmxlczoge30sXG4gICAgICBvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzLFxuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcy5yZXNvbHZlU2VsZWN0aW9uU2V0KFxuICAgICAgbWFpbkRlZmluaXRpb24uc2VsZWN0aW9uU2V0LFxuICAgICAgcm9vdFZhbHVlLFxuICAgICAgZXhlY0NvbnRleHQsXG4gICAgKS50aGVuKHJlc3VsdCA9PiAoe1xuICAgICAgcmVzdWx0LFxuICAgICAgZXhwb3J0ZWRWYXJpYWJsZXM6IGV4ZWNDb250ZXh0LmV4cG9ydGVkVmFyaWFibGVzLFxuICAgIH0pKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVzb2x2ZVNlbGVjdGlvblNldDxURGF0YT4oXG4gICAgc2VsZWN0aW9uU2V0OiBTZWxlY3Rpb25TZXROb2RlLFxuICAgIHJvb3RWYWx1ZTogVERhdGEsXG4gICAgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0LFxuICApIHtcbiAgICBjb25zdCB7IGZyYWdtZW50TWFwLCBjb250ZXh0LCB2YXJpYWJsZXMgfSA9IGV4ZWNDb250ZXh0O1xuICAgIGNvbnN0IHJlc3VsdHNUb01lcmdlOiBURGF0YVtdID0gW3Jvb3RWYWx1ZV07XG5cbiAgICBjb25zdCBleGVjdXRlID0gYXN5bmMgKHNlbGVjdGlvbjogU2VsZWN0aW9uTm9kZSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgaWYgKCFzaG91bGRJbmNsdWRlKHNlbGVjdGlvbiwgdmFyaWFibGVzKSkge1xuICAgICAgICAvLyBTa2lwIHRoaXMgZW50aXJlbHkuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRmllbGQoc2VsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvbHZlRmllbGQoc2VsZWN0aW9uLCByb290VmFsdWUsIGV4ZWNDb250ZXh0KS50aGVuKFxuICAgICAgICAgIGZpZWxkUmVzdWx0ID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmllbGRSZXN1bHQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdHNUb01lcmdlLnB1c2goe1xuICAgICAgICAgICAgICAgIFtyZXN1bHRLZXlOYW1lRnJvbUZpZWxkKHNlbGVjdGlvbildOiBmaWVsZFJlc3VsdCxcbiAgICAgICAgICAgICAgfSBhcyBURGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGZyYWdtZW50OiBJbmxpbmVGcmFnbWVudE5vZGUgfCBGcmFnbWVudERlZmluaXRpb25Ob2RlO1xuXG4gICAgICBpZiAoaXNJbmxpbmVGcmFnbWVudChzZWxlY3Rpb24pKSB7XG4gICAgICAgIGZyYWdtZW50ID0gc2VsZWN0aW9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIG5hbWVkIGZyYWdtZW50LlxuICAgICAgICBmcmFnbWVudCA9IGZyYWdtZW50TWFwW3NlbGVjdGlvbi5uYW1lLnZhbHVlXTtcbiAgICAgICAgaW52YXJpYW50KGZyYWdtZW50LCBgTm8gZnJhZ21lbnQgbmFtZWQgJHtzZWxlY3Rpb24ubmFtZS52YWx1ZX1gKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZyYWdtZW50ICYmIGZyYWdtZW50LnR5cGVDb25kaXRpb24pIHtcbiAgICAgICAgY29uc3QgdHlwZUNvbmRpdGlvbiA9IGZyYWdtZW50LnR5cGVDb25kaXRpb24ubmFtZS52YWx1ZTtcbiAgICAgICAgaWYgKGV4ZWNDb250ZXh0LmZyYWdtZW50TWF0Y2hlcihyb290VmFsdWUsIHR5cGVDb25kaXRpb24sIGNvbnRleHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVNlbGVjdGlvblNldChcbiAgICAgICAgICAgIGZyYWdtZW50LnNlbGVjdGlvblNldCxcbiAgICAgICAgICAgIHJvb3RWYWx1ZSxcbiAgICAgICAgICAgIGV4ZWNDb250ZXh0LFxuICAgICAgICAgICkudGhlbihmcmFnbWVudFJlc3VsdCA9PiB7XG4gICAgICAgICAgICByZXN1bHRzVG9NZXJnZS5wdXNoKGZyYWdtZW50UmVzdWx0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoc2VsZWN0aW9uU2V0LnNlbGVjdGlvbnMubWFwKGV4ZWN1dGUpKS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIG1lcmdlRGVlcEFycmF5KHJlc3VsdHNUb01lcmdlKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgcmVzb2x2ZUZpZWxkKFxuICAgIGZpZWxkOiBGaWVsZE5vZGUsXG4gICAgcm9vdFZhbHVlOiBhbnksXG4gICAgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0LFxuICApOiBQcm9taXNlPGFueT4ge1xuICAgIGNvbnN0IHsgdmFyaWFibGVzIH0gPSBleGVjQ29udGV4dDtcbiAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZC5uYW1lLnZhbHVlO1xuICAgIGNvbnN0IGFsaWFzZWRGaWVsZE5hbWUgPSByZXN1bHRLZXlOYW1lRnJvbUZpZWxkKGZpZWxkKTtcbiAgICBjb25zdCBhbGlhc1VzZWQgPSBmaWVsZE5hbWUgIT09IGFsaWFzZWRGaWVsZE5hbWU7XG4gICAgY29uc3QgZGVmYXVsdFJlc3VsdCA9IHJvb3RWYWx1ZVthbGlhc2VkRmllbGROYW1lXSB8fCByb290VmFsdWVbZmllbGROYW1lXTtcbiAgICBsZXQgcmVzdWx0UHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZShkZWZhdWx0UmVzdWx0KTtcblxuICAgIC8vIFVzdWFsbHkgYWxsIGxvY2FsIHJlc29sdmVycyBhcmUgcnVuIHdoZW4gcGFzc2luZyB0aHJvdWdoIGhlcmUsIGJ1dFxuICAgIC8vIGlmIHdlJ3ZlIHNwZWNpZmljYWxseSBpZGVudGlmaWVkIHRoYXQgd2Ugb25seSB3YW50IHRvIHJ1biBmb3JjZWRcbiAgICAvLyByZXNvbHZlcnMgKHRoYXQgaXMsIHJlc29sdmVycyBmb3IgZmllbGRzIG1hcmtlZCB3aXRoXG4gICAgLy8gYEBjbGllbnQoYWx3YXlzOiB0cnVlKWApLCB0aGVuIHdlJ2xsIHNraXAgcnVubmluZyBub24tZm9yY2VkIHJlc29sdmVycy5cbiAgICBpZiAoXG4gICAgICAhZXhlY0NvbnRleHQub25seVJ1bkZvcmNlZFJlc29sdmVycyB8fFxuICAgICAgdGhpcy5zaG91bGRGb3JjZVJlc29sdmVycyhmaWVsZClcbiAgICApIHtcbiAgICAgIGNvbnN0IHJlc29sdmVyVHlwZSA9XG4gICAgICAgIHJvb3RWYWx1ZS5fX3R5cGVuYW1lIHx8IGV4ZWNDb250ZXh0LmRlZmF1bHRPcGVyYXRpb25UeXBlO1xuICAgICAgY29uc3QgcmVzb2x2ZXJNYXAgPSB0aGlzLnJlc29sdmVycyAmJiB0aGlzLnJlc29sdmVyc1tyZXNvbHZlclR5cGVdO1xuICAgICAgaWYgKHJlc29sdmVyTWFwKSB7XG4gICAgICAgIGNvbnN0IHJlc29sdmUgPSByZXNvbHZlck1hcFthbGlhc1VzZWQgPyBmaWVsZE5hbWUgOiBhbGlhc2VkRmllbGROYW1lXTtcbiAgICAgICAgaWYgKHJlc29sdmUpIHtcbiAgICAgICAgICByZXN1bHRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJlc29sdmUoXG4gICAgICAgICAgICByb290VmFsdWUsXG4gICAgICAgICAgICBhcmd1bWVudHNPYmplY3RGcm9tRmllbGQoZmllbGQsIHZhcmlhYmxlcyksXG4gICAgICAgICAgICBleGVjQ29udGV4dC5jb250ZXh0LFxuICAgICAgICAgICAgeyBmaWVsZCwgZnJhZ21lbnRNYXA6IGV4ZWNDb250ZXh0LmZyYWdtZW50TWFwIH0sXG4gICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0UHJvbWlzZS50aGVuKChyZXN1bHQgPSBkZWZhdWx0UmVzdWx0KSA9PiB7XG4gICAgICAvLyBJZiBhbiBAZXhwb3J0IGRpcmVjdGl2ZSBpcyBhc3NvY2lhdGVkIHdpdGggdGhlIGN1cnJlbnQgZmllbGQsIHN0b3JlXG4gICAgICAvLyB0aGUgYGFzYCBleHBvcnQgdmFyaWFibGUgbmFtZSBhbmQgY3VycmVudCByZXN1bHQgZm9yIGxhdGVyIHVzZS5cbiAgICAgIGlmIChmaWVsZC5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGZpZWxkLmRpcmVjdGl2ZXMuZm9yRWFjaChkaXJlY3RpdmUgPT4ge1xuICAgICAgICAgIGlmIChkaXJlY3RpdmUubmFtZS52YWx1ZSA9PT0gJ2V4cG9ydCcgJiYgZGlyZWN0aXZlLmFyZ3VtZW50cykge1xuICAgICAgICAgICAgZGlyZWN0aXZlLmFyZ3VtZW50cy5mb3JFYWNoKGFyZyA9PiB7XG4gICAgICAgICAgICAgIGlmIChhcmcubmFtZS52YWx1ZSA9PT0gJ2FzJyAmJiBhcmcudmFsdWUua2luZCA9PT0gJ1N0cmluZ1ZhbHVlJykge1xuICAgICAgICAgICAgICAgIGV4ZWNDb250ZXh0LmV4cG9ydGVkVmFyaWFibGVzW2FyZy52YWx1ZS52YWx1ZV0gPSByZXN1bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEhhbmRsZSBhbGwgc2NhbGFyIHR5cGVzIGhlcmUuXG4gICAgICBpZiAoIWZpZWxkLnNlbGVjdGlvblNldCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICAvLyBGcm9tIGhlcmUgZG93biwgdGhlIGZpZWxkIGhhcyBhIHNlbGVjdGlvbiBzZXQsIHdoaWNoIG1lYW5zIGl0J3MgdHJ5aW5nXG4gICAgICAvLyB0byBxdWVyeSBhIEdyYXBoUUxPYmplY3RUeXBlLlxuICAgICAgaWYgKHJlc3VsdCA9PSBudWxsKSB7XG4gICAgICAgIC8vIEJhc2ljYWxseSBhbnkgZmllbGQgaW4gYSBHcmFwaFFMIHJlc3BvbnNlIGNhbiBiZSBudWxsLCBvciBtaXNzaW5nXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVN1YlNlbGVjdGVkQXJyYXkoZmllbGQsIHJlc3VsdCwgZXhlY0NvbnRleHQpO1xuICAgICAgfVxuXG4gICAgICAvLyBSZXR1cm5lZCB2YWx1ZSBpcyBhbiBvYmplY3QsIGFuZCB0aGUgcXVlcnkgaGFzIGEgc3ViLXNlbGVjdGlvbi4gUmVjdXJzZS5cbiAgICAgIGlmIChmaWVsZC5zZWxlY3Rpb25TZXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVNlbGVjdGlvblNldChcbiAgICAgICAgICBmaWVsZC5zZWxlY3Rpb25TZXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIGV4ZWNDb250ZXh0LFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlU3ViU2VsZWN0ZWRBcnJheShcbiAgICBmaWVsZDogRmllbGROb2RlLFxuICAgIHJlc3VsdDogYW55W10sXG4gICAgZXhlY0NvbnRleHQ6IEV4ZWNDb250ZXh0LFxuICApOiBhbnkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIHJlc3VsdC5tYXAoaXRlbSA9PiB7XG4gICAgICAgIGlmIChpdGVtID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIGEgbmVzdGVkIGFycmF5LCByZWN1cnNlLlxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLnJlc29sdmVTdWJTZWxlY3RlZEFycmF5KGZpZWxkLCBpdGVtLCBleGVjQ29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGlzIGlzIGFuIG9iamVjdCwgcnVuIHRoZSBzZWxlY3Rpb24gc2V0IG9uIGl0LlxuICAgICAgICBpZiAoZmllbGQuc2VsZWN0aW9uU2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucmVzb2x2ZVNlbGVjdGlvblNldChmaWVsZC5zZWxlY3Rpb25TZXQsIGl0ZW0sIGV4ZWNDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgKTtcbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNhcGl0YWxpemVGaXJzdExldHRlcihzdHI6IHN0cmluZykge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpO1xufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIsIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vT2JzZXJ2YWJsZSc7XG5cbi8vIFJldHVybnMgYSBub3JtYWwgT2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIGFueSBudW1iZXIgb2Ygc3Vic2NyaWJlcnMsXG4vLyB3aGlsZSBlbnN1cmluZyB0aGUgb3JpZ2luYWwgT2JzZXJ2YWJsZSBnZXRzIHN1YnNjcmliZWQgdG8gYXQgbW9zdCBvbmNlLlxuZXhwb3J0IGZ1bmN0aW9uIG11bHRpcGxleDxUPihpbm5lcjogT2JzZXJ2YWJsZTxUPik6IE9ic2VydmFibGU8VD4ge1xuICBjb25zdCBvYnNlcnZlcnMgPSBuZXcgU2V0PE9ic2VydmVyPFQ+PigpO1xuICBsZXQgc3ViOiBTdWJzY3JpcHRpb24gfCBudWxsID0gbnVsbDtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPFQ+KG9ic2VydmVyID0+IHtcbiAgICBvYnNlcnZlcnMuYWRkKG9ic2VydmVyKTtcbiAgICBzdWIgPSBzdWIgfHwgaW5uZXIuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQodmFsdWUpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzID0+IG9icy5uZXh0ICYmIG9icy5uZXh0KHZhbHVlKSk7XG4gICAgICB9LFxuICAgICAgZXJyb3IoZXJyb3IpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzID0+IG9icy5lcnJvciAmJiBvYnMuZXJyb3IoZXJyb3IpKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgb2JzZXJ2ZXJzLmZvckVhY2gob2JzID0+IG9icy5jb21wbGV0ZSAmJiBvYnMuY29tcGxldGUoKSk7XG4gICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAob2JzZXJ2ZXJzLmRlbGV0ZShvYnNlcnZlcikgJiYgIW9ic2VydmVycy5zaXplICYmIHN1Yikge1xuICAgICAgICBzdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgc3ViID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLy8gTGlrZSBPYnNlcnZhYmxlLnByb3RvdHlwZS5tYXAsIGV4Y2VwdCB0aGF0IHRoZSBtYXBwaW5nIGZ1bmN0aW9uIGNhblxuLy8gb3B0aW9uYWxseSByZXR1cm4gYSBQcm9taXNlIChvciBiZSBhc3luYykuXG5leHBvcnQgZnVuY3Rpb24gYXN5bmNNYXA8ViwgUj4oXG4gIG9ic2VydmFibGU6IE9ic2VydmFibGU8Vj4sXG4gIG1hcEZuOiAodmFsdWU6IFYpID0+IFIgfCBQcm9taXNlPFI+LFxuKTogT2JzZXJ2YWJsZTxSPiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZTxSPihvYnNlcnZlciA9PiB7XG4gICAgY29uc3QgeyBuZXh0LCBlcnJvciwgY29tcGxldGUgfSA9IG9ic2VydmVyO1xuICAgIGxldCBhY3RpdmVOZXh0Q291bnQgPSAwO1xuICAgIGxldCBjb21wbGV0ZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IGhhbmRsZXI6IE9ic2VydmVyPFY+ID0ge1xuICAgICAgbmV4dCh2YWx1ZSkge1xuICAgICAgICArK2FjdGl2ZU5leHRDb3VudDtcbiAgICAgICAgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShtYXBGbih2YWx1ZSkpO1xuICAgICAgICB9KS50aGVuKFxuICAgICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAtLWFjdGl2ZU5leHRDb3VudDtcbiAgICAgICAgICAgIG5leHQgJiYgbmV4dC5jYWxsKG9ic2VydmVyLCByZXN1bHQpO1xuICAgICAgICAgICAgY29tcGxldGVkICYmIGhhbmRsZXIuY29tcGxldGUhKCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlID0+IHtcbiAgICAgICAgICAgIC0tYWN0aXZlTmV4dENvdW50O1xuICAgICAgICAgICAgZXJyb3IgJiYgZXJyb3IuY2FsbChvYnNlcnZlciwgZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcihlKSB7XG4gICAgICAgIGVycm9yICYmIGVycm9yLmNhbGwob2JzZXJ2ZXIsIGUpO1xuICAgICAgfSxcbiAgICAgIGNvbXBsZXRlKCkge1xuICAgICAgICBjb21wbGV0ZWQgPSB0cnVlO1xuICAgICAgICBpZiAoIWFjdGl2ZU5leHRDb3VudCkge1xuICAgICAgICAgIGNvbXBsZXRlICYmIGNvbXBsZXRlLmNhbGwob2JzZXJ2ZXIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBjb25zdCBzdWIgPSBvYnNlcnZhYmxlLnN1YnNjcmliZShoYW5kbGVyKTtcbiAgICByZXR1cm4gKCkgPT4gc3ViLnVuc3Vic2NyaWJlKCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHsgZXhlY3V0ZSwgQXBvbGxvTGluaywgRmV0Y2hSZXN1bHQgfSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBFeGVjdXRpb25SZXN1bHQsIERvY3VtZW50Tm9kZSB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgQ2FjaGUgfSBmcm9tICdhcG9sbG8tY2FjaGUnO1xuaW1wb3J0IHtcbiAgZ2V0RGVmYXVsdFZhbHVlcyxcbiAgZ2V0T3BlcmF0aW9uRGVmaW5pdGlvbixcbiAgZ2V0T3BlcmF0aW9uTmFtZSxcbiAgaGFzRGlyZWN0aXZlcyxcbiAgZ3JhcGhRTFJlc3VsdEhhc0Vycm9yLFxuICBoYXNDbGllbnRFeHBvcnRzLFxuICByZW1vdmVDb25uZWN0aW9uRGlyZWN0aXZlRnJvbURvY3VtZW50LFxuICBjYW5Vc2VXZWFrTWFwLFxufSBmcm9tICdhcG9sbG8tdXRpbGl0aWVzJztcblxuaW1wb3J0IHsgaW52YXJpYW50LCBJbnZhcmlhbnRFcnJvciB9IGZyb20gJ3RzLWludmFyaWFudCc7XG5cbmltcG9ydCB7IGlzQXBvbGxvRXJyb3IsIEFwb2xsb0Vycm9yIH0gZnJvbSAnLi4vZXJyb3JzL0Fwb2xsb0Vycm9yJztcbmltcG9ydCB7IE9ic2VydmVyLCBTdWJzY3JpcHRpb24sIE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL09ic2VydmFibGUnO1xuaW1wb3J0IHsgUXVlcnlXaXRoVXBkYXRlciwgRGF0YVN0b3JlIH0gZnJvbSAnLi4vZGF0YS9zdG9yZSc7XG5pbXBvcnQgeyBNdXRhdGlvblN0b3JlIH0gZnJvbSAnLi4vZGF0YS9tdXRhdGlvbnMnO1xuaW1wb3J0IHsgUXVlcnlTdG9yZSwgUXVlcnlTdG9yZVZhbHVlIH0gZnJvbSAnLi4vZGF0YS9xdWVyaWVzJztcblxuaW1wb3J0IHtcbiAgUXVlcnlPcHRpb25zLFxuICBXYXRjaFF1ZXJ5T3B0aW9ucyxcbiAgU3Vic2NyaXB0aW9uT3B0aW9ucyxcbiAgTXV0YXRpb25PcHRpb25zLFxuICBFcnJvclBvbGljeSxcbn0gZnJvbSAnLi93YXRjaFF1ZXJ5T3B0aW9ucyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlUXVlcnkgfSBmcm9tICcuL09ic2VydmFibGVRdWVyeSc7XG5pbXBvcnQgeyBOZXR3b3JrU3RhdHVzLCBpc05ldHdvcmtSZXF1ZXN0SW5GbGlnaHQgfSBmcm9tICcuL25ldHdvcmtTdGF0dXMnO1xuaW1wb3J0IHtcbiAgUXVlcnlMaXN0ZW5lcixcbiAgQXBvbGxvUXVlcnlSZXN1bHQsXG4gIEZldGNoVHlwZSxcbiAgT3BlcmF0aW9uVmFyaWFibGVzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IExvY2FsU3RhdGUgfSBmcm9tICcuL0xvY2FsU3RhdGUnO1xuaW1wb3J0IHsgYXN5bmNNYXAsIG11bHRpcGxleCB9IGZyb20gJy4uL3V0aWwvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHsgaXNOb25FbXB0eUFycmF5IH0gZnJvbSAnLi4vdXRpbC9hcnJheXMnO1xuXG5jb25zdCB7IGhhc093blByb3BlcnR5IH0gPSBPYmplY3QucHJvdG90eXBlO1xuXG5leHBvcnQgaW50ZXJmYWNlIFF1ZXJ5SW5mbyB7XG4gIGxpc3RlbmVyczogU2V0PFF1ZXJ5TGlzdGVuZXI+O1xuICBpbnZhbGlkYXRlZDogYm9vbGVhbjtcbiAgbmV3RGF0YTogQ2FjaGUuRGlmZlJlc3VsdDxhbnk+IHwgbnVsbDtcbiAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSB8IG51bGw7XG4gIGxhc3RSZXF1ZXN0SWQ6IG51bWJlcjtcbiAgLy8gQSBtYXAgZ29pbmcgZnJvbSBxdWVyeUlkIHRvIGFuIG9ic2VydmVyIGZvciBhIHF1ZXJ5IGlzc3VlZCBieSB3YXRjaFF1ZXJ5LiBXZSB1c2VcbiAgLy8gdGhlc2UgdG8ga2VlcCB0cmFjayBvZiBxdWVyaWVzIHRoYXQgYXJlIGluZmxpZ2h0IGFuZCBlcnJvciBvbiB0aGUgb2JzZXJ2ZXJzIGFzc29jaWF0ZWRcbiAgLy8gd2l0aCB0aGVtIGluIGNhc2Ugb2Ygc29tZSBkZXN0YWJhbGl6aW5nIGFjdGlvbiAoZS5nLiByZXNldCBvZiB0aGUgQXBvbGxvIHN0b3JlKS5cbiAgb2JzZXJ2YWJsZVF1ZXJ5OiBPYnNlcnZhYmxlUXVlcnk8YW55PiB8IG51bGw7XG4gIHN1YnNjcmlwdGlvbnM6IFNldDxTdWJzY3JpcHRpb24+O1xuICBjYW5jZWw/OiAoKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgUXVlcnlNYW5hZ2VyPFRTdG9yZT4ge1xuICBwdWJsaWMgbGluazogQXBvbGxvTGluaztcbiAgcHVibGljIG11dGF0aW9uU3RvcmU6IE11dGF0aW9uU3RvcmUgPSBuZXcgTXV0YXRpb25TdG9yZSgpO1xuICBwdWJsaWMgcXVlcnlTdG9yZTogUXVlcnlTdG9yZSA9IG5ldyBRdWVyeVN0b3JlKCk7XG4gIHB1YmxpYyBkYXRhU3RvcmU6IERhdGFTdG9yZTxUU3RvcmU+O1xuICBwdWJsaWMgcmVhZG9ubHkgYXNzdW1lSW1tdXRhYmxlUmVzdWx0czogYm9vbGVhbjtcblxuICBwcml2YXRlIHF1ZXJ5RGVkdXBsaWNhdGlvbjogYm9vbGVhbjtcbiAgcHJpdmF0ZSBjbGllbnRBd2FyZW5lc3M6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgcHJpdmF0ZSBsb2NhbFN0YXRlOiBMb2NhbFN0YXRlPFRTdG9yZT47XG5cbiAgcHJpdmF0ZSBvbkJyb2FkY2FzdDogKCkgPT4gdm9pZDtcblxuICBwcml2YXRlIHNzck1vZGU6IGJvb2xlYW47XG5cbiAgLy8gbGV0J3Mgbm90IHN0YXJ0IGF0IHplcm8gdG8gYXZvaWQgcGFpbiB3aXRoIGJhZCBjaGVja3NcbiAgcHJpdmF0ZSBpZENvdW50ZXIgPSAxO1xuXG4gIC8vIFhYWCBtZXJnZSB3aXRoIE9ic2VydmFibGVRdWVyeSBidXQgdGhhdCBuZWVkcyB0byBiZSBleHBhbmRlZCB0byBzdXBwb3J0IG11dGF0aW9ucyBhbmRcbiAgLy8gc3Vic2NyaXB0aW9ucyBhcyB3ZWxsXG4gIHByaXZhdGUgcXVlcmllczogTWFwPHN0cmluZywgUXVlcnlJbmZvPiA9IG5ldyBNYXAoKTtcblxuICAvLyBBIG1hcCBvZiBQcm9taXNlIHJlamVjdCBmdW5jdGlvbnMgZm9yIGZldGNoUXVlcnkgcHJvbWlzZXMgdGhhdCBoYXZlIG5vdFxuICAvLyB5ZXQgYmVlbiByZXNvbHZlZCwgdXNlZCB0byBrZWVwIHRyYWNrIG9mIGluLWZsaWdodCBxdWVyaWVzIHNvIHRoYXQgd2UgY2FuXG4gIC8vIHJlamVjdCB0aGVtIGluIGNhc2UgYSBkZXN0YWJpbGl6aW5nIGV2ZW50IG9jY3VycyAoZS5nLiBBcG9sbG8gc3RvcmUgcmVzZXQpLlxuICAvLyBUaGUga2V5IGlzIGluIHRoZSBmb3JtYXQgb2YgYHF1ZXJ5OiR7cXVlcnlJZH1gIG9yIGBmZXRjaFJlcXVlc3Q6JHtxdWVyeUlkfWAsXG4gIC8vIGRlcGVuZGluZyBvbiB3aGVyZSB0aGUgcHJvbWlzZSdzIHJlamVjdGlvbiBmdW5jdGlvbiB3YXMgY3JlYXRlZCBmcm9tLlxuICBwcml2YXRlIGZldGNoUXVlcnlSZWplY3RGbnMgPSBuZXcgTWFwPHN0cmluZywgRnVuY3Rpb24+KCk7XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIGxpbmssXG4gICAgcXVlcnlEZWR1cGxpY2F0aW9uID0gZmFsc2UsXG4gICAgc3RvcmUsXG4gICAgb25Ccm9hZGNhc3QgPSAoKSA9PiB1bmRlZmluZWQsXG4gICAgc3NyTW9kZSA9IGZhbHNlLFxuICAgIGNsaWVudEF3YXJlbmVzcyA9IHt9LFxuICAgIGxvY2FsU3RhdGUsXG4gICAgYXNzdW1lSW1tdXRhYmxlUmVzdWx0cyxcbiAgfToge1xuICAgIGxpbms6IEFwb2xsb0xpbms7XG4gICAgcXVlcnlEZWR1cGxpY2F0aW9uPzogYm9vbGVhbjtcbiAgICBzdG9yZTogRGF0YVN0b3JlPFRTdG9yZT47XG4gICAgb25Ccm9hZGNhc3Q/OiAoKSA9PiB2b2lkO1xuICAgIHNzck1vZGU/OiBib29sZWFuO1xuICAgIGNsaWVudEF3YXJlbmVzcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gICAgbG9jYWxTdGF0ZT86IExvY2FsU3RhdGU8VFN0b3JlPjtcbiAgICBhc3N1bWVJbW11dGFibGVSZXN1bHRzPzogYm9vbGVhbjtcbiAgfSkge1xuICAgIHRoaXMubGluayA9IGxpbms7XG4gICAgdGhpcy5xdWVyeURlZHVwbGljYXRpb24gPSBxdWVyeURlZHVwbGljYXRpb247XG4gICAgdGhpcy5kYXRhU3RvcmUgPSBzdG9yZTtcbiAgICB0aGlzLm9uQnJvYWRjYXN0ID0gb25Ccm9hZGNhc3Q7XG4gICAgdGhpcy5jbGllbnRBd2FyZW5lc3MgPSBjbGllbnRBd2FyZW5lc3M7XG4gICAgdGhpcy5sb2NhbFN0YXRlID0gbG9jYWxTdGF0ZSB8fCBuZXcgTG9jYWxTdGF0ZSh7IGNhY2hlOiBzdG9yZS5nZXRDYWNoZSgpIH0pO1xuICAgIHRoaXMuc3NyTW9kZSA9IHNzck1vZGU7XG4gICAgdGhpcy5hc3N1bWVJbW11dGFibGVSZXN1bHRzID0gISFhc3N1bWVJbW11dGFibGVSZXN1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgdGhpcyBtZXRob2QgdG8gdGVybWluYXRlIGFueSBhY3RpdmUgcXVlcnkgcHJvY2Vzc2VzLCBtYWtpbmcgaXQgc2FmZVxuICAgKiB0byBkaXNwb3NlIG9mIHRoaXMgUXVlcnlNYW5hZ2VyIGluc3RhbmNlLlxuICAgKi9cbiAgcHVibGljIHN0b3AoKSB7XG4gICAgdGhpcy5xdWVyaWVzLmZvckVhY2goKF9pbmZvLCBxdWVyeUlkKSA9PiB7XG4gICAgICB0aGlzLnN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5mZXRjaFF1ZXJ5UmVqZWN0Rm5zLmZvckVhY2gocmVqZWN0ID0+IHtcbiAgICAgIHJlamVjdChcbiAgICAgICAgbmV3IEludmFyaWFudEVycm9yKCdRdWVyeU1hbmFnZXIgc3RvcHBlZCB3aGlsZSBxdWVyeSB3YXMgaW4gZmxpZ2h0JyksXG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIG11dGF0ZTxUPih7XG4gICAgbXV0YXRpb24sXG4gICAgdmFyaWFibGVzLFxuICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICB1cGRhdGVRdWVyaWVzOiB1cGRhdGVRdWVyaWVzQnlOYW1lLFxuICAgIHJlZmV0Y2hRdWVyaWVzID0gW10sXG4gICAgYXdhaXRSZWZldGNoUXVlcmllcyA9IGZhbHNlLFxuICAgIHVwZGF0ZTogdXBkYXRlV2l0aFByb3h5Rm4sXG4gICAgZXJyb3JQb2xpY3kgPSAnbm9uZScsXG4gICAgZmV0Y2hQb2xpY3ksXG4gICAgY29udGV4dCA9IHt9LFxuICB9OiBNdXRhdGlvbk9wdGlvbnMpOiBQcm9taXNlPEZldGNoUmVzdWx0PFQ+PiB7XG4gICAgaW52YXJpYW50KFxuICAgICAgbXV0YXRpb24sXG4gICAgICAnbXV0YXRpb24gb3B0aW9uIGlzIHJlcXVpcmVkLiBZb3UgbXVzdCBzcGVjaWZ5IHlvdXIgR3JhcGhRTCBkb2N1bWVudCBpbiB0aGUgbXV0YXRpb24gb3B0aW9uLicsXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICFmZXRjaFBvbGljeSB8fCBmZXRjaFBvbGljeSA9PT0gJ25vLWNhY2hlJyxcbiAgICAgIFwiTXV0YXRpb25zIG9ubHkgc3VwcG9ydCBhICduby1jYWNoZScgZmV0Y2hQb2xpY3kuIElmIHlvdSBkb24ndCB3YW50IHRvIGRpc2FibGUgdGhlIGNhY2hlLCByZW1vdmUgeW91ciBmZXRjaFBvbGljeSBzZXR0aW5nIHRvIHByb2NlZWQgd2l0aCB0aGUgZGVmYXVsdCBtdXRhdGlvbiBiZWhhdmlvci5cIlxuICAgICk7XG5cbiAgICBjb25zdCBtdXRhdGlvbklkID0gdGhpcy5nZW5lcmF0ZVF1ZXJ5SWQoKTtcbiAgICBtdXRhdGlvbiA9IHRoaXMudHJhbnNmb3JtKG11dGF0aW9uKS5kb2N1bWVudDtcblxuICAgIHRoaXMuc2V0UXVlcnkobXV0YXRpb25JZCwgKCkgPT4gKHsgZG9jdW1lbnQ6IG11dGF0aW9uIH0pKTtcblxuICAgIHZhcmlhYmxlcyA9IHRoaXMuZ2V0VmFyaWFibGVzKG11dGF0aW9uLCB2YXJpYWJsZXMpO1xuXG4gICAgaWYgKHRoaXMudHJhbnNmb3JtKG11dGF0aW9uKS5oYXNDbGllbnRFeHBvcnRzKSB7XG4gICAgICB2YXJpYWJsZXMgPSBhd2FpdCB0aGlzLmxvY2FsU3RhdGUuYWRkRXhwb3J0ZWRWYXJpYWJsZXMobXV0YXRpb24sIHZhcmlhYmxlcywgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgbWFwIG9mIHVwZGF0ZSBxdWVyaWVzIGJ5IGlkIHRvIHRoZSBxdWVyeSBpbnN0ZWFkIG9mIGJ5IG5hbWUuXG4gICAgY29uc3QgZ2VuZXJhdGVVcGRhdGVRdWVyaWVzSW5mbzogKCkgPT4ge1xuICAgICAgW3F1ZXJ5SWQ6IHN0cmluZ106IFF1ZXJ5V2l0aFVwZGF0ZXI7XG4gICAgfSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHJldDogeyBbcXVlcnlJZDogc3RyaW5nXTogUXVlcnlXaXRoVXBkYXRlciB9ID0ge307XG5cbiAgICAgIGlmICh1cGRhdGVRdWVyaWVzQnlOYW1lKSB7XG4gICAgICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKCh7IG9ic2VydmFibGVRdWVyeSB9LCBxdWVyeUlkKSA9PiB7XG4gICAgICAgICAgaWYgKG9ic2VydmFibGVRdWVyeSkge1xuICAgICAgICAgICAgY29uc3QgeyBxdWVyeU5hbWUgfSA9IG9ic2VydmFibGVRdWVyeTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgcXVlcnlOYW1lICYmXG4gICAgICAgICAgICAgIGhhc093blByb3BlcnR5LmNhbGwodXBkYXRlUXVlcmllc0J5TmFtZSwgcXVlcnlOYW1lKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldFtxdWVyeUlkXSA9IHtcbiAgICAgICAgICAgICAgICB1cGRhdGVyOiB1cGRhdGVRdWVyaWVzQnlOYW1lW3F1ZXJ5TmFtZV0sXG4gICAgICAgICAgICAgICAgcXVlcnk6IHRoaXMucXVlcnlTdG9yZS5nZXQocXVlcnlJZCksXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuXG4gICAgdGhpcy5tdXRhdGlvblN0b3JlLmluaXRNdXRhdGlvbihcbiAgICAgIG11dGF0aW9uSWQsXG4gICAgICBtdXRhdGlvbixcbiAgICAgIHZhcmlhYmxlcyxcbiAgICApO1xuXG4gICAgdGhpcy5kYXRhU3RvcmUubWFya011dGF0aW9uSW5pdCh7XG4gICAgICBtdXRhdGlvbklkLFxuICAgICAgZG9jdW1lbnQ6IG11dGF0aW9uLFxuICAgICAgdmFyaWFibGVzLFxuICAgICAgdXBkYXRlUXVlcmllczogZ2VuZXJhdGVVcGRhdGVRdWVyaWVzSW5mbygpLFxuICAgICAgdXBkYXRlOiB1cGRhdGVXaXRoUHJveHlGbixcbiAgICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICB9KTtcblxuICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHN0b3JlUmVzdWx0OiBGZXRjaFJlc3VsdDxUPiB8IG51bGw7XG4gICAgICBsZXQgZXJyb3I6IEFwb2xsb0Vycm9yO1xuXG4gICAgICBzZWxmLmdldE9ic2VydmFibGVGcm9tTGluayhcbiAgICAgICAgbXV0YXRpb24sXG4gICAgICAgIHtcbiAgICAgICAgICAuLi5jb250ZXh0LFxuICAgICAgICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgICAgfSxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBmYWxzZSxcbiAgICAgICkuc3Vic2NyaWJlKHtcbiAgICAgICAgbmV4dChyZXN1bHQ6IEV4ZWN1dGlvblJlc3VsdCkge1xuICAgICAgICAgIGlmIChncmFwaFFMUmVzdWx0SGFzRXJyb3IocmVzdWx0KSAmJiBlcnJvclBvbGljeSA9PT0gJ25vbmUnKSB7XG4gICAgICAgICAgICBlcnJvciA9IG5ldyBBcG9sbG9FcnJvcih7XG4gICAgICAgICAgICAgIGdyYXBoUUxFcnJvcnM6IHJlc3VsdC5lcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZWxmLm11dGF0aW9uU3RvcmUubWFya011dGF0aW9uUmVzdWx0KG11dGF0aW9uSWQpO1xuXG4gICAgICAgICAgaWYgKGZldGNoUG9saWN5ICE9PSAnbm8tY2FjaGUnKSB7XG4gICAgICAgICAgICBzZWxmLmRhdGFTdG9yZS5tYXJrTXV0YXRpb25SZXN1bHQoe1xuICAgICAgICAgICAgICBtdXRhdGlvbklkLFxuICAgICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICAgIGRvY3VtZW50OiBtdXRhdGlvbixcbiAgICAgICAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICAgICAgICB1cGRhdGVRdWVyaWVzOiBnZW5lcmF0ZVVwZGF0ZVF1ZXJpZXNJbmZvKCksXG4gICAgICAgICAgICAgIHVwZGF0ZTogdXBkYXRlV2l0aFByb3h5Rm4sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdG9yZVJlc3VsdCA9IHJlc3VsdCBhcyBGZXRjaFJlc3VsdDxUPjtcbiAgICAgICAgfSxcblxuICAgICAgICBlcnJvcihlcnI6IEVycm9yKSB7XG4gICAgICAgICAgc2VsZi5tdXRhdGlvblN0b3JlLm1hcmtNdXRhdGlvbkVycm9yKG11dGF0aW9uSWQsIGVycik7XG4gICAgICAgICAgc2VsZi5kYXRhU3RvcmUubWFya011dGF0aW9uQ29tcGxldGUoe1xuICAgICAgICAgICAgbXV0YXRpb25JZCxcbiAgICAgICAgICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBzZWxmLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgICAgICAgICBzZWxmLnNldFF1ZXJ5KG11dGF0aW9uSWQsICgpID0+ICh7IGRvY3VtZW50OiBudWxsIH0pKTtcbiAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICBuZXcgQXBvbGxvRXJyb3Ioe1xuICAgICAgICAgICAgICBuZXR3b3JrRXJyb3I6IGVycixcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICBzZWxmLm11dGF0aW9uU3RvcmUubWFya011dGF0aW9uRXJyb3IobXV0YXRpb25JZCwgZXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNlbGYuZGF0YVN0b3JlLm1hcmtNdXRhdGlvbkNvbXBsZXRlKHtcbiAgICAgICAgICAgIG11dGF0aW9uSWQsXG4gICAgICAgICAgICBvcHRpbWlzdGljUmVzcG9uc2UsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBzZWxmLmJyb2FkY2FzdFF1ZXJpZXMoKTtcblxuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBhbGxvdyBmb3IgY29uZGl0aW9uYWwgcmVmZXRjaGVzXG4gICAgICAgICAgLy8gWFhYIGRvIHdlIHdhbnQgdG8gbWFrZSB0aGlzIHRoZSBvbmx5IEFQSSBvbmUgZGF5P1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVmZXRjaFF1ZXJpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlZmV0Y2hRdWVyaWVzID0gcmVmZXRjaFF1ZXJpZXMoc3RvcmVSZXN1bHQgYXMgRXhlY3V0aW9uUmVzdWx0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCByZWZldGNoUXVlcnlQcm9taXNlczogUHJvbWlzZTxcbiAgICAgICAgICAgIEFwb2xsb1F1ZXJ5UmVzdWx0PGFueT5bXSB8IEFwb2xsb1F1ZXJ5UmVzdWx0PHt9PlxuICAgICAgICAgID5bXSA9IFtdO1xuXG4gICAgICAgICAgaWYgKGlzTm9uRW1wdHlBcnJheShyZWZldGNoUXVlcmllcykpIHtcbiAgICAgICAgICAgIHJlZmV0Y2hRdWVyaWVzLmZvckVhY2gocmVmZXRjaFF1ZXJ5ID0+IHtcbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWZldGNoUXVlcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5xdWVyaWVzLmZvckVhY2goKHsgb2JzZXJ2YWJsZVF1ZXJ5IH0pID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZVF1ZXJ5ICYmXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVRdWVyeS5xdWVyeU5hbWUgPT09IHJlZmV0Y2hRdWVyeVxuICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZmV0Y2hRdWVyeVByb21pc2VzLnB1c2gob2JzZXJ2YWJsZVF1ZXJ5LnJlZmV0Y2goKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcXVlcnlPcHRpb25zOiBRdWVyeU9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICBxdWVyeTogcmVmZXRjaFF1ZXJ5LnF1ZXJ5LFxuICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiByZWZldGNoUXVlcnkudmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAocmVmZXRjaFF1ZXJ5LmNvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgIHF1ZXJ5T3B0aW9ucy5jb250ZXh0ID0gcmVmZXRjaFF1ZXJ5LmNvbnRleHQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVmZXRjaFF1ZXJ5UHJvbWlzZXMucHVzaChzZWxmLnF1ZXJ5KHF1ZXJ5T3B0aW9ucykpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBQcm9taXNlLmFsbChcbiAgICAgICAgICAgIGF3YWl0UmVmZXRjaFF1ZXJpZXMgPyByZWZldGNoUXVlcnlQcm9taXNlcyA6IFtdLFxuICAgICAgICAgICkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBzZWxmLnNldFF1ZXJ5KG11dGF0aW9uSWQsICgpID0+ICh7IGRvY3VtZW50OiBudWxsIH0pKTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBlcnJvclBvbGljeSA9PT0gJ2lnbm9yZScgJiZcbiAgICAgICAgICAgICAgc3RvcmVSZXN1bHQgJiZcbiAgICAgICAgICAgICAgZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHN0b3JlUmVzdWx0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGRlbGV0ZSBzdG9yZVJlc3VsdC5lcnJvcnM7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc29sdmUoc3RvcmVSZXN1bHQhKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGZldGNoUXVlcnk8VD4oXG4gICAgcXVlcnlJZDogc3RyaW5nLFxuICAgIG9wdGlvbnM6IFdhdGNoUXVlcnlPcHRpb25zLFxuICAgIGZldGNoVHlwZT86IEZldGNoVHlwZSxcbiAgICAvLyBUaGlzIGFsbG93cyB1cyB0byB0cmFjayBpZiB0aGlzIGlzIGEgcXVlcnkgc3Bhd25lZCBieSBhIGBmZXRjaE1vcmVgXG4gICAgLy8gY2FsbCBmb3IgYW5vdGhlciBxdWVyeS4gV2UgbmVlZCB0aGlzIGRhdGEgdG8gY29tcHV0ZSB0aGUgYGZldGNoTW9yZWBcbiAgICAvLyBuZXR3b3JrIHN0YXR1cyBmb3IgdGhlIHF1ZXJ5IHRoaXMgaXMgZmV0Y2hpbmcgZm9yLlxuICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQ/OiBzdHJpbmcsXG4gICk6IFByb21pc2U8RmV0Y2hSZXN1bHQ8VD4+IHtcbiAgICBjb25zdCB7XG4gICAgICBtZXRhZGF0YSA9IG51bGwsXG4gICAgICBmZXRjaFBvbGljeSA9ICdjYWNoZS1maXJzdCcsIC8vIGNhY2hlLWZpcnN0IGlzIHRoZSBkZWZhdWx0IGZldGNoIHBvbGljeS5cbiAgICAgIGNvbnRleHQgPSB7fSxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy50cmFuc2Zvcm0ob3B0aW9ucy5xdWVyeSkuZG9jdW1lbnQ7XG5cbiAgICBsZXQgdmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMocXVlcnksIG9wdGlvbnMudmFyaWFibGVzKTtcblxuICAgIGlmICh0aGlzLnRyYW5zZm9ybShxdWVyeSkuaGFzQ2xpZW50RXhwb3J0cykge1xuICAgICAgdmFyaWFibGVzID0gYXdhaXQgdGhpcy5sb2NhbFN0YXRlLmFkZEV4cG9ydGVkVmFyaWFibGVzKHF1ZXJ5LCB2YXJpYWJsZXMsIGNvbnRleHQpO1xuICAgIH1cblxuICAgIG9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIHZhcmlhYmxlcyB9O1xuXG4gICAgbGV0IHN0b3JlUmVzdWx0OiBhbnk7XG4gICAgY29uc3QgaXNOZXR3b3JrT25seSA9XG4gICAgICBmZXRjaFBvbGljeSA9PT0gJ25ldHdvcmstb25seScgfHwgZmV0Y2hQb2xpY3kgPT09ICduby1jYWNoZSc7XG4gICAgbGV0IG5lZWRUb0ZldGNoID0gaXNOZXR3b3JrT25seTtcblxuICAgIC8vIFVubGVzcyB3ZSBhcmUgY29tcGxldGVseSBza2lwcGluZyB0aGUgY2FjaGUsIHdlIHdhbnQgdG8gZGlmZiB0aGUgcXVlcnlcbiAgICAvLyBhZ2FpbnN0IHRoZSBjYWNoZSBiZWZvcmUgd2UgZmV0Y2ggaXQgZnJvbSB0aGUgbmV0d29yayBpbnRlcmZhY2UuXG4gICAgaWYgKCFpc05ldHdvcmtPbmx5KSB7XG4gICAgICBjb25zdCB7IGNvbXBsZXRlLCByZXN1bHQgfSA9IHRoaXMuZGF0YVN0b3JlLmdldENhY2hlKCkuZGlmZih7XG4gICAgICAgIHF1ZXJ5LFxuICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgICBvcHRpbWlzdGljOiBmYWxzZSxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBJZiB3ZSdyZSBpbiBoZXJlLCBvbmx5IGZldGNoIGlmIHdlIGhhdmUgbWlzc2luZyBmaWVsZHNcbiAgICAgIG5lZWRUb0ZldGNoID0gIWNvbXBsZXRlIHx8IGZldGNoUG9saWN5ID09PSAnY2FjaGUtYW5kLW5ldHdvcmsnO1xuICAgICAgc3RvcmVSZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxuXG4gICAgbGV0IHNob3VsZEZldGNoID1cbiAgICAgIG5lZWRUb0ZldGNoICYmIGZldGNoUG9saWN5ICE9PSAnY2FjaGUtb25seScgJiYgZmV0Y2hQb2xpY3kgIT09ICdzdGFuZGJ5JztcblxuICAgIC8vIHdlIG5lZWQgdG8gY2hlY2sgdG8gc2VlIGlmIHRoaXMgaXMgYW4gb3BlcmF0aW9uIHRoYXQgdXNlcyB0aGUgQGxpdmUgZGlyZWN0aXZlXG4gICAgaWYgKGhhc0RpcmVjdGl2ZXMoWydsaXZlJ10sIHF1ZXJ5KSkgc2hvdWxkRmV0Y2ggPSB0cnVlO1xuXG4gICAgY29uc3QgcmVxdWVzdElkID0gdGhpcy5pZENvdW50ZXIrKztcblxuICAgIC8vIHNldCB1cCBhIHdhdGNoZXIgdG8gbGlzdGVuIHRvIGNhY2hlIHVwZGF0ZXNcbiAgICBjb25zdCBjYW5jZWwgPSBmZXRjaFBvbGljeSAhPT0gJ25vLWNhY2hlJ1xuICAgICAgPyB0aGlzLnVwZGF0ZVF1ZXJ5V2F0Y2gocXVlcnlJZCwgcXVlcnksIG9wdGlvbnMpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIC8vIEluaXRpYWxpemUgcXVlcnkgaW4gc3RvcmUgd2l0aCB1bmlxdWUgcmVxdWVzdElkXG4gICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoKSA9PiAoe1xuICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LFxuICAgICAgbGFzdFJlcXVlc3RJZDogcmVxdWVzdElkLFxuICAgICAgaW52YWxpZGF0ZWQ6IHRydWUsXG4gICAgICBjYW5jZWwsXG4gICAgfSkpO1xuXG4gICAgdGhpcy5pbnZhbGlkYXRlKGZldGNoTW9yZUZvclF1ZXJ5SWQpO1xuXG4gICAgdGhpcy5xdWVyeVN0b3JlLmluaXRRdWVyeSh7XG4gICAgICBxdWVyeUlkLFxuICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LFxuICAgICAgc3RvcmVQcmV2aW91c1ZhcmlhYmxlczogc2hvdWxkRmV0Y2gsXG4gICAgICB2YXJpYWJsZXMsXG4gICAgICBpc1BvbGw6IGZldGNoVHlwZSA9PT0gRmV0Y2hUeXBlLnBvbGwsXG4gICAgICBpc1JlZmV0Y2g6IGZldGNoVHlwZSA9PT0gRmV0Y2hUeXBlLnJlZmV0Y2gsXG4gICAgICBtZXRhZGF0YSxcbiAgICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQsXG4gICAgfSk7XG5cbiAgICB0aGlzLmJyb2FkY2FzdFF1ZXJpZXMoKTtcblxuICAgIGlmIChzaG91bGRGZXRjaCkge1xuICAgICAgY29uc3QgbmV0d29ya1Jlc3VsdCA9IHRoaXMuZmV0Y2hSZXF1ZXN0PFQ+KHtcbiAgICAgICAgcmVxdWVzdElkLFxuICAgICAgICBxdWVyeUlkLFxuICAgICAgICBkb2N1bWVudDogcXVlcnksXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQsXG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIC8vIFRoaXMgaXMgZm9yIHRoZSBiZW5lZml0IG9mIGByZWZldGNoYCBwcm9taXNlcywgd2hpY2ggY3VycmVudGx5IGRvbid0IGdldCB0aGVpciBlcnJvcnNcbiAgICAgICAgLy8gdGhyb3VnaCB0aGUgc3RvcmUgbGlrZSB3YXRjaFF1ZXJ5IG9ic2VydmVycyBkb1xuICAgICAgICBpZiAoaXNBcG9sbG9FcnJvcihlcnJvcikpIHtcbiAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAocmVxdWVzdElkID49IHRoaXMuZ2V0UXVlcnkocXVlcnlJZCkubGFzdFJlcXVlc3RJZCkge1xuICAgICAgICAgICAgdGhpcy5xdWVyeVN0b3JlLm1hcmtRdWVyeUVycm9yKHF1ZXJ5SWQsIGVycm9yLCBmZXRjaE1vcmVGb3JRdWVyeUlkKTtcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShxdWVyeUlkKTtcbiAgICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShmZXRjaE1vcmVGb3JRdWVyeUlkKTtcbiAgICAgICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBuZXcgQXBvbGxvRXJyb3IoeyBuZXR3b3JrRXJyb3I6IGVycm9yIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgLy8gd2UgZG9uJ3QgcmV0dXJuIHRoZSBwcm9taXNlIGZvciBjYWNoZS1hbmQtbmV0d29yayBzaW5jZSBpdCBpcyBhbHJlYWR5XG4gICAgICAvLyByZXR1cm5lZCBiZWxvdyBmcm9tIHRoZSBjYWNoZVxuICAgICAgaWYgKGZldGNoUG9saWN5ICE9PSAnY2FjaGUtYW5kLW5ldHdvcmsnKSB7XG4gICAgICAgIHJldHVybiBuZXR3b3JrUmVzdWx0O1xuICAgICAgfVxuXG4gICAgICAvLyBob3dldmVyIHdlIG5lZWQgdG8gY2F0Y2ggdGhlIGVycm9yIHNvIGl0IGlzbid0IHVuaGFuZGxlZCBpbiBjYXNlIG9mXG4gICAgICAvLyBuZXR3b3JrIGVycm9yXG4gICAgICBuZXR3b3JrUmVzdWx0LmNhdGNoKCgpID0+IHt9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBpcyBubyBwYXJ0IG9mIHRoZSBxdWVyeSB3ZSBuZWVkIHRvIGZldGNoIGZyb20gdGhlIHNlcnZlciAob3IsXG4gICAgLy8gZmV0Y2hQb2xpY3kgaXMgY2FjaGUtb25seSksIHdlIGp1c3Qgd3JpdGUgdGhlIHN0b3JlIHJlc3VsdCBhcyB0aGUgZmluYWwgcmVzdWx0LlxuICAgIHRoaXMucXVlcnlTdG9yZS5tYXJrUXVlcnlSZXN1bHRDbGllbnQocXVlcnlJZCwgIXNob3VsZEZldGNoKTtcbiAgICB0aGlzLmludmFsaWRhdGUocXVlcnlJZCk7XG4gICAgdGhpcy5pbnZhbGlkYXRlKGZldGNoTW9yZUZvclF1ZXJ5SWQpO1xuXG4gICAgaWYgKHRoaXMudHJhbnNmb3JtKHF1ZXJ5KS5oYXNGb3JjZWRSZXNvbHZlcnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmxvY2FsU3RhdGUucnVuUmVzb2x2ZXJzKHtcbiAgICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LFxuICAgICAgICByZW1vdGVSZXN1bHQ6IHsgZGF0YTogc3RvcmVSZXN1bHQgfSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgICBvbmx5UnVuRm9yY2VkUmVzb2x2ZXJzOiB0cnVlLFxuICAgICAgfSkudGhlbigocmVzdWx0OiBGZXRjaFJlc3VsdDxUPikgPT4ge1xuICAgICAgICB0aGlzLm1hcmtRdWVyeVJlc3VsdChcbiAgICAgICAgICBxdWVyeUlkLFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIG5vIHF1ZXJ5IHRvIHNlbmQgdG8gdGhlIHNlcnZlciwgd2Ugc2hvdWxkIHJldHVybiB0aGUgcmVzdWx0XG4gICAgLy8gZm91bmQgd2l0aGluIHRoZSBzdG9yZS5cbiAgICByZXR1cm4geyBkYXRhOiBzdG9yZVJlc3VsdCB9O1xuICB9XG5cbiAgcHJpdmF0ZSBtYXJrUXVlcnlSZXN1bHQoXG4gICAgcXVlcnlJZDogc3RyaW5nLFxuICAgIHJlc3VsdDogRXhlY3V0aW9uUmVzdWx0LFxuICAgIHtcbiAgICAgIGZldGNoUG9saWN5LFxuICAgICAgdmFyaWFibGVzLFxuICAgICAgZXJyb3JQb2xpY3ksXG4gICAgfTogV2F0Y2hRdWVyeU9wdGlvbnMsXG4gICAgZmV0Y2hNb3JlRm9yUXVlcnlJZD86IHN0cmluZyxcbiAgKSB7XG4gICAgaWYgKGZldGNoUG9saWN5ID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICB0aGlzLnNldFF1ZXJ5KHF1ZXJ5SWQsICgpID0+ICh7XG4gICAgICAgIG5ld0RhdGE6IHsgcmVzdWx0OiByZXN1bHQuZGF0YSwgY29tcGxldGU6IHRydWUgfSxcbiAgICAgIH0pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhU3RvcmUubWFya1F1ZXJ5UmVzdWx0KFxuICAgICAgICByZXN1bHQsXG4gICAgICAgIHRoaXMuZ2V0UXVlcnkocXVlcnlJZCkuZG9jdW1lbnQhLFxuICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQsXG4gICAgICAgIGVycm9yUG9saWN5ID09PSAnaWdub3JlJyB8fCBlcnJvclBvbGljeSA9PT0gJ2FsbCcsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJldHVybnMgYSBxdWVyeSBsaXN0ZW5lciB0aGF0IHdpbGwgdXBkYXRlIHRoZSBnaXZlbiBvYnNlcnZlciBiYXNlZCBvbiB0aGVcbiAgLy8gcmVzdWx0cyAob3IgbGFjayB0aGVyZW9mKSBmb3IgYSBwYXJ0aWN1bGFyIHF1ZXJ5LlxuICBwdWJsaWMgcXVlcnlMaXN0ZW5lckZvck9ic2VydmVyPFQ+KFxuICAgIHF1ZXJ5SWQ6IHN0cmluZyxcbiAgICBvcHRpb25zOiBXYXRjaFF1ZXJ5T3B0aW9ucyxcbiAgICBvYnNlcnZlcjogT2JzZXJ2ZXI8QXBvbGxvUXVlcnlSZXN1bHQ8VD4+LFxuICApOiBRdWVyeUxpc3RlbmVyIHtcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kOiAnbmV4dCcgfCAnZXJyb3InLCBhcmd1bWVudDogYW55KSB7XG4gICAgICBpZiAob2JzZXJ2ZXJbbWV0aG9kXSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG9ic2VydmVyW21ldGhvZF0hKGFyZ3VtZW50KTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGludmFyaWFudC5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09ICdlcnJvcicpIHtcbiAgICAgICAgaW52YXJpYW50LmVycm9yKGFyZ3VtZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgcXVlcnlTdG9yZVZhbHVlOiBRdWVyeVN0b3JlVmFsdWUsXG4gICAgICBuZXdEYXRhPzogQ2FjaGUuRGlmZlJlc3VsdDxUPixcbiAgICApID0+IHtcbiAgICAgIC8vIHdlJ3JlIGdvaW5nIHRvIHRha2UgYSBsb29rIGF0IHRoZSBkYXRhLCBzbyB0aGUgcXVlcnkgaXMgbm8gbG9uZ2VyIGludmFsaWRhdGVkXG4gICAgICB0aGlzLmludmFsaWRhdGUocXVlcnlJZCwgZmFsc2UpO1xuXG4gICAgICAvLyBUaGUgcXVlcnkgc3RvcmUgdmFsdWUgY2FuIGJlIHVuZGVmaW5lZCBpbiB0aGUgZXZlbnQgb2YgYSBzdG9yZVxuICAgICAgLy8gcmVzZXQuXG4gICAgICBpZiAoIXF1ZXJ5U3RvcmVWYWx1ZSkgcmV0dXJuO1xuXG4gICAgICBjb25zdCB7IG9ic2VydmFibGVRdWVyeSwgZG9jdW1lbnQgfSA9IHRoaXMuZ2V0UXVlcnkocXVlcnlJZCk7XG5cbiAgICAgIGNvbnN0IGZldGNoUG9saWN5ID0gb2JzZXJ2YWJsZVF1ZXJ5XG4gICAgICAgID8gb2JzZXJ2YWJsZVF1ZXJ5Lm9wdGlvbnMuZmV0Y2hQb2xpY3lcbiAgICAgICAgOiBvcHRpb25zLmZldGNoUG9saWN5O1xuXG4gICAgICAvLyBkb24ndCB3YXRjaCB0aGUgc3RvcmUgZm9yIHF1ZXJpZXMgb24gc3RhbmRieVxuICAgICAgaWYgKGZldGNoUG9saWN5ID09PSAnc3RhbmRieScpIHJldHVybjtcblxuICAgICAgY29uc3QgbG9hZGluZyA9IGlzTmV0d29ya1JlcXVlc3RJbkZsaWdodChxdWVyeVN0b3JlVmFsdWUubmV0d29ya1N0YXR1cyk7XG4gICAgICBjb25zdCBsYXN0UmVzdWx0ID0gb2JzZXJ2YWJsZVF1ZXJ5ICYmIG9ic2VydmFibGVRdWVyeS5nZXRMYXN0UmVzdWx0KCk7XG5cbiAgICAgIGNvbnN0IG5ldHdvcmtTdGF0dXNDaGFuZ2VkID0gISEoXG4gICAgICAgIGxhc3RSZXN1bHQgJiZcbiAgICAgICAgbGFzdFJlc3VsdC5uZXR3b3JrU3RhdHVzICE9PSBxdWVyeVN0b3JlVmFsdWUubmV0d29ya1N0YXR1c1xuICAgICAgKTtcblxuICAgICAgY29uc3Qgc2hvdWxkTm90aWZ5SWZMb2FkaW5nID1cbiAgICAgICAgb3B0aW9ucy5yZXR1cm5QYXJ0aWFsRGF0YSB8fFxuICAgICAgICAoIW5ld0RhdGEgJiYgcXVlcnlTdG9yZVZhbHVlLnByZXZpb3VzVmFyaWFibGVzKSB8fFxuICAgICAgICAobmV0d29ya1N0YXR1c0NoYW5nZWQgJiYgb3B0aW9ucy5ub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2UpIHx8XG4gICAgICAgIGZldGNoUG9saWN5ID09PSAnY2FjaGUtb25seScgfHxcbiAgICAgICAgZmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1hbmQtbmV0d29yayc7XG5cbiAgICAgIGlmIChsb2FkaW5nICYmICFzaG91bGROb3RpZnlJZkxvYWRpbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBoYXNHcmFwaFFMRXJyb3JzID0gaXNOb25FbXB0eUFycmF5KHF1ZXJ5U3RvcmVWYWx1ZS5ncmFwaFFMRXJyb3JzKTtcblxuICAgICAgY29uc3QgZXJyb3JQb2xpY3k6IEVycm9yUG9saWN5ID0gb2JzZXJ2YWJsZVF1ZXJ5XG4gICAgICAgICYmIG9ic2VydmFibGVRdWVyeS5vcHRpb25zLmVycm9yUG9saWN5XG4gICAgICAgIHx8IG9wdGlvbnMuZXJyb3JQb2xpY3lcbiAgICAgICAgfHwgJ25vbmUnO1xuXG4gICAgICAvLyBJZiB3ZSBoYXZlIGVpdGhlciBhIEdyYXBoUUwgZXJyb3Igb3IgYSBuZXR3b3JrIGVycm9yLCB3ZSBjcmVhdGVcbiAgICAgIC8vIGFuIGVycm9yIGFuZCB0ZWxsIHRoZSBvYnNlcnZlciBhYm91dCBpdC5cbiAgICAgIGlmIChlcnJvclBvbGljeSA9PT0gJ25vbmUnICYmIGhhc0dyYXBoUUxFcnJvcnMgfHwgcXVlcnlTdG9yZVZhbHVlLm5ldHdvcmtFcnJvcikge1xuICAgICAgICByZXR1cm4gaW52b2tlKCdlcnJvcicsIG5ldyBBcG9sbG9FcnJvcih7XG4gICAgICAgICAgZ3JhcGhRTEVycm9yczogcXVlcnlTdG9yZVZhbHVlLmdyYXBoUUxFcnJvcnMsXG4gICAgICAgICAgbmV0d29ya0Vycm9yOiBxdWVyeVN0b3JlVmFsdWUubmV0d29ya0Vycm9yLFxuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBkYXRhOiBhbnk7XG4gICAgICAgIGxldCBpc01pc3Npbmc6IGJvb2xlYW47XG5cbiAgICAgICAgaWYgKG5ld0RhdGEpIHtcbiAgICAgICAgICAvLyBBcyBsb25nIGFzIHdlJ3JlIHVzaW5nIHRoZSBjYWNoZSwgY2xlYXIgb3V0IHRoZSBsYXRlc3RcbiAgICAgICAgICAvLyBgbmV3RGF0YWAsIHNpbmNlIGl0IHdpbGwgbm93IGJlY29tZSB0aGUgY3VycmVudCBkYXRhLiBXZSBuZWVkXG4gICAgICAgICAgLy8gdG8ga2VlcCB0aGUgYG5ld0RhdGFgIHN0b3JlZCB3aXRoIHRoZSBxdWVyeSB3aGVuIHVzaW5nXG4gICAgICAgICAgLy8gYG5vLWNhY2hlYCBzaW5jZSBgZ2V0Q3VycmVudFF1ZXJ5UmVzdWx0YCBhdHRlbXBzIHRvIHB1bGwgZnJvbVxuICAgICAgICAgIC8vIGBuZXdEYXRhYCBmaXJzdCwgZm9sbG93aW5nIGJ5IHRyeWluZyB0aGUgY2FjaGUgKHdoaWNoIHdvbid0XG4gICAgICAgICAgLy8gZmluZCBhIGhpdCBmb3IgYG5vLWNhY2hlYCkuXG4gICAgICAgICAgaWYgKGZldGNoUG9saWN5ICE9PSAnbm8tY2FjaGUnICYmIGZldGNoUG9saWN5ICE9PSAnbmV0d29yay1vbmx5Jykge1xuICAgICAgICAgICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoKSA9PiAoeyBuZXdEYXRhOiBudWxsIH0pKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhID0gbmV3RGF0YS5yZXN1bHQ7XG4gICAgICAgICAgaXNNaXNzaW5nID0gIW5ld0RhdGEuY29tcGxldGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgbGFzdEVycm9yID0gb2JzZXJ2YWJsZVF1ZXJ5ICYmIG9ic2VydmFibGVRdWVyeS5nZXRMYXN0RXJyb3IoKTtcbiAgICAgICAgICBjb25zdCBlcnJvclN0YXR1c0NoYW5nZWQgPVxuICAgICAgICAgICAgZXJyb3JQb2xpY3kgIT09ICdub25lJyAmJlxuICAgICAgICAgICAgKGxhc3RFcnJvciAmJiBsYXN0RXJyb3IuZ3JhcGhRTEVycm9ycykgIT09XG4gICAgICAgICAgICAgIHF1ZXJ5U3RvcmVWYWx1ZS5ncmFwaFFMRXJyb3JzO1xuXG4gICAgICAgICAgaWYgKGxhc3RSZXN1bHQgJiYgbGFzdFJlc3VsdC5kYXRhICYmICFlcnJvclN0YXR1c0NoYW5nZWQpIHtcbiAgICAgICAgICAgIGRhdGEgPSBsYXN0UmVzdWx0LmRhdGE7XG4gICAgICAgICAgICBpc01pc3NpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZGlmZlJlc3VsdCA9IHRoaXMuZGF0YVN0b3JlLmdldENhY2hlKCkuZGlmZih7XG4gICAgICAgICAgICAgIHF1ZXJ5OiBkb2N1bWVudCBhcyBEb2N1bWVudE5vZGUsXG4gICAgICAgICAgICAgIHZhcmlhYmxlczpcbiAgICAgICAgICAgICAgICBxdWVyeVN0b3JlVmFsdWUucHJldmlvdXNWYXJpYWJsZXMgfHxcbiAgICAgICAgICAgICAgICBxdWVyeVN0b3JlVmFsdWUudmFyaWFibGVzLFxuICAgICAgICAgICAgICByZXR1cm5QYXJ0aWFsRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgb3B0aW1pc3RpYzogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBkYXRhID0gZGlmZlJlc3VsdC5yZXN1bHQ7XG4gICAgICAgICAgICBpc01pc3NpbmcgPSAhZGlmZlJlc3VsdC5jb21wbGV0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBzb21lIGRhdGEgbWlzc2luZyBhbmQgdGhlIHVzZXIgaGFzIHRvbGQgdXMgdGhhdCB0aGV5XG4gICAgICAgIC8vIGRvIG5vdCB0b2xlcmF0ZSBwYXJ0aWFsIGRhdGEgdGhlbiB3ZSB3YW50IHRvIHJldHVybiB0aGUgcHJldmlvdXNcbiAgICAgICAgLy8gcmVzdWx0IGFuZCBtYXJrIGl0IGFzIHN0YWxlLlxuICAgICAgICBjb25zdCBzdGFsZSA9IGlzTWlzc2luZyAmJiAhKFxuICAgICAgICAgIG9wdGlvbnMucmV0dXJuUGFydGlhbERhdGEgfHxcbiAgICAgICAgICBmZXRjaFBvbGljeSA9PT0gJ2NhY2hlLW9ubHknXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgcmVzdWx0RnJvbVN0b3JlOiBBcG9sbG9RdWVyeVJlc3VsdDxUPiA9IHtcbiAgICAgICAgICBkYXRhOiBzdGFsZSA/IGxhc3RSZXN1bHQgJiYgbGFzdFJlc3VsdC5kYXRhIDogZGF0YSxcbiAgICAgICAgICBsb2FkaW5nLFxuICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IHF1ZXJ5U3RvcmVWYWx1ZS5uZXR3b3JrU3RhdHVzLFxuICAgICAgICAgIHN0YWxlLFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGlmIHRoZSBxdWVyeSB3YW50cyB1cGRhdGVzIG9uIGVycm9ycyB3ZSBuZWVkIHRvIGFkZCBpdCB0byB0aGUgcmVzdWx0XG4gICAgICAgIGlmIChlcnJvclBvbGljeSA9PT0gJ2FsbCcgJiYgaGFzR3JhcGhRTEVycm9ycykge1xuICAgICAgICAgIHJlc3VsdEZyb21TdG9yZS5lcnJvcnMgPSBxdWVyeVN0b3JlVmFsdWUuZ3JhcGhRTEVycm9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGludm9rZSgnbmV4dCcsIHJlc3VsdEZyb21TdG9yZSk7XG5cbiAgICAgIH0gY2F0Y2ggKG5ldHdvcmtFcnJvcikge1xuICAgICAgICBpbnZva2UoJ2Vycm9yJywgbmV3IEFwb2xsb0Vycm9yKHsgbmV0d29ya0Vycm9yIH0pKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSB0cmFuc2Zvcm1DYWNoZSA9IG5ldyAoY2FuVXNlV2Vha01hcCA/IFdlYWtNYXAgOiBNYXApPFxuICAgIERvY3VtZW50Tm9kZSxcbiAgICBSZWFkb25seTx7XG4gICAgICBkb2N1bWVudDogUmVhZG9ubHk8RG9jdW1lbnROb2RlPjtcbiAgICAgIGhhc0NsaWVudEV4cG9ydHM6IGJvb2xlYW47XG4gICAgICBoYXNGb3JjZWRSZXNvbHZlcnM6IGJvb2xlYW47XG4gICAgICBjbGllbnRRdWVyeTogUmVhZG9ubHk8RG9jdW1lbnROb2RlPiB8IG51bGw7XG4gICAgICBzZXJ2ZXJRdWVyeTogUmVhZG9ubHk8RG9jdW1lbnROb2RlPiB8IG51bGw7XG4gICAgICBkZWZhdWx0VmFyczogUmVhZG9ubHk8T3BlcmF0aW9uVmFyaWFibGVzPjtcbiAgICB9PlxuICA+KCk7XG5cbiAgcHVibGljIHRyYW5zZm9ybShkb2N1bWVudDogRG9jdW1lbnROb2RlKSB7XG4gICAgY29uc3QgeyB0cmFuc2Zvcm1DYWNoZSB9ID0gdGhpcztcblxuICAgIGlmICghdHJhbnNmb3JtQ2FjaGUuaGFzKGRvY3VtZW50KSkge1xuICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmRhdGFTdG9yZS5nZXRDYWNoZSgpO1xuICAgICAgY29uc3QgdHJhbnNmb3JtZWQgPSBjYWNoZS50cmFuc2Zvcm1Eb2N1bWVudChkb2N1bWVudCk7XG4gICAgICBjb25zdCBmb3JMaW5rID0gcmVtb3ZlQ29ubmVjdGlvbkRpcmVjdGl2ZUZyb21Eb2N1bWVudChcbiAgICAgICAgY2FjaGUudHJhbnNmb3JtRm9yTGluayh0cmFuc2Zvcm1lZCkpO1xuXG4gICAgICBjb25zdCBjbGllbnRRdWVyeSA9IHRoaXMubG9jYWxTdGF0ZS5jbGllbnRRdWVyeSh0cmFuc2Zvcm1lZCk7XG4gICAgICBjb25zdCBzZXJ2ZXJRdWVyeSA9IHRoaXMubG9jYWxTdGF0ZS5zZXJ2ZXJRdWVyeShmb3JMaW5rKTtcblxuICAgICAgY29uc3QgY2FjaGVFbnRyeSA9IHtcbiAgICAgICAgZG9jdW1lbnQ6IHRyYW5zZm9ybWVkLFxuICAgICAgICAvLyBUT0RPIFRoZXNlIHR3byBjYWxscyAoaGFzQ2xpZW50RXhwb3J0cyBhbmQgc2hvdWxkRm9yY2VSZXNvbHZlcnMpXG4gICAgICAgIC8vIGNvdWxkIHByb2JhYmx5IGJlIG1lcmdlZCBpbnRvIGEgc2luZ2xlIHRyYXZlcnNhbC5cbiAgICAgICAgaGFzQ2xpZW50RXhwb3J0czogaGFzQ2xpZW50RXhwb3J0cyh0cmFuc2Zvcm1lZCksXG4gICAgICAgIGhhc0ZvcmNlZFJlc29sdmVyczogdGhpcy5sb2NhbFN0YXRlLnNob3VsZEZvcmNlUmVzb2x2ZXJzKHRyYW5zZm9ybWVkKSxcbiAgICAgICAgY2xpZW50UXVlcnksXG4gICAgICAgIHNlcnZlclF1ZXJ5LFxuICAgICAgICBkZWZhdWx0VmFyczogZ2V0RGVmYXVsdFZhbHVlcyhcbiAgICAgICAgICBnZXRPcGVyYXRpb25EZWZpbml0aW9uKHRyYW5zZm9ybWVkKVxuICAgICAgICApIGFzIE9wZXJhdGlvblZhcmlhYmxlcyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IGFkZCA9IChkb2M6IERvY3VtZW50Tm9kZSB8IG51bGwpID0+IHtcbiAgICAgICAgaWYgKGRvYyAmJiAhdHJhbnNmb3JtQ2FjaGUuaGFzKGRvYykpIHtcbiAgICAgICAgICB0cmFuc2Zvcm1DYWNoZS5zZXQoZG9jLCBjYWNoZUVudHJ5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQWRkIGNhY2hlRW50cnkgdG8gdGhlIHRyYW5zZm9ybUNhY2hlIHVzaW5nIHNldmVyYWwgZGlmZmVyZW50IGtleXMsXG4gICAgICAvLyBzaW5jZSBhbnkgb25lIG9mIHRoZXNlIGRvY3VtZW50cyBjb3VsZCBlbmQgdXAgZ2V0dGluZyBwYXNzZWQgdG8gdGhlXG4gICAgICAvLyB0cmFuc2Zvcm0gbWV0aG9kIGFnYWluIGluIHRoZSBmdXR1cmUuXG4gICAgICBhZGQoZG9jdW1lbnQpO1xuICAgICAgYWRkKHRyYW5zZm9ybWVkKTtcbiAgICAgIGFkZChjbGllbnRRdWVyeSk7XG4gICAgICBhZGQoc2VydmVyUXVlcnkpO1xuICAgIH1cblxuICAgIHJldHVybiB0cmFuc2Zvcm1DYWNoZS5nZXQoZG9jdW1lbnQpITtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0VmFyaWFibGVzKFxuICAgIGRvY3VtZW50OiBEb2N1bWVudE5vZGUsXG4gICAgdmFyaWFibGVzPzogT3BlcmF0aW9uVmFyaWFibGVzLFxuICApOiBPcGVyYXRpb25WYXJpYWJsZXMge1xuICAgIHJldHVybiB7XG4gICAgICAuLi50aGlzLnRyYW5zZm9ybShkb2N1bWVudCkuZGVmYXVsdFZhcnMsXG4gICAgICAuLi52YXJpYWJsZXMsXG4gICAgfTtcbiAgfVxuXG4gIC8vIFRoZSBzaG91bGRTdWJzY3JpYmUgb3B0aW9uIGlzIGEgdGVtcG9yYXJ5IGZpeCB0aGF0IHRlbGxzIHVzIHdoZXRoZXIgd2F0Y2hRdWVyeSB3YXMgY2FsbGVkXG4gIC8vIGRpcmVjdGx5IChpLmUuIHRocm91Z2ggQXBvbGxvQ2xpZW50KSBvciB0aHJvdWdoIHRoZSBxdWVyeSBtZXRob2Qgd2l0aGluIFF1ZXJ5TWFuYWdlci5cbiAgLy8gQ3VycmVudGx5LCB0aGUgcXVlcnkgbWV0aG9kIHVzZXMgd2F0Y2hRdWVyeSBpbiBvcmRlciB0byBoYW5kbGUgbm9uLW5ldHdvcmsgZXJyb3JzIGNvcnJlY3RseVxuICAvLyBidXQgd2UgZG9uJ3Qgd2FudCB0byBrZWVwIHRyYWNrIG9ic2VydmFibGVzIGlzc3VlZCBmb3IgdGhlIHF1ZXJ5IG1ldGhvZCBzaW5jZSB0aG9zZSBhcmVuJ3RcbiAgLy8gc3VwcG9zZWQgdG8gYmUgcmVmZXRjaGVkIGluIHRoZSBldmVudCBvZiBhIHN0b3JlIHJlc2V0LiBPbmNlIHdlIHVuaWZ5IGVycm9yIGhhbmRsaW5nIGZvclxuICAvLyBuZXR3b3JrIGVycm9ycyBhbmQgbm9uLW5ldHdvcmsgZXJyb3JzLCB0aGUgc2hvdWxkU3Vic2NyaWJlIG9wdGlvbiB3aWxsIGdvIGF3YXkuXG5cbiAgcHVibGljIHdhdGNoUXVlcnk8VCwgVFZhcmlhYmxlcyA9IE9wZXJhdGlvblZhcmlhYmxlcz4oXG4gICAgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnMsXG4gICAgc2hvdWxkU3Vic2NyaWJlID0gdHJ1ZSxcbiAgKTogT2JzZXJ2YWJsZVF1ZXJ5PFQsIFRWYXJpYWJsZXM+IHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBvcHRpb25zLmZldGNoUG9saWN5ICE9PSAnc3RhbmRieScsXG4gICAgICAnY2xpZW50LndhdGNoUXVlcnkgY2Fubm90IGJlIGNhbGxlZCB3aXRoIGZldGNoUG9saWN5IHNldCB0byBcInN0YW5kYnlcIicsXG4gICAgKTtcblxuICAgIC8vIGFzc2lnbiB2YXJpYWJsZSBkZWZhdWx0IHZhbHVlcyBpZiBzdXBwbGllZFxuICAgIG9wdGlvbnMudmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMob3B0aW9ucy5xdWVyeSwgb3B0aW9ucy52YXJpYWJsZXMpO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLm5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdGlvbnMubm90aWZ5T25OZXR3b3JrU3RhdHVzQ2hhbmdlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgbGV0IHRyYW5zZm9ybWVkT3B0aW9ucyA9IHsgLi4ub3B0aW9ucyB9IGFzIFdhdGNoUXVlcnlPcHRpb25zPFRWYXJpYWJsZXM+O1xuXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlUXVlcnk8VCwgVFZhcmlhYmxlcz4oe1xuICAgICAgcXVlcnlNYW5hZ2VyOiB0aGlzLFxuICAgICAgb3B0aW9uczogdHJhbnNmb3JtZWRPcHRpb25zLFxuICAgICAgc2hvdWxkU3Vic2NyaWJlOiBzaG91bGRTdWJzY3JpYmUsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcXVlcnk8VD4ob3B0aW9uczogUXVlcnlPcHRpb25zKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIGludmFyaWFudChcbiAgICAgIG9wdGlvbnMucXVlcnksXG4gICAgICAncXVlcnkgb3B0aW9uIGlzIHJlcXVpcmVkLiBZb3UgbXVzdCBzcGVjaWZ5IHlvdXIgR3JhcGhRTCBkb2N1bWVudCAnICtcbiAgICAgICAgJ2luIHRoZSBxdWVyeSBvcHRpb24uJyxcbiAgICApO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgb3B0aW9ucy5xdWVyeS5raW5kID09PSAnRG9jdW1lbnQnLFxuICAgICAgJ1lvdSBtdXN0IHdyYXAgdGhlIHF1ZXJ5IHN0cmluZyBpbiBhIFwiZ3FsXCIgdGFnLicsXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEob3B0aW9ucyBhcyBhbnkpLnJldHVyblBhcnRpYWxEYXRhLFxuICAgICAgJ3JldHVyblBhcnRpYWxEYXRhIG9wdGlvbiBvbmx5IHN1cHBvcnRlZCBvbiB3YXRjaFF1ZXJ5LicsXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEob3B0aW9ucyBhcyBhbnkpLnBvbGxJbnRlcnZhbCxcbiAgICAgICdwb2xsSW50ZXJ2YWwgb3B0aW9uIG9ubHkgc3VwcG9ydGVkIG9uIHdhdGNoUXVlcnkuJyxcbiAgICApO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCB3YXRjaGVkUXVlcnkgPSB0aGlzLndhdGNoUXVlcnk8VD4ob3B0aW9ucywgZmFsc2UpO1xuICAgICAgdGhpcy5mZXRjaFF1ZXJ5UmVqZWN0Rm5zLnNldChgcXVlcnk6JHt3YXRjaGVkUXVlcnkucXVlcnlJZH1gLCByZWplY3QpO1xuICAgICAgd2F0Y2hlZFF1ZXJ5XG4gICAgICAgIC5yZXN1bHQoKVxuICAgICAgICAudGhlbihyZXNvbHZlLCByZWplY3QpXG4gICAgICAgIC8vIFNpbmNlIG5laXRoZXIgcmVzb2x2ZSBub3IgcmVqZWN0IHRocm93IG9yIHJldHVybiBhIHZhbHVlLCB0aGlzIC50aGVuXG4gICAgICAgIC8vIGhhbmRsZXIgaXMgZ3VhcmFudGVlZCB0byBleGVjdXRlLiBOb3RlIHRoYXQgaXQgZG9lc24ndCByZWFsbHkgbWF0dGVyXG4gICAgICAgIC8vIHdoZW4gd2UgcmVtb3ZlIHRoZSByZWplY3QgZnVuY3Rpb24gZnJvbSB0aGlzLmZldGNoUXVlcnlSZWplY3RGbnMsXG4gICAgICAgIC8vIHNpbmNlIHJlc29sdmUgYW5kIHJlamVjdCBhcmUgbXV0dWFsbHkgaWRlbXBvdGVudC4gSW4gZmFjdCwgaXQgd291bGRcbiAgICAgICAgLy8gbm90IGJlIGluY29ycmVjdCB0byBsZXQgcmVqZWN0IGZ1bmN0aW9ucyBhY2N1bXVsYXRlIG92ZXIgdGltZTsgaXQnc1xuICAgICAgICAvLyBqdXN0IGEgd2FzdGUgb2YgbWVtb3J5LlxuICAgICAgICAudGhlbigoKSA9PlxuICAgICAgICAgIHRoaXMuZmV0Y2hRdWVyeVJlamVjdEZucy5kZWxldGUoYHF1ZXJ5OiR7d2F0Y2hlZFF1ZXJ5LnF1ZXJ5SWR9YCksXG4gICAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgZ2VuZXJhdGVRdWVyeUlkKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5pZENvdW50ZXIrKyk7XG4gIH1cblxuICBwdWJsaWMgc3RvcFF1ZXJ5SW5TdG9yZShxdWVyeUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnN0b3BRdWVyeUluU3RvcmVOb0Jyb2FkY2FzdChxdWVyeUlkKTtcbiAgICB0aGlzLmJyb2FkY2FzdFF1ZXJpZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RvcFF1ZXJ5SW5TdG9yZU5vQnJvYWRjYXN0KHF1ZXJ5SWQ6IHN0cmluZykge1xuICAgIHRoaXMuc3RvcFBvbGxpbmdRdWVyeShxdWVyeUlkKTtcbiAgICB0aGlzLnF1ZXJ5U3RvcmUuc3RvcFF1ZXJ5KHF1ZXJ5SWQpO1xuICAgIHRoaXMuaW52YWxpZGF0ZShxdWVyeUlkKTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRRdWVyeUxpc3RlbmVyKHF1ZXJ5SWQ6IHN0cmluZywgbGlzdGVuZXI6IFF1ZXJ5TGlzdGVuZXIpIHtcbiAgICB0aGlzLnNldFF1ZXJ5KHF1ZXJ5SWQsICh7IGxpc3RlbmVycyB9KSA9PiB7XG4gICAgICBsaXN0ZW5lcnMuYWRkKGxpc3RlbmVyKTtcbiAgICAgIHJldHVybiB7IGludmFsaWRhdGVkOiBmYWxzZSB9O1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVF1ZXJ5V2F0Y2goXG4gICAgcXVlcnlJZDogc3RyaW5nLFxuICAgIGRvY3VtZW50OiBEb2N1bWVudE5vZGUsXG4gICAgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnMsXG4gICkge1xuICAgIGNvbnN0IHsgY2FuY2VsIH0gPSB0aGlzLmdldFF1ZXJ5KHF1ZXJ5SWQpO1xuICAgIGlmIChjYW5jZWwpIGNhbmNlbCgpO1xuICAgIGNvbnN0IHByZXZpb3VzUmVzdWx0ID0gKCkgPT4ge1xuICAgICAgbGV0IHByZXZpb3VzUmVzdWx0ID0gbnVsbDtcbiAgICAgIGNvbnN0IHsgb2JzZXJ2YWJsZVF1ZXJ5IH0gPSB0aGlzLmdldFF1ZXJ5KHF1ZXJ5SWQpO1xuICAgICAgaWYgKG9ic2VydmFibGVRdWVyeSkge1xuICAgICAgICBjb25zdCBsYXN0UmVzdWx0ID0gb2JzZXJ2YWJsZVF1ZXJ5LmdldExhc3RSZXN1bHQoKTtcbiAgICAgICAgaWYgKGxhc3RSZXN1bHQpIHtcbiAgICAgICAgICBwcmV2aW91c1Jlc3VsdCA9IGxhc3RSZXN1bHQuZGF0YTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNSZXN1bHQ7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmUuZ2V0Q2FjaGUoKS53YXRjaCh7XG4gICAgICBxdWVyeTogZG9jdW1lbnQgYXMgRG9jdW1lbnROb2RlLFxuICAgICAgdmFyaWFibGVzOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgIG9wdGltaXN0aWM6IHRydWUsXG4gICAgICBwcmV2aW91c1Jlc3VsdCxcbiAgICAgIGNhbGxiYWNrOiBuZXdEYXRhID0+IHtcbiAgICAgICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoKSA9PiAoeyBpbnZhbGlkYXRlZDogdHJ1ZSwgbmV3RGF0YSB9KSk7XG4gICAgICB9LFxuICAgIH0pO1xuICB9XG5cbiAgLy8gQWRkcyBhbiBPYnNlcnZhYmxlUXVlcnkgdG8gdGhpcy5vYnNlcnZhYmxlUXVlcmllcyBhbmQgdG8gdGhpcy5vYnNlcnZhYmxlUXVlcmllc0J5TmFtZS5cbiAgcHVibGljIGFkZE9ic2VydmFibGVRdWVyeTxUPihcbiAgICBxdWVyeUlkOiBzdHJpbmcsXG4gICAgb2JzZXJ2YWJsZVF1ZXJ5OiBPYnNlcnZhYmxlUXVlcnk8VD4sXG4gICkge1xuICAgIHRoaXMuc2V0UXVlcnkocXVlcnlJZCwgKCkgPT4gKHsgb2JzZXJ2YWJsZVF1ZXJ5IH0pKTtcbiAgfVxuXG4gIHB1YmxpYyByZW1vdmVPYnNlcnZhYmxlUXVlcnkocXVlcnlJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgeyBjYW5jZWwgfSA9IHRoaXMuZ2V0UXVlcnkocXVlcnlJZCk7XG4gICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoKSA9PiAoeyBvYnNlcnZhYmxlUXVlcnk6IG51bGwgfSkpO1xuICAgIGlmIChjYW5jZWwpIGNhbmNlbCgpO1xuICB9XG5cbiAgcHVibGljIGNsZWFyU3RvcmUoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgLy8gQmVmb3JlIHdlIGhhdmUgc2VudCB0aGUgcmVzZXQgYWN0aW9uIHRvIHRoZSBzdG9yZSxcbiAgICAvLyB3ZSBjYW4gbm8gbG9uZ2VyIHJlbHkgb24gdGhlIHJlc3VsdHMgcmV0dXJuZWQgYnkgaW4tZmxpZ2h0XG4gICAgLy8gcmVxdWVzdHMgc2luY2UgdGhlc2UgbWF5IGRlcGVuZCBvbiB2YWx1ZXMgdGhhdCBwcmV2aW91c2x5IGV4aXN0ZWRcbiAgICAvLyBpbiB0aGUgZGF0YSBwb3J0aW9uIG9mIHRoZSBzdG9yZS4gU28sIHdlIGNhbmNlbCB0aGUgcHJvbWlzZXMgYW5kIG9ic2VydmVyc1xuICAgIC8vIHRoYXQgd2UgaGF2ZSBpc3N1ZWQgc28gZmFyIGFuZCBub3QgeWV0IHJlc29sdmVkIChpbiB0aGUgY2FzZSBvZlxuICAgIC8vIHF1ZXJpZXMpLlxuICAgIHRoaXMuZmV0Y2hRdWVyeVJlamVjdEZucy5mb3JFYWNoKHJlamVjdCA9PiB7XG4gICAgICByZWplY3QobmV3IEludmFyaWFudEVycm9yKFxuICAgICAgICAnU3RvcmUgcmVzZXQgd2hpbGUgcXVlcnkgd2FzIGluIGZsaWdodCAobm90IGNvbXBsZXRlZCBpbiBsaW5rIGNoYWluKScsXG4gICAgICApKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc2V0SWRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIHRoaXMucXVlcmllcy5mb3JFYWNoKCh7IG9ic2VydmFibGVRdWVyeSB9LCBxdWVyeUlkKSA9PiB7XG4gICAgICBpZiAob2JzZXJ2YWJsZVF1ZXJ5KSByZXNldElkcy5wdXNoKHF1ZXJ5SWQpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5xdWVyeVN0b3JlLnJlc2V0KHJlc2V0SWRzKTtcbiAgICB0aGlzLm11dGF0aW9uU3RvcmUucmVzZXQoKTtcblxuICAgIC8vIGJlZ2luIHJlbW92aW5nIGRhdGEgZnJvbSB0aGUgc3RvcmVcbiAgICByZXR1cm4gdGhpcy5kYXRhU3RvcmUucmVzZXQoKTtcbiAgfVxuXG4gIHB1YmxpYyByZXNldFN0b3JlKCk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8YW55PltdPiB7XG4gICAgLy8gU2ltaWxhcmx5LCB3ZSBoYXZlIHRvIGhhdmUgdG8gcmVmZXRjaCBlYWNoIG9mIHRoZSBxdWVyaWVzIGN1cnJlbnRseSBiZWluZ1xuICAgIC8vIG9ic2VydmVkLiBXZSByZWZldGNoIGluc3RlYWQgb2YgZXJyb3InaW5nIG9uIHRoZXNlIHNpbmNlIHRoZSBhc3N1bXB0aW9uIGlzIHRoYXRcbiAgICAvLyByZXNldHRpbmcgdGhlIHN0b3JlIGRvZXNuJ3QgZWxpbWluYXRlIHRoZSBuZWVkIGZvciB0aGUgcXVlcmllcyBjdXJyZW50bHkgYmVpbmdcbiAgICAvLyB3YXRjaGVkLiBJZiB0aGVyZSBpcyBhbiBleGlzdGluZyBxdWVyeSBpbiBmbGlnaHQgd2hlbiB0aGUgc3RvcmUgaXMgcmVzZXQsXG4gICAgLy8gdGhlIHByb21pc2UgZm9yIGl0IHdpbGwgYmUgcmVqZWN0ZWQgYW5kIGl0cyByZXN1bHRzIHdpbGwgbm90IGJlIHdyaXR0ZW4gdG8gdGhlXG4gICAgLy8gc3RvcmUuXG4gICAgcmV0dXJuIHRoaXMuY2xlYXJTdG9yZSgpLnRoZW4oKCkgPT4ge1xuICAgICAgcmV0dXJuIHRoaXMucmVGZXRjaE9ic2VydmFibGVRdWVyaWVzKCk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVGZXRjaE9ic2VydmFibGVRdWVyaWVzKFxuICAgIGluY2x1ZGVTdGFuZGJ5OiBib29sZWFuID0gZmFsc2UsXG4gICk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8YW55PltdPiB7XG4gICAgY29uc3Qgb2JzZXJ2YWJsZVF1ZXJ5UHJvbWlzZXM6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8YW55Pj5bXSA9IFtdO1xuXG4gICAgdGhpcy5xdWVyaWVzLmZvckVhY2goKHsgb2JzZXJ2YWJsZVF1ZXJ5IH0sIHF1ZXJ5SWQpID0+IHtcbiAgICAgIGlmIChvYnNlcnZhYmxlUXVlcnkpIHtcbiAgICAgICAgY29uc3QgZmV0Y2hQb2xpY3kgPSBvYnNlcnZhYmxlUXVlcnkub3B0aW9ucy5mZXRjaFBvbGljeTtcblxuICAgICAgICBvYnNlcnZhYmxlUXVlcnkucmVzZXRMYXN0UmVzdWx0cygpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZmV0Y2hQb2xpY3kgIT09ICdjYWNoZS1vbmx5JyAmJlxuICAgICAgICAgIChpbmNsdWRlU3RhbmRieSB8fCBmZXRjaFBvbGljeSAhPT0gJ3N0YW5kYnknKVxuICAgICAgICApIHtcbiAgICAgICAgICBvYnNlcnZhYmxlUXVlcnlQcm9taXNlcy5wdXNoKG9ic2VydmFibGVRdWVyeS5yZWZldGNoKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoKSA9PiAoeyBuZXdEYXRhOiBudWxsIH0pKTtcbiAgICAgICAgdGhpcy5pbnZhbGlkYXRlKHF1ZXJ5SWQpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwob2JzZXJ2YWJsZVF1ZXJ5UHJvbWlzZXMpO1xuICB9XG5cbiAgcHVibGljIG9ic2VydmVRdWVyeTxUPihcbiAgICBxdWVyeUlkOiBzdHJpbmcsXG4gICAgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnMsXG4gICAgb2JzZXJ2ZXI6IE9ic2VydmVyPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PixcbiAgKSB7XG4gICAgdGhpcy5hZGRRdWVyeUxpc3RlbmVyKFxuICAgICAgcXVlcnlJZCxcbiAgICAgIHRoaXMucXVlcnlMaXN0ZW5lckZvck9ic2VydmVyKHF1ZXJ5SWQsIG9wdGlvbnMsIG9ic2VydmVyKSxcbiAgICApO1xuICAgIHJldHVybiB0aGlzLmZldGNoUXVlcnk8VD4ocXVlcnlJZCwgb3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgc3RhcnRRdWVyeTxUPihcbiAgICBxdWVyeUlkOiBzdHJpbmcsXG4gICAgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnMsXG4gICAgbGlzdGVuZXI6IFF1ZXJ5TGlzdGVuZXIsXG4gICkge1xuICAgIGludmFyaWFudC53YXJuKFwiVGhlIFF1ZXJ5TWFuYWdlci5zdGFydFF1ZXJ5IG1ldGhvZCBoYXMgYmVlbiBkZXByZWNhdGVkXCIpO1xuXG4gICAgdGhpcy5hZGRRdWVyeUxpc3RlbmVyKHF1ZXJ5SWQsIGxpc3RlbmVyKTtcblxuICAgIHRoaXMuZmV0Y2hRdWVyeTxUPihxdWVyeUlkLCBvcHRpb25zKVxuICAgICAgLy8gYGZldGNoUXVlcnlgIHJldHVybnMgYSBQcm9taXNlLiBJbiBjYXNlIG9mIGEgZmFpbHVyZSBpdCBzaG91bGQgYmUgY2F1Y2h0IG9yIGVsc2UgdGhlXG4gICAgICAvLyBjb25zb2xlIHdpbGwgc2hvdyBhbiBgVW5jYXVnaHQgKGluIHByb21pc2UpYCBtZXNzYWdlLiBJZ25vcmUgdGhlIGVycm9yIGZvciBub3cuXG4gICAgICAuY2F0Y2goKCkgPT4gdW5kZWZpbmVkKTtcblxuICAgIHJldHVybiBxdWVyeUlkO1xuICB9XG5cbiAgcHVibGljIHN0YXJ0R3JhcGhRTFN1YnNjcmlwdGlvbjxUID0gYW55Pih7XG4gICAgcXVlcnksXG4gICAgZmV0Y2hQb2xpY3ksXG4gICAgdmFyaWFibGVzLFxuICB9OiBTdWJzY3JpcHRpb25PcHRpb25zKTogT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdDxUPj4ge1xuICAgIHF1ZXJ5ID0gdGhpcy50cmFuc2Zvcm0ocXVlcnkpLmRvY3VtZW50O1xuICAgIHZhcmlhYmxlcyA9IHRoaXMuZ2V0VmFyaWFibGVzKHF1ZXJ5LCB2YXJpYWJsZXMpO1xuXG4gICAgY29uc3QgbWFrZU9ic2VydmFibGUgPSAodmFyaWFibGVzOiBPcGVyYXRpb25WYXJpYWJsZXMpID0+XG4gICAgICB0aGlzLmdldE9ic2VydmFibGVGcm9tTGluazxUPihcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHt9LFxuICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgIGZhbHNlLFxuICAgICAgKS5tYXAocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKCFmZXRjaFBvbGljeSB8fCBmZXRjaFBvbGljeSAhPT0gJ25vLWNhY2hlJykge1xuICAgICAgICAgIHRoaXMuZGF0YVN0b3JlLm1hcmtTdWJzY3JpcHRpb25SZXN1bHQoXG4gICAgICAgICAgICByZXN1bHQsXG4gICAgICAgICAgICBxdWVyeSxcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdyYXBoUUxSZXN1bHRIYXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEFwb2xsb0Vycm9yKHtcbiAgICAgICAgICAgIGdyYXBoUUxFcnJvcnM6IHJlc3VsdC5lcnJvcnMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG5cbiAgICBpZiAodGhpcy50cmFuc2Zvcm0ocXVlcnkpLmhhc0NsaWVudEV4cG9ydHMpIHtcbiAgICAgIGNvbnN0IG9ic2VydmFibGVQcm9taXNlID0gdGhpcy5sb2NhbFN0YXRlLmFkZEV4cG9ydGVkVmFyaWFibGVzKFxuICAgICAgICBxdWVyeSxcbiAgICAgICAgdmFyaWFibGVzLFxuICAgICAgKS50aGVuKG1ha2VPYnNlcnZhYmxlKTtcblxuICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PihvYnNlcnZlciA9PiB7XG4gICAgICAgIGxldCBzdWI6IFN1YnNjcmlwdGlvbiB8IG51bGwgPSBudWxsO1xuICAgICAgICBvYnNlcnZhYmxlUHJvbWlzZS50aGVuKFxuICAgICAgICAgIG9ic2VydmFibGUgPT4gc3ViID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpLFxuICAgICAgICAgIG9ic2VydmVyLmVycm9yLFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gKCkgPT4gc3ViICYmIHN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1ha2VPYnNlcnZhYmxlKHZhcmlhYmxlcyk7XG4gIH1cblxuICBwdWJsaWMgc3RvcFF1ZXJ5KHF1ZXJ5SWQ6IHN0cmluZykge1xuICAgIHRoaXMuc3RvcFF1ZXJ5Tm9Ccm9hZGNhc3QocXVlcnlJZCk7XG4gICAgdGhpcy5icm9hZGNhc3RRdWVyaWVzKCk7XG4gIH1cblxuICBwcml2YXRlIHN0b3BRdWVyeU5vQnJvYWRjYXN0KHF1ZXJ5SWQ6IHN0cmluZykge1xuICAgIHRoaXMuc3RvcFF1ZXJ5SW5TdG9yZU5vQnJvYWRjYXN0KHF1ZXJ5SWQpO1xuICAgIHRoaXMucmVtb3ZlUXVlcnkocXVlcnlJZCk7XG4gIH1cblxuICBwdWJsaWMgcmVtb3ZlUXVlcnkocXVlcnlJZDogc3RyaW5nKSB7XG4gICAgLy8gdGVhcmRvd24gYWxsIGxpbmtzXG4gICAgLy8gQm90aCBgUXVlcnlNYW5hZ2VyLmZldGNoUmVxdWVzdGAgYW5kIGBRdWVyeU1hbmFnZXIucXVlcnlgIGNyZWF0ZSBzZXBhcmF0ZSBwcm9taXNlc1xuICAgIC8vIHRoYXQgZWFjaCBhZGQgdGhlaXIgcmVqZWN0IGZ1bmN0aW9ucyB0byBmZXRjaFF1ZXJ5UmVqZWN0Rm5zLlxuICAgIC8vIEEgcXVlcnkgY3JlYXRlZCB3aXRoIGBRdWVyeU1hbmFnZXIucXVlcnkoKWAgY291bGQgdHJpZ2dlciBhIGBRdWVyeU1hbmFnZXIuZmV0Y2hSZXF1ZXN0YC5cbiAgICAvLyBUaGUgc2FtZSBxdWVyeUlkIGNvdWxkIGhhdmUgdHdvIHJlamVjdGlvbiBmbnMgZm9yIHR3byBwcm9taXNlc1xuICAgIHRoaXMuZmV0Y2hRdWVyeVJlamVjdEZucy5kZWxldGUoYHF1ZXJ5OiR7cXVlcnlJZH1gKTtcbiAgICB0aGlzLmZldGNoUXVlcnlSZWplY3RGbnMuZGVsZXRlKGBmZXRjaFJlcXVlc3Q6JHtxdWVyeUlkfWApO1xuICAgIHRoaXMuZ2V0UXVlcnkocXVlcnlJZCkuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHggPT4geC51bnN1YnNjcmliZSgpKTtcbiAgICB0aGlzLnF1ZXJpZXMuZGVsZXRlKHF1ZXJ5SWQpO1xuICB9XG5cbiAgcHVibGljIGdldEN1cnJlbnRRdWVyeVJlc3VsdDxUPihcbiAgICBvYnNlcnZhYmxlUXVlcnk6IE9ic2VydmFibGVRdWVyeTxUPixcbiAgICBvcHRpbWlzdGljOiBib29sZWFuID0gdHJ1ZSxcbiAgKToge1xuICAgIGRhdGE6IFQgfCB1bmRlZmluZWQ7XG4gICAgcGFydGlhbDogYm9vbGVhbjtcbiAgfSB7XG4gICAgY29uc3QgeyB2YXJpYWJsZXMsIHF1ZXJ5LCBmZXRjaFBvbGljeSwgcmV0dXJuUGFydGlhbERhdGEgfSA9IG9ic2VydmFibGVRdWVyeS5vcHRpb25zO1xuICAgIGNvbnN0IGxhc3RSZXN1bHQgPSBvYnNlcnZhYmxlUXVlcnkuZ2V0TGFzdFJlc3VsdCgpO1xuICAgIGNvbnN0IHsgbmV3RGF0YSB9ID0gdGhpcy5nZXRRdWVyeShvYnNlcnZhYmxlUXVlcnkucXVlcnlJZCk7XG5cbiAgICBpZiAobmV3RGF0YSAmJiBuZXdEYXRhLmNvbXBsZXRlKSB7XG4gICAgICByZXR1cm4geyBkYXRhOiBuZXdEYXRhLnJlc3VsdCwgcGFydGlhbDogZmFsc2UgfTtcbiAgICB9XG5cbiAgICBpZiAoZmV0Y2hQb2xpY3kgPT09ICduby1jYWNoZScgfHwgZmV0Y2hQb2xpY3kgPT09ICduZXR3b3JrLW9ubHknKSB7XG4gICAgICByZXR1cm4geyBkYXRhOiB1bmRlZmluZWQsIHBhcnRpYWw6IGZhbHNlIH07XG4gICAgfVxuXG4gICAgY29uc3QgeyByZXN1bHQsIGNvbXBsZXRlIH0gPSB0aGlzLmRhdGFTdG9yZS5nZXRDYWNoZSgpLmRpZmY8VD4oe1xuICAgICAgcXVlcnksXG4gICAgICB2YXJpYWJsZXMsXG4gICAgICBwcmV2aW91c1Jlc3VsdDogbGFzdFJlc3VsdCA/IGxhc3RSZXN1bHQuZGF0YSA6IHVuZGVmaW5lZCxcbiAgICAgIHJldHVyblBhcnRpYWxEYXRhOiB0cnVlLFxuICAgICAgb3B0aW1pc3RpYyxcbiAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICBkYXRhOiAoY29tcGxldGUgfHwgcmV0dXJuUGFydGlhbERhdGEpID8gcmVzdWx0IDogdm9pZCAwLFxuICAgICAgcGFydGlhbDogIWNvbXBsZXRlLFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgZ2V0UXVlcnlXaXRoUHJldmlvdXNSZXN1bHQ8VERhdGEsIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICAgIHF1ZXJ5SWRPck9ic2VydmFibGU6IHN0cmluZyB8IE9ic2VydmFibGVRdWVyeTxURGF0YSwgVFZhcmlhYmxlcz4sXG4gICk6IHtcbiAgICBwcmV2aW91c1Jlc3VsdDogYW55O1xuICAgIHZhcmlhYmxlczogVFZhcmlhYmxlcyB8IHVuZGVmaW5lZDtcbiAgICBkb2N1bWVudDogRG9jdW1lbnROb2RlO1xuICB9IHtcbiAgICBsZXQgb2JzZXJ2YWJsZVF1ZXJ5OiBPYnNlcnZhYmxlUXVlcnk8VERhdGEsIGFueT47XG4gICAgaWYgKHR5cGVvZiBxdWVyeUlkT3JPYnNlcnZhYmxlID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgeyBvYnNlcnZhYmxlUXVlcnk6IGZvdW5kT2JzZXJ2ZWFibGVRdWVyeSB9ID0gdGhpcy5nZXRRdWVyeShcbiAgICAgICAgcXVlcnlJZE9yT2JzZXJ2YWJsZSxcbiAgICAgICk7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGZvdW5kT2JzZXJ2ZWFibGVRdWVyeSxcbiAgICAgICAgYE9ic2VydmFibGVRdWVyeSB3aXRoIHRoaXMgaWQgZG9lc24ndCBleGlzdDogJHtxdWVyeUlkT3JPYnNlcnZhYmxlfWBcbiAgICAgICk7XG4gICAgICBvYnNlcnZhYmxlUXVlcnkgPSBmb3VuZE9ic2VydmVhYmxlUXVlcnkhO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYnNlcnZhYmxlUXVlcnkgPSBxdWVyeUlkT3JPYnNlcnZhYmxlO1xuICAgIH1cblxuICAgIGNvbnN0IHsgdmFyaWFibGVzLCBxdWVyeSB9ID0gb2JzZXJ2YWJsZVF1ZXJ5Lm9wdGlvbnM7XG4gICAgcmV0dXJuIHtcbiAgICAgIHByZXZpb3VzUmVzdWx0OiB0aGlzLmdldEN1cnJlbnRRdWVyeVJlc3VsdChvYnNlcnZhYmxlUXVlcnksIGZhbHNlKS5kYXRhLFxuICAgICAgdmFyaWFibGVzLFxuICAgICAgZG9jdW1lbnQ6IHF1ZXJ5LFxuICAgIH07XG4gIH1cblxuICBwdWJsaWMgYnJvYWRjYXN0UXVlcmllcygpIHtcbiAgICB0aGlzLm9uQnJvYWRjYXN0KCk7XG4gICAgdGhpcy5xdWVyaWVzLmZvckVhY2goKGluZm8sIGlkKSA9PiB7XG4gICAgICBpZiAoaW5mby5pbnZhbGlkYXRlZCkge1xuICAgICAgICBpbmZvLmxpc3RlbmVycy5mb3JFYWNoKGxpc3RlbmVyID0+IHtcbiAgICAgICAgICAvLyBpdCdzIHBvc3NpYmxlIGZvciB0aGUgbGlzdGVuZXIgdG8gYmUgdW5kZWZpbmVkIGlmIHRoZSBxdWVyeSBpcyBiZWluZyBzdG9wcGVkXG4gICAgICAgICAgLy8gU2VlIGhlcmUgZm9yIG1vcmUgZGV0YWlsOiBodHRwczovL2dpdGh1Yi5jb20vYXBvbGxvc3RhY2svYXBvbGxvLWNsaWVudC9pc3N1ZXMvMjMxXG4gICAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBsaXN0ZW5lcih0aGlzLnF1ZXJ5U3RvcmUuZ2V0KGlkKSwgaW5mby5uZXdEYXRhKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldExvY2FsU3RhdGUoKTogTG9jYWxTdGF0ZTxUU3RvcmU+IHtcbiAgICByZXR1cm4gdGhpcy5sb2NhbFN0YXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBpbkZsaWdodExpbmtPYnNlcnZhYmxlcyA9IG5ldyBNYXA8XG4gICAgRG9jdW1lbnROb2RlLFxuICAgIE1hcDxzdHJpbmcsIE9ic2VydmFibGU8RmV0Y2hSZXN1bHQ+PlxuICA+KCk7XG5cbiAgcHJpdmF0ZSBnZXRPYnNlcnZhYmxlRnJvbUxpbms8VCA9IGFueT4oXG4gICAgcXVlcnk6IERvY3VtZW50Tm9kZSxcbiAgICBjb250ZXh0OiBhbnksXG4gICAgdmFyaWFibGVzPzogT3BlcmF0aW9uVmFyaWFibGVzLFxuICAgIGRlZHVwbGljYXRpb246IGJvb2xlYW4gPSB0aGlzLnF1ZXJ5RGVkdXBsaWNhdGlvbixcbiAgKTogT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdDxUPj4ge1xuICAgIGxldCBvYnNlcnZhYmxlOiBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PjtcblxuICAgIGNvbnN0IHsgc2VydmVyUXVlcnkgfSA9IHRoaXMudHJhbnNmb3JtKHF1ZXJ5KTtcbiAgICBpZiAoc2VydmVyUXVlcnkpIHtcbiAgICAgIGNvbnN0IHsgaW5GbGlnaHRMaW5rT2JzZXJ2YWJsZXMsIGxpbmsgfSA9IHRoaXM7XG5cbiAgICAgIGNvbnN0IG9wZXJhdGlvbiA9IHtcbiAgICAgICAgcXVlcnk6IHNlcnZlclF1ZXJ5LFxuICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgIG9wZXJhdGlvbk5hbWU6IGdldE9wZXJhdGlvbk5hbWUoc2VydmVyUXVlcnkpIHx8IHZvaWQgMCxcbiAgICAgICAgY29udGV4dDogdGhpcy5wcmVwYXJlQ29udGV4dCh7XG4gICAgICAgICAgLi4uY29udGV4dCxcbiAgICAgICAgICBmb3JjZUZldGNoOiAhZGVkdXBsaWNhdGlvblxuICAgICAgICB9KSxcbiAgICAgIH07XG5cbiAgICAgIGNvbnRleHQgPSBvcGVyYXRpb24uY29udGV4dDtcblxuICAgICAgaWYgKGRlZHVwbGljYXRpb24pIHtcbiAgICAgICAgY29uc3QgYnlWYXJpYWJsZXMgPSBpbkZsaWdodExpbmtPYnNlcnZhYmxlcy5nZXQoc2VydmVyUXVlcnkpIHx8IG5ldyBNYXAoKTtcbiAgICAgICAgaW5GbGlnaHRMaW5rT2JzZXJ2YWJsZXMuc2V0KHNlcnZlclF1ZXJ5LCBieVZhcmlhYmxlcyk7XG5cbiAgICAgICAgY29uc3QgdmFySnNvbiA9IEpTT04uc3RyaW5naWZ5KHZhcmlhYmxlcyk7XG4gICAgICAgIG9ic2VydmFibGUgPSBieVZhcmlhYmxlcy5nZXQodmFySnNvbik7XG5cbiAgICAgICAgaWYgKCFvYnNlcnZhYmxlKSB7XG4gICAgICAgICAgYnlWYXJpYWJsZXMuc2V0KFxuICAgICAgICAgICAgdmFySnNvbixcbiAgICAgICAgICAgIG9ic2VydmFibGUgPSBtdWx0aXBsZXgoXG4gICAgICAgICAgICAgIGV4ZWN1dGUobGluaywgb3BlcmF0aW9uKSBhcyBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PlxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICAgICAgYnlWYXJpYWJsZXMuZGVsZXRlKHZhckpzb24pO1xuICAgICAgICAgICAgaWYgKCFieVZhcmlhYmxlcy5zaXplKSBpbkZsaWdodExpbmtPYnNlcnZhYmxlcy5kZWxldGUoc2VydmVyUXVlcnkpO1xuICAgICAgICAgICAgY2xlYW51cFN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIH07XG5cbiAgICAgICAgICBjb25zdCBjbGVhbnVwU3ViID0gb2JzZXJ2YWJsZS5zdWJzY3JpYmUoe1xuICAgICAgICAgICAgbmV4dDogY2xlYW51cCxcbiAgICAgICAgICAgIGVycm9yOiBjbGVhbnVwLFxuICAgICAgICAgICAgY29tcGxldGU6IGNsZWFudXAsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JzZXJ2YWJsZSA9IG11bHRpcGxleChleGVjdXRlKGxpbmssIG9wZXJhdGlvbikgYXMgT2JzZXJ2YWJsZTxGZXRjaFJlc3VsdDxUPj4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvYnNlcnZhYmxlID0gT2JzZXJ2YWJsZS5vZih7IGRhdGE6IHt9IH0gYXMgRmV0Y2hSZXN1bHQ8VD4pO1xuICAgICAgY29udGV4dCA9IHRoaXMucHJlcGFyZUNvbnRleHQoY29udGV4dCk7XG4gICAgfVxuXG4gICAgY29uc3QgeyBjbGllbnRRdWVyeSB9ID0gdGhpcy50cmFuc2Zvcm0ocXVlcnkpO1xuICAgIGlmIChjbGllbnRRdWVyeSkge1xuICAgICAgb2JzZXJ2YWJsZSA9IGFzeW5jTWFwKG9ic2VydmFibGUsIHJlc3VsdCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsU3RhdGUucnVuUmVzb2x2ZXJzKHtcbiAgICAgICAgICBkb2N1bWVudDogY2xpZW50UXVlcnksXG4gICAgICAgICAgcmVtb3RlUmVzdWx0OiByZXN1bHQsXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9ic2VydmFibGU7XG4gIH1cblxuICAvLyBUYWtlcyBhIHJlcXVlc3QgaWQsIHF1ZXJ5IGlkLCBhIHF1ZXJ5IGRvY3VtZW50IGFuZCBpbmZvcm1hdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIHF1ZXJ5XG4gIC8vIGFuZCBzZW5kIGl0IHRvIHRoZSBuZXR3b3JrIGludGVyZmFjZS4gUmV0dXJuc1xuICAvLyBhIHByb21pc2UgZm9yIHRoZSByZXN1bHQgYXNzb2NpYXRlZCB3aXRoIHRoYXQgcmVxdWVzdC5cbiAgcHJpdmF0ZSBmZXRjaFJlcXVlc3Q8VD4oe1xuICAgIHJlcXVlc3RJZCxcbiAgICBxdWVyeUlkLFxuICAgIGRvY3VtZW50LFxuICAgIG9wdGlvbnMsXG4gICAgZmV0Y2hNb3JlRm9yUXVlcnlJZCxcbiAgfToge1xuICAgIHJlcXVlc3RJZDogbnVtYmVyO1xuICAgIHF1ZXJ5SWQ6IHN0cmluZztcbiAgICBkb2N1bWVudDogRG9jdW1lbnROb2RlO1xuICAgIG9wdGlvbnM6IFdhdGNoUXVlcnlPcHRpb25zO1xuICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQ/OiBzdHJpbmc7XG4gIH0pOiBQcm9taXNlPEZldGNoUmVzdWx0PFQ+PiB7XG4gICAgY29uc3QgeyB2YXJpYWJsZXMsIGVycm9yUG9saWN5ID0gJ25vbmUnLCBmZXRjaFBvbGljeSB9ID0gb3B0aW9ucztcbiAgICBsZXQgcmVzdWx0RnJvbVN0b3JlOiBhbnk7XG4gICAgbGV0IGVycm9yc0Zyb21TdG9yZTogYW55O1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PFQ+PigocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBvYnNlcnZhYmxlID0gdGhpcy5nZXRPYnNlcnZhYmxlRnJvbUxpbmsoXG4gICAgICAgIGRvY3VtZW50LFxuICAgICAgICBvcHRpb25zLmNvbnRleHQsXG4gICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICk7XG5cbiAgICAgIGNvbnN0IGZxcmZJZCA9IGBmZXRjaFJlcXVlc3Q6JHtxdWVyeUlkfWA7XG4gICAgICB0aGlzLmZldGNoUXVlcnlSZWplY3RGbnMuc2V0KGZxcmZJZCwgcmVqZWN0KTtcblxuICAgICAgY29uc3QgY2xlYW51cCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5mZXRjaFF1ZXJ5UmVqZWN0Rm5zLmRlbGV0ZShmcXJmSWQpO1xuICAgICAgICB0aGlzLnNldFF1ZXJ5KHF1ZXJ5SWQsICh7IHN1YnNjcmlwdGlvbnMgfSkgPT4ge1xuICAgICAgICAgIHN1YnNjcmlwdGlvbnMuZGVsZXRlKHN1YnNjcmlwdGlvbik7XG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gb2JzZXJ2YWJsZS5tYXAoKHJlc3VsdDogRXhlY3V0aW9uUmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXF1ZXN0SWQgPj0gdGhpcy5nZXRRdWVyeShxdWVyeUlkKS5sYXN0UmVxdWVzdElkKSB7XG4gICAgICAgICAgdGhpcy5tYXJrUXVlcnlSZXN1bHQoXG4gICAgICAgICAgICBxdWVyeUlkLFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGZldGNoTW9yZUZvclF1ZXJ5SWQsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHRoaXMucXVlcnlTdG9yZS5tYXJrUXVlcnlSZXN1bHQoXG4gICAgICAgICAgICBxdWVyeUlkLFxuICAgICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgICAgZmV0Y2hNb3JlRm9yUXVlcnlJZCxcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKHF1ZXJ5SWQpO1xuICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZShmZXRjaE1vcmVGb3JRdWVyeUlkKTtcblxuICAgICAgICAgIHRoaXMuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yUG9saWN5ID09PSAnbm9uZScgJiYgaXNOb25FbXB0eUFycmF5KHJlc3VsdC5lcnJvcnMpKSB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChuZXcgQXBvbGxvRXJyb3Ioe1xuICAgICAgICAgICAgZ3JhcGhRTEVycm9yczogcmVzdWx0LmVycm9ycyxcbiAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXJyb3JQb2xpY3kgPT09ICdhbGwnKSB7XG4gICAgICAgICAgZXJyb3JzRnJvbVN0b3JlID0gcmVzdWx0LmVycm9ycztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmZXRjaE1vcmVGb3JRdWVyeUlkIHx8IGZldGNoUG9saWN5ID09PSAnbm8tY2FjaGUnKSB7XG4gICAgICAgICAgLy8gV2UgZG9uJ3Qgd3JpdGUgZmV0Y2hNb3JlIHJlc3VsdHMgdG8gdGhlIHN0b3JlIGJlY2F1c2UgdGhpcyB3b3VsZCBvdmVyd3JpdGVcbiAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgcmVzdWx0IGluIGNhc2UgYW4gQGNvbm5lY3Rpb24gZGlyZWN0aXZlIGlzIHVzZWQuXG4gICAgICAgICAgcmVzdWx0RnJvbVN0b3JlID0gcmVzdWx0LmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZW5zdXJlIHJlc3VsdCBpcyBjb21iaW5lZCB3aXRoIGRhdGEgYWxyZWFkeSBpbiBzdG9yZVxuICAgICAgICAgIGNvbnN0IHsgcmVzdWx0LCBjb21wbGV0ZSB9ID0gdGhpcy5kYXRhU3RvcmUuZ2V0Q2FjaGUoKS5kaWZmPFQ+KHtcbiAgICAgICAgICAgIHZhcmlhYmxlcyxcbiAgICAgICAgICAgIHF1ZXJ5OiBkb2N1bWVudCxcbiAgICAgICAgICAgIG9wdGltaXN0aWM6IGZhbHNlLFxuICAgICAgICAgICAgcmV0dXJuUGFydGlhbERhdGE6IHRydWUsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoY29tcGxldGUgfHwgb3B0aW9ucy5yZXR1cm5QYXJ0aWFsRGF0YSkge1xuICAgICAgICAgICAgcmVzdWx0RnJvbVN0b3JlID0gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSkuc3Vic2NyaWJlKHtcbiAgICAgICAgZXJyb3IoZXJyb3I6IEFwb2xsb0Vycm9yKSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY29tcGxldGUoKSB7XG4gICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgIHJlc29sdmUoe1xuICAgICAgICAgICAgZGF0YTogcmVzdWx0RnJvbVN0b3JlLFxuICAgICAgICAgICAgZXJyb3JzOiBlcnJvcnNGcm9tU3RvcmUsXG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IE5ldHdvcmtTdGF0dXMucmVhZHksXG4gICAgICAgICAgICBzdGFsZTogZmFsc2UsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcblxuICAgICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoeyBzdWJzY3JpcHRpb25zIH0pID0+IHtcbiAgICAgICAgc3Vic2NyaXB0aW9ucy5hZGQoc3Vic2NyaXB0aW9uKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRRdWVyeShxdWVyeUlkOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5xdWVyaWVzLmdldChxdWVyeUlkKSB8fCB7XG4gICAgICAgIGxpc3RlbmVyczogbmV3IFNldDxRdWVyeUxpc3RlbmVyPigpLFxuICAgICAgICBpbnZhbGlkYXRlZDogZmFsc2UsXG4gICAgICAgIGRvY3VtZW50OiBudWxsLFxuICAgICAgICBuZXdEYXRhOiBudWxsLFxuICAgICAgICBsYXN0UmVxdWVzdElkOiAxLFxuICAgICAgICBvYnNlcnZhYmxlUXVlcnk6IG51bGwsXG4gICAgICAgIHN1YnNjcmlwdGlvbnM6IG5ldyBTZXQ8U3Vic2NyaXB0aW9uPigpLFxuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNldFF1ZXJ5PFQgZXh0ZW5kcyBrZXlvZiBRdWVyeUluZm8+KFxuICAgIHF1ZXJ5SWQ6IHN0cmluZyxcbiAgICB1cGRhdGVyOiAocHJldjogUXVlcnlJbmZvKSA9PiBQaWNrPFF1ZXJ5SW5mbywgVD4gfCB2b2lkLFxuICApIHtcbiAgICBjb25zdCBwcmV2ID0gdGhpcy5nZXRRdWVyeShxdWVyeUlkKTtcbiAgICBjb25zdCBuZXdJbmZvID0geyAuLi5wcmV2LCAuLi51cGRhdGVyKHByZXYpIH07XG4gICAgdGhpcy5xdWVyaWVzLnNldChxdWVyeUlkLCBuZXdJbmZvKTtcbiAgfVxuXG4gIHByaXZhdGUgaW52YWxpZGF0ZShcbiAgICBxdWVyeUlkOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgaW52YWxpZGF0ZWQgPSB0cnVlLFxuICApIHtcbiAgICBpZiAocXVlcnlJZCkge1xuICAgICAgdGhpcy5zZXRRdWVyeShxdWVyeUlkLCAoKSA9PiAoeyBpbnZhbGlkYXRlZCB9KSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwcmVwYXJlQ29udGV4dChjb250ZXh0ID0ge30pIHtcbiAgICBjb25zdCBuZXdDb250ZXh0ID0gdGhpcy5sb2NhbFN0YXRlLnByZXBhcmVDb250ZXh0KGNvbnRleHQpO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5uZXdDb250ZXh0LFxuICAgICAgY2xpZW50QXdhcmVuZXNzOiB0aGlzLmNsaWVudEF3YXJlbmVzcyxcbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGNoZWNrSW5GbGlnaHQocXVlcnlJZDogc3RyaW5nKSB7XG4gICAgY29uc3QgcXVlcnkgPSB0aGlzLnF1ZXJ5U3RvcmUuZ2V0KHF1ZXJ5SWQpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHF1ZXJ5ICYmXG4gICAgICBxdWVyeS5uZXR3b3JrU3RhdHVzICE9PSBOZXR3b3JrU3RhdHVzLnJlYWR5ICYmXG4gICAgICBxdWVyeS5uZXR3b3JrU3RhdHVzICE9PSBOZXR3b3JrU3RhdHVzLmVycm9yXG4gICAgKTtcbiAgfVxuXG4gIC8vIE1hcCBmcm9tIGNsaWVudCBJRCB0byB7IGludGVydmFsLCBvcHRpb25zIH0uXG4gIHByaXZhdGUgcG9sbGluZ0luZm9CeVF1ZXJ5SWQgPSBuZXcgTWFwPHN0cmluZywge1xuICAgIGludGVydmFsOiBudW1iZXI7XG4gICAgdGltZW91dDogTm9kZUpTLlRpbWVvdXQ7XG4gICAgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnM7XG4gIH0+KCk7XG5cbiAgcHVibGljIHN0YXJ0UG9sbGluZ1F1ZXJ5KFxuICAgIG9wdGlvbnM6IFdhdGNoUXVlcnlPcHRpb25zLFxuICAgIHF1ZXJ5SWQ6IHN0cmluZyxcbiAgICBsaXN0ZW5lcj86IFF1ZXJ5TGlzdGVuZXIsXG4gICk6IHN0cmluZyB7XG4gICAgY29uc3QgeyBwb2xsSW50ZXJ2YWwgfSA9IG9wdGlvbnM7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICBwb2xsSW50ZXJ2YWwsXG4gICAgICAnQXR0ZW1wdGVkIHRvIHN0YXJ0IGEgcG9sbGluZyBxdWVyeSB3aXRob3V0IGEgcG9sbGluZyBpbnRlcnZhbC4nLFxuICAgICk7XG5cbiAgICAvLyBEbyBub3QgcG9sbCBpbiBTU1IgbW9kZVxuICAgIGlmICghdGhpcy5zc3JNb2RlKSB7XG4gICAgICBsZXQgaW5mbyA9IHRoaXMucG9sbGluZ0luZm9CeVF1ZXJ5SWQuZ2V0KHF1ZXJ5SWQpITtcbiAgICAgIGlmICghaW5mbykge1xuICAgICAgICB0aGlzLnBvbGxpbmdJbmZvQnlRdWVyeUlkLnNldChxdWVyeUlkLCAoaW5mbyA9IHt9IGFzIGFueSkpO1xuICAgICAgfVxuXG4gICAgICBpbmZvLmludGVydmFsID0gcG9sbEludGVydmFsITtcbiAgICAgIGluZm8ub3B0aW9ucyA9IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgbWF5YmVGZXRjaCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMucG9sbGluZ0luZm9CeVF1ZXJ5SWQuZ2V0KHF1ZXJ5SWQpO1xuICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgIGlmICh0aGlzLmNoZWNrSW5GbGlnaHQocXVlcnlJZCkpIHtcbiAgICAgICAgICAgIHBvbGwoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5mZXRjaFF1ZXJ5KHF1ZXJ5SWQsIGluZm8ub3B0aW9ucywgRmV0Y2hUeXBlLnBvbGwpLnRoZW4oXG4gICAgICAgICAgICAgIHBvbGwsXG4gICAgICAgICAgICAgIHBvbGwsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgY29uc3QgcG9sbCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgaW5mbyA9IHRoaXMucG9sbGluZ0luZm9CeVF1ZXJ5SWQuZ2V0KHF1ZXJ5SWQpO1xuICAgICAgICBpZiAoaW5mbykge1xuICAgICAgICAgIGNsZWFyVGltZW91dChpbmZvLnRpbWVvdXQpO1xuICAgICAgICAgIGluZm8udGltZW91dCA9IHNldFRpbWVvdXQobWF5YmVGZXRjaCwgaW5mby5pbnRlcnZhbCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLmFkZFF1ZXJ5TGlzdGVuZXIocXVlcnlJZCwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICBwb2xsKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXJ5SWQ7XG4gIH1cblxuICBwdWJsaWMgc3RvcFBvbGxpbmdRdWVyeShxdWVyeUlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnBvbGxpbmdJbmZvQnlRdWVyeUlkLmRlbGV0ZShxdWVyeUlkKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBcG9sbG9DbGllbnQgZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXBvbGxvQ29udGV4dFZhbHVlIHtcbiAgY2xpZW50PzogQXBvbGxvQ2xpZW50PG9iamVjdD47XG4gIHJlbmRlclByb21pc2VzPzogUmVjb3JkPGFueSwgYW55Pjtcbn1cblxubGV0IGFwb2xsb0NvbnRleHQ6IFJlYWN0LkNvbnRleHQ8QXBvbGxvQ29udGV4dFZhbHVlPjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFwb2xsb0NvbnRleHQoKSB7XG4gIGlmICghYXBvbGxvQ29udGV4dCkge1xuICAgIGFwb2xsb0NvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0PEFwb2xsb0NvbnRleHRWYWx1ZT4oe30pO1xuICB9XG4gIHJldHVybiBhcG9sbG9Db250ZXh0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRBcG9sbG9Db250ZXh0KCkge1xuICBhcG9sbG9Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxBcG9sbG9Db250ZXh0VmFsdWU+KHt9KTtcbn1cbiIsImltcG9ydCB7IEV4ZWN1dGlvblJlc3VsdCwgRG9jdW1lbnROb2RlIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBBcG9sbG9DYWNoZSwgQ2FjaGUsIERhdGFQcm94eSB9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5cbmltcG9ydCB7IFF1ZXJ5U3RvcmVWYWx1ZSB9IGZyb20gJy4uL2RhdGEvcXVlcmllcyc7XG5pbXBvcnQge1xuICBnZXRPcGVyYXRpb25OYW1lLFxuICB0cnlGdW5jdGlvbk9yTG9nRXJyb3IsXG4gIGdyYXBoUUxSZXN1bHRIYXNFcnJvcixcbn0gZnJvbSAnYXBvbGxvLXV0aWxpdGllcyc7XG5pbXBvcnQgeyBNdXRhdGlvblF1ZXJ5UmVkdWNlciB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBRdWVyeVdpdGhVcGRhdGVyID0ge1xuICB1cGRhdGVyOiBNdXRhdGlvblF1ZXJ5UmVkdWNlcjxPYmplY3Q+O1xuICBxdWVyeTogUXVlcnlTdG9yZVZhbHVlO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBEYXRhV3JpdGUge1xuICByb290SWQ6IHN0cmluZztcbiAgcmVzdWx0OiBhbnk7XG4gIGRvY3VtZW50OiBEb2N1bWVudE5vZGU7XG4gIG9wZXJhdGlvbk5hbWU6IHN0cmluZyB8IG51bGw7XG4gIHZhcmlhYmxlczogT2JqZWN0O1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YVN0b3JlPFRTZXJpYWxpemVkPiB7XG4gIHByaXZhdGUgY2FjaGU6IEFwb2xsb0NhY2hlPFRTZXJpYWxpemVkPjtcblxuICBjb25zdHJ1Y3Rvcihpbml0aWFsQ2FjaGU6IEFwb2xsb0NhY2hlPFRTZXJpYWxpemVkPikge1xuICAgIHRoaXMuY2FjaGUgPSBpbml0aWFsQ2FjaGU7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2FjaGUoKTogQXBvbGxvQ2FjaGU8VFNlcmlhbGl6ZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZTtcbiAgfVxuXG4gIHB1YmxpYyBtYXJrUXVlcnlSZXN1bHQoXG4gICAgcmVzdWx0OiBFeGVjdXRpb25SZXN1bHQsXG4gICAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSxcbiAgICB2YXJpYWJsZXM6IGFueSxcbiAgICBmZXRjaE1vcmVGb3JRdWVyeUlkOiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgaWdub3JlRXJyb3JzOiBib29sZWFuID0gZmFsc2UsXG4gICkge1xuICAgIGxldCB3cml0ZVdpdGhFcnJvcnMgPSAhZ3JhcGhRTFJlc3VsdEhhc0Vycm9yKHJlc3VsdCk7XG4gICAgaWYgKGlnbm9yZUVycm9ycyAmJiBncmFwaFFMUmVzdWx0SGFzRXJyb3IocmVzdWx0KSAmJiByZXN1bHQuZGF0YSkge1xuICAgICAgd3JpdGVXaXRoRXJyb3JzID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFmZXRjaE1vcmVGb3JRdWVyeUlkICYmIHdyaXRlV2l0aEVycm9ycykge1xuICAgICAgdGhpcy5jYWNoZS53cml0ZSh7XG4gICAgICAgIHJlc3VsdDogcmVzdWx0LmRhdGEsXG4gICAgICAgIGRhdGFJZDogJ1JPT1RfUVVFUlknLFxuICAgICAgICBxdWVyeTogZG9jdW1lbnQsXG4gICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG1hcmtTdWJzY3JpcHRpb25SZXN1bHQoXG4gICAgcmVzdWx0OiBFeGVjdXRpb25SZXN1bHQsXG4gICAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSxcbiAgICB2YXJpYWJsZXM6IGFueSxcbiAgKSB7XG4gICAgLy8gdGhlIHN1YnNjcmlwdGlvbiBpbnRlcmZhY2Ugc2hvdWxkIGhhbmRsZSBub3Qgc2VuZGluZyB1cyByZXN1bHRzIHdlIG5vIGxvbmdlciBzdWJzY3JpYmUgdG8uXG4gICAgLy8gWFhYIEkgZG9uJ3QgdGhpbmsgd2UgZXZlciBzZW5kIGluIGFuIG9iamVjdCB3aXRoIGVycm9ycywgYnV0IHdlIG1pZ2h0IGluIHRoZSBmdXR1cmUuLi5cbiAgICBpZiAoIWdyYXBoUUxSZXN1bHRIYXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICB0aGlzLmNhY2hlLndyaXRlKHtcbiAgICAgICAgcmVzdWx0OiByZXN1bHQuZGF0YSxcbiAgICAgICAgZGF0YUlkOiAnUk9PVF9TVUJTQ1JJUFRJT04nLFxuICAgICAgICBxdWVyeTogZG9jdW1lbnQsXG4gICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG1hcmtNdXRhdGlvbkluaXQobXV0YXRpb246IHtcbiAgICBtdXRhdGlvbklkOiBzdHJpbmc7XG4gICAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZTtcbiAgICB2YXJpYWJsZXM6IGFueTtcbiAgICB1cGRhdGVRdWVyaWVzOiB7IFtxdWVyeUlkOiBzdHJpbmddOiBRdWVyeVdpdGhVcGRhdGVyIH07XG4gICAgdXBkYXRlOiAoKHByb3h5OiBEYXRhUHJveHksIG11dGF0aW9uUmVzdWx0OiBPYmplY3QpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICAgIG9wdGltaXN0aWNSZXNwb25zZTogT2JqZWN0IHwgRnVuY3Rpb24gfCB1bmRlZmluZWQ7XG4gIH0pIHtcbiAgICBpZiAobXV0YXRpb24ub3B0aW1pc3RpY1Jlc3BvbnNlKSB7XG4gICAgICBsZXQgb3B0aW1pc3RpYzogT2JqZWN0O1xuICAgICAgaWYgKHR5cGVvZiBtdXRhdGlvbi5vcHRpbWlzdGljUmVzcG9uc2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3B0aW1pc3RpYyA9IG11dGF0aW9uLm9wdGltaXN0aWNSZXNwb25zZShtdXRhdGlvbi52YXJpYWJsZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3B0aW1pc3RpYyA9IG11dGF0aW9uLm9wdGltaXN0aWNSZXNwb25zZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYWNoZS5yZWNvcmRPcHRpbWlzdGljVHJhbnNhY3Rpb24oYyA9PiB7XG4gICAgICAgIGNvbnN0IG9yaWcgPSB0aGlzLmNhY2hlO1xuICAgICAgICB0aGlzLmNhY2hlID0gYztcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMubWFya011dGF0aW9uUmVzdWx0KHtcbiAgICAgICAgICAgIG11dGF0aW9uSWQ6IG11dGF0aW9uLm11dGF0aW9uSWQsXG4gICAgICAgICAgICByZXN1bHQ6IHsgZGF0YTogb3B0aW1pc3RpYyB9LFxuICAgICAgICAgICAgZG9jdW1lbnQ6IG11dGF0aW9uLmRvY3VtZW50LFxuICAgICAgICAgICAgdmFyaWFibGVzOiBtdXRhdGlvbi52YXJpYWJsZXMsXG4gICAgICAgICAgICB1cGRhdGVRdWVyaWVzOiBtdXRhdGlvbi51cGRhdGVRdWVyaWVzLFxuICAgICAgICAgICAgdXBkYXRlOiBtdXRhdGlvbi51cGRhdGUsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgdGhpcy5jYWNoZSA9IG9yaWc7XG4gICAgICAgIH1cbiAgICAgIH0sIG11dGF0aW9uLm11dGF0aW9uSWQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBtYXJrTXV0YXRpb25SZXN1bHQobXV0YXRpb246IHtcbiAgICBtdXRhdGlvbklkOiBzdHJpbmc7XG4gICAgcmVzdWx0OiBFeGVjdXRpb25SZXN1bHQ7XG4gICAgZG9jdW1lbnQ6IERvY3VtZW50Tm9kZTtcbiAgICB2YXJpYWJsZXM6IGFueTtcbiAgICB1cGRhdGVRdWVyaWVzOiB7IFtxdWVyeUlkOiBzdHJpbmddOiBRdWVyeVdpdGhVcGRhdGVyIH07XG4gICAgdXBkYXRlOiAoKHByb3h5OiBEYXRhUHJveHksIG11dGF0aW9uUmVzdWx0OiBPYmplY3QpID0+IHZvaWQpIHwgdW5kZWZpbmVkO1xuICB9KSB7XG4gICAgLy8gSW5jb3Jwb3JhdGUgdGhlIHJlc3VsdCBmcm9tIHRoaXMgbXV0YXRpb24gaW50byB0aGUgc3RvcmVcbiAgICBpZiAoIWdyYXBoUUxSZXN1bHRIYXNFcnJvcihtdXRhdGlvbi5yZXN1bHQpKSB7XG4gICAgICBjb25zdCBjYWNoZVdyaXRlczogQ2FjaGUuV3JpdGVPcHRpb25zW10gPSBbe1xuICAgICAgICByZXN1bHQ6IG11dGF0aW9uLnJlc3VsdC5kYXRhLFxuICAgICAgICBkYXRhSWQ6ICdST09UX01VVEFUSU9OJyxcbiAgICAgICAgcXVlcnk6IG11dGF0aW9uLmRvY3VtZW50LFxuICAgICAgICB2YXJpYWJsZXM6IG11dGF0aW9uLnZhcmlhYmxlcyxcbiAgICAgIH1dO1xuXG4gICAgICBjb25zdCB7IHVwZGF0ZVF1ZXJpZXMgfSA9IG11dGF0aW9uO1xuICAgICAgaWYgKHVwZGF0ZVF1ZXJpZXMpIHtcbiAgICAgICAgT2JqZWN0LmtleXModXBkYXRlUXVlcmllcykuZm9yRWFjaChpZCA9PiB7XG4gICAgICAgICAgY29uc3QgeyBxdWVyeSwgdXBkYXRlciB9ID0gdXBkYXRlUXVlcmllc1tpZF07XG5cbiAgICAgICAgICAvLyBSZWFkIHRoZSBjdXJyZW50IHF1ZXJ5IHJlc3VsdCBmcm9tIHRoZSBzdG9yZS5cbiAgICAgICAgICBjb25zdCB7IHJlc3VsdDogY3VycmVudFF1ZXJ5UmVzdWx0LCBjb21wbGV0ZSB9ID0gdGhpcy5jYWNoZS5kaWZmKHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeS5kb2N1bWVudCxcbiAgICAgICAgICAgIHZhcmlhYmxlczogcXVlcnkudmFyaWFibGVzLFxuICAgICAgICAgICAgcmV0dXJuUGFydGlhbERhdGE6IHRydWUsXG4gICAgICAgICAgICBvcHRpbWlzdGljOiBmYWxzZSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChjb21wbGV0ZSkge1xuICAgICAgICAgICAgLy8gUnVuIG91ciByZWR1Y2VyIHVzaW5nIHRoZSBjdXJyZW50IHF1ZXJ5IHJlc3VsdCBhbmQgdGhlIG11dGF0aW9uIHJlc3VsdC5cbiAgICAgICAgICAgIGNvbnN0IG5leHRRdWVyeVJlc3VsdCA9IHRyeUZ1bmN0aW9uT3JMb2dFcnJvcigoKSA9PlxuICAgICAgICAgICAgICB1cGRhdGVyKGN1cnJlbnRRdWVyeVJlc3VsdCwge1xuICAgICAgICAgICAgICAgIG11dGF0aW9uUmVzdWx0OiBtdXRhdGlvbi5yZXN1bHQsXG4gICAgICAgICAgICAgICAgcXVlcnlOYW1lOiBnZXRPcGVyYXRpb25OYW1lKHF1ZXJ5LmRvY3VtZW50KSB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcXVlcnlWYXJpYWJsZXM6IHF1ZXJ5LnZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBXcml0ZSB0aGUgbW9kaWZpZWQgcmVzdWx0IGJhY2sgaW50byB0aGUgc3RvcmUgaWYgd2UgZ290IGEgbmV3IHJlc3VsdC5cbiAgICAgICAgICAgIGlmIChuZXh0UXVlcnlSZXN1bHQpIHtcbiAgICAgICAgICAgICAgY2FjaGVXcml0ZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgcmVzdWx0OiBuZXh0UXVlcnlSZXN1bHQsXG4gICAgICAgICAgICAgICAgZGF0YUlkOiAnUk9PVF9RVUVSWScsXG4gICAgICAgICAgICAgICAgcXVlcnk6IHF1ZXJ5LmRvY3VtZW50LFxuICAgICAgICAgICAgICAgIHZhcmlhYmxlczogcXVlcnkudmFyaWFibGVzLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmNhY2hlLnBlcmZvcm1UcmFuc2FjdGlvbihjID0+IHtcbiAgICAgICAgY2FjaGVXcml0ZXMuZm9yRWFjaCh3cml0ZSA9PiBjLndyaXRlKHdyaXRlKSk7XG5cbiAgICAgICAgLy8gSWYgdGhlIG11dGF0aW9uIGhhcyBzb21lIHdyaXRlcyBhc3NvY2lhdGVkIHdpdGggaXQgdGhlbiB3ZSBuZWVkIHRvXG4gICAgICAgIC8vIGFwcGx5IHRob3NlIHdyaXRlcyB0byB0aGUgc3RvcmUgYnkgcnVubmluZyB0aGlzIHJlZHVjZXIgYWdhaW4gd2l0aCBhXG4gICAgICAgIC8vIHdyaXRlIGFjdGlvbi5cbiAgICAgICAgY29uc3QgeyB1cGRhdGUgfSA9IG11dGF0aW9uO1xuICAgICAgICBpZiAodXBkYXRlKSB7XG4gICAgICAgICAgdHJ5RnVuY3Rpb25PckxvZ0Vycm9yKCgpID0+IHVwZGF0ZShjLCBtdXRhdGlvbi5yZXN1bHQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG1hcmtNdXRhdGlvbkNvbXBsZXRlKHtcbiAgICBtdXRhdGlvbklkLFxuICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgfToge1xuICAgIG11dGF0aW9uSWQ6IHN0cmluZztcbiAgICBvcHRpbWlzdGljUmVzcG9uc2U/OiBhbnk7XG4gIH0pIHtcbiAgICBpZiAob3B0aW1pc3RpY1Jlc3BvbnNlKSB7XG4gICAgICB0aGlzLmNhY2hlLnJlbW92ZU9wdGltaXN0aWMobXV0YXRpb25JZCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIG1hcmtVcGRhdGVRdWVyeVJlc3VsdChcbiAgICBkb2N1bWVudDogRG9jdW1lbnROb2RlLFxuICAgIHZhcmlhYmxlczogYW55LFxuICAgIG5ld1Jlc3VsdDogYW55LFxuICApIHtcbiAgICB0aGlzLmNhY2hlLndyaXRlKHtcbiAgICAgIHJlc3VsdDogbmV3UmVzdWx0LFxuICAgICAgZGF0YUlkOiAnUk9PVF9RVUVSWScsXG4gICAgICB2YXJpYWJsZXMsXG4gICAgICBxdWVyeTogZG9jdW1lbnQsXG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMuY2FjaGUucmVzZXQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IHtcbiAgQXBvbGxvTGluayxcbiAgRmV0Y2hSZXN1bHQsXG4gIEdyYXBoUUxSZXF1ZXN0LFxuICBleGVjdXRlLFxufSBmcm9tICdhcG9sbG8tbGluayc7XG5pbXBvcnQgeyBFeGVjdXRpb25SZXN1bHQsIERvY3VtZW50Tm9kZSB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgQXBvbGxvQ2FjaGUsIERhdGFQcm94eSB9IGZyb20gJ2Fwb2xsby1jYWNoZSc7XG5cbmltcG9ydCB7IGludmFyaWFudCwgSW52YXJpYW50RXJyb3IgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuXG5pbXBvcnQgeyBRdWVyeU1hbmFnZXIgfSBmcm9tICcuL2NvcmUvUXVlcnlNYW5hZ2VyJztcbmltcG9ydCB7XG4gIEFwb2xsb1F1ZXJ5UmVzdWx0LFxuICBPcGVyYXRpb25WYXJpYWJsZXMsXG4gIFJlc29sdmVycyxcbn0gZnJvbSAnLi9jb3JlL3R5cGVzJztcbmltcG9ydCB7IE9ic2VydmFibGVRdWVyeSB9IGZyb20gJy4vY29yZS9PYnNlcnZhYmxlUXVlcnknO1xuaW1wb3J0IHsgTG9jYWxTdGF0ZSwgRnJhZ21lbnRNYXRjaGVyIH0gZnJvbSAnLi9jb3JlL0xvY2FsU3RhdGUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4vdXRpbC9PYnNlcnZhYmxlJztcblxuaW1wb3J0IHtcbiAgUXVlcnlPcHRpb25zLFxuICBXYXRjaFF1ZXJ5T3B0aW9ucyxcbiAgU3Vic2NyaXB0aW9uT3B0aW9ucyxcbiAgTXV0YXRpb25PcHRpb25zLFxuICBXYXRjaFF1ZXJ5RmV0Y2hQb2xpY3ksXG59IGZyb20gJy4vY29yZS93YXRjaFF1ZXJ5T3B0aW9ucyc7XG5cbmltcG9ydCB7IERhdGFTdG9yZSB9IGZyb20gJy4vZGF0YS9zdG9yZSc7XG5cbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24nO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlZmF1bHRPcHRpb25zIHtcbiAgd2F0Y2hRdWVyeT86IFBhcnRpYWw8V2F0Y2hRdWVyeU9wdGlvbnM+O1xuICBxdWVyeT86IFBhcnRpYWw8UXVlcnlPcHRpb25zPjtcbiAgbXV0YXRlPzogUGFydGlhbDxNdXRhdGlvbk9wdGlvbnM+O1xufVxuXG5sZXQgaGFzU3VnZ2VzdGVkRGV2dG9vbHMgPSBmYWxzZTtcblxuZXhwb3J0IHR5cGUgQXBvbGxvQ2xpZW50T3B0aW9uczxUQ2FjaGVTaGFwZT4gPSB7XG4gIGxpbms/OiBBcG9sbG9MaW5rO1xuICBjYWNoZTogQXBvbGxvQ2FjaGU8VENhY2hlU2hhcGU+O1xuICBzc3JGb3JjZUZldGNoRGVsYXk/OiBudW1iZXI7XG4gIHNzck1vZGU/OiBib29sZWFuO1xuICBjb25uZWN0VG9EZXZUb29scz86IGJvb2xlYW47XG4gIHF1ZXJ5RGVkdXBsaWNhdGlvbj86IGJvb2xlYW47XG4gIGRlZmF1bHRPcHRpb25zPzogRGVmYXVsdE9wdGlvbnM7XG4gIGFzc3VtZUltbXV0YWJsZVJlc3VsdHM/OiBib29sZWFuO1xuICByZXNvbHZlcnM/OiBSZXNvbHZlcnMgfCBSZXNvbHZlcnNbXTtcbiAgdHlwZURlZnM/OiBzdHJpbmcgfCBzdHJpbmdbXSB8IERvY3VtZW50Tm9kZSB8IERvY3VtZW50Tm9kZVtdO1xuICBmcmFnbWVudE1hdGNoZXI/OiBGcmFnbWVudE1hdGNoZXI7XG4gIG5hbWU/OiBzdHJpbmc7XG4gIHZlcnNpb24/OiBzdHJpbmc7XG59O1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHByaW1hcnkgQXBvbGxvIENsaWVudCBjbGFzcy4gSXQgaXMgdXNlZCB0byBzZW5kIEdyYXBoUUwgZG9jdW1lbnRzIChpLmUuIHF1ZXJpZXNcbiAqIGFuZCBtdXRhdGlvbnMpIHRvIGEgR3JhcGhRTCBzcGVjLWNvbXBsaWFudCBzZXJ2ZXIgb3ZlciBhIHtAbGluayBOZXR3b3JrSW50ZXJmYWNlfSBpbnN0YW5jZSxcbiAqIHJlY2VpdmUgcmVzdWx0cyBmcm9tIHRoZSBzZXJ2ZXIgYW5kIGNhY2hlIHRoZSByZXN1bHRzIGluIGEgc3RvcmUuIEl0IGFsc28gZGVsaXZlcnMgdXBkYXRlc1xuICogdG8gR3JhcGhRTCBxdWVyaWVzIHRocm91Z2gge0BsaW5rIE9ic2VydmFibGV9IGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBvbGxvQ2xpZW50PFRDYWNoZVNoYXBlPiBpbXBsZW1lbnRzIERhdGFQcm94eSB7XG4gIHB1YmxpYyBsaW5rOiBBcG9sbG9MaW5rO1xuICBwdWJsaWMgc3RvcmU6IERhdGFTdG9yZTxUQ2FjaGVTaGFwZT47XG4gIHB1YmxpYyBjYWNoZTogQXBvbGxvQ2FjaGU8VENhY2hlU2hhcGU+O1xuICBwdWJsaWMgcmVhZG9ubHkgcXVlcnlNYW5hZ2VyOiBRdWVyeU1hbmFnZXI8VENhY2hlU2hhcGU+O1xuICBwdWJsaWMgZGlzYWJsZU5ldHdvcmtGZXRjaGVzOiBib29sZWFuO1xuICBwdWJsaWMgdmVyc2lvbjogc3RyaW5nO1xuICBwdWJsaWMgcXVlcnlEZWR1cGxpY2F0aW9uOiBib29sZWFuO1xuICBwdWJsaWMgZGVmYXVsdE9wdGlvbnM6IERlZmF1bHRPcHRpb25zID0ge307XG4gIHB1YmxpYyByZWFkb25seSB0eXBlRGVmczogQXBvbGxvQ2xpZW50T3B0aW9uczxUQ2FjaGVTaGFwZT5bJ3R5cGVEZWZzJ107XG5cbiAgcHJpdmF0ZSBkZXZUb29sc0hvb2tDYjogRnVuY3Rpb247XG4gIHByaXZhdGUgcmVzZXRTdG9yZUNhbGxiYWNrczogQXJyYXk8KCkgPT4gUHJvbWlzZTxhbnk+PiA9IFtdO1xuICBwcml2YXRlIGNsZWFyU3RvcmVDYWxsYmFja3M6IEFycmF5PCgpID0+IFByb21pc2U8YW55Pj4gPSBbXTtcbiAgcHJpdmF0ZSBsb2NhbFN0YXRlOiBMb2NhbFN0YXRlPFRDYWNoZVNoYXBlPjtcblxuICAvKipcbiAgICogQ29uc3RydWN0cyBhbiBpbnN0YW5jZSBvZiB7QGxpbmsgQXBvbGxvQ2xpZW50fS5cbiAgICpcbiAgICogQHBhcmFtIGxpbmsgVGhlIHtAbGluayBBcG9sbG9MaW5rfSBvdmVyIHdoaWNoIEdyYXBoUUwgZG9jdW1lbnRzIHdpbGwgYmUgcmVzb2x2ZWQgaW50byBhIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAcGFyYW0gY2FjaGUgVGhlIGluaXRpYWwgY2FjaGUgdG8gdXNlIGluIHRoZSBkYXRhIHN0b3JlLlxuICAgKlxuICAgKiBAcGFyYW0gc3NyTW9kZSBEZXRlcm1pbmVzIHdoZXRoZXIgdGhpcyBpcyBiZWluZyBydW4gaW4gU2VydmVyIFNpZGUgUmVuZGVyaW5nIChTU1IpIG1vZGUuXG4gICAqXG4gICAqIEBwYXJhbSBzc3JGb3JjZUZldGNoRGVsYXkgRGV0ZXJtaW5lcyB0aGUgdGltZSBpbnRlcnZhbCBiZWZvcmUgd2UgZm9yY2UgZmV0Y2ggcXVlcmllcyBmb3IgYVxuICAgKiBzZXJ2ZXIgc2lkZSByZW5kZXIuXG4gICAqXG4gICAqIEBwYXJhbSBxdWVyeURlZHVwbGljYXRpb24gSWYgc2V0IHRvIGZhbHNlLCBhIHF1ZXJ5IHdpbGwgc3RpbGwgYmUgc2VudCB0byB0aGUgc2VydmVyIGV2ZW4gaWYgYSBxdWVyeVxuICAgKiB3aXRoIGlkZW50aWNhbCBwYXJhbWV0ZXJzIChxdWVyeSwgdmFyaWFibGVzLCBvcGVyYXRpb25OYW1lKSBpcyBhbHJlYWR5IGluIGZsaWdodC5cbiAgICpcbiAgICogQHBhcmFtIGRlZmF1bHRPcHRpb25zIFVzZWQgdG8gc2V0IGFwcGxpY2F0aW9uIHdpZGUgZGVmYXVsdHMgZm9yIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyBzdXBwbGllZCB0byBgd2F0Y2hRdWVyeWAsIGBxdWVyeWAsIG9yXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBgbXV0YXRlYC5cbiAgICpcbiAgICogQHBhcmFtIGFzc3VtZUltbXV0YWJsZVJlc3VsdHMgV2hlbiB0aGlzIG9wdGlvbiBpcyB0cnVlLCB0aGUgY2xpZW50IHdpbGwgYXNzdW1lIHJlc3VsdHNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhZCBmcm9tIHRoZSBjYWNoZSBhcmUgbmV2ZXIgbXV0YXRlZCBieSBhcHBsaWNhdGlvbiBjb2RlLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBlbmFibGVzIHN1YnN0YW50aWFsIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbnMuIFBhc3NpbmdcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHsgZnJlZXplUmVzdWx0czogdHJ1ZSB9YCB0byB0aGUgYEluTWVtb3J5Q2FjaGVgIGNvbnN0cnVjdG9yXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbiBoZWxwIGVuZm9yY2UgdGhpcyBpbW11dGFiaWxpdHkuXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIEEgY3VzdG9tIG5hbWUgdGhhdCBjYW4gYmUgdXNlZCB0byBpZGVudGlmeSB0aGlzIGNsaWVudCwgd2hlblxuICAgKiAgICAgICAgICAgICB1c2luZyBBcG9sbG8gY2xpZW50IGF3YXJlbmVzcyBmZWF0dXJlcy4gRS5nLiBcImlPU1wiLlxuICAgKlxuICAgKiBAcGFyYW0gdmVyc2lvbiBBIGN1c3RvbSB2ZXJzaW9uIHRoYXQgY2FuIGJlIHVzZWQgdG8gaWRlbnRpZnkgdGhpcyBjbGllbnQsXG4gICAqICAgICAgICAgICAgICAgIHdoZW4gdXNpbmcgQXBvbGxvIGNsaWVudCBhd2FyZW5lc3MgZmVhdHVyZXMuIFRoaXMgaXMgdGhlXG4gICAqICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgeW91ciBjbGllbnQsIHdoaWNoIHlvdSBtYXkgd2FudCB0byBpbmNyZW1lbnQgb25cbiAgICogICAgICAgICAgICAgICAgbmV3IGJ1aWxkcy4gVGhpcyBpcyBOT1QgdGhlIHZlcnNpb24gb2YgQXBvbGxvIENsaWVudCB0aGF0XG4gICAqICAgICAgICAgICAgICAgIHlvdSBhcmUgdXNpbmcuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBBcG9sbG9DbGllbnRPcHRpb25zPFRDYWNoZVNoYXBlPikge1xuICAgIGNvbnN0IHtcbiAgICAgIGNhY2hlLFxuICAgICAgc3NyTW9kZSA9IGZhbHNlLFxuICAgICAgc3NyRm9yY2VGZXRjaERlbGF5ID0gMCxcbiAgICAgIGNvbm5lY3RUb0RldlRvb2xzLFxuICAgICAgcXVlcnlEZWR1cGxpY2F0aW9uID0gdHJ1ZSxcbiAgICAgIGRlZmF1bHRPcHRpb25zLFxuICAgICAgYXNzdW1lSW1tdXRhYmxlUmVzdWx0cyA9IGZhbHNlLFxuICAgICAgcmVzb2x2ZXJzLFxuICAgICAgdHlwZURlZnMsXG4gICAgICBmcmFnbWVudE1hdGNoZXIsXG4gICAgICBuYW1lOiBjbGllbnRBd2FyZW5lc3NOYW1lLFxuICAgICAgdmVyc2lvbjogY2xpZW50QXdhcmVuZXNzVmVyc2lvbixcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGxldCB7IGxpbmsgfSA9IG9wdGlvbnM7XG5cbiAgICAvLyBJZiBhIGxpbmsgaGFzbid0IGJlZW4gZGVmaW5lZCwgYnV0IGxvY2FsIHN0YXRlIHJlc29sdmVycyBoYXZlIGJlZW4gc2V0LFxuICAgIC8vIHNldHVwIGEgZGVmYXVsdCBlbXB0eSBsaW5rLlxuICAgIGlmICghbGluayAmJiByZXNvbHZlcnMpIHtcbiAgICAgIGxpbmsgPSBBcG9sbG9MaW5rLmVtcHR5KCk7XG4gICAgfVxuXG4gICAgaWYgKCFsaW5rIHx8ICFjYWNoZSkge1xuICAgICAgdGhyb3cgbmV3IEludmFyaWFudEVycm9yKFxuICAgICAgICBcIkluIG9yZGVyIHRvIGluaXRpYWxpemUgQXBvbGxvIENsaWVudCwgeW91IG11c3Qgc3BlY2lmeSAnbGluaycgYW5kICdjYWNoZScgcHJvcGVydGllcyBpbiB0aGUgb3B0aW9ucyBvYmplY3QuXFxuXCIgK1xuICAgICAgICBcIlRoZXNlIG9wdGlvbnMgYXJlIHBhcnQgb2YgdGhlIHVwZ3JhZGUgcmVxdWlyZW1lbnRzIHdoZW4gbWlncmF0aW5nIGZyb20gQXBvbGxvIENsaWVudCAxLnggdG8gQXBvbGxvIENsaWVudCAyLnguXFxuXCIgK1xuICAgICAgICBcIkZvciBtb3JlIGluZm9ybWF0aW9uLCBwbGVhc2UgdmlzaXQ6IGh0dHBzOi8vd3d3LmFwb2xsb2dyYXBocWwuY29tL2RvY3MvdHV0b3JpYWwvY2xpZW50Lmh0bWwjYXBvbGxvLWNsaWVudC1zZXR1cFwiXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHJlbW92ZSBhcG9sbG8tY2xpZW50IHN1cHBvcnRlZCBkaXJlY3RpdmVzXG4gICAgdGhpcy5saW5rID0gbGluaztcbiAgICB0aGlzLmNhY2hlID0gY2FjaGU7XG4gICAgdGhpcy5zdG9yZSA9IG5ldyBEYXRhU3RvcmUoY2FjaGUpO1xuICAgIHRoaXMuZGlzYWJsZU5ldHdvcmtGZXRjaGVzID0gc3NyTW9kZSB8fCBzc3JGb3JjZUZldGNoRGVsYXkgPiAwO1xuICAgIHRoaXMucXVlcnlEZWR1cGxpY2F0aW9uID0gcXVlcnlEZWR1cGxpY2F0aW9uO1xuICAgIHRoaXMuZGVmYXVsdE9wdGlvbnMgPSBkZWZhdWx0T3B0aW9ucyB8fCB7fTtcbiAgICB0aGlzLnR5cGVEZWZzID0gdHlwZURlZnM7XG5cbiAgICBpZiAoc3NyRm9yY2VGZXRjaERlbGF5KSB7XG4gICAgICBzZXRUaW1lb3V0KFxuICAgICAgICAoKSA9PiAodGhpcy5kaXNhYmxlTmV0d29ya0ZldGNoZXMgPSBmYWxzZSksXG4gICAgICAgIHNzckZvcmNlRmV0Y2hEZWxheSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy53YXRjaFF1ZXJ5ID0gdGhpcy53YXRjaFF1ZXJ5LmJpbmQodGhpcyk7XG4gICAgdGhpcy5xdWVyeSA9IHRoaXMucXVlcnkuYmluZCh0aGlzKTtcbiAgICB0aGlzLm11dGF0ZSA9IHRoaXMubXV0YXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZXNldFN0b3JlID0gdGhpcy5yZXNldFN0b3JlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZUZldGNoT2JzZXJ2YWJsZVF1ZXJpZXMgPSB0aGlzLnJlRmV0Y2hPYnNlcnZhYmxlUXVlcmllcy5iaW5kKHRoaXMpO1xuXG4gICAgLy8gQXR0YWNoIHRoZSBjbGllbnQgaW5zdGFuY2UgdG8gd2luZG93IHRvIGxldCB1cyBiZSBmb3VuZCBieSBjaHJvbWUgZGV2dG9vbHMsIGJ1dCBvbmx5IGluXG4gICAgLy8gZGV2ZWxvcG1lbnQgbW9kZVxuICAgIGNvbnN0IGRlZmF1bHRDb25uZWN0VG9EZXZUb29scyA9XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgISh3aW5kb3cgYXMgYW55KS5fX0FQT0xMT19DTElFTlRfXztcblxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb25uZWN0VG9EZXZUb29scyA9PT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBkZWZhdWx0Q29ubmVjdFRvRGV2VG9vbHNcbiAgICAgICAgOiBjb25uZWN0VG9EZXZUb29scyAmJiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgKHdpbmRvdyBhcyBhbnkpLl9fQVBPTExPX0NMSUVOVF9fID0gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdWdnZXN0IGluc3RhbGxpbmcgdGhlIGRldnRvb2xzIGZvciBkZXZlbG9wZXJzIHdobyBkb24ndCBoYXZlIHRoZW1cbiAgICAgKi9cbiAgICBpZiAoIWhhc1N1Z2dlc3RlZERldnRvb2xzICYmIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGhhc1N1Z2dlc3RlZERldnRvb2xzID0gdHJ1ZTtcbiAgICAgIGlmIChcbiAgICAgICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgd2luZG93LmRvY3VtZW50ICYmXG4gICAgICAgIHdpbmRvdy50b3AgPT09IHdpbmRvdy5zZWxmXG4gICAgICApIHtcbiAgICAgICAgLy8gRmlyc3QgY2hlY2sgaWYgZGV2dG9vbHMgaXMgbm90IGluc3RhbGxlZFxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mICh3aW5kb3cgYXMgYW55KS5fX0FQT0xMT19ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcbiAgICAgICAgICAvLyBPbmx5IGZvciBDaHJvbWVcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yICYmXG4gICAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCAmJlxuICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lJykgPiAtMVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFxuICAgICAgICAgICAgICAnRG93bmxvYWQgdGhlIEFwb2xsbyBEZXZUb29scyAnICtcbiAgICAgICAgICAgICAgICAnZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6ICcgK1xuICAgICAgICAgICAgICAgICdodHRwczovL2Nocm9tZS5nb29nbGUuY29tL3dlYnN0b3JlL2RldGFpbC9hcG9sbG8tY2xpZW50LWRldmVsb3Blci10L2pka2tua2tiZWJiYXBpbGdvZWNjY2lnbGtmYm1ibmZtJyxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy52ZXJzaW9uID0gdmVyc2lvbjtcblxuICAgIHRoaXMubG9jYWxTdGF0ZSA9IG5ldyBMb2NhbFN0YXRlKHtcbiAgICAgIGNhY2hlLFxuICAgICAgY2xpZW50OiB0aGlzLFxuICAgICAgcmVzb2x2ZXJzLFxuICAgICAgZnJhZ21lbnRNYXRjaGVyLFxuICAgIH0pO1xuXG4gICAgdGhpcy5xdWVyeU1hbmFnZXIgPSBuZXcgUXVlcnlNYW5hZ2VyKHtcbiAgICAgIGxpbms6IHRoaXMubGluayxcbiAgICAgIHN0b3JlOiB0aGlzLnN0b3JlLFxuICAgICAgcXVlcnlEZWR1cGxpY2F0aW9uLFxuICAgICAgc3NyTW9kZSxcbiAgICAgIGNsaWVudEF3YXJlbmVzczoge1xuICAgICAgICBuYW1lOiBjbGllbnRBd2FyZW5lc3NOYW1lISxcbiAgICAgICAgdmVyc2lvbjogY2xpZW50QXdhcmVuZXNzVmVyc2lvbiEsXG4gICAgICB9LFxuICAgICAgbG9jYWxTdGF0ZTogdGhpcy5sb2NhbFN0YXRlLFxuICAgICAgYXNzdW1lSW1tdXRhYmxlUmVzdWx0cyxcbiAgICAgIG9uQnJvYWRjYXN0OiAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRldlRvb2xzSG9va0NiKSB7XG4gICAgICAgICAgdGhpcy5kZXZUb29sc0hvb2tDYih7XG4gICAgICAgICAgICBhY3Rpb246IHt9LFxuICAgICAgICAgICAgc3RhdGU6IHtcbiAgICAgICAgICAgICAgcXVlcmllczogdGhpcy5xdWVyeU1hbmFnZXIucXVlcnlTdG9yZS5nZXRTdG9yZSgpLFxuICAgICAgICAgICAgICBtdXRhdGlvbnM6IHRoaXMucXVlcnlNYW5hZ2VyLm11dGF0aW9uU3RvcmUuZ2V0U3RvcmUoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkYXRhV2l0aE9wdGltaXN0aWNSZXN1bHRzOiB0aGlzLmNhY2hlLmV4dHJhY3QodHJ1ZSksXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbCB0aGlzIG1ldGhvZCB0byB0ZXJtaW5hdGUgYW55IGFjdGl2ZSBjbGllbnQgcHJvY2Vzc2VzLCBtYWtpbmcgaXQgc2FmZVxuICAgKiB0byBkaXNwb3NlIG9mIHRoaXMgYEFwb2xsb0NsaWVudGAgaW5zdGFuY2UuXG4gICAqL1xuICBwdWJsaWMgc3RvcCgpIHtcbiAgICB0aGlzLnF1ZXJ5TWFuYWdlci5zdG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyB3YXRjaGVzIHRoZSBjYWNoZSBzdG9yZSBvZiB0aGUgcXVlcnkgYWNjb3JkaW5nIHRvIHRoZSBvcHRpb25zIHNwZWNpZmllZCBhbmRcbiAgICogcmV0dXJucyBhbiB7QGxpbmsgT2JzZXJ2YWJsZVF1ZXJ5fS4gV2UgY2FuIHN1YnNjcmliZSB0byB0aGlzIHtAbGluayBPYnNlcnZhYmxlUXVlcnl9IGFuZFxuICAgKiByZWNlaXZlIHVwZGF0ZWQgcmVzdWx0cyB0aHJvdWdoIGEgR3JhcGhRTCBvYnNlcnZlciB3aGVuIHRoZSBjYWNoZSBzdG9yZSBjaGFuZ2VzLlxuICAgKiA8cCAvPjxwIC8+XG4gICAqIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCBpcyBub3QgYW4gaW1wbGVtZW50YXRpb24gb2YgR3JhcGhRTCBzdWJzY3JpcHRpb25zLiBSYXRoZXIsXG4gICAqIGl0IHVzZXMgQXBvbGxvJ3Mgc3RvcmUgaW4gb3JkZXIgdG8gcmVhY3RpdmVseSBkZWxpdmVyIHVwZGF0ZXMgdG8geW91ciBxdWVyeSByZXN1bHRzLlxuICAgKiA8cCAvPjxwIC8+XG4gICAqIEZvciBleGFtcGxlLCBzdXBwb3NlIHlvdSBjYWxsIHdhdGNoUXVlcnkgb24gYSBHcmFwaFFMIHF1ZXJ5IHRoYXQgZmV0Y2hlcyBhIHBlcnNvbidzXG4gICAqIGZpcnN0IGFuZCBsYXN0IG5hbWUgYW5kIHRoaXMgcGVyc29uIGhhcyBhIHBhcnRpY3VsYXIgb2JqZWN0IGlkZW50aWZlciwgcHJvdmlkZWQgYnlcbiAgICogZGF0YUlkRnJvbU9iamVjdC4gTGF0ZXIsIGEgZGlmZmVyZW50IHF1ZXJ5IGZldGNoZXMgdGhhdCBzYW1lIHBlcnNvbidzXG4gICAqIGZpcnN0IGFuZCBsYXN0IG5hbWUgYW5kIHRoZSBmaXJzdCBuYW1lIGhhcyBub3cgY2hhbmdlZC4gVGhlbiwgYW55IG9ic2VydmVycyBhc3NvY2lhdGVkXG4gICAqIHdpdGggdGhlIHJlc3VsdHMgb2YgdGhlIGZpcnN0IHF1ZXJ5IHdpbGwgYmUgdXBkYXRlZCB3aXRoIGEgbmV3IHJlc3VsdCBvYmplY3QuXG4gICAqIDxwIC8+PHAgLz5cbiAgICogTm90ZSB0aGF0IGlmIHRoZSBjYWNoZSBkb2VzIG5vdCBjaGFuZ2UsIHRoZSBzdWJzY3JpYmVyIHdpbGwgKm5vdCogYmUgbm90aWZpZWQuXG4gICAqIDxwIC8+PHAgLz5cbiAgICogU2VlIFtoZXJlXShodHRwczovL21lZGl1bS5jb20vYXBvbGxvLXN0YWNrL3RoZS1jb25jZXB0cy1vZi1ncmFwaHFsLWJjNjhiZDgxOWJlMyMuM21iMGNiY21jKSBmb3JcbiAgICogYSBkZXNjcmlwdGlvbiBvZiBzdG9yZSByZWFjdGl2aXR5LlxuICAgKi9cbiAgcHVibGljIHdhdGNoUXVlcnk8VCA9IGFueSwgVFZhcmlhYmxlcyA9IE9wZXJhdGlvblZhcmlhYmxlcz4oXG4gICAgb3B0aW9uczogV2F0Y2hRdWVyeU9wdGlvbnM8VFZhcmlhYmxlcz4sXG4gICk6IE9ic2VydmFibGVRdWVyeTxULCBUVmFyaWFibGVzPiB7XG4gICAgaWYgKHRoaXMuZGVmYXVsdE9wdGlvbnMud2F0Y2hRdWVyeSkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0T3B0aW9ucy53YXRjaFF1ZXJ5LFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgfSBhcyBXYXRjaFF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzPjtcbiAgICB9XG5cbiAgICAvLyBYWFggT3ZlcndyaXRpbmcgb3B0aW9ucyBpcyBwcm9iYWJseSBub3QgdGhlIGJlc3Qgd2F5IHRvIGRvIHRoaXMgbG9uZyB0ZXJtLi4uXG4gICAgaWYgKFxuICAgICAgdGhpcy5kaXNhYmxlTmV0d29ya0ZldGNoZXMgJiZcbiAgICAgIChvcHRpb25zLmZldGNoUG9saWN5ID09PSAnbmV0d29yay1vbmx5JyB8fFxuICAgICAgICBvcHRpb25zLmZldGNoUG9saWN5ID09PSAnY2FjaGUtYW5kLW5ldHdvcmsnKVxuICAgICkge1xuICAgICAgb3B0aW9ucyA9IHsgLi4ub3B0aW9ucywgZmV0Y2hQb2xpY3k6ICdjYWNoZS1maXJzdCcgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5xdWVyeU1hbmFnZXIud2F0Y2hRdWVyeTxULCBUVmFyaWFibGVzPihvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHJlc29sdmVzIGEgc2luZ2xlIHF1ZXJ5IGFjY29yZGluZyB0byB0aGUgb3B0aW9ucyBzcGVjaWZpZWQgYW5kXG4gICAqIHJldHVybnMgYSB7QGxpbmsgUHJvbWlzZX0gd2hpY2ggaXMgZWl0aGVyIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdGluZyBkYXRhXG4gICAqIG9yIHJlamVjdGVkIHdpdGggYW4gZXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSBvcHRpb25zIEFuIG9iamVjdCBvZiB0eXBlIHtAbGluayBRdWVyeU9wdGlvbnN9IHRoYXQgYWxsb3dzIHVzIHRvXG4gICAqIGRlc2NyaWJlIGhvdyB0aGlzIHF1ZXJ5IHNob3VsZCBiZSB0cmVhdGVkIGUuZy4gd2hldGhlciBpdCBzaG91bGQgaGl0IHRoZVxuICAgKiBzZXJ2ZXIgYXQgYWxsIG9yIGp1c3QgcmVzb2x2ZSBmcm9tIHRoZSBjYWNoZSwgZXRjLlxuICAgKi9cbiAgcHVibGljIHF1ZXJ5PFQgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICAgIG9wdGlvbnM6IFF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzPixcbiAgKTogUHJvbWlzZTxBcG9sbG9RdWVyeVJlc3VsdDxUPj4ge1xuICAgIGlmICh0aGlzLmRlZmF1bHRPcHRpb25zLnF1ZXJ5KSB7XG4gICAgICBvcHRpb25zID0geyAuLi50aGlzLmRlZmF1bHRPcHRpb25zLnF1ZXJ5LCAuLi5vcHRpb25zIH0gYXMgUXVlcnlPcHRpb25zPFxuICAgICAgICBUVmFyaWFibGVzXG4gICAgICA+O1xuICAgIH1cblxuICAgIGludmFyaWFudChcbiAgICAgIChvcHRpb25zLmZldGNoUG9saWN5IGFzIFdhdGNoUXVlcnlGZXRjaFBvbGljeSkgIT09ICdjYWNoZS1hbmQtbmV0d29yaycsXG4gICAgICAnVGhlIGNhY2hlLWFuZC1uZXR3b3JrIGZldGNoUG9saWN5IGRvZXMgbm90IHdvcmsgd2l0aCBjbGllbnQucXVlcnksIGJlY2F1c2UgJyArXG4gICAgICAnY2xpZW50LnF1ZXJ5IGNhbiBvbmx5IHJldHVybiBhIHNpbmdsZSByZXN1bHQuIFBsZWFzZSB1c2UgY2xpZW50LndhdGNoUXVlcnkgJyArXG4gICAgICAndG8gcmVjZWl2ZSBtdWx0aXBsZSByZXN1bHRzIGZyb20gdGhlIGNhY2hlIGFuZCB0aGUgbmV0d29yaywgb3IgY29uc2lkZXIgJyArXG4gICAgICAndXNpbmcgYSBkaWZmZXJlbnQgZmV0Y2hQb2xpY3ksIHN1Y2ggYXMgY2FjaGUtZmlyc3Qgb3IgbmV0d29yay1vbmx5LidcbiAgICApO1xuXG4gICAgaWYgKHRoaXMuZGlzYWJsZU5ldHdvcmtGZXRjaGVzICYmIG9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICduZXR3b3JrLW9ubHknKSB7XG4gICAgICBvcHRpb25zID0geyAuLi5vcHRpb25zLCBmZXRjaFBvbGljeTogJ2NhY2hlLWZpcnN0JyB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnF1ZXJ5TWFuYWdlci5xdWVyeTxUPihvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIHJlc29sdmVzIGEgc2luZ2xlIG11dGF0aW9uIGFjY29yZGluZyB0byB0aGUgb3B0aW9ucyBzcGVjaWZpZWQgYW5kIHJldHVybnMgYVxuICAgKiB7QGxpbmsgUHJvbWlzZX0gd2hpY2ggaXMgZWl0aGVyIHJlc29sdmVkIHdpdGggdGhlIHJlc3VsdGluZyBkYXRhIG9yIHJlamVjdGVkIHdpdGggYW5cbiAgICogZXJyb3IuXG4gICAqXG4gICAqIEl0IHRha2VzIG9wdGlvbnMgYXMgYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBrZXlzIGFuZCB2YWx1ZXM6XG4gICAqL1xuICBwdWJsaWMgbXV0YXRlPFQgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICAgIG9wdGlvbnM6IE11dGF0aW9uT3B0aW9uczxULCBUVmFyaWFibGVzPixcbiAgKTogUHJvbWlzZTxGZXRjaFJlc3VsdDxUPj4ge1xuICAgIGlmICh0aGlzLmRlZmF1bHRPcHRpb25zLm11dGF0ZSkge1xuICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgLi4udGhpcy5kZWZhdWx0T3B0aW9ucy5tdXRhdGUsXG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB9IGFzIE11dGF0aW9uT3B0aW9uczxULCBUVmFyaWFibGVzPjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5xdWVyeU1hbmFnZXIubXV0YXRlPFQ+KG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgc3Vic2NyaWJlcyB0byBhIGdyYXBocWwgc3Vic2NyaXB0aW9uIGFjY29yZGluZyB0byB0aGUgb3B0aW9ucyBzcGVjaWZpZWQgYW5kIHJldHVybnMgYW5cbiAgICoge0BsaW5rIE9ic2VydmFibGV9IHdoaWNoIGVpdGhlciBlbWl0cyByZWNlaXZlZCBkYXRhIG9yIGFuIGVycm9yLlxuICAgKi9cbiAgcHVibGljIHN1YnNjcmliZTxUID0gYW55LCBUVmFyaWFibGVzID0gT3BlcmF0aW9uVmFyaWFibGVzPihcbiAgICBvcHRpb25zOiBTdWJzY3JpcHRpb25PcHRpb25zPFRWYXJpYWJsZXM+LFxuICApOiBPYnNlcnZhYmxlPEZldGNoUmVzdWx0PFQ+PiB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlNYW5hZ2VyLnN0YXJ0R3JhcGhRTFN1YnNjcmlwdGlvbjxUPihvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmllcyB0byByZWFkIHNvbWUgZGF0YSBmcm9tIHRoZSBzdG9yZSBpbiB0aGUgc2hhcGUgb2YgdGhlIHByb3ZpZGVkXG4gICAqIEdyYXBoUUwgcXVlcnkgd2l0aG91dCBtYWtpbmcgYSBuZXR3b3JrIHJlcXVlc3QuIFRoaXMgbWV0aG9kIHdpbGwgc3RhcnQgYXRcbiAgICogdGhlIHJvb3QgcXVlcnkuIFRvIHN0YXJ0IGF0IGEgc3BlY2lmaWMgaWQgcmV0dXJuZWQgYnkgYGRhdGFJZEZyb21PYmplY3RgXG4gICAqIHVzZSBgcmVhZEZyYWdtZW50YC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGltaXN0aWMgU2V0IHRvIGB0cnVlYCB0byBhbGxvdyBgcmVhZFF1ZXJ5YCB0byByZXR1cm5cbiAgICogb3B0aW1pc3RpYyByZXN1bHRzLiBJcyBgZmFsc2VgIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBwdWJsaWMgcmVhZFF1ZXJ5PFQgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICAgIG9wdGlvbnM6IERhdGFQcm94eS5RdWVyeTxUVmFyaWFibGVzPixcbiAgICBvcHRpbWlzdGljOiBib29sZWFuID0gZmFsc2UsXG4gICk6IFQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5yZWFkUXVlcnk8VCwgVFZhcmlhYmxlcz4ob3B0aW9ucywgb3B0aW1pc3RpYyk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZXMgdG8gcmVhZCBzb21lIGRhdGEgZnJvbSB0aGUgc3RvcmUgaW4gdGhlIHNoYXBlIG9mIHRoZSBwcm92aWRlZFxuICAgKiBHcmFwaFFMIGZyYWdtZW50IHdpdGhvdXQgbWFraW5nIGEgbmV0d29yayByZXF1ZXN0LiBUaGlzIG1ldGhvZCB3aWxsIHJlYWQgYVxuICAgKiBHcmFwaFFMIGZyYWdtZW50IGZyb20gYW55IGFyYml0cmFyeSBpZCB0aGF0IGlzIGN1cnJlbnRseSBjYWNoZWQsIHVubGlrZVxuICAgKiBgcmVhZFF1ZXJ5YCB3aGljaCB3aWxsIG9ubHkgcmVhZCBmcm9tIHRoZSByb290IHF1ZXJ5LlxuICAgKlxuICAgKiBZb3UgbXVzdCBwYXNzIGluIGEgR3JhcGhRTCBkb2N1bWVudCB3aXRoIGEgc2luZ2xlIGZyYWdtZW50IG9yIGEgZG9jdW1lbnRcbiAgICogd2l0aCBtdWx0aXBsZSBmcmFnbWVudHMgdGhhdCByZXByZXNlbnQgd2hhdCB5b3UgYXJlIHJlYWRpbmcuIElmIHlvdSBwYXNzXG4gICAqIGluIGEgZG9jdW1lbnQgd2l0aCBtdWx0aXBsZSBmcmFnbWVudHMgdGhlbiB5b3UgbXVzdCBhbHNvIHNwZWNpZnkgYVxuICAgKiBgZnJhZ21lbnROYW1lYC5cbiAgICpcbiAgICogQHBhcmFtIG9wdGltaXN0aWMgU2V0IHRvIGB0cnVlYCB0byBhbGxvdyBgcmVhZEZyYWdtZW50YCB0byByZXR1cm5cbiAgICogb3B0aW1pc3RpYyByZXN1bHRzLiBJcyBgZmFsc2VgIGJ5IGRlZmF1bHQuXG4gICAqL1xuICBwdWJsaWMgcmVhZEZyYWdtZW50PFQgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICAgIG9wdGlvbnM6IERhdGFQcm94eS5GcmFnbWVudDxUVmFyaWFibGVzPixcbiAgICBvcHRpbWlzdGljOiBib29sZWFuID0gZmFsc2UsXG4gICk6IFQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5yZWFkRnJhZ21lbnQ8VCwgVFZhcmlhYmxlcz4ob3B0aW9ucywgb3B0aW1pc3RpYyk7XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIHNvbWUgZGF0YSBpbiB0aGUgc2hhcGUgb2YgdGhlIHByb3ZpZGVkIEdyYXBoUUwgcXVlcnkgZGlyZWN0bHkgdG9cbiAgICogdGhlIHN0b3JlLiBUaGlzIG1ldGhvZCB3aWxsIHN0YXJ0IGF0IHRoZSByb290IHF1ZXJ5LiBUbyBzdGFydCBhdCBhXG4gICAqIHNwZWNpZmljIGlkIHJldHVybmVkIGJ5IGBkYXRhSWRGcm9tT2JqZWN0YCB0aGVuIHVzZSBgd3JpdGVGcmFnbWVudGAuXG4gICAqL1xuICBwdWJsaWMgd3JpdGVRdWVyeTxURGF0YSA9IGFueSwgVFZhcmlhYmxlcyA9IE9wZXJhdGlvblZhcmlhYmxlcz4oXG4gICAgb3B0aW9uczogRGF0YVByb3h5LldyaXRlUXVlcnlPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5jYWNoZS53cml0ZVF1ZXJ5PFREYXRhLCBUVmFyaWFibGVzPihvcHRpb25zKTtcbiAgICB0aGlzLnF1ZXJ5TWFuYWdlci5icm9hZGNhc3RRdWVyaWVzKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgc29tZSBkYXRhIGluIHRoZSBzaGFwZSBvZiB0aGUgcHJvdmlkZWQgR3JhcGhRTCBmcmFnbWVudCBkaXJlY3RseSB0b1xuICAgKiB0aGUgc3RvcmUuIFRoaXMgbWV0aG9kIHdpbGwgd3JpdGUgdG8gYSBHcmFwaFFMIGZyYWdtZW50IGZyb20gYW55IGFyYml0cmFyeVxuICAgKiBpZCB0aGF0IGlzIGN1cnJlbnRseSBjYWNoZWQsIHVubGlrZSBgd3JpdGVRdWVyeWAgd2hpY2ggd2lsbCBvbmx5IHdyaXRlXG4gICAqIGZyb20gdGhlIHJvb3QgcXVlcnkuXG4gICAqXG4gICAqIFlvdSBtdXN0IHBhc3MgaW4gYSBHcmFwaFFMIGRvY3VtZW50IHdpdGggYSBzaW5nbGUgZnJhZ21lbnQgb3IgYSBkb2N1bWVudFxuICAgKiB3aXRoIG11bHRpcGxlIGZyYWdtZW50cyB0aGF0IHJlcHJlc2VudCB3aGF0IHlvdSBhcmUgd3JpdGluZy4gSWYgeW91IHBhc3NcbiAgICogaW4gYSBkb2N1bWVudCB3aXRoIG11bHRpcGxlIGZyYWdtZW50cyB0aGVuIHlvdSBtdXN0IGFsc28gc3BlY2lmeSBhXG4gICAqIGBmcmFnbWVudE5hbWVgLlxuICAgKi9cbiAgcHVibGljIHdyaXRlRnJhZ21lbnQ8VERhdGEgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICAgIG9wdGlvbnM6IERhdGFQcm94eS5Xcml0ZUZyYWdtZW50T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz4sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY2FjaGUud3JpdGVGcmFnbWVudDxURGF0YSwgVFZhcmlhYmxlcz4ob3B0aW9ucyk7XG4gICAgdGhpcy5xdWVyeU1hbmFnZXIuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU3VnYXIgZm9yIHdyaXRlUXVlcnkgJiB3cml0ZUZyYWdtZW50XG4gICAqIFRoaXMgbWV0aG9kIHdpbGwgY29uc3RydWN0IGEgcXVlcnkgZnJvbSB0aGUgZGF0YSBvYmplY3QgcGFzc2VkIGluLlxuICAgKiBJZiBubyBpZCBpcyBzdXBwbGllZCwgd3JpdGVEYXRhIHdpbGwgd3JpdGUgdGhlIGRhdGEgdG8gdGhlIHJvb3QuXG4gICAqIElmIGFuIGlkIGlzIHN1cHBsaWVkLCB3cml0ZURhdGEgd2lsbCB3cml0ZSBhIGZyYWdtZW50IHRvIHRoZSBvYmplY3RcbiAgICogc3BlY2lmaWVkIGJ5IHRoZSBpZCBpbiB0aGUgc3RvcmUuXG4gICAqXG4gICAqIFNpbmNlIHlvdSBhcmVuJ3QgcGFzc2luZyBpbiBhIHF1ZXJ5IHRvIGNoZWNrIHRoZSBzaGFwZSBvZiB0aGUgZGF0YSxcbiAgICogeW91IG11c3QgcGFzcyBpbiBhbiBvYmplY3QgdGhhdCBjb25mb3JtcyB0byB0aGUgc2hhcGUgb2YgdmFsaWQgR3JhcGhRTCBkYXRhLlxuICAgKi9cbiAgcHVibGljIHdyaXRlRGF0YTxURGF0YSA9IGFueT4oXG4gICAgb3B0aW9uczogRGF0YVByb3h5LldyaXRlRGF0YU9wdGlvbnM8VERhdGE+LFxuICApOiB2b2lkIHtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmNhY2hlLndyaXRlRGF0YTxURGF0YT4ob3B0aW9ucyk7XG4gICAgdGhpcy5xdWVyeU1hbmFnZXIuYnJvYWRjYXN0UXVlcmllcygpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwdWJsaWMgX19hY3Rpb25Ib29rRm9yRGV2VG9vbHMoY2I6ICgpID0+IGFueSkge1xuICAgIHRoaXMuZGV2VG9vbHNIb29rQ2IgPSBjYjtcbiAgfVxuXG4gIHB1YmxpYyBfX3JlcXVlc3RSYXcocGF5bG9hZDogR3JhcGhRTFJlcXVlc3QpOiBPYnNlcnZhYmxlPEV4ZWN1dGlvblJlc3VsdD4ge1xuICAgIHJldHVybiBleGVjdXRlKHRoaXMubGluaywgcGF5bG9hZCk7XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBpbml0aWFsaXplcyB0aGUgcXVlcnkgbWFuYWdlciB0aGF0IHRyYWNrcyBxdWVyaWVzIGFuZCB0aGUgY2FjaGVcbiAgICovXG4gIHB1YmxpYyBpbml0UXVlcnlNYW5hZ2VyKCk6IFF1ZXJ5TWFuYWdlcjxUQ2FjaGVTaGFwZT4ge1xuICAgIGludmFyaWFudC53YXJuKFxuICAgICAgJ0NhbGxpbmcgdGhlIGluaXRRdWVyeU1hbmFnZXIgbWV0aG9kIGlzIG5vIGxvbmdlciBuZWNlc3NhcnksICcgK1xuICAgICAgICAnYW5kIGl0IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIEFwb2xsb0NsaWVudCBpbiB2ZXJzaW9uIDMuMC4nLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlNYW5hZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0cyB5b3VyIGVudGlyZSBzdG9yZSBieSBjbGVhcmluZyBvdXQgeW91ciBjYWNoZSBhbmQgdGhlbiByZS1leGVjdXRpbmdcbiAgICogYWxsIG9mIHlvdXIgYWN0aXZlIHF1ZXJpZXMuIFRoaXMgbWFrZXMgaXQgc28gdGhhdCB5b3UgbWF5IGd1YXJhbnRlZSB0aGF0XG4gICAqIHRoZXJlIGlzIG5vIGRhdGEgbGVmdCBpbiB5b3VyIHN0b3JlIGZyb20gYSB0aW1lIGJlZm9yZSB5b3UgY2FsbGVkIHRoaXNcbiAgICogbWV0aG9kLlxuICAgKlxuICAgKiBgcmVzZXRTdG9yZSgpYCBpcyB1c2VmdWwgd2hlbiB5b3VyIHVzZXIganVzdCBsb2dnZWQgb3V0LiBZb3XigJl2ZSByZW1vdmVkIHRoZVxuICAgKiB1c2VyIHNlc3Npb24sIGFuZCB5b3Ugbm93IHdhbnQgdG8gbWFrZSBzdXJlIHRoYXQgYW55IHJlZmVyZW5jZXMgdG8gZGF0YSB5b3VcbiAgICogbWlnaHQgaGF2ZSBmZXRjaGVkIHdoaWxlIHRoZSB1c2VyIHNlc3Npb24gd2FzIGFjdGl2ZSBpcyBnb25lLlxuICAgKlxuICAgKiBJdCBpcyBpbXBvcnRhbnQgdG8gcmVtZW1iZXIgdGhhdCBgcmVzZXRTdG9yZSgpYCAqd2lsbCogcmVmZXRjaCBhbnkgYWN0aXZlXG4gICAqIHF1ZXJpZXMuIFRoaXMgbWVhbnMgdGhhdCBhbnkgY29tcG9uZW50cyB0aGF0IG1pZ2h0IGJlIG1vdW50ZWQgd2lsbCBleGVjdXRlXG4gICAqIHRoZWlyIHF1ZXJpZXMgYWdhaW4gdXNpbmcgeW91ciBuZXR3b3JrIGludGVyZmFjZS4gSWYgeW91IGRvIG5vdCB3YW50IHRvXG4gICAqIHJlLWV4ZWN1dGUgYW55IHF1ZXJpZXMgdGhlbiB5b3Ugc2hvdWxkIG1ha2Ugc3VyZSB0byBzdG9wIHdhdGNoaW5nIGFueVxuICAgKiBhY3RpdmUgcXVlcmllcy5cbiAgICovXG4gIHB1YmxpYyByZXNldFN0b3JlKCk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8YW55PltdIHwgbnVsbD4ge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5xdWVyeU1hbmFnZXIuY2xlYXJTdG9yZSgpKVxuICAgICAgLnRoZW4oKCkgPT4gUHJvbWlzZS5hbGwodGhpcy5yZXNldFN0b3JlQ2FsbGJhY2tzLm1hcChmbiA9PiBmbigpKSkpXG4gICAgICAudGhlbigoKSA9PiB0aGlzLnJlRmV0Y2hPYnNlcnZhYmxlUXVlcmllcygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGRhdGEgZnJvbSB0aGUgc3RvcmUuIFVubGlrZSBgcmVzZXRTdG9yZWAsIGBjbGVhclN0b3JlYCB3aWxsXG4gICAqIG5vdCByZWZldGNoIGFueSBhY3RpdmUgcXVlcmllcy5cbiAgICovXG4gIHB1YmxpYyBjbGVhclN0b3JlKCk6IFByb21pc2U8YW55W10+IHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKClcbiAgICAgIC50aGVuKCgpID0+IHRoaXMucXVlcnlNYW5hZ2VyLmNsZWFyU3RvcmUoKSlcbiAgICAgIC50aGVuKCgpID0+IFByb21pc2UuYWxsKHRoaXMuY2xlYXJTdG9yZUNhbGxiYWNrcy5tYXAoZm4gPT4gZm4oKSkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgY2FsbGJhY2tzIHRvIGJlIHJlZ2lzdGVyZWQgdGhhdCBhcmUgZXhlY3V0ZWQgd2hlbiB0aGUgc3RvcmUgaXNcbiAgICogcmVzZXQuIGBvblJlc2V0U3RvcmVgIHJldHVybnMgYW4gdW5zdWJzY3JpYmUgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZFxuICAgKiB0byByZW1vdmUgcmVnaXN0ZXJlZCBjYWxsYmFja3MuXG4gICAqL1xuICBwdWJsaWMgb25SZXNldFN0b3JlKGNiOiAoKSA9PiBQcm9taXNlPGFueT4pOiAoKSA9PiB2b2lkIHtcbiAgICB0aGlzLnJlc2V0U3RvcmVDYWxsYmFja3MucHVzaChjYik7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHRoaXMucmVzZXRTdG9yZUNhbGxiYWNrcyA9IHRoaXMucmVzZXRTdG9yZUNhbGxiYWNrcy5maWx0ZXIoYyA9PiBjICE9PSBjYik7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgY2FsbGJhY2tzIHRvIGJlIHJlZ2lzdGVyZWQgdGhhdCBhcmUgZXhlY3V0ZWQgd2hlbiB0aGUgc3RvcmUgaXNcbiAgICogY2xlYXJlZC4gYG9uQ2xlYXJTdG9yZWAgcmV0dXJucyBhbiB1bnN1YnNjcmliZSBmdW5jdGlvbiB0aGF0IGNhbiBiZSB1c2VkXG4gICAqIHRvIHJlbW92ZSByZWdpc3RlcmVkIGNhbGxiYWNrcy5cbiAgICovXG4gIHB1YmxpYyBvbkNsZWFyU3RvcmUoY2I6ICgpID0+IFByb21pc2U8YW55Pik6ICgpID0+IHZvaWQge1xuICAgIHRoaXMuY2xlYXJTdG9yZUNhbGxiYWNrcy5wdXNoKGNiKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdGhpcy5jbGVhclN0b3JlQ2FsbGJhY2tzID0gdGhpcy5jbGVhclN0b3JlQ2FsbGJhY2tzLmZpbHRlcihjID0+IGMgIT09IGNiKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZmV0Y2hlcyBhbGwgb2YgeW91ciBhY3RpdmUgcXVlcmllcy5cbiAgICpcbiAgICogYHJlRmV0Y2hPYnNlcnZhYmxlUXVlcmllcygpYCBpcyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gYnJpbmcgdGhlIGNsaWVudCBiYWNrIHRvIHByb3BlciBzdGF0ZSBpbiBjYXNlIG9mIGEgbmV0d29yayBvdXRhZ2VcbiAgICpcbiAgICogSXQgaXMgaW1wb3J0YW50IHRvIHJlbWVtYmVyIHRoYXQgYHJlRmV0Y2hPYnNlcnZhYmxlUXVlcmllcygpYCAqd2lsbCogcmVmZXRjaCBhbnkgYWN0aXZlXG4gICAqIHF1ZXJpZXMuIFRoaXMgbWVhbnMgdGhhdCBhbnkgY29tcG9uZW50cyB0aGF0IG1pZ2h0IGJlIG1vdW50ZWQgd2lsbCBleGVjdXRlXG4gICAqIHRoZWlyIHF1ZXJpZXMgYWdhaW4gdXNpbmcgeW91ciBuZXR3b3JrIGludGVyZmFjZS4gSWYgeW91IGRvIG5vdCB3YW50IHRvXG4gICAqIHJlLWV4ZWN1dGUgYW55IHF1ZXJpZXMgdGhlbiB5b3Ugc2hvdWxkIG1ha2Ugc3VyZSB0byBzdG9wIHdhdGNoaW5nIGFueVxuICAgKiBhY3RpdmUgcXVlcmllcy5cbiAgICogVGFrZXMgb3B0aW9uYWwgcGFyYW1ldGVyIGBpbmNsdWRlU3RhbmRieWAgd2hpY2ggd2lsbCBpbmNsdWRlIHF1ZXJpZXMgaW4gc3RhbmRieS1tb2RlIHdoZW4gcmVmZXRjaGluZy5cbiAgICovXG4gIHB1YmxpYyByZUZldGNoT2JzZXJ2YWJsZVF1ZXJpZXMoXG4gICAgaW5jbHVkZVN0YW5kYnk/OiBib29sZWFuLFxuICApOiBQcm9taXNlPEFwb2xsb1F1ZXJ5UmVzdWx0PGFueT5bXT4ge1xuICAgIHJldHVybiB0aGlzLnF1ZXJ5TWFuYWdlci5yZUZldGNoT2JzZXJ2YWJsZVF1ZXJpZXMoaW5jbHVkZVN0YW5kYnkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV4cG9zZXMgdGhlIGNhY2hlJ3MgY29tcGxldGUgc3RhdGUsIGluIGEgc2VyaWFsaXphYmxlIGZvcm1hdCBmb3IgbGF0ZXIgcmVzdG9yYXRpb24uXG4gICAqL1xuICBwdWJsaWMgZXh0cmFjdChvcHRpbWlzdGljPzogYm9vbGVhbik6IFRDYWNoZVNoYXBlIHtcbiAgICByZXR1cm4gdGhpcy5jYWNoZS5leHRyYWN0KG9wdGltaXN0aWMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGV4aXN0aW5nIHN0YXRlIGluIHRoZSBjYWNoZSAoaWYgYW55KSB3aXRoIHRoZSB2YWx1ZXMgZXhwcmVzc2VkIGJ5XG4gICAqIGBzZXJpYWxpemVkU3RhdGVgLlxuICAgKlxuICAgKiBDYWxsZWQgd2hlbiBoeWRyYXRpbmcgYSBjYWNoZSAoc2VydmVyIHNpZGUgcmVuZGVyaW5nLCBvciBvZmZsaW5lIHN0b3JhZ2UpLFxuICAgKiBhbmQgYWxzbyAocG90ZW50aWFsbHkpIGR1cmluZyBob3QgcmVsb2Fkcy5cbiAgICovXG4gIHB1YmxpYyByZXN0b3JlKHNlcmlhbGl6ZWRTdGF0ZTogVENhY2hlU2hhcGUpOiBBcG9sbG9DYWNoZTxUQ2FjaGVTaGFwZT4ge1xuICAgIHJldHVybiB0aGlzLmNhY2hlLnJlc3RvcmUoc2VyaWFsaXplZFN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYWRkaXRpb25hbCBsb2NhbCByZXNvbHZlcnMuXG4gICAqL1xuICBwdWJsaWMgYWRkUmVzb2x2ZXJzKHJlc29sdmVyczogUmVzb2x2ZXJzIHwgUmVzb2x2ZXJzW10pIHtcbiAgICB0aGlzLmxvY2FsU3RhdGUuYWRkUmVzb2x2ZXJzKHJlc29sdmVycyk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IChvdmVycmlkZSBleGlzdGluZykgbG9jYWwgcmVzb2x2ZXJzLlxuICAgKi9cbiAgcHVibGljIHNldFJlc29sdmVycyhyZXNvbHZlcnM6IFJlc29sdmVycyB8IFJlc29sdmVyc1tdKSB7XG4gICAgdGhpcy5sb2NhbFN0YXRlLnNldFJlc29sdmVycyhyZXNvbHZlcnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgcmVnaXN0ZXJlZCBsb2NhbCByZXNvbHZlcnMuXG4gICAqL1xuICBwdWJsaWMgZ2V0UmVzb2x2ZXJzKCkge1xuICAgIHJldHVybiB0aGlzLmxvY2FsU3RhdGUuZ2V0UmVzb2x2ZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgY3VzdG9tIGxvY2FsIHN0YXRlIGZyYWdtZW50IG1hdGNoZXIuXG4gICAqL1xuICBwdWJsaWMgc2V0TG9jYWxTdGF0ZUZyYWdtZW50TWF0Y2hlcihmcmFnbWVudE1hdGNoZXI6IEZyYWdtZW50TWF0Y2hlcikge1xuICAgIHRoaXMubG9jYWxTdGF0ZS5zZXRGcmFnbWVudE1hdGNoZXIoZnJhZ21lbnRNYXRjaGVyKTtcbiAgfVxufVxuIiwiZXhwb3J0IGNvbnN0IHZlcnNpb24gPSBcIjIuNi44XCIiLCJpbXBvcnQge1xuICBEb2N1bWVudE5vZGUsXG4gIERlZmluaXRpb25Ob2RlLFxuICBWYXJpYWJsZURlZmluaXRpb25Ob2RlLFxuICBPcGVyYXRpb25EZWZpbml0aW9uTm9kZVxufSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJ3RzLWludmFyaWFudCc7XG5cbmV4cG9ydCBlbnVtIERvY3VtZW50VHlwZSB7XG4gIFF1ZXJ5LFxuICBNdXRhdGlvbixcbiAgU3Vic2NyaXB0aW9uXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSURvY3VtZW50RGVmaW5pdGlvbiB7XG4gIHR5cGU6IERvY3VtZW50VHlwZTtcbiAgbmFtZTogc3RyaW5nO1xuICB2YXJpYWJsZXM6IFJlYWRvbmx5QXJyYXk8VmFyaWFibGVEZWZpbml0aW9uTm9kZT47XG59XG5cbmNvbnN0IGNhY2hlID0gbmV3IE1hcCgpO1xuXG5leHBvcnQgZnVuY3Rpb24gb3BlcmF0aW9uTmFtZSh0eXBlOiBEb2N1bWVudFR5cGUpIHtcbiAgbGV0IG5hbWU7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgRG9jdW1lbnRUeXBlLlF1ZXJ5OlxuICAgICAgbmFtZSA9ICdRdWVyeSc7XG4gICAgICBicmVhaztcbiAgICBjYXNlIERvY3VtZW50VHlwZS5NdXRhdGlvbjpcbiAgICAgIG5hbWUgPSAnTXV0YXRpb24nO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBEb2N1bWVudFR5cGUuU3Vic2NyaXB0aW9uOlxuICAgICAgbmFtZSA9ICdTdWJzY3JpcHRpb24nO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG5hbWU7XG59XG5cbi8vIFRoaXMgcGFyc2VyIGlzIG1vc3RseSB1c2VkIHRvIHNhZnRleSBjaGVjayBpbmNvbWluZyBkb2N1bWVudHMuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VyKGRvY3VtZW50OiBEb2N1bWVudE5vZGUpOiBJRG9jdW1lbnREZWZpbml0aW9uIHtcbiAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGRvY3VtZW50KTtcbiAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZDtcblxuICBsZXQgdmFyaWFibGVzLCB0eXBlLCBuYW1lO1xuXG4gIGludmFyaWFudChcbiAgICAhIWRvY3VtZW50ICYmICEhZG9jdW1lbnQua2luZCxcbiAgICBgQXJndW1lbnQgb2YgJHtkb2N1bWVudH0gcGFzc2VkIHRvIHBhcnNlciB3YXMgbm90IGEgdmFsaWQgR3JhcGhRTCBgICtcbiAgICAgIGBEb2N1bWVudE5vZGUuIFlvdSBtYXkgbmVlZCB0byB1c2UgJ2dyYXBocWwtdGFnJyBvciBhbm90aGVyIG1ldGhvZCBgICtcbiAgICAgIGB0byBjb252ZXJ0IHlvdXIgb3BlcmF0aW9uIGludG8gYSBkb2N1bWVudGBcbiAgKTtcblxuICBjb25zdCBmcmFnbWVudHMgPSBkb2N1bWVudC5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgKHg6IERlZmluaXRpb25Ob2RlKSA9PiB4LmtpbmQgPT09ICdGcmFnbWVudERlZmluaXRpb24nXG4gICk7XG5cbiAgY29uc3QgcXVlcmllcyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcihcbiAgICAoeDogRGVmaW5pdGlvbk5vZGUpID0+XG4gICAgICB4LmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJyAmJiB4Lm9wZXJhdGlvbiA9PT0gJ3F1ZXJ5J1xuICApO1xuXG4gIGNvbnN0IG11dGF0aW9ucyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcihcbiAgICAoeDogRGVmaW5pdGlvbk5vZGUpID0+XG4gICAgICB4LmtpbmQgPT09ICdPcGVyYXRpb25EZWZpbml0aW9uJyAmJiB4Lm9wZXJhdGlvbiA9PT0gJ211dGF0aW9uJ1xuICApO1xuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbnMgPSBkb2N1bWVudC5kZWZpbml0aW9ucy5maWx0ZXIoXG4gICAgKHg6IERlZmluaXRpb25Ob2RlKSA9PlxuICAgICAgeC5raW5kID09PSAnT3BlcmF0aW9uRGVmaW5pdGlvbicgJiYgeC5vcGVyYXRpb24gPT09ICdzdWJzY3JpcHRpb24nXG4gICk7XG5cbiAgaW52YXJpYW50KFxuICAgICFmcmFnbWVudHMubGVuZ3RoIHx8XG4gICAgICAocXVlcmllcy5sZW5ndGggfHwgbXV0YXRpb25zLmxlbmd0aCB8fCBzdWJzY3JpcHRpb25zLmxlbmd0aCksXG4gICAgYFBhc3Npbmcgb25seSBhIGZyYWdtZW50IHRvICdncmFwaHFsJyBpcyBub3QgeWV0IHN1cHBvcnRlZC4gYCArXG4gICAgICBgWW91IG11c3QgaW5jbHVkZSBhIHF1ZXJ5LCBzdWJzY3JpcHRpb24gb3IgbXV0YXRpb24gYXMgd2VsbGBcbiAgKTtcblxuICBpbnZhcmlhbnQoXG4gICAgcXVlcmllcy5sZW5ndGggKyBtdXRhdGlvbnMubGVuZ3RoICsgc3Vic2NyaXB0aW9ucy5sZW5ndGggPD0gMSxcbiAgICBgcmVhY3QtYXBvbGxvIG9ubHkgc3VwcG9ydHMgYSBxdWVyeSwgc3Vic2NyaXB0aW9uLCBvciBhIG11dGF0aW9uIHBlciBIT0MuIGAgK1xuICAgICAgYCR7ZG9jdW1lbnR9IGhhZCAke3F1ZXJpZXMubGVuZ3RofSBxdWVyaWVzLCAke3N1YnNjcmlwdGlvbnMubGVuZ3RofSBgICtcbiAgICAgIGBzdWJzY3JpcHRpb25zIGFuZCAke211dGF0aW9ucy5sZW5ndGh9IG11dGF0aW9ucy4gYCArXG4gICAgICBgWW91IGNhbiB1c2UgJ2NvbXBvc2UnIHRvIGpvaW4gbXVsdGlwbGUgb3BlcmF0aW9uIHR5cGVzIHRvIGEgY29tcG9uZW50YFxuICApO1xuXG4gIHR5cGUgPSBxdWVyaWVzLmxlbmd0aCA/IERvY3VtZW50VHlwZS5RdWVyeSA6IERvY3VtZW50VHlwZS5NdXRhdGlvbjtcbiAgaWYgKCFxdWVyaWVzLmxlbmd0aCAmJiAhbXV0YXRpb25zLmxlbmd0aCkgdHlwZSA9IERvY3VtZW50VHlwZS5TdWJzY3JpcHRpb247XG5cbiAgY29uc3QgZGVmaW5pdGlvbnMgPSBxdWVyaWVzLmxlbmd0aFxuICAgID8gcXVlcmllc1xuICAgIDogbXV0YXRpb25zLmxlbmd0aFxuICAgID8gbXV0YXRpb25zXG4gICAgOiBzdWJzY3JpcHRpb25zO1xuXG4gIGludmFyaWFudChcbiAgICBkZWZpbml0aW9ucy5sZW5ndGggPT09IDEsXG4gICAgYHJlYWN0LWFwb2xsbyBvbmx5IHN1cHBvcnRzIG9uZSBkZWZpbml0aW9uIHBlciBIT0MuICR7ZG9jdW1lbnR9IGhhZCBgICtcbiAgICAgIGAke2RlZmluaXRpb25zLmxlbmd0aH0gZGVmaW5pdGlvbnMuIGAgK1xuICAgICAgYFlvdSBjYW4gdXNlICdjb21wb3NlJyB0byBqb2luIG11bHRpcGxlIG9wZXJhdGlvbiB0eXBlcyB0byBhIGNvbXBvbmVudGBcbiAgKTtcblxuICBjb25zdCBkZWZpbml0aW9uID0gZGVmaW5pdGlvbnNbMF0gYXMgT3BlcmF0aW9uRGVmaW5pdGlvbk5vZGU7XG4gIHZhcmlhYmxlcyA9IGRlZmluaXRpb24udmFyaWFibGVEZWZpbml0aW9ucyB8fCBbXTtcblxuICBpZiAoZGVmaW5pdGlvbi5uYW1lICYmIGRlZmluaXRpb24ubmFtZS5raW5kID09PSAnTmFtZScpIHtcbiAgICBuYW1lID0gZGVmaW5pdGlvbi5uYW1lLnZhbHVlO1xuICB9IGVsc2Uge1xuICAgIG5hbWUgPSAnZGF0YSc7IC8vIGZhbGxiYWNrIHRvIHVzaW5nIGRhdGEgaWYgbm8gbmFtZVxuICB9XG5cbiAgY29uc3QgcGF5bG9hZCA9IHsgbmFtZSwgdHlwZSwgdmFyaWFibGVzIH07XG4gIGNhY2hlLnNldChkb2N1bWVudCwgcGF5bG9hZCk7XG4gIHJldHVybiBwYXlsb2FkO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBBcG9sbG9DbGllbnQgZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQgeyBpbnZhcmlhbnQgfSBmcm9tICd0cy1pbnZhcmlhbnQnO1xuXG5pbXBvcnQgeyBnZXRBcG9sbG9Db250ZXh0IH0gZnJvbSAnLi9BcG9sbG9Db250ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBBcG9sbG9Qcm92aWRlclByb3BzPFRDYWNoZT4ge1xuICBjbGllbnQ6IEFwb2xsb0NsaWVudDxUQ2FjaGU+O1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgUmVhY3QuUmVhY3ROb2RlW10gfCBudWxsO1xufVxuXG5leHBvcnQgY29uc3QgQXBvbGxvUHJvdmlkZXI6IFJlYWN0LkZDPEFwb2xsb1Byb3ZpZGVyUHJvcHM8YW55Pj4gPSAoe1xuICBjbGllbnQsXG4gIGNoaWxkcmVuXG59KSA9PiB7XG4gIGNvbnN0IEFwb2xsb0NvbnRleHQgPSBnZXRBcG9sbG9Db250ZXh0KCk7XG4gIHJldHVybiAoXG4gICAgPEFwb2xsb0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICB7KGNvbnRleHQgPSB7fSkgPT4ge1xuICAgICAgICBpZiAoY2xpZW50ICYmIGNvbnRleHQuY2xpZW50ICE9PSBjbGllbnQpIHtcbiAgICAgICAgICBjb250ZXh0ID0gT2JqZWN0LmFzc2lnbih7fSwgY29udGV4dCwgeyBjbGllbnQgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgY29udGV4dC5jbGllbnQsXG4gICAgICAgICAgJ0Fwb2xsb1Byb3ZpZGVyIHdhcyBub3QgcGFzc2VkIGEgY2xpZW50IGluc3RhbmNlLiBNYWtlICcgK1xuICAgICAgICAgICAgJ3N1cmUgeW91IHBhc3MgaW4geW91ciBjbGllbnQgdmlhIHRoZSBcImNsaWVudFwiIHByb3AuJ1xuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEFwb2xsb0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICAgIDwvQXBvbGxvQ29udGV4dC5Qcm92aWRlcj5cbiAgICAgICAgKTtcbiAgICAgIH19XG4gICAgPC9BcG9sbG9Db250ZXh0LkNvbnN1bWVyPlxuICApO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJhc3NldHMvOWMzZWE2MGQxYzBlZmEwZGJlOTAyYjE4YjZkZWM4OWMuc3ZnXCI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcbmltcG9ydCBsb2dvIGZyb20gJ0Fzc2V0cy9sb2dvLnN2Zyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBIZWFkZXIoKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJoZWFkZXJcIj5cbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwibG9nb1wiIHNyYz17bG9nb30gYWx0PVwibG9nb1wiIC8+XG4gICAgICA8dWwgY2xhc3NOYW1lPVwiaGVhZGVyX19yaWdodFwiPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgPExpbmsgdG89XCIvY3JlYXRlXCIgY2xhc3NOYW1lPVwiaGVhZGVyX19yaWdodF9fbmV3YmxvZ1wiPlxuICAgICAgICAgICAgQ3JlYXRlIEJsb2dcbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICA8TGluayB0bz1cIi9hYm91dFwiPkFib3V0IE1lPC9MaW5rPlxuICAgICAgICA8L2xpPlxuICAgICAgPC91bD5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImNvbnN0IGxvYWRRdWlsbCA9IChjYWxsYmFjazogYW55KSA9PiB7XG4gIGNvbnN0IGV4aXN0aW5nU2NyaXB0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1aWxsRWRpdG9yJyk7XG4gIFxuICBpZiAoIWV4aXN0aW5nU2NyaXB0KSB7XG4gICAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnNyYyA9ICdodHRwczovL2Nkbi5xdWlsbGpzLmNvbS8xLjMuNi9xdWlsbC5qcyc7XG4gICAgc2NyaXB0LmlkID0gJ3F1aWxsRWRpdG9yJztcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gIFxuICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKCk7XG4gICAgfTtcbiAgfVxuICBcbiAgaWYgKGV4aXN0aW5nU2NyaXB0ICYmIGNhbGxiYWNrKSBjYWxsYmFjaygpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgbG9hZFF1aWxsOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgbG9hZFF1aWxsIGZyb20gJy4vbG9hZFF1aWxsJztcblxuZXhwb3J0IGNsYXNzIFF1aWxsRWRpdG9yIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFJlYWRvbmx5PHt9Pikge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBlZGl0b3I6IG51bGwsXG4gICAgfTtcbiAgICB0aGlzLmluaXRpYWxpemVRdWlsbEVkaXRvciA9IHRoaXMuaW5pdGlhbGl6ZVF1aWxsRWRpdG9yLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBsb2FkUXVpbGwodGhpcy5pbml0aWFsaXplUXVpbGxFZGl0b3IpO1xuICB9XG4gICAgXG4gIGluaXRpYWxpemVRdWlsbEVkaXRvcigpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgIGVkaXRvcjogbmV3IHdpbmRvdy5RdWlsbCgnI2VkaXRvcicsIHtcbiAgICAgICAgbW9kdWxlczogeyAgICAgXG4gICAgICAgICAgdG9vbGJhcjoge1xuICAgICAgICAgICAgY29udGFpbmVyOiAnI3Rvb2xiYXInLFxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0aGVtZTogJ3Nub3cnXG4gICAgICB9KVxuICAgIH0pO1xuICB9XG4gICAgXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPD5cbiAgICAgICAgPGRpdiBpZD1cInRvb2xiYXJcIj5cbiAgICAgICAgICA8c2VsZWN0IGNsYXNzTmFtZT1cInFsLXNpemVcIj5cbiAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJzbWFsbFwiIC8+XG4gICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibGFyZ2VcIiAvPlxuICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImh1Z2VcIiAvPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicWwtYm9sZFwiIC8+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJxbC1pdGFsaWNcIiAvPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicWwtdW5kZXJsaW5lXCIgLz5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInFsLXN0cmlrZVwiIC8+XG4gICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJxbC1jb2RlLWJsb2NrXCIgLz5cblxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicWwtc2NyaXB0XCIgdmFsdWU9XCJzdWJcIiAvPlxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicWwtc2NyaXB0XCIgdmFsdWU9XCJzdXBlclwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGlkPVwiZWRpdG9yXCI+XG4gICAgICAgICAgPHA+SGVsbG8gV29ybGQhPC9wPlxuICAgICAgICAgIDxwPlNvbWUgaW5pdGlhbCA8c3Ryb25nPmJvbGQ8L3N0cm9uZz4gdGV4dDwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8Lz5cbiAgICApO1xuICB9ICAgXG59XG5cblxuXG5cblxuXG5cblxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5leHBvcnQgdHlwZSBDYXRlZ29yeVByb3ZpZGVyU3RhdGUgPSB7XG4gIGN1cnJlbnRDYXRlZ29yeTogc3RyaW5nIHwgdW5kZWZpbmVkLFxuICBzZXRDdXJyZW50Q2F0ZWdvcnk6IFJlYWN0LkRpc3BhdGNoPHVua25vd24+LFxufTtcblxuXG5leHBvcnQgY29uc3QgQ3VycmVudENhdGVnb3J5Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Q2F0ZWdvcnlQcm92aWRlclN0YXRlPih1bmRlZmluZWQpO1xuXG5mdW5jdGlvbiBDdXJyZW50Q2F0ZWdvcnlQcm92aWRlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IFtjdXJyZW50Q2F0ZWdvcnksIHNldEN1cnJlbnRDYXRlZ29yeV0gPSB1c2VTdGF0ZSh1bmRlZmluZWQpO1xuXG4gIHJldHVybiAoXG4gICAgPEN1cnJlbnRDYXRlZ29yeUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgY3VycmVudENhdGVnb3J5LCBzZXRDdXJyZW50Q2F0ZWdvcnkgfX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9DdXJyZW50Q2F0ZWdvcnlDb250ZXh0LlByb3ZpZGVyPlxuICApO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEN1cnJlbnRDYXRlZ29yeVByb3ZpZGVyOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBCbG9nTGlzdF9jYXRlZ29yaWVzIGFzIEJsb2dDYXRlZ29yeSB9IGZyb20gJ0dlbmVyYXRlZC9CbG9nTGlzdCc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgQ3VycmVudENhdGVnb3J5Q29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvQ2F0ZWdvcnlDb250ZXh0JztcblxuZXhwb3J0IGludGVyZmFjZSBCbG9nTWVudVByb3BzIHtcbiAgY2F0ZWdvcnk6IEJsb2dDYXRlZ29yeSxcbn1cblxuXG5leHBvcnQgY2xhc3MgQmxvZ01lbnVJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PEJsb2dNZW51UHJvcHMsIHsgYWN0aXZlOiBib29sZWFufT4gIHtcbiAgY29uc3RydWN0b3IocHJvcHM6IEJsb2dNZW51UHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgfTtcbiAgICB0aGlzLm9wZW5Ub3BDYXRlZ29yeSA9IHRoaXMub3BlblRvcENhdGVnb3J5LmJpbmQodGhpcyk7XG4gIH1cbiAgXG4gIG9wZW5Ub3BDYXRlZ29yeSgpIHtcbiAgICB0aGlzLnNldFN0YXRlKChwcmV2U3RhdGUpID0+IHtcbiAgICAgIHJldHVybiB7IGFjdGl2ZTogIXByZXZTdGF0ZS5hY3RpdmUgfTtcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNhdGVnb3J5IH0gPSB0aGlzLnByb3BzO1xuICAgIHJldHVybiAoXG4gICAgICA8Q3VycmVudENhdGVnb3J5Q29udGV4dC5Db25zdW1lcj5cbiAgICAgICAge1xuICAgICAgICAgICAgKHsgc2V0Q3VycmVudENhdGVnb3J5IH0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8dWwgY2xhc3NOYW1lPXtgYmxvZ19fY2F0ZWdvcnkgJHt0aGlzLnN0YXRlLmFjdGl2ZSA/ICdhY3RpdmUnIDogJyd9YH0gb25DbGljaz17KCkgPT4gdGhpcy5vcGVuVG9wQ2F0ZWdvcnkoKX0+e2NhdGVnb3J5Lm5hbWV9ICYjOTY2MDtcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yeS5zdWJDYXRlZ29yaWVzLm1hcCgoc3ViQ2F0ZWdvcnkpID0+IHsgXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkga2V5PXtzdWJDYXRlZ29yeS5uYW1lfSBjbGFzc05hbWU9XCJibG9nX19jYXRlZ29yeV9faXRlbVwiIG9uQ2xpY2s9eygpID0+IHNldEN1cnJlbnRDYXRlZ29yeShjYXRlZ29yeS5uYW1lKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3N1YkNhdGVnb3J5Lm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICA8L0N1cnJlbnRDYXRlZ29yeUNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZ3FsIGZyb20gJ2dyYXBocWwtdGFnJztcbmltcG9ydCB7QmxvZ0xpc3RfY2F0ZWdvcmllcyBhcyBCbG9nQ2F0ZWdvcnl9IGZyb20gJ0dlbmVyYXRlZC9CbG9nTGlzdCdcbmltcG9ydCB7IEJsb2dNZW51SXRlbSB9IGZyb20gJy4vQmxvZ01lbnVJdGVtJztcblxuXG5pbnRlcmZhY2UgQmxvZ0NhdGVnb3J5TmF2aWdhdG9yUHJvcHMge1xuICBjYXRlZ29yaWVzOiBCbG9nQ2F0ZWdvcnlbXVxufVxuXG5leHBvcnQgY29uc3QgIEJsb2dDYXRlZ29yeU5hdmlnYXRvcjpSZWFjdC5GQzxCbG9nQ2F0ZWdvcnlOYXZpZ2F0b3JQcm9wcz4gPSAoe2NhdGVnb3JpZXN9KSA9PiB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJibG9nX19uYXZpZ2F0b3JcIj5cbiAgICAgIHtcbiAgICAgICAgY2F0ZWdvcmllcy5tYXAoKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gPEJsb2dNZW51SXRlbSBrZXk9e2NhdGVnb3J5Lm5hbWV9IGNhdGVnb3J5PXtjYXRlZ29yeX0gLz47IFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICB9XG4gICAgPC9kaXY+XG4gICk7XG59OyIsImltcG9ydCB7IEFwb2xsb0NsaWVudCB9IGZyb20gJ2Fwb2xsby1jbGllbnQnO1xuaW1wb3J0IHsgZXF1YWwgYXMgaXNFcXVhbCB9IGZyb20gJ0B3cnkvZXF1YWxpdHknO1xuaW1wb3J0IHsgaW52YXJpYW50IH0gZnJvbSAndHMtaW52YXJpYW50JztcbmltcG9ydCB7XG4gIEFwb2xsb0NvbnRleHRWYWx1ZSxcbiAgcGFyc2VyLFxuICBEb2N1bWVudFR5cGUsXG4gIG9wZXJhdGlvbk5hbWVcbn0gZnJvbSAnQGFwb2xsby9yZWFjdC1jb21tb24nO1xuaW1wb3J0IHsgRG9jdW1lbnROb2RlIH0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IENvbW1vbk9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPcGVyYXRpb25EYXRhPFRPcHRpb25zID0gYW55PiB7XG4gIHB1YmxpYyBpc01vdW50ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHVibGljIHByZXZpb3VzT3B0aW9uczogQ29tbW9uT3B0aW9uczxUT3B0aW9ucz4gPSB7fSBhcyBDb21tb25PcHRpb25zPFxuICAgIFRPcHRpb25zXG4gID47XG4gIHB1YmxpYyBjb250ZXh0OiBBcG9sbG9Db250ZXh0VmFsdWUgPSB7fTtcbiAgcHVibGljIGNsaWVudDogQXBvbGxvQ2xpZW50PG9iamVjdD4gfCB1bmRlZmluZWQ7XG5cbiAgcHJpdmF0ZSBvcHRpb25zOiBDb21tb25PcHRpb25zPFRPcHRpb25zPiA9IHt9IGFzIENvbW1vbk9wdGlvbnM8VE9wdGlvbnM+O1xuXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnM/OiBDb21tb25PcHRpb25zPFRPcHRpb25zPiwgY29udGV4dD86IEFwb2xsb0NvbnRleHRWYWx1ZSkge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwgKHt9IGFzIENvbW1vbk9wdGlvbnM8VE9wdGlvbnM+KTtcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0IHx8IHt9O1xuICB9XG5cbiAgcHVibGljIGdldE9wdGlvbnMoKTogQ29tbW9uT3B0aW9uczxUT3B0aW9ucz4ge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnM7XG4gIH1cblxuICBwdWJsaWMgc2V0T3B0aW9ucyhcbiAgICBuZXdPcHRpb25zOiBDb21tb25PcHRpb25zPFRPcHRpb25zPixcbiAgICBzdG9yZVByZXZpb3VzOiBib29sZWFuID0gZmFsc2VcbiAgKSB7XG4gICAgaWYgKHN0b3JlUHJldmlvdXMgJiYgIWlzRXF1YWwodGhpcy5vcHRpb25zLCBuZXdPcHRpb25zKSkge1xuICAgICAgdGhpcy5wcmV2aW91c09wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucyA9IG5ld09wdGlvbnM7XG4gIH1cblxuICBwdWJsaWMgYWJzdHJhY3QgZXhlY3V0ZSguLi5hcmdzOiBhbnkpOiBhbnk7XG4gIHB1YmxpYyBhYnN0cmFjdCBhZnRlckV4ZWN1dGUoLi4uYXJnczogYW55KTogdm9pZCB8ICgoKSA9PiB2b2lkKTtcbiAgcHVibGljIGFic3RyYWN0IGNsZWFudXAoKTogdm9pZDtcblxuICBwcm90ZWN0ZWQgdW5tb3VudCgpIHtcbiAgICB0aGlzLmlzTW91bnRlZCA9IGZhbHNlO1xuICB9XG5cbiAgcHJvdGVjdGVkIHJlZnJlc2hDbGllbnQoKSB7XG4gICAgY29uc3QgY2xpZW50ID1cbiAgICAgICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLmNsaWVudCkgfHxcbiAgICAgICh0aGlzLmNvbnRleHQgJiYgdGhpcy5jb250ZXh0LmNsaWVudCk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAhIWNsaWVudCxcbiAgICAgICdDb3VsZCBub3QgZmluZCBcImNsaWVudFwiIGluIHRoZSBjb250ZXh0IG9yIHBhc3NlZCBpbiBhcyBhbiBvcHRpb24uICcgK1xuICAgICAgICAnV3JhcCB0aGUgcm9vdCBjb21wb25lbnQgaW4gYW4gPEFwb2xsb1Byb3ZpZGVyPiwgb3IgcGFzcyBhbiAnICtcbiAgICAgICAgJ0Fwb2xsb0NsaWVudCBpbnN0YW5jZSBpbiB2aWEgb3B0aW9ucy4nXG4gICAgKTtcblxuICAgIGxldCBpc05ldyA9IGZhbHNlO1xuICAgIGlmIChjbGllbnQgIT09IHRoaXMuY2xpZW50KSB7XG4gICAgICBpc05ldyA9IHRydWU7XG4gICAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgY2xpZW50OiB0aGlzLmNsaWVudCBhcyBBcG9sbG9DbGllbnQ8b2JqZWN0PixcbiAgICAgIGlzTmV3XG4gICAgfTtcbiAgfVxuXG4gIHByb3RlY3RlZCB2ZXJpZnlEb2N1bWVudFR5cGUoZG9jdW1lbnQ6IERvY3VtZW50Tm9kZSwgdHlwZTogRG9jdW1lbnRUeXBlKSB7XG4gICAgY29uc3Qgb3BlcmF0aW9uID0gcGFyc2VyKGRvY3VtZW50KTtcbiAgICBjb25zdCByZXF1aXJlZE9wZXJhdGlvbk5hbWUgPSBvcGVyYXRpb25OYW1lKHR5cGUpO1xuICAgIGNvbnN0IHVzZWRPcGVyYXRpb25OYW1lID0gb3BlcmF0aW9uTmFtZShvcGVyYXRpb24udHlwZSk7XG4gICAgaW52YXJpYW50KFxuICAgICAgb3BlcmF0aW9uLnR5cGUgPT09IHR5cGUsXG4gICAgICBgUnVubmluZyBhICR7cmVxdWlyZWRPcGVyYXRpb25OYW1lfSByZXF1aXJlcyBhIGdyYXBocWwgYCArXG4gICAgICAgIGAke3JlcXVpcmVkT3BlcmF0aW9uTmFtZX0sIGJ1dCBhICR7dXNlZE9wZXJhdGlvbk5hbWV9IHdhcyB1c2VkIGluc3RlYWQuYFxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7XG4gIEFwb2xsb1F1ZXJ5UmVzdWx0LFxuICBBcG9sbG9FcnJvcixcbiAgTmV0d29ya1N0YXR1cyxcbiAgRmV0Y2hNb3JlT3B0aW9ucyxcbiAgRmV0Y2hNb3JlUXVlcnlPcHRpb25zLFxuICBVcGRhdGVRdWVyeU9wdGlvbnMsXG4gIFN1YnNjcmliZVRvTW9yZU9wdGlvbnMsXG59IGZyb20gJ2Fwb2xsby1jbGllbnQnO1xuaW1wb3J0IHsgZXF1YWwgYXMgaXNFcXVhbCB9IGZyb20gJ0B3cnkvZXF1YWxpdHknO1xuaW1wb3J0IHtcbiAgQXBvbGxvQ29udGV4dFZhbHVlLFxuICBEb2N1bWVudFR5cGUsXG4gIFF1ZXJ5UmVzdWx0LFxuICBPYnNlcnZhYmxlUXVlcnlGaWVsZHMsXG59IGZyb20gJ0BhcG9sbG8vcmVhY3QtY29tbW9uJztcblxuaW1wb3J0IHtcbiAgUXVlcnlQcmV2aW91c0RhdGEsXG4gIFF1ZXJ5T3B0aW9ucyxcbiAgUXVlcnlDdXJyZW50T2JzZXJ2YWJsZSxcbiAgUXVlcnlUdXBsZSxcbiAgUXVlcnlMYXp5T3B0aW9ucyxcbn0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgT3BlcmF0aW9uRGF0YSB9IGZyb20gJy4vT3BlcmF0aW9uRGF0YSc7XG5cbmV4cG9ydCBjbGFzcyBRdWVyeURhdGE8VERhdGEsIFRWYXJpYWJsZXM+IGV4dGVuZHMgT3BlcmF0aW9uRGF0YSB7XG4gIHB1YmxpYyBvbk5ld0RhdGE6ICgpID0+IHZvaWQ7XG5cbiAgcHJpdmF0ZSBwcmV2aW91c0RhdGE6IFF1ZXJ5UHJldmlvdXNEYXRhPFREYXRhLCBUVmFyaWFibGVzPiA9IHt9O1xuICBwcml2YXRlIGN1cnJlbnRPYnNlcnZhYmxlOiBRdWVyeUN1cnJlbnRPYnNlcnZhYmxlPFREYXRhLCBUVmFyaWFibGVzPiA9IHt9O1xuICBwcml2YXRlIHJ1bkxhenk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBsYXp5T3B0aW9ucz86IFF1ZXJ5TGF6eU9wdGlvbnM8VFZhcmlhYmxlcz47XG5cbiAgY29uc3RydWN0b3Ioe1xuICAgIG9wdGlvbnMsXG4gICAgY29udGV4dCxcbiAgICBvbk5ld0RhdGEsXG4gIH06IHtcbiAgICBvcHRpb25zOiBRdWVyeU9wdGlvbnM8VERhdGEsIFRWYXJpYWJsZXM+O1xuICAgIGNvbnRleHQ6IEFwb2xsb0NvbnRleHRWYWx1ZTtcbiAgICBvbk5ld0RhdGE6ICgpID0+IHZvaWQ7XG4gIH0pIHtcbiAgICBzdXBlcihvcHRpb25zLCBjb250ZXh0KTtcbiAgICB0aGlzLm9uTmV3RGF0YSA9IG9uTmV3RGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBleGVjdXRlKCk6IFF1ZXJ5UmVzdWx0PFREYXRhLCBUVmFyaWFibGVzPiB7XG4gICAgdGhpcy5yZWZyZXNoQ2xpZW50KCk7XG5cbiAgICBjb25zdCB7IHNraXAsIHF1ZXJ5IH0gPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICBpZiAoc2tpcCB8fCBxdWVyeSAhPT0gdGhpcy5wcmV2aW91c0RhdGEucXVlcnkpIHtcbiAgICAgIHRoaXMucmVtb3ZlUXVlcnlTdWJzY3JpcHRpb24oKTtcbiAgICAgIHRoaXMucHJldmlvdXNEYXRhLnF1ZXJ5ID0gcXVlcnk7XG4gICAgfVxuXG4gICAgdGhpcy51cGRhdGVPYnNlcnZhYmxlUXVlcnkoKTtcblxuICAgIGlmICh0aGlzLmlzTW91bnRlZCkgdGhpcy5zdGFydFF1ZXJ5U3Vic2NyaXB0aW9uKCk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRFeGVjdXRlU3NyUmVzdWx0KCkgfHwgdGhpcy5nZXRFeGVjdXRlUmVzdWx0KCk7XG4gIH1cblxuICBwdWJsaWMgZXhlY3V0ZUxhenkoKTogUXVlcnlUdXBsZTxURGF0YSwgVFZhcmlhYmxlcz4ge1xuICAgIHJldHVybiAhdGhpcy5ydW5MYXp5XG4gICAgICA/IFtcbiAgICAgICAgICB0aGlzLnJ1bkxhenlRdWVyeSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IE5ldHdvcmtTdGF0dXMucmVhZHksXG4gICAgICAgICAgICBjYWxsZWQ6IGZhbHNlLFxuICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIH0gYXMgUXVlcnlSZXN1bHQ8VERhdGEsIFRWYXJpYWJsZXM+LFxuICAgICAgICBdXG4gICAgICA6IFt0aGlzLnJ1bkxhenlRdWVyeSwgdGhpcy5leGVjdXRlKCldO1xuICB9XG5cbiAgLy8gRm9yIHNlcnZlci1zaWRlIHJlbmRlcmluZ1xuICBwdWJsaWMgZmV0Y2hEYXRhKCk6IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8YW55Pj4gfCBib29sZWFuIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgaWYgKG9wdGlvbnMuc2tpcCB8fCBvcHRpb25zLnNzciA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcblxuICAgIC8vIGN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5IGlzIGFscmVhZHkgYXNzaWduZWQgdGhlIHJlZ2lzdGVyZWQgU1NSIG9ic2VydmFibGUgaW4gaW5pdGlhbGl6ZU9ic2VydmFibGVRdWVyeS5cbiAgICBjb25zdCBvYnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5ITtcbiAgICBjb25zdCBjdXJyZW50UmVzdWx0ID0gb2JzLmdldEN1cnJlbnRSZXN1bHQoKTtcbiAgICByZXR1cm4gY3VycmVudFJlc3VsdC5sb2FkaW5nID8gb2JzLnJlc3VsdCgpIDogZmFsc2U7XG4gIH1cblxuICBwdWJsaWMgYWZ0ZXJFeGVjdXRlKHsgbGF6eSA9IGZhbHNlIH06IHsgbGF6eT86IGJvb2xlYW4gfSA9IHt9KSB7XG4gICAgdGhpcy5pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKCFsYXp5IHx8IHRoaXMucnVuTGF6eSkge1xuICAgICAgdGhpcy5oYW5kbGVFcnJvck9yQ29tcGxldGVkKCk7XG4gICAgfVxuXG4gICAgdGhpcy5wcmV2aW91c09wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICByZXR1cm4gdGhpcy51bm1vdW50LmJpbmQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgY2xlYW51cCgpIHtcbiAgICB0aGlzLnJlbW92ZVF1ZXJ5U3Vic2NyaXB0aW9uKCk7XG4gICAgZGVsZXRlIHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnk7XG4gICAgZGVsZXRlIHRoaXMucHJldmlvdXNEYXRhLnJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRPcHRpb25zKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBzdXBlci5nZXRPcHRpb25zKCk7XG5cbiAgICBpZiAodGhpcy5sYXp5T3B0aW9ucykge1xuICAgICAgb3B0aW9ucy52YXJpYWJsZXMgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMudmFyaWFibGVzLFxuICAgICAgICAuLi50aGlzLmxhenlPcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgIH07XG4gICAgICBvcHRpb25zLmNvbnRleHQgPSB7XG4gICAgICAgIC4uLm9wdGlvbnMuY29udGV4dCxcbiAgICAgICAgLi4udGhpcy5sYXp5T3B0aW9ucy5jb250ZXh0LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBza2lwIGlzIG5vdCBzdXBwb3J0ZWQgd2hlbiB1c2luZyBsYXp5IHF1ZXJ5IGV4ZWN1dGlvbi5cbiAgICBpZiAodGhpcy5ydW5MYXp5KSB7XG4gICAgICBkZWxldGUgb3B0aW9ucy5za2lwO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zO1xuICB9XG5cbiAgcHVibGljIHNzckluaXRpYXRlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0ICYmIHRoaXMuY29udGV4dC5yZW5kZXJQcm9taXNlcztcbiAgfVxuXG4gIHByaXZhdGUgcnVuTGF6eVF1ZXJ5ID0gKG9wdGlvbnM/OiBRdWVyeUxhenlPcHRpb25zPFRWYXJpYWJsZXM+KSA9PiB7XG4gICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgdGhpcy5ydW5MYXp5ID0gdHJ1ZTtcbiAgICB0aGlzLmxhenlPcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLm9uTmV3RGF0YSgpO1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0RXhlY3V0ZVJlc3VsdCA9ICgpOiBRdWVyeVJlc3VsdDxURGF0YSwgVFZhcmlhYmxlcz4gPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZ2V0UXVlcnlSZXN1bHQoKTtcbiAgICB0aGlzLnN0YXJ0UXVlcnlTdWJzY3JpcHRpb24oKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHByaXZhdGUgZ2V0RXhlY3V0ZVNzclJlc3VsdCgpIHtcbiAgICBjb25zdCBzc3JEaXNhYmxlZCA9IHRoaXMuZ2V0T3B0aW9ucygpLnNzciA9PT0gZmFsc2U7XG4gICAgY29uc3QgZmV0Y2hEaXNhYmxlZCA9IHRoaXMucmVmcmVzaENsaWVudCgpLmNsaWVudC5kaXNhYmxlTmV0d29ya0ZldGNoZXM7XG5cbiAgICBjb25zdCBzc3JMb2FkaW5nID0ge1xuICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgIG5ldHdvcmtTdGF0dXM6IE5ldHdvcmtTdGF0dXMubG9hZGluZyxcbiAgICAgIGNhbGxlZDogdHJ1ZSxcbiAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgIHN0YWxlOiBmYWxzZSxcbiAgICAgIGNsaWVudDogdGhpcy5jbGllbnQsXG4gICAgICAuLi50aGlzLm9ic2VydmFibGVRdWVyeUZpZWxkcygpLFxuICAgIH0gYXMgUXVlcnlSZXN1bHQ8VERhdGEsIFRWYXJpYWJsZXM+O1xuXG4gICAgLy8gSWYgU1NSIGhhcyBiZWVuIGV4cGxpY2l0bHkgZGlzYWJsZWQsIGFuZCB0aGlzIGZ1bmN0aW9uIGhhcyBiZWVuIGNhbGxlZFxuICAgIC8vIG9uIHRoZSBzZXJ2ZXIgc2lkZSwgcmV0dXJuIHRoZSBkZWZhdWx0IGxvYWRpbmcgc3RhdGUuXG4gICAgaWYgKHNzckRpc2FibGVkICYmICh0aGlzLnNzckluaXRpYXRlZCgpIHx8IGZldGNoRGlzYWJsZWQpKSB7XG4gICAgICB0aGlzLnByZXZpb3VzRGF0YS5yZXN1bHQgPSBzc3JMb2FkaW5nO1xuICAgICAgcmV0dXJuIHNzckxvYWRpbmc7XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdDtcbiAgICBpZiAodGhpcy5zc3JJbml0aWF0ZWQoKSkge1xuICAgICAgcmVzdWx0ID1cbiAgICAgICAgdGhpcy5jb250ZXh0LnJlbmRlclByb21pc2VzIS5hZGRRdWVyeVByb21pc2UoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0aGlzLmdldEV4ZWN1dGVSZXN1bHRcbiAgICAgICAgKSB8fCBzc3JMb2FkaW5nO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBwcml2YXRlIHByZXBhcmVPYnNlcnZhYmxlUXVlcnlPcHRpb25zKCkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLmdldE9wdGlvbnMoKTtcbiAgICB0aGlzLnZlcmlmeURvY3VtZW50VHlwZShvcHRpb25zLnF1ZXJ5LCBEb2N1bWVudFR5cGUuUXVlcnkpO1xuICAgIGNvbnN0IGRpc3BsYXlOYW1lID0gb3B0aW9ucy5kaXNwbGF5TmFtZSB8fCAnUXVlcnknO1xuXG4gICAgLy8gU2V0IHRoZSBmZXRjaFBvbGljeSB0byBjYWNoZS1maXJzdCBmb3IgbmV0d29yay1vbmx5IGFuZCBjYWNoZS1hbmQtbmV0d29ya1xuICAgIC8vIGZldGNoZXMgZm9yIHNlcnZlciBzaWRlIHJlbmRlcnMuXG4gICAgaWYgKFxuICAgICAgdGhpcy5zc3JJbml0aWF0ZWQoKSAmJlxuICAgICAgKG9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICduZXR3b3JrLW9ubHknIHx8XG4gICAgICAgIG9wdGlvbnMuZmV0Y2hQb2xpY3kgPT09ICdjYWNoZS1hbmQtbmV0d29yaycpXG4gICAgKSB7XG4gICAgICBvcHRpb25zLmZldGNoUG9saWN5ID0gJ2NhY2hlLWZpcnN0JztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4ub3B0aW9ucyxcbiAgICAgIGRpc3BsYXlOYW1lLFxuICAgICAgY29udGV4dDogb3B0aW9ucy5jb250ZXh0LFxuICAgICAgbWV0YWRhdGE6IHsgcmVhY3RDb21wb25lbnQ6IHsgZGlzcGxheU5hbWUgfSB9LFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemVPYnNlcnZhYmxlUXVlcnkoKSB7XG4gICAgLy8gU2VlIGlmIHRoZXJlIGlzIGFuIGV4aXN0aW5nIG9ic2VydmFibGUgdGhhdCB3YXMgdXNlZCB0byBmZXRjaCB0aGUgc2FtZVxuICAgIC8vIGRhdGEgYW5kIGlmIHNvLCB1c2UgaXQgaW5zdGVhZCBzaW5jZSBpdCB3aWxsIGNvbnRhaW4gdGhlIHByb3BlciBxdWVyeUlkXG4gICAgLy8gdG8gZmV0Y2ggdGhlIHJlc3VsdCBzZXQuIFRoaXMgaXMgdXNlZCBkdXJpbmcgU1NSLlxuICAgIGlmICh0aGlzLnNzckluaXRpYXRlZCgpKSB7XG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5ID0gdGhpcy5jb250ZXh0IS5yZW5kZXJQcm9taXNlcyEuZ2V0U1NST2JzZXJ2YWJsZShcbiAgICAgICAgdGhpcy5nZXRPcHRpb25zKClcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5KSB7XG4gICAgICBjb25zdCBvYnNlcnZhYmxlUXVlcnlPcHRpb25zID0gdGhpcy5wcmVwYXJlT2JzZXJ2YWJsZVF1ZXJ5T3B0aW9ucygpO1xuXG4gICAgICB0aGlzLnByZXZpb3VzRGF0YS5vYnNlcnZhYmxlUXVlcnlPcHRpb25zID0ge1xuICAgICAgICAuLi5vYnNlcnZhYmxlUXVlcnlPcHRpb25zLFxuICAgICAgICBjaGlsZHJlbjogbnVsbCxcbiAgICAgIH07XG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5ID0gdGhpcy5yZWZyZXNoQ2xpZW50KCkuY2xpZW50LndhdGNoUXVlcnkoe1xuICAgICAgICAuLi5vYnNlcnZhYmxlUXVlcnlPcHRpb25zLFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnNzckluaXRpYXRlZCgpKSB7XG4gICAgICAgIHRoaXMuY29udGV4dD8ucmVuZGVyUHJvbWlzZXM/LnJlZ2lzdGVyU1NST2JzZXJ2YWJsZShcbiAgICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5LFxuICAgICAgICAgIG9ic2VydmFibGVRdWVyeU9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZU9ic2VydmFibGVRdWVyeSgpIHtcbiAgICAvLyBJZiB3ZSBza2lwcGVkIGluaXRpYWxseSwgd2UgbWF5IG5vdCBoYXZlIHlldCBjcmVhdGVkIHRoZSBvYnNlcnZhYmxlXG4gICAgaWYgKCF0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5KSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVPYnNlcnZhYmxlUXVlcnkoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdPYnNlcnZhYmxlUXVlcnlPcHRpb25zID0ge1xuICAgICAgLi4udGhpcy5wcmVwYXJlT2JzZXJ2YWJsZVF1ZXJ5T3B0aW9ucygpLFxuICAgICAgY2hpbGRyZW46IG51bGwsXG4gICAgfTtcblxuICAgIGlmIChcbiAgICAgICFpc0VxdWFsKFxuICAgICAgICBuZXdPYnNlcnZhYmxlUXVlcnlPcHRpb25zLFxuICAgICAgICB0aGlzLnByZXZpb3VzRGF0YS5vYnNlcnZhYmxlUXVlcnlPcHRpb25zXG4gICAgICApXG4gICAgKSB7XG4gICAgICB0aGlzLnByZXZpb3VzRGF0YS5vYnNlcnZhYmxlUXVlcnlPcHRpb25zID0gbmV3T2JzZXJ2YWJsZVF1ZXJ5T3B0aW9ucztcbiAgICAgIHRoaXMuY3VycmVudE9ic2VydmFibGVcbiAgICAgICAgLnF1ZXJ5IS5zZXRPcHRpb25zKG5ld09ic2VydmFibGVRdWVyeU9wdGlvbnMpXG4gICAgICAgIC8vIFRoZSBlcnJvciB3aWxsIGJlIHBhc3NlZCB0byB0aGUgY2hpbGQgY29udGFpbmVyLCBzbyB3ZSBkb24ndFxuICAgICAgICAvLyBuZWVkIHRvIGxvZyBpdCBoZXJlLiBXZSBjb3VsZCBjb25jZWl2YWJseSBsb2cgc29tZXRoaW5nIGlmXG4gICAgICAgIC8vIGFuIG9wdGlvbiB3YXMgc2V0LiBPVE9IIHdlIGRvbid0IGxvZyBlcnJvcnMgdy8gdGhlIG9yaWdpbmFsXG4gICAgICAgIC8vIHF1ZXJ5LiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2Fwb2xsb3N0YWNrL3JlYWN0LWFwb2xsby9pc3N1ZXMvNDA0XG4gICAgICAgIC5jYXRjaCgoKSA9PiB7fSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzdGFydFF1ZXJ5U3Vic2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnN1YnNjcmlwdGlvbiB8fCB0aGlzLmdldE9wdGlvbnMoKS5za2lwKSByZXR1cm47XG5cbiAgICBjb25zdCBvYnNRdWVyeSA9IHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnkhO1xuICAgIHRoaXMuY3VycmVudE9ic2VydmFibGUuc3Vic2NyaXB0aW9uID0gb2JzUXVlcnkuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQ6ICh7IGxvYWRpbmcsIG5ldHdvcmtTdGF0dXMsIGRhdGEgfSkgPT4ge1xuICAgICAgICBjb25zdCBwcmV2aW91c1Jlc3VsdCA9IHRoaXMucHJldmlvdXNEYXRhLnJlc3VsdDtcblxuICAgICAgICAvLyBNYWtlIHN1cmUgd2UncmUgbm90IGF0dGVtcHRpbmcgdG8gcmUtcmVuZGVyIHNpbWlsYXIgcmVzdWx0c1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcHJldmlvdXNSZXN1bHQgJiZcbiAgICAgICAgICBwcmV2aW91c1Jlc3VsdC5sb2FkaW5nID09PSBsb2FkaW5nICYmXG4gICAgICAgICAgcHJldmlvdXNSZXN1bHQubmV0d29ya1N0YXR1cyA9PT0gbmV0d29ya1N0YXR1cyAmJlxuICAgICAgICAgIGlzRXF1YWwocHJldmlvdXNSZXN1bHQuZGF0YSwgZGF0YSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbk5ld0RhdGEoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjogKGVycm9yKSA9PiB7XG4gICAgICAgIHRoaXMucmVzdWJzY3JpYmVUb1F1ZXJ5KCk7XG4gICAgICAgIGlmICghZXJyb3IuaGFzT3duUHJvcGVydHkoJ2dyYXBoUUxFcnJvcnMnKSkgdGhyb3cgZXJyb3I7XG5cbiAgICAgICAgY29uc3QgcHJldmlvdXNSZXN1bHQgPSB0aGlzLnByZXZpb3VzRGF0YS5yZXN1bHQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAocHJldmlvdXNSZXN1bHQgJiYgcHJldmlvdXNSZXN1bHQubG9hZGluZykgfHxcbiAgICAgICAgICAhaXNFcXVhbChlcnJvciwgdGhpcy5wcmV2aW91c0RhdGEuZXJyb3IpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucHJldmlvdXNEYXRhLmVycm9yID0gZXJyb3I7XG4gICAgICAgICAgdGhpcy5vbk5ld0RhdGEoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVzdWJzY3JpYmVUb1F1ZXJ5KCkge1xuICAgIHRoaXMucmVtb3ZlUXVlcnlTdWJzY3JpcHRpb24oKTtcblxuICAgIC8vIFVuZm9ydHVuYXRlbHksIGlmIGBsYXN0RXJyb3JgIGlzIHNldCBpbiB0aGUgY3VycmVudFxuICAgIC8vIGBvYnNlcnZhYmxlUXVlcnlgIHdoZW4gdGhlIHN1YnNjcmlwdGlvbiBpcyByZS1jcmVhdGVkLFxuICAgIC8vIHRoZSBzdWJzY3JpcHRpb24gd2lsbCBpbW1lZGlhdGVseSByZWNlaXZlIHRoZSBlcnJvciwgd2hpY2ggd2lsbFxuICAgIC8vIGNhdXNlIGl0IHRvIHRlcm1pbmF0ZSBhZ2Fpbi4gVG8gYXZvaWQgdGhpcywgd2UgZmlyc3QgY2xlYXJcbiAgICAvLyB0aGUgbGFzdCBlcnJvci9yZXN1bHQgZnJvbSB0aGUgYG9ic2VydmFibGVRdWVyeWAgYmVmb3JlIHJlLXN0YXJ0aW5nXG4gICAgLy8gdGhlIHN1YnNjcmlwdGlvbiwgYW5kIHJlc3RvcmUgaXQgYWZ0ZXJ3YXJkcyAoc28gdGhlIHN1YnNjcmlwdGlvblxuICAgIC8vIGhhcyBhIGNoYW5jZSB0byBzdGF5IG9wZW4pLlxuICAgIGNvbnN0IGxhc3RFcnJvciA9IHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnkhLmdldExhc3RFcnJvcigpO1xuICAgIGNvbnN0IGxhc3RSZXN1bHQgPSB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5IS5nZXRMYXN0UmVzdWx0KCk7XG4gICAgdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSEucmVzZXRMYXN0UmVzdWx0cygpO1xuICAgIHRoaXMuc3RhcnRRdWVyeVN1YnNjcmlwdGlvbigpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSEsIHtcbiAgICAgIGxhc3RFcnJvcixcbiAgICAgIGxhc3RSZXN1bHQsXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGdldFF1ZXJ5UmVzdWx0KCk6IFF1ZXJ5UmVzdWx0PFREYXRhLCBUVmFyaWFibGVzPiB7XG4gICAgbGV0IHJlc3VsdDogYW55ID0gdGhpcy5vYnNlcnZhYmxlUXVlcnlGaWVsZHMoKTtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5nZXRPcHRpb25zKCk7XG5cbiAgICAvLyBXaGVuIHNraXBwaW5nIGEgcXVlcnkgKGllLiB3ZSdyZSBub3QgcXVlcnlpbmcgZm9yIGRhdGEgYnV0IHN0aWxsIHdhbnRcbiAgICAvLyB0byByZW5kZXIgY2hpbGRyZW4pLCBtYWtlIHN1cmUgdGhlIGBkYXRhYCBpcyBjbGVhcmVkIG91dCBhbmRcbiAgICAvLyBgbG9hZGluZ2AgaXMgc2V0IHRvIGBmYWxzZWAgKHNpbmNlIHdlIGFyZW4ndCBsb2FkaW5nIGFueXRoaW5nKS5cbiAgICBpZiAob3B0aW9ucy5za2lwKSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgY2FsbGVkOiB0cnVlLFxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmV0Y2ggdGhlIGN1cnJlbnQgcmVzdWx0IChpZiBhbnkpIGZyb20gdGhlIHN0b3JlLlxuICAgICAgY29uc3QgY3VycmVudFJlc3VsdCA9IHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnkhLmdldEN1cnJlbnRSZXN1bHQoKTtcbiAgICAgIGNvbnN0IHsgbG9hZGluZywgcGFydGlhbCwgbmV0d29ya1N0YXR1cywgZXJyb3JzIH0gPSBjdXJyZW50UmVzdWx0O1xuICAgICAgbGV0IHsgZXJyb3IsIGRhdGEgfSA9IGN1cnJlbnRSZXN1bHQ7XG5cbiAgICAgIC8vIFVudGlsIGEgc2V0IG5hbWluZyBjb252ZW50aW9uIGZvciBuZXR3b3JrRXJyb3IgYW5kIGdyYXBoUUxFcnJvcnMgaXNcbiAgICAgIC8vIGRlY2lkZWQgdXBvbiwgd2UgbWFwIGVycm9ycyAoZ3JhcGhRTEVycm9ycykgdG8gdGhlIGVycm9yIG9wdGlvbnMuXG4gICAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEFwb2xsb0Vycm9yKHsgZ3JhcGhRTEVycm9yczogZXJyb3JzIH0pO1xuICAgICAgfVxuXG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIC4uLnJlc3VsdCxcbiAgICAgICAgbG9hZGluZyxcbiAgICAgICAgbmV0d29ya1N0YXR1cyxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGNhbGxlZDogdHJ1ZSxcbiAgICAgIH07XG5cbiAgICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzRGF0YSA9XG4gICAgICAgICAgdGhpcy5wcmV2aW91c0RhdGEucmVzdWx0ICYmIHRoaXMucHJldmlvdXNEYXRhLnJlc3VsdC5kYXRhO1xuICAgICAgICByZXN1bHQuZGF0YSA9XG4gICAgICAgICAgcHJldmlvdXNEYXRhICYmIGRhdGFcbiAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgIC4uLnByZXZpb3VzRGF0YSxcbiAgICAgICAgICAgICAgICAuLi5kYXRhLFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICA6IHByZXZpb3VzRGF0YSB8fCBkYXRhO1xuICAgICAgfSBlbHNlIGlmIChlcnJvcikge1xuICAgICAgICBPYmplY3QuYXNzaWduKHJlc3VsdCwge1xuICAgICAgICAgIGRhdGE6ICh0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5IS5nZXRMYXN0UmVzdWx0KCkgfHwgKHt9IGFzIGFueSkpXG4gICAgICAgICAgICAuZGF0YSxcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB7IGZldGNoUG9saWN5IH0gPSB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5IS5vcHRpb25zO1xuICAgICAgICBjb25zdCB7IHBhcnRpYWxSZWZldGNoIH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcGFydGlhbFJlZmV0Y2ggJiZcbiAgICAgICAgICAhZGF0YSAmJlxuICAgICAgICAgIHBhcnRpYWwgJiZcbiAgICAgICAgICBmZXRjaFBvbGljeSAhPT0gJ2NhY2hlLW9ubHknXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFdoZW4gYSBgUXVlcnlgIGNvbXBvbmVudCBpcyBtb3VudGVkLCBhbmQgYSBtdXRhdGlvbiBpcyBleGVjdXRlZFxuICAgICAgICAgIC8vIHRoYXQgcmV0dXJucyB0aGUgc2FtZSBJRCBhcyB0aGUgbW91bnRlZCBgUXVlcnlgLCBidXQgaGFzIGxlc3NcbiAgICAgICAgICAvLyBmaWVsZHMgaW4gaXRzIHJlc3VsdCwgQXBvbGxvIENsaWVudCdzIGBRdWVyeU1hbmFnZXJgIHJldHVybnMgdGhlXG4gICAgICAgICAgLy8gZGF0YSBhcyBgdW5kZWZpbmVkYCBzaW5jZSBhIGhpdCBjYW4ndCBiZSBmb3VuZCBpbiB0aGUgY2FjaGUuXG4gICAgICAgICAgLy8gVGhpcyBjYW4gbGVhZCB0byBhcHBsaWNhdGlvbiBlcnJvcnMgd2hlbiB0aGUgVUkgZWxlbWVudHMgcmVuZGVyZWQgYnlcbiAgICAgICAgICAvLyB0aGUgb3JpZ2luYWwgYFF1ZXJ5YCBjb21wb25lbnQgYXJlIGV4cGVjdGluZyBjZXJ0YWluIGRhdGEgdmFsdWVzIHRvXG4gICAgICAgICAgLy8gZXhpc3QsIGFuZCB0aGV5J3JlIGFsbCBvZiBhIHN1ZGRlbiBzdHJpcHBlZCBhd2F5LiBUbyBoZWxwIGF2b2lkXG4gICAgICAgICAgLy8gdGhpcyB3ZSdsbCBhdHRlbXB0IHRvIHJlZmV0Y2ggdGhlIGBRdWVyeWAgZGF0YS5cbiAgICAgICAgICBPYmplY3QuYXNzaWduKHJlc3VsdCwge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIG5ldHdvcmtTdGF0dXM6IE5ldHdvcmtTdGF0dXMubG9hZGluZyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXN1bHQucmVmZXRjaCgpO1xuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVzdWx0LmNsaWVudCA9IHRoaXMuY2xpZW50O1xuICAgIHRoaXMucHJldmlvdXNEYXRhLmxvYWRpbmcgPVxuICAgICAgKHRoaXMucHJldmlvdXNEYXRhLnJlc3VsdCAmJiB0aGlzLnByZXZpb3VzRGF0YS5yZXN1bHQubG9hZGluZykgfHwgZmFsc2U7XG4gICAgdGhpcy5wcmV2aW91c0RhdGEucmVzdWx0ID0gcmVzdWx0O1xuXG4gICAgLy8gQW55IHF1ZXJ5IGVycm9ycyB0aGF0IGV4aXN0IGFyZSBub3cgYXZhaWxhYmxlIGluIGByZXN1bHRgLCBzbyB3ZSdsbFxuICAgIC8vIHJlbW92ZSB0aGUgb3JpZ2luYWwgZXJyb3JzIGZyb20gdGhlIGBPYnNlcnZhYmxlUXVlcnlgIHF1ZXJ5IHN0b3JlIHRvXG4gICAgLy8gbWFrZSBzdXJlIHRoZXkgYXJlbid0IHJlLWRpc3BsYXllZCBvbiBzdWJzZXF1ZW50IChwb3RlbnRpYWxseSBlcnJvclxuICAgIC8vIGZyZWUpIHJlcXVlc3RzL3Jlc3BvbnNlcy5cbiAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5ICYmXG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5LnJlc2V0UXVlcnlTdG9yZUVycm9ycygpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlRXJyb3JPckNvbXBsZXRlZCgpIHtcbiAgICBjb25zdCBvYnNRdWVyeSA9IHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnk7XG4gICAgaWYgKCFvYnNRdWVyeSB8fCAhdGhpcy5wcmV2aW91c0RhdGEucmVzdWx0KSByZXR1cm47XG5cbiAgICBjb25zdCB7IGRhdGEsIGxvYWRpbmcsIGVycm9yIH0gPSB0aGlzLnByZXZpb3VzRGF0YS5yZXN1bHQ7XG5cbiAgICBpZiAoIWxvYWRpbmcpIHtcbiAgICAgIGNvbnN0IHsgcXVlcnksIHZhcmlhYmxlcywgb25Db21wbGV0ZWQsIG9uRXJyb3IgfSA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuXG4gICAgICAvLyBObyBjaGFuZ2VzLCBzbyB3ZSB3b24ndCBjYWxsIG9uRXJyb3Ivb25Db21wbGV0ZWQuXG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMucHJldmlvdXNPcHRpb25zICYmXG4gICAgICAgICF0aGlzLnByZXZpb3VzRGF0YS5sb2FkaW5nICYmXG4gICAgICAgIGlzRXF1YWwodGhpcy5wcmV2aW91c09wdGlvbnMucXVlcnksIHF1ZXJ5KSAmJlxuICAgICAgICBpc0VxdWFsKHRoaXMucHJldmlvdXNPcHRpb25zLnZhcmlhYmxlcywgdmFyaWFibGVzKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKG9uQ29tcGxldGVkICYmICFlcnJvcikge1xuICAgICAgICBvbkNvbXBsZXRlZChkYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAob25FcnJvciAmJiBlcnJvcikge1xuICAgICAgICBvbkVycm9yKGVycm9yKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlbW92ZVF1ZXJ5U3Vic2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgIGRlbGV0ZSB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnN1YnNjcmlwdGlvbjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9ic1JlZmV0Y2ggPSAodmFyaWFibGVzPzogVFZhcmlhYmxlcykgPT5cbiAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5IS5yZWZldGNoKHZhcmlhYmxlcyk7XG5cbiAgcHJpdmF0ZSBvYnNGZXRjaE1vcmUgPSA8SyBleHRlbmRzIGtleW9mIFRWYXJpYWJsZXM+KFxuICAgIGZldGNoTW9yZU9wdGlvbnM6IEZldGNoTW9yZVF1ZXJ5T3B0aW9uczxUVmFyaWFibGVzLCBLPiAmXG4gICAgICBGZXRjaE1vcmVPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPlxuICApID0+IHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnkhLmZldGNoTW9yZShmZXRjaE1vcmVPcHRpb25zKTtcblxuICBwcml2YXRlIG9ic1VwZGF0ZVF1ZXJ5ID0gPFRWYXJzID0gVFZhcmlhYmxlcz4oXG4gICAgbWFwRm46IChcbiAgICAgIHByZXZpb3VzUXVlcnlSZXN1bHQ6IFREYXRhLFxuICAgICAgb3B0aW9uczogVXBkYXRlUXVlcnlPcHRpb25zPFRWYXJzPlxuICAgICkgPT4gVERhdGFcbiAgKSA9PiB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5IS51cGRhdGVRdWVyeShtYXBGbik7XG5cbiAgcHJpdmF0ZSBvYnNTdGFydFBvbGxpbmcgPSAocG9sbEludGVydmFsOiBudW1iZXIpID0+IHtcbiAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlICYmXG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5ISAmJlxuICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSEuc3RhcnRQb2xsaW5nKHBvbGxJbnRlcnZhbCk7XG4gIH07XG5cbiAgcHJpdmF0ZSBvYnNTdG9wUG9sbGluZyA9ICgpID0+IHtcbiAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlICYmXG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnF1ZXJ5ISAmJlxuICAgICAgdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSEuc3RvcFBvbGxpbmcoKTtcbiAgfTtcblxuICBwcml2YXRlIG9ic1N1YnNjcmliZVRvTW9yZSA9IDxcbiAgICBUU3Vic2NyaXB0aW9uRGF0YSA9IFREYXRhLFxuICAgIFRTdWJzY3JpcHRpb25WYXJpYWJsZXMgPSBUVmFyaWFibGVzXG4gID4oXG4gICAgb3B0aW9uczogU3Vic2NyaWJlVG9Nb3JlT3B0aW9uczxcbiAgICAgIFREYXRhLFxuICAgICAgVFN1YnNjcmlwdGlvblZhcmlhYmxlcyxcbiAgICAgIFRTdWJzY3JpcHRpb25EYXRhXG4gICAgPlxuICApID0+IHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnkhLnN1YnNjcmliZVRvTW9yZShvcHRpb25zKTtcblxuICBwcml2YXRlIG9ic2VydmFibGVRdWVyeUZpZWxkcygpIHtcbiAgICBjb25zdCBvYnNlcnZhYmxlID0gdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSE7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhcmlhYmxlczogb2JzZXJ2YWJsZS52YXJpYWJsZXMsXG4gICAgICByZWZldGNoOiB0aGlzLm9ic1JlZmV0Y2gsXG4gICAgICBmZXRjaE1vcmU6IHRoaXMub2JzRmV0Y2hNb3JlLFxuICAgICAgdXBkYXRlUXVlcnk6IHRoaXMub2JzVXBkYXRlUXVlcnksXG4gICAgICBzdGFydFBvbGxpbmc6IHRoaXMub2JzU3RhcnRQb2xsaW5nLFxuICAgICAgc3RvcFBvbGxpbmc6IHRoaXMub2JzU3RvcFBvbGxpbmcsXG4gICAgICBzdWJzY3JpYmVUb01vcmU6IHRoaXMub2JzU3Vic2NyaWJlVG9Nb3JlLFxuICAgIH0gYXMgT2JzZXJ2YWJsZVF1ZXJ5RmllbGRzPFREYXRhLCBUVmFyaWFibGVzPjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlRWZmZWN0LCB1c2VSZWR1Y2VyLCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQge1xuICBnZXRBcG9sbG9Db250ZXh0LFxuICBPcGVyYXRpb25WYXJpYWJsZXMsXG4gIFF1ZXJ5UmVzdWx0LFxufSBmcm9tICdAYXBvbGxvL3JlYWN0LWNvbW1vbic7XG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcblxuaW1wb3J0IHsgUXVlcnlIb29rT3B0aW9ucywgUXVlcnlPcHRpb25zLCBRdWVyeVR1cGxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgUXVlcnlEYXRhIH0gZnJvbSAnLi4vZGF0YS9RdWVyeURhdGEnO1xuaW1wb3J0IHsgdXNlRGVlcE1lbW8gfSBmcm9tICcuL3VzZURlZXBNZW1vJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUJhc2VRdWVyeTxURGF0YSA9IGFueSwgVFZhcmlhYmxlcyA9IE9wZXJhdGlvblZhcmlhYmxlcz4oXG4gIHF1ZXJ5OiBEb2N1bWVudE5vZGUsXG4gIG9wdGlvbnM/OiBRdWVyeUhvb2tPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPixcbiAgbGF6eSA9IGZhbHNlXG4pIHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoZ2V0QXBvbGxvQ29udGV4dCgpKTtcbiAgY29uc3QgW3RpY2ssIGZvcmNlVXBkYXRlXSA9IHVzZVJlZHVjZXIoKHgpID0+IHggKyAxLCAwKTtcbiAgY29uc3QgdXBkYXRlZE9wdGlvbnMgPSBvcHRpb25zID8geyAuLi5vcHRpb25zLCBxdWVyeSB9IDogeyBxdWVyeSB9O1xuXG4gIGNvbnN0IHF1ZXJ5RGF0YVJlZiA9IHVzZVJlZjxRdWVyeURhdGE8VERhdGEsIFRWYXJpYWJsZXM+PigpO1xuICBjb25zdCBxdWVyeURhdGEgPVxuICAgIHF1ZXJ5RGF0YVJlZi5jdXJyZW50IHx8XG4gICAgbmV3IFF1ZXJ5RGF0YTxURGF0YSwgVFZhcmlhYmxlcz4oe1xuICAgICAgb3B0aW9uczogdXBkYXRlZE9wdGlvbnMgYXMgUXVlcnlPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPixcbiAgICAgIGNvbnRleHQsXG4gICAgICBvbk5ld0RhdGEoKSB7XG4gICAgICAgIGlmICghcXVlcnlEYXRhLnNzckluaXRpYXRlZCgpKSB7XG4gICAgICAgICAgLy8gV2hlbiBuZXcgZGF0YSBpcyByZWNlaXZlZCBmcm9tIHRoZSBgUXVlcnlEYXRhYCBvYmplY3QsIHdlIHdhbnQgdG9cbiAgICAgICAgICAvLyBmb3JjZSBhIHJlLXJlbmRlciB0byBtYWtlIHN1cmUgdGhlIG5ldyBkYXRhIGlzIGRpc3BsYXllZC4gV2UgY2FuJ3RcbiAgICAgICAgICAvLyBmb3JjZSB0aGF0IHJlLXJlbmRlciBpZiB3ZSdyZSBhbHJlYWR5IHJlbmRlcmluZyBob3dldmVyIHNvIHRvIGJlXG4gICAgICAgICAgLy8gc2FmZSB3ZSdsbCB0cmlnZ2VyIHRoZSByZS1yZW5kZXIgaW4gYSBtaWNyb3Rhc2suXG4gICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmb3JjZVVwZGF0ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgd2UncmUgcmVuZGVyaW5nIG9uIHRoZSBzZXJ2ZXIgc2lkZSB3ZSBjYW4gZm9yY2UgYW4gdXBkYXRlIGF0XG4gICAgICAgICAgLy8gYW55IHBvaW50LlxuICAgICAgICAgIGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSk7XG5cbiAgcXVlcnlEYXRhLnNldE9wdGlvbnModXBkYXRlZE9wdGlvbnMpO1xuICBxdWVyeURhdGEuY29udGV4dCA9IGNvbnRleHQ7XG5cbiAgLy8gU1NSIHdvbid0IHRyaWdnZXIgdGhlIGVmZmVjdCBob29rIGJlbG93IHRoYXQgc3RvcmVzIHRoZSBjdXJyZW50XG4gIC8vIGBRdWVyeURhdGFgIGluc3RhbmNlIGZvciBmdXR1cmUgcmVuZGVycywgc28gd2UnbGwgaGFuZGxlIHRoYXQgaGVyZSBpZlxuICAvLyB0aGUgY3VycmVudCByZW5kZXIgaXMgaGFwcGVuaW5nIHNlcnZlciBzaWRlLlxuICBpZiAocXVlcnlEYXRhLnNzckluaXRpYXRlZCgpICYmICFxdWVyeURhdGFSZWYuY3VycmVudCkge1xuICAgIHF1ZXJ5RGF0YVJlZi5jdXJyZW50ID0gcXVlcnlEYXRhO1xuICB9XG5cbiAgLy8gYG9uRXJyb3JgIGFuZCBgb25Db21wbGV0ZWRgIGNhbGxiYWNrIGZ1bmN0aW9ucyB3aWxsIG5vdCBhbHdheXMgaGF2ZSBhXG4gIC8vIHN0YWJsZSBpZGVudGl0eSwgc28gd2UnbGwgZXhjbHVkZSB0aGVtIGZyb20gdGhlIG1lbW9pemF0aW9uIGtleSB0b1xuICAvLyBwcmV2ZW50IGBhZnRlckV4ZWN1dGVgIGZyb20gYmVpbmcgdHJpZ2dlcmVkIHVuLW5lY2Vzc2FyaWx5LlxuICBjb25zdCBtZW1vID0ge1xuICAgIG9wdGlvbnM6IHsgLi4udXBkYXRlZE9wdGlvbnMsIG9uRXJyb3I6IHVuZGVmaW5lZCwgb25Db21wbGV0ZWQ6IHVuZGVmaW5lZCB9LFxuICAgIGNvbnRleHQsXG4gICAgdGljayxcbiAgfTtcblxuICBjb25zdCByZXN1bHQgPSB1c2VEZWVwTWVtbyhcbiAgICAoKSA9PiAobGF6eSA/IHF1ZXJ5RGF0YS5leGVjdXRlTGF6eSgpIDogcXVlcnlEYXRhLmV4ZWN1dGUoKSksXG4gICAgbWVtb1xuICApO1xuXG4gIGNvbnN0IHF1ZXJ5UmVzdWx0ID0gbGF6eVxuICAgID8gKHJlc3VsdCBhcyBRdWVyeVR1cGxlPFREYXRhLCBUVmFyaWFibGVzPilbMV1cbiAgICA6IChyZXN1bHQgYXMgUXVlcnlSZXN1bHQ8VERhdGEsIFRWYXJpYWJsZXM+KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFdlIG9ubHkgbmVlZCBvbmUgaW5zdGFuY2Ugb2YgdGhlIGBRdWVyeURhdGFgIGNsYXNzLCBzbyB3ZSdsbCBzdG9yZSBpdFxuICAgIC8vIGFzIGEgcmVmIHRvIG1ha2UgaXQgYXZhaWxhYmxlIG9uIHN1YnNlcXVlbnQgcmVuZGVycy5cbiAgICBpZiAoIXF1ZXJ5RGF0YVJlZi5jdXJyZW50KSB7XG4gICAgICBxdWVyeURhdGFSZWYuY3VycmVudCA9IHF1ZXJ5RGF0YTtcbiAgICB9XG5cbiAgICByZXR1cm4gKCkgPT4gcXVlcnlEYXRhLmNsZWFudXAoKTtcbiAgfSwgW10pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiBxdWVyeURhdGEuYWZ0ZXJFeGVjdXRlKHsgbGF6eSB9KSwgW1xuICAgIHF1ZXJ5UmVzdWx0LmxvYWRpbmcsXG4gICAgcXVlcnlSZXN1bHQubmV0d29ya1N0YXR1cyxcbiAgICBxdWVyeVJlc3VsdC5lcnJvcixcbiAgICBxdWVyeVJlc3VsdC5kYXRhLFxuICBdKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IHsgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZXF1YWwgYXMgaXNFcXVhbCB9IGZyb20gJ0B3cnkvZXF1YWxpdHknO1xuXG4vKipcbiAqIE1lbW9pemUgYSByZXN1bHQgdXNpbmcgZGVlcCBlcXVhbGl0eS4gVGhpcyBob29rIGhhcyB0d28gYWR2YW50YWdlcyBvdmVyXG4gKiBSZWFjdC51c2VNZW1vOiBpdCB1c2VzIGRlZXAgZXF1YWxpdHkgdG8gY29tcGFyZSBtZW1vIGtleXMsIGFuZCBpdCBndWFyYW50ZWVzXG4gKiB0aGF0IHRoZSBtZW1vIGZ1bmN0aW9uIHdpbGwgb25seSBiZSBjYWxsZWQgaWYgdGhlIGtleXMgYXJlIHVuZXF1YWwuXG4gKiBSZWFjdC51c2VNZW1vIGNhbm5vdCBiZSByZWxpZWQgb24gdG8gZG8gdGhpcywgc2luY2UgaXQgaXMgb25seSBhIHBlcmZvcm1hbmNlXG4gKiBvcHRpbWl6YXRpb24gKHNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvaG9va3MtcmVmZXJlbmNlLmh0bWwjdXNlbWVtbykuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZWVwTWVtbzxUS2V5LCBUVmFsdWU+KFxuICBtZW1vRm46ICgpID0+IFRWYWx1ZSxcbiAga2V5OiBUS2V5XG4pOiBUVmFsdWUge1xuICBjb25zdCByZWYgPSB1c2VSZWY8eyBrZXk6IFRLZXk7IHZhbHVlOiBUVmFsdWUgfT4oKTtcblxuICBpZiAoIXJlZi5jdXJyZW50IHx8ICFpc0VxdWFsKGtleSwgcmVmLmN1cnJlbnQua2V5KSkge1xuICAgIHJlZi5jdXJyZW50ID0geyBrZXksIHZhbHVlOiBtZW1vRm4oKSB9O1xuICB9XG5cbiAgcmV0dXJuIHJlZi5jdXJyZW50LnZhbHVlO1xufVxuIiwiaW1wb3J0IHsgQXBvbGxvRXJyb3IgfSBmcm9tICdhcG9sbG8tY2xpZW50JztcbmltcG9ydCB7IGVxdWFsIGFzIGlzRXF1YWwgfSBmcm9tICdAd3J5L2VxdWFsaXR5JztcbmltcG9ydCB7XG4gIEFwb2xsb0NvbnRleHRWYWx1ZSxcbiAgRG9jdW1lbnRUeXBlLFxuICBPcGVyYXRpb25WYXJpYWJsZXMsXG4gIEV4ZWN1dGlvblJlc3VsdCxcbiAgTXV0YXRpb25GdW5jdGlvbk9wdGlvbnMsXG4gIE11dGF0aW9uUmVzdWx0XG59IGZyb20gJ0BhcG9sbG8vcmVhY3QtY29tbW9uJztcblxuaW1wb3J0IHsgTXV0YXRpb25PcHRpb25zLCBNdXRhdGlvblR1cGxlIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgT3BlcmF0aW9uRGF0YSB9IGZyb20gJy4vT3BlcmF0aW9uRGF0YSc7XG5cbmV4cG9ydCBjbGFzcyBNdXRhdGlvbkRhdGE8XG4gIFREYXRhID0gYW55LFxuICBUVmFyaWFibGVzID0gT3BlcmF0aW9uVmFyaWFibGVzXG4+IGV4dGVuZHMgT3BlcmF0aW9uRGF0YSB7XG4gIHByaXZhdGUgbW9zdFJlY2VudE11dGF0aW9uSWQ6IG51bWJlcjtcbiAgcHJpdmF0ZSByZXN1bHQ6IE11dGF0aW9uUmVzdWx0PFREYXRhPjtcbiAgcHJpdmF0ZSBwcmV2aW91c1Jlc3VsdD86IE11dGF0aW9uUmVzdWx0PFREYXRhPjtcbiAgcHJpdmF0ZSBzZXRSZXN1bHQ6IChyZXN1bHQ6IE11dGF0aW9uUmVzdWx0PFREYXRhPikgPT4gYW55O1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBvcHRpb25zLFxuICAgIGNvbnRleHQsXG4gICAgcmVzdWx0LFxuICAgIHNldFJlc3VsdFxuICB9OiB7XG4gICAgb3B0aW9uczogTXV0YXRpb25PcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPjtcbiAgICBjb250ZXh0OiBBcG9sbG9Db250ZXh0VmFsdWU7XG4gICAgcmVzdWx0OiBNdXRhdGlvblJlc3VsdDxURGF0YT47XG4gICAgc2V0UmVzdWx0OiAocmVzdWx0OiBNdXRhdGlvblJlc3VsdDxURGF0YT4pID0+IGFueTtcbiAgfSkge1xuICAgIHN1cGVyKG9wdGlvbnMsIGNvbnRleHQpO1xuICAgIHRoaXMudmVyaWZ5RG9jdW1lbnRUeXBlKG9wdGlvbnMubXV0YXRpb24sIERvY3VtZW50VHlwZS5NdXRhdGlvbik7XG4gICAgdGhpcy5yZXN1bHQgPSByZXN1bHQ7XG4gICAgdGhpcy5zZXRSZXN1bHQgPSBzZXRSZXN1bHQ7XG4gICAgdGhpcy5tb3N0UmVjZW50TXV0YXRpb25JZCA9IDA7XG4gIH1cblxuICBwdWJsaWMgZXhlY3V0ZShyZXN1bHQ6IE11dGF0aW9uUmVzdWx0PFREYXRhPikge1xuICAgIHRoaXMuaXNNb3VudGVkID0gdHJ1ZTtcbiAgICB0aGlzLnZlcmlmeURvY3VtZW50VHlwZSh0aGlzLmdldE9wdGlvbnMoKS5tdXRhdGlvbiwgRG9jdW1lbnRUeXBlLk11dGF0aW9uKTtcbiAgICByZXN1bHQuY2xpZW50ID0gdGhpcy5yZWZyZXNoQ2xpZW50KCkuY2xpZW50O1xuICAgIHJldHVybiBbdGhpcy5ydW5NdXRhdGlvbiwgcmVzdWx0XSBhcyBNdXRhdGlvblR1cGxlPFREYXRhLCBUVmFyaWFibGVzPjtcbiAgfVxuXG4gIHB1YmxpYyBhZnRlckV4ZWN1dGUoKSB7XG4gICAgdGhpcy5pc01vdW50ZWQgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLnVubW91bnQuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhbnVwKCkge1xuICAgIC8vIE5vIGNsZWFudXAgcmVxdWlyZWQuXG4gIH1cblxuICBwcml2YXRlIHJ1bk11dGF0aW9uID0gKFxuICAgIG11dGF0aW9uRnVuY3Rpb25PcHRpb25zOiBNdXRhdGlvbkZ1bmN0aW9uT3B0aW9uczxcbiAgICAgIFREYXRhLFxuICAgICAgVFZhcmlhYmxlc1xuICAgID4gPSB7fSBhcyBNdXRhdGlvbkZ1bmN0aW9uT3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz5cbiAgKSA9PiB7XG4gICAgdGhpcy5vbk11dGF0aW9uU3RhcnQoKTtcbiAgICBjb25zdCBtdXRhdGlvbklkID0gdGhpcy5nZW5lcmF0ZU5ld011dGF0aW9uSWQoKTtcblxuICAgIHJldHVybiB0aGlzLm11dGF0ZShtdXRhdGlvbkZ1bmN0aW9uT3B0aW9ucylcbiAgICAgIC50aGVuKChyZXNwb25zZTogRXhlY3V0aW9uUmVzdWx0PFREYXRhPikgPT4ge1xuICAgICAgICB0aGlzLm9uTXV0YXRpb25Db21wbGV0ZWQocmVzcG9uc2UsIG11dGF0aW9uSWQpO1xuICAgICAgICByZXR1cm4gcmVzcG9uc2U7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcjogQXBvbGxvRXJyb3IpID0+IHtcbiAgICAgICAgdGhpcy5vbk11dGF0aW9uRXJyb3IoZXJyb3IsIG11dGF0aW9uSWQpO1xuICAgICAgICBpZiAoIXRoaXMuZ2V0T3B0aW9ucygpLm9uRXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgfSk7XG4gIH07XG5cbiAgcHJpdmF0ZSBtdXRhdGUoXG4gICAgbXV0YXRpb25GdW5jdGlvbk9wdGlvbnM6IE11dGF0aW9uRnVuY3Rpb25PcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPlxuICApIHtcbiAgICBjb25zdCB7XG4gICAgICBtdXRhdGlvbixcbiAgICAgIHZhcmlhYmxlcyxcbiAgICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgIHVwZGF0ZSxcbiAgICAgIGNvbnRleHQ6IG11dGF0aW9uQ29udGV4dCA9IHt9LFxuICAgICAgYXdhaXRSZWZldGNoUXVlcmllcyA9IGZhbHNlLFxuICAgICAgZmV0Y2hQb2xpY3lcbiAgICB9ID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgY29uc3QgbXV0YXRlT3B0aW9ucyA9IHsgLi4ubXV0YXRpb25GdW5jdGlvbk9wdGlvbnMgfTtcblxuICAgIGNvbnN0IG11dGF0ZVZhcmlhYmxlcyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHZhcmlhYmxlcyxcbiAgICAgIG11dGF0ZU9wdGlvbnMudmFyaWFibGVzXG4gICAgKTtcbiAgICBkZWxldGUgbXV0YXRlT3B0aW9ucy52YXJpYWJsZXM7XG5cbiAgICByZXR1cm4gdGhpcy5yZWZyZXNoQ2xpZW50KCkuY2xpZW50Lm11dGF0ZSh7XG4gICAgICBtdXRhdGlvbixcbiAgICAgIG9wdGltaXN0aWNSZXNwb25zZSxcbiAgICAgIHJlZmV0Y2hRdWVyaWVzOlxuICAgICAgICBtdXRhdGVPcHRpb25zLnJlZmV0Y2hRdWVyaWVzIHx8IHRoaXMuZ2V0T3B0aW9ucygpLnJlZmV0Y2hRdWVyaWVzLFxuICAgICAgYXdhaXRSZWZldGNoUXVlcmllcyxcbiAgICAgIHVwZGF0ZSxcbiAgICAgIGNvbnRleHQ6IG11dGF0aW9uQ29udGV4dCxcbiAgICAgIGZldGNoUG9saWN5LFxuICAgICAgdmFyaWFibGVzOiBtdXRhdGVWYXJpYWJsZXMsXG4gICAgICAuLi5tdXRhdGVPcHRpb25zXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIG9uTXV0YXRpb25TdGFydCgpIHtcbiAgICBpZiAoIXRoaXMucmVzdWx0LmxvYWRpbmcgJiYgIXRoaXMuZ2V0T3B0aW9ucygpLmlnbm9yZVJlc3VsdHMpIHtcbiAgICAgIHRoaXMudXBkYXRlUmVzdWx0KHtcbiAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBjYWxsZWQ6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgb25NdXRhdGlvbkNvbXBsZXRlZChcbiAgICByZXNwb25zZTogRXhlY3V0aW9uUmVzdWx0PFREYXRhPixcbiAgICBtdXRhdGlvbklkOiBudW1iZXJcbiAgKSB7XG4gICAgY29uc3QgeyBvbkNvbXBsZXRlZCwgaWdub3JlUmVzdWx0cyB9ID0gdGhpcy5nZXRPcHRpb25zKCk7XG5cbiAgICBjb25zdCB7IGRhdGEsIGVycm9ycyB9ID0gcmVzcG9uc2U7XG4gICAgY29uc3QgZXJyb3IgPVxuICAgICAgZXJyb3JzICYmIGVycm9ycy5sZW5ndGggPiAwXG4gICAgICAgID8gbmV3IEFwb2xsb0Vycm9yKHsgZ3JhcGhRTEVycm9yczogZXJyb3JzIH0pXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgY2FsbE9uY29tcGxldGUgPSAoKSA9PlxuICAgICAgb25Db21wbGV0ZWQgPyBvbkNvbXBsZXRlZChkYXRhIGFzIFREYXRhKSA6IG51bGw7XG5cbiAgICBpZiAodGhpcy5pc01vc3RSZWNlbnRNdXRhdGlvbihtdXRhdGlvbklkKSAmJiAhaWdub3JlUmVzdWx0cykge1xuICAgICAgdGhpcy51cGRhdGVSZXN1bHQoe1xuICAgICAgICBjYWxsZWQ6IHRydWUsXG4gICAgICAgIGxvYWRpbmc6IGZhbHNlLFxuICAgICAgICBkYXRhLFxuICAgICAgICBlcnJvclxuICAgICAgfSk7XG4gICAgfVxuICAgIGNhbGxPbmNvbXBsZXRlKCk7XG4gIH1cblxuICBwcml2YXRlIG9uTXV0YXRpb25FcnJvcihlcnJvcjogQXBvbGxvRXJyb3IsIG11dGF0aW9uSWQ6IG51bWJlcikge1xuICAgIGNvbnN0IHsgb25FcnJvciB9ID0gdGhpcy5nZXRPcHRpb25zKCk7XG5cbiAgICBpZiAodGhpcy5pc01vc3RSZWNlbnRNdXRhdGlvbihtdXRhdGlvbklkKSkge1xuICAgICAgdGhpcy51cGRhdGVSZXN1bHQoe1xuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgZXJyb3IsXG4gICAgICAgIGRhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgY2FsbGVkOiB0cnVlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAob25FcnJvcikge1xuICAgICAgb25FcnJvcihlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZU5ld011dGF0aW9uSWQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKyt0aGlzLm1vc3RSZWNlbnRNdXRhdGlvbklkO1xuICB9XG5cbiAgcHJpdmF0ZSBpc01vc3RSZWNlbnRNdXRhdGlvbihtdXRhdGlvbklkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5tb3N0UmVjZW50TXV0YXRpb25JZCA9PT0gbXV0YXRpb25JZDtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlUmVzdWx0KHJlc3VsdDogTXV0YXRpb25SZXN1bHQ8VERhdGE+KSB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5pc01vdW50ZWQgJiZcbiAgICAgICghdGhpcy5wcmV2aW91c1Jlc3VsdCB8fCAhaXNFcXVhbCh0aGlzLnByZXZpb3VzUmVzdWx0LCByZXN1bHQpKVxuICAgICkge1xuICAgICAgdGhpcy5zZXRSZXN1bHQocmVzdWx0KTtcbiAgICAgIHRoaXMucHJldmlvdXNSZXN1bHQgPSByZXN1bHQ7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBlcXVhbCBhcyBpc0VxdWFsIH0gZnJvbSAnQHdyeS9lcXVhbGl0eSc7XG5pbXBvcnQgeyBBcG9sbG9Db250ZXh0VmFsdWUsIFN1YnNjcmlwdGlvblJlc3VsdCB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtY29tbW9uJztcblxuaW1wb3J0IHsgT3BlcmF0aW9uRGF0YSB9IGZyb20gJy4vT3BlcmF0aW9uRGF0YSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb25DdXJyZW50T2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uT3B0aW9ucyB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIFN1YnNjcmlwdGlvbkRhdGE8XG4gIFREYXRhID0gYW55LFxuICBUVmFyaWFibGVzID0gYW55XG4+IGV4dGVuZHMgT3BlcmF0aW9uRGF0YTxTdWJzY3JpcHRpb25PcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPj4ge1xuICBwcml2YXRlIHNldFJlc3VsdDogYW55O1xuICBwcml2YXRlIGN1cnJlbnRPYnNlcnZhYmxlOiBTdWJzY3JpcHRpb25DdXJyZW50T2JzZXJ2YWJsZSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBvcHRpb25zLFxuICAgIGNvbnRleHQsXG4gICAgc2V0UmVzdWx0XG4gIH06IHtcbiAgICBvcHRpb25zOiBTdWJzY3JpcHRpb25PcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPjtcbiAgICBjb250ZXh0OiBBcG9sbG9Db250ZXh0VmFsdWU7XG4gICAgc2V0UmVzdWx0OiBhbnk7XG4gIH0pIHtcbiAgICBzdXBlcihvcHRpb25zLCBjb250ZXh0KTtcbiAgICB0aGlzLnNldFJlc3VsdCA9IHNldFJlc3VsdDtcbiAgICB0aGlzLmluaXRpYWxpemUob3B0aW9ucyk7XG4gIH1cblxuICBwdWJsaWMgZXhlY3V0ZShyZXN1bHQ6IFN1YnNjcmlwdGlvblJlc3VsdDxURGF0YT4pIHtcbiAgICBpZiAodGhpcy5nZXRPcHRpb25zKCkuc2tpcCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgICAgZGF0YTogdW5kZWZpbmVkLFxuICAgICAgICB2YXJpYWJsZXM6IHRoaXMuZ2V0T3B0aW9ucygpLnZhcmlhYmxlc1xuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgY3VycmVudFJlc3VsdCA9IHJlc3VsdDtcbiAgICBpZiAodGhpcy5yZWZyZXNoQ2xpZW50KCkuaXNOZXcpIHtcbiAgICAgIGN1cnJlbnRSZXN1bHQgPSB0aGlzLmdldExvYWRpbmdSZXN1bHQoKTtcbiAgICB9XG5cbiAgICBsZXQgeyBzaG91bGRSZXN1YnNjcmliZSB9ID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgaWYgKHR5cGVvZiBzaG91bGRSZXN1YnNjcmliZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgc2hvdWxkUmVzdWJzY3JpYmUgPSAhIXNob3VsZFJlc3Vic2NyaWJlKHRoaXMuZ2V0T3B0aW9ucygpKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBzaG91bGRSZXN1YnNjcmliZSAhPT0gZmFsc2UgJiZcbiAgICAgIHRoaXMucHJldmlvdXNPcHRpb25zICYmXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnByZXZpb3VzT3B0aW9ucykubGVuZ3RoID4gMCAmJlxuICAgICAgKHRoaXMucHJldmlvdXNPcHRpb25zLnN1YnNjcmlwdGlvbiAhPT0gdGhpcy5nZXRPcHRpb25zKCkuc3Vic2NyaXB0aW9uIHx8XG4gICAgICAgICFpc0VxdWFsKHRoaXMucHJldmlvdXNPcHRpb25zLnZhcmlhYmxlcywgdGhpcy5nZXRPcHRpb25zKCkudmFyaWFibGVzKSB8fFxuICAgICAgICB0aGlzLnByZXZpb3VzT3B0aW9ucy5za2lwICE9PSB0aGlzLmdldE9wdGlvbnMoKS5za2lwKVxuICAgICkge1xuICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICBjdXJyZW50UmVzdWx0ID0gdGhpcy5nZXRMb2FkaW5nUmVzdWx0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplKHRoaXMuZ2V0T3B0aW9ucygpKTtcbiAgICB0aGlzLnN0YXJ0U3Vic2NyaXB0aW9uKCk7XG5cbiAgICB0aGlzLnByZXZpb3VzT3B0aW9ucyA9IHRoaXMuZ2V0T3B0aW9ucygpO1xuICAgIHJldHVybiB7IC4uLmN1cnJlbnRSZXN1bHQsIHZhcmlhYmxlczogdGhpcy5nZXRPcHRpb25zKCkudmFyaWFibGVzIH07XG4gIH1cblxuICBwdWJsaWMgYWZ0ZXJFeGVjdXRlKCkge1xuICAgIHRoaXMuaXNNb3VudGVkID0gdHJ1ZTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhbnVwKCkge1xuICAgIHRoaXMuZW5kU3Vic2NyaXB0aW9uKCk7XG4gICAgZGVsZXRlIHRoaXMuY3VycmVudE9ic2VydmFibGUucXVlcnk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemUob3B0aW9uczogU3Vic2NyaXB0aW9uT3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz4pIHtcbiAgICBpZiAodGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSB8fCB0aGlzLmdldE9wdGlvbnMoKS5za2lwID09PSB0cnVlKSByZXR1cm47XG4gICAgdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSA9IHRoaXMucmVmcmVzaENsaWVudCgpLmNsaWVudC5zdWJzY3JpYmUoe1xuICAgICAgcXVlcnk6IG9wdGlvbnMuc3Vic2NyaXB0aW9uLFxuICAgICAgdmFyaWFibGVzOiBvcHRpb25zLnZhcmlhYmxlcyxcbiAgICAgIGZldGNoUG9saWN5OiBvcHRpb25zLmZldGNoUG9saWN5XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHN0YXJ0U3Vic2NyaXB0aW9uKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnN1YnNjcmlwdGlvbikgcmV0dXJuO1xuICAgIHRoaXMuY3VycmVudE9ic2VydmFibGUuc3Vic2NyaXB0aW9uID0gdGhpcy5jdXJyZW50T2JzZXJ2YWJsZS5xdWVyeSEuc3Vic2NyaWJlKFxuICAgICAge1xuICAgICAgICBuZXh0OiB0aGlzLnVwZGF0ZUN1cnJlbnREYXRhLmJpbmQodGhpcyksXG4gICAgICAgIGVycm9yOiB0aGlzLnVwZGF0ZUVycm9yLmJpbmQodGhpcyksXG4gICAgICAgIGNvbXBsZXRlOiB0aGlzLmNvbXBsZXRlU3Vic2NyaXB0aW9uLmJpbmQodGhpcylcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRMb2FkaW5nUmVzdWx0KCkge1xuICAgIHJldHVybiB7XG4gICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgZXJyb3I6IHVuZGVmaW5lZCxcbiAgICAgIGRhdGE6IHVuZGVmaW5lZFxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVJlc3VsdChyZXN1bHQ6IFN1YnNjcmlwdGlvblJlc3VsdCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgdGhpcy5zZXRSZXN1bHQocmVzdWx0KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUN1cnJlbnREYXRhKHJlc3VsdDogU3Vic2NyaXB0aW9uUmVzdWx0PFREYXRhPikge1xuICAgIGNvbnN0IHsgb25TdWJzY3JpcHRpb25EYXRhIH0gPSB0aGlzLmdldE9wdGlvbnMoKTtcblxuICAgIHRoaXMudXBkYXRlUmVzdWx0KHtcbiAgICAgIGRhdGE6IHJlc3VsdC5kYXRhLFxuICAgICAgbG9hZGluZzogZmFsc2UsXG4gICAgICBlcnJvcjogdW5kZWZpbmVkXG4gICAgfSk7XG5cbiAgICBpZiAob25TdWJzY3JpcHRpb25EYXRhKSB7XG4gICAgICBvblN1YnNjcmlwdGlvbkRhdGEoe1xuICAgICAgICBjbGllbnQ6IHRoaXMucmVmcmVzaENsaWVudCgpLmNsaWVudCxcbiAgICAgICAgc3Vic2NyaXB0aW9uRGF0YTogcmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICB0aGlzLnVwZGF0ZVJlc3VsdCh7XG4gICAgICBlcnJvcixcbiAgICAgIGxvYWRpbmc6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNvbXBsZXRlU3Vic2NyaXB0aW9uKCkge1xuICAgIGNvbnN0IHsgb25TdWJzY3JpcHRpb25Db21wbGV0ZSB9ID0gdGhpcy5nZXRPcHRpb25zKCk7XG4gICAgaWYgKG9uU3Vic2NyaXB0aW9uQ29tcGxldGUpIG9uU3Vic2NyaXB0aW9uQ29tcGxldGUoKTtcbiAgICB0aGlzLmVuZFN1YnNjcmlwdGlvbigpO1xuICB9XG5cbiAgcHJpdmF0ZSBlbmRTdWJzY3JpcHRpb24oKSB7XG4gICAgaWYgKHRoaXMuY3VycmVudE9ic2VydmFibGUuc3Vic2NyaXB0aW9uKSB7XG4gICAgICB0aGlzLmN1cnJlbnRPYnNlcnZhYmxlLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuY3VycmVudE9ic2VydmFibGUuc3Vic2NyaXB0aW9uO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZVF1ZXJ5IH0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQgeyBRdWVyeU9wdGlvbnMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IFF1ZXJ5RGF0YSB9IGZyb20gJy4uL2RhdGEvUXVlcnlEYXRhJztcblxudHlwZSBRdWVyeUluZm8gPSB7XG4gIHNlZW46IGJvb2xlYW47XG4gIG9ic2VydmFibGU6IE9ic2VydmFibGVRdWVyeTxhbnksIGFueT4gfCBudWxsO1xufTtcblxuZnVuY3Rpb24gbWFrZURlZmF1bHRRdWVyeUluZm8oKTogUXVlcnlJbmZvIHtcbiAgcmV0dXJuIHtcbiAgICBzZWVuOiBmYWxzZSxcbiAgICBvYnNlcnZhYmxlOiBudWxsXG4gIH07XG59XG5cbmV4cG9ydCBjbGFzcyBSZW5kZXJQcm9taXNlcyB7XG4gIC8vIE1hcCBmcm9tIFF1ZXJ5IGNvbXBvbmVudCBpbnN0YW5jZXMgdG8gcGVuZGluZyBmZXRjaERhdGEgcHJvbWlzZXMuXG4gIHByaXZhdGUgcXVlcnlQcm9taXNlcyA9IG5ldyBNYXA8UXVlcnlPcHRpb25zPGFueSwgYW55PiwgUHJvbWlzZTxhbnk+PigpO1xuXG4gIC8vIFR3by1sYXllcmVkIG1hcCBmcm9tIChxdWVyeSBkb2N1bWVudCwgc3RyaW5naWZpZWQgdmFyaWFibGVzKSB0byBRdWVyeUluZm9cbiAgLy8gb2JqZWN0cy4gVGhlc2UgUXVlcnlJbmZvIG9iamVjdHMgYXJlIGludGVuZGVkIHRvIHN1cnZpdmUgdGhyb3VnaCB0aGUgd2hvbGVcbiAgLy8gZ2V0TWFya3VwRnJvbVRyZWUgcHJvY2Vzcywgd2hlcmVhcyBzcGVjaWZpYyBRdWVyeSBpbnN0YW5jZXMgZG8gbm90IHN1cnZpdmVcbiAgLy8gYmV5b25kIGEgc2luZ2xlIGNhbGwgdG8gcmVuZGVyVG9TdGF0aWNNYXJrdXAuXG4gIHByaXZhdGUgcXVlcnlJbmZvVHJpZSA9IG5ldyBNYXA8RG9jdW1lbnROb2RlLCBNYXA8c3RyaW5nLCBRdWVyeUluZm8+PigpO1xuXG4gIC8vIFJlZ2lzdGVycyB0aGUgc2VydmVyIHNpZGUgcmVuZGVyZWQgb2JzZXJ2YWJsZS5cbiAgcHVibGljIHJlZ2lzdGVyU1NST2JzZXJ2YWJsZTxURGF0YSwgVFZhcmlhYmxlcz4oXG4gICAgb2JzZXJ2YWJsZTogT2JzZXJ2YWJsZVF1ZXJ5PGFueSwgVFZhcmlhYmxlcz4sXG4gICAgcHJvcHM6IFF1ZXJ5T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz5cbiAgKSB7XG4gICAgdGhpcy5sb29rdXBRdWVyeUluZm8ocHJvcHMpLm9ic2VydmFibGUgPSBvYnNlcnZhYmxlO1xuICB9XG5cbiAgLy8gR2V0J3MgdGhlIGNhY2hlZCBvYnNlcnZhYmxlIHRoYXQgbWF0Y2hlcyB0aGUgU1NSIFF1ZXJ5IGluc3RhbmNlcyBxdWVyeSBhbmQgdmFyaWFibGVzLlxuICBwdWJsaWMgZ2V0U1NST2JzZXJ2YWJsZTxURGF0YSwgVFZhcmlhYmxlcz4oXG4gICAgcHJvcHM6IFF1ZXJ5T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz5cbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMubG9va3VwUXVlcnlJbmZvKHByb3BzKS5vYnNlcnZhYmxlO1xuICB9XG5cbiAgcHVibGljIGFkZFF1ZXJ5UHJvbWlzZTxURGF0YSwgVFZhcmlhYmxlcz4oXG4gICAgcXVlcnlJbnN0YW5jZTogUXVlcnlEYXRhPFREYXRhLCBUVmFyaWFibGVzPixcbiAgICBmaW5pc2g6ICgpID0+IFJlYWN0LlJlYWN0Tm9kZVxuICApOiBSZWFjdC5SZWFjdE5vZGUge1xuICAgIGNvbnN0IGluZm8gPSB0aGlzLmxvb2t1cFF1ZXJ5SW5mbyhxdWVyeUluc3RhbmNlLmdldE9wdGlvbnMoKSk7XG4gICAgaWYgKCFpbmZvLnNlZW4pIHtcbiAgICAgIHRoaXMucXVlcnlQcm9taXNlcy5zZXQoXG4gICAgICAgIHF1ZXJ5SW5zdGFuY2UuZ2V0T3B0aW9ucygpLFxuICAgICAgICBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICByZXNvbHZlKHF1ZXJ5SW5zdGFuY2UuZmV0Y2hEYXRhKCkpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIC8vIFJlbmRlciBudWxsIHRvIGFiYW5kb24gdGhpcyBzdWJ0cmVlIGZvciB0aGlzIHJlbmRlcmluZywgc28gdGhhdCB3ZVxuICAgICAgLy8gY2FuIHdhaXQgZm9yIHRoZSBkYXRhIHRvIGFycml2ZS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZmluaXNoKCk7XG4gIH1cblxuICBwdWJsaWMgaGFzUHJvbWlzZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMucXVlcnlQcm9taXNlcy5zaXplID4gMDtcbiAgfVxuXG4gIHB1YmxpYyBjb25zdW1lQW5kQXdhaXRQcm9taXNlcygpIHtcbiAgICBjb25zdCBwcm9taXNlczogUHJvbWlzZTxhbnk+W10gPSBbXTtcbiAgICB0aGlzLnF1ZXJ5UHJvbWlzZXMuZm9yRWFjaCgocHJvbWlzZSwgcXVlcnlJbnN0YW5jZSkgPT4ge1xuICAgICAgLy8gTWFrZSBzdXJlIHdlIG5ldmVyIHRyeSB0byBjYWxsIGZldGNoRGF0YSBmb3IgdGhpcyBxdWVyeSBkb2N1bWVudCBhbmRcbiAgICAgIC8vIHRoZXNlIHZhcmlhYmxlcyBhZ2Fpbi4gU2luY2UgdGhlIHF1ZXJ5SW5zdGFuY2Ugb2JqZWN0cyBjaGFuZ2Ugd2l0aFxuICAgICAgLy8gZXZlcnkgcmVuZGVyaW5nLCBkZWR1cGxpY2F0aW5nIHRoZW0gYnkgcXVlcnkgYW5kIHZhcmlhYmxlcyBpcyB0aGVcbiAgICAgIC8vIGJlc3Qgd2UgY2FuIGRvLiBJZiBhIGRpZmZlcmVudCBRdWVyeSBjb21wb25lbnQgaGFwcGVucyB0byBoYXZlIHRoZVxuICAgICAgLy8gc2FtZSBxdWVyeSBkb2N1bWVudCBhbmQgdmFyaWFibGVzLCBpdCB3aWxsIGJlIGltbWVkaWF0ZWx5IHJlbmRlcmVkXG4gICAgICAvLyBieSBjYWxsaW5nIGZpbmlzaCgpIGluIGFkZFF1ZXJ5UHJvbWlzZSwgd2hpY2ggY291bGQgcmVzdWx0IGluIHRoZVxuICAgICAgLy8gcmVuZGVyaW5nIG9mIGFuIHVud2FudGVkIGxvYWRpbmcgc3RhdGUsIGJ1dCB0aGF0J3Mgbm90IG5lYXJseSBhcyBiYWRcbiAgICAgIC8vIGFzIGdldHRpbmcgc3R1Y2sgaW4gYW4gaW5maW5pdGUgcmVuZGVyaW5nIGxvb3AgYmVjYXVzZSB3ZSBrZXB0IGNhbGxpbmdcbiAgICAgIC8vIHF1ZXJ5SW5zdGFuY2UuZmV0Y2hEYXRhIGZvciB0aGUgc2FtZSBRdWVyeSBjb21wb25lbnQgaW5kZWZpbml0ZWx5LlxuICAgICAgdGhpcy5sb29rdXBRdWVyeUluZm8ocXVlcnlJbnN0YW5jZSkuc2VlbiA9IHRydWU7XG4gICAgICBwcm9taXNlcy5wdXNoKHByb21pc2UpO1xuICAgIH0pO1xuICAgIHRoaXMucXVlcnlQcm9taXNlcy5jbGVhcigpO1xuICAgIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIH1cblxuICBwcml2YXRlIGxvb2t1cFF1ZXJ5SW5mbzxURGF0YSwgVFZhcmlhYmxlcz4oXG4gICAgcHJvcHM6IFF1ZXJ5T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz5cbiAgKTogUXVlcnlJbmZvIHtcbiAgICBjb25zdCB7IHF1ZXJ5SW5mb1RyaWUgfSA9IHRoaXM7XG4gICAgY29uc3QgeyBxdWVyeSwgdmFyaWFibGVzIH0gPSBwcm9wcztcbiAgICBjb25zdCB2YXJNYXAgPSBxdWVyeUluZm9UcmllLmdldChxdWVyeSkgfHwgbmV3IE1hcDxzdHJpbmcsIFF1ZXJ5SW5mbz4oKTtcbiAgICBpZiAoIXF1ZXJ5SW5mb1RyaWUuaGFzKHF1ZXJ5KSkgcXVlcnlJbmZvVHJpZS5zZXQocXVlcnksIHZhck1hcCk7XG4gICAgY29uc3QgdmFyaWFibGVzU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkodmFyaWFibGVzKTtcbiAgICBjb25zdCBpbmZvID0gdmFyTWFwLmdldCh2YXJpYWJsZXNTdHJpbmcpIHx8IG1ha2VEZWZhdWx0UXVlcnlJbmZvKCk7XG4gICAgaWYgKCF2YXJNYXAuaGFzKHZhcmlhYmxlc1N0cmluZykpIHZhck1hcC5zZXQodmFyaWFibGVzU3RyaW5nLCBpbmZvKTtcbiAgICByZXR1cm4gaW5mbztcbiAgfVxufVxuIiwiaW1wb3J0IHsgT3BlcmF0aW9uVmFyaWFibGVzIH0gZnJvbSAnQGFwb2xsby9yZWFjdC1jb21tb24nO1xuaW1wb3J0IHsgdXNlUXVlcnkgfSBmcm9tICdAYXBvbGxvL3JlYWN0LWhvb2tzJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCB7IFF1ZXJ5Q29tcG9uZW50T3B0aW9ucyB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gUXVlcnk8VERhdGEgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICBwcm9wczogUXVlcnlDb21wb25lbnRPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPlxuKSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIHF1ZXJ5LCAuLi5vcHRpb25zIH0gPSBwcm9wcztcbiAgY29uc3QgcmVzdWx0ID0gdXNlUXVlcnkocXVlcnksIG9wdGlvbnMpO1xuICByZXR1cm4gY2hpbGRyZW4gJiYgcmVzdWx0ID8gY2hpbGRyZW4ocmVzdWx0KSA6IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgUXVlcnkge1xuICBleHBvcnQgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIGNsaWVudDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmZXRjaFBvbGljeTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBub3RpZnlPbk5ldHdvcmtTdGF0dXNDaGFuZ2U6IFByb3BUeXBlcy5ib29sLFxuICAgIG9uQ29tcGxldGVkOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvbkVycm9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBwb2xsSW50ZXJ2YWw6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgcXVlcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICB2YXJpYWJsZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc3NyOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBwYXJ0aWFsUmVmZXRjaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgcmV0dXJuUGFydGlhbERhdGE6IFByb3BUeXBlcy5ib29sXG4gIH07XG59XG4iLCJpbXBvcnQgeyBPcGVyYXRpb25WYXJpYWJsZXMsIFF1ZXJ5UmVzdWx0IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1jb21tb24nO1xuaW1wb3J0IHsgRG9jdW1lbnROb2RlIH0gZnJvbSAnZ3JhcGhxbCc7XG5cbmltcG9ydCB7IFF1ZXJ5SG9va09wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IHVzZUJhc2VRdWVyeSB9IGZyb20gJy4vdXRpbHMvdXNlQmFzZVF1ZXJ5JztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVF1ZXJ5PFREYXRhID0gYW55LCBUVmFyaWFibGVzID0gT3BlcmF0aW9uVmFyaWFibGVzPihcbiAgcXVlcnk6IERvY3VtZW50Tm9kZSxcbiAgb3B0aW9ucz86IFF1ZXJ5SG9va09wdGlvbnM8VERhdGEsIFRWYXJpYWJsZXM+XG4pIHtcbiAgcmV0dXJuIHVzZUJhc2VRdWVyeTxURGF0YSwgVFZhcmlhYmxlcz4ocXVlcnksIG9wdGlvbnMsIGZhbHNlKSBhcyBRdWVyeVJlc3VsdDxcbiAgICBURGF0YSxcbiAgICBUVmFyaWFibGVzXG4gID47XG59XG4iLCJpbXBvcnQgeyBPcGVyYXRpb25WYXJpYWJsZXMgfSBmcm9tICdAYXBvbGxvL3JlYWN0LWNvbW1vbic7XG5pbXBvcnQgeyB1c2VNdXRhdGlvbiB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtaG9va3MnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgTXV0YXRpb25Db21wb25lbnRPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBNdXRhdGlvbjxURGF0YSA9IGFueSwgVFZhcmlhYmxlcyA9IE9wZXJhdGlvblZhcmlhYmxlcz4oXG4gIHByb3BzOiBNdXRhdGlvbkNvbXBvbmVudE9wdGlvbnM8VERhdGEsIFRWYXJpYWJsZXM+XG4pIHtcbiAgY29uc3QgW3J1bk11dGF0aW9uLCByZXN1bHRdID0gdXNlTXV0YXRpb24ocHJvcHMubXV0YXRpb24sIHByb3BzKTtcbiAgcmV0dXJuIHByb3BzLmNoaWxkcmVuID8gcHJvcHMuY2hpbGRyZW4ocnVuTXV0YXRpb24sIHJlc3VsdCkgOiBudWxsO1xufVxuXG5leHBvcnQgbmFtZXNwYWNlIE11dGF0aW9uIHtcbiAgZXhwb3J0IGNvbnN0IHByb3BUeXBlcyA9IHtcbiAgICBtdXRhdGlvbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHZhcmlhYmxlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBvcHRpbWlzdGljUmVzcG9uc2U6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5vYmplY3QsIFByb3BUeXBlcy5mdW5jXSksXG4gICAgcmVmZXRjaFF1ZXJpZXM6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLmFycmF5T2YoXG4gICAgICAgIFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgICAgKSxcbiAgICAgIFByb3BUeXBlcy5mdW5jXG4gICAgXSksXG4gICAgYXdhaXRSZWZldGNoUXVlcmllczogUHJvcFR5cGVzLmJvb2wsXG4gICAgdXBkYXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBvbkNvbXBsZXRlZDogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25FcnJvcjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgZmV0Y2hQb2xpY3k6IFByb3BUeXBlcy5zdHJpbmdcbiAgfTtcbn1cbiIsImltcG9ydCB7IHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VSZWYsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdldEFwb2xsb0NvbnRleHQsIE9wZXJhdGlvblZhcmlhYmxlcyB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtY29tbW9uJztcbmltcG9ydCB7IERvY3VtZW50Tm9kZSB9IGZyb20gJ2dyYXBocWwnO1xuXG5pbXBvcnQgeyBNdXRhdGlvbkhvb2tPcHRpb25zLCBNdXRhdGlvblR1cGxlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBNdXRhdGlvbkRhdGEgfSBmcm9tICcuL2RhdGEvTXV0YXRpb25EYXRhJztcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZU11dGF0aW9uPFREYXRhID0gYW55LCBUVmFyaWFibGVzID0gT3BlcmF0aW9uVmFyaWFibGVzPihcbiAgbXV0YXRpb246IERvY3VtZW50Tm9kZSxcbiAgb3B0aW9ucz86IE11dGF0aW9uSG9va09wdGlvbnM8VERhdGEsIFRWYXJpYWJsZXM+XG4pOiBNdXRhdGlvblR1cGxlPFREYXRhLCBUVmFyaWFibGVzPiB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KGdldEFwb2xsb0NvbnRleHQoKSk7XG4gIGNvbnN0IFtyZXN1bHQsIHNldFJlc3VsdF0gPSB1c2VTdGF0ZSh7IGNhbGxlZDogZmFsc2UsIGxvYWRpbmc6IGZhbHNlIH0pO1xuICBjb25zdCB1cGRhdGVkT3B0aW9ucyA9IG9wdGlvbnMgPyB7IC4uLm9wdGlvbnMsIG11dGF0aW9uIH0gOiB7IG11dGF0aW9uIH07XG5cbiAgY29uc3QgbXV0YXRpb25EYXRhUmVmID0gdXNlUmVmPE11dGF0aW9uRGF0YTxURGF0YSwgVFZhcmlhYmxlcz4+KCk7XG4gIGZ1bmN0aW9uIGdldE11dGF0aW9uRGF0YVJlZigpIHtcbiAgICBpZiAoIW11dGF0aW9uRGF0YVJlZi5jdXJyZW50KSB7XG4gICAgICBtdXRhdGlvbkRhdGFSZWYuY3VycmVudCA9IG5ldyBNdXRhdGlvbkRhdGE8VERhdGEsIFRWYXJpYWJsZXM+KHtcbiAgICAgICAgb3B0aW9uczogdXBkYXRlZE9wdGlvbnMsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgc2V0UmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG11dGF0aW9uRGF0YVJlZi5jdXJyZW50O1xuICB9XG5cbiAgY29uc3QgbXV0YXRpb25EYXRhID0gZ2V0TXV0YXRpb25EYXRhUmVmKCk7XG4gIG11dGF0aW9uRGF0YS5zZXRPcHRpb25zKHVwZGF0ZWRPcHRpb25zKTtcbiAgbXV0YXRpb25EYXRhLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiBtdXRhdGlvbkRhdGEuYWZ0ZXJFeGVjdXRlKCkpO1xuXG4gIHJldHVybiBtdXRhdGlvbkRhdGEuZXhlY3V0ZShyZXN1bHQpO1xufVxuIiwiaW1wb3J0IHsgT3BlcmF0aW9uVmFyaWFibGVzIH0gZnJvbSAnQGFwb2xsby9yZWFjdC1jb21tb24nO1xuaW1wb3J0IHsgdXNlU3Vic2NyaXB0aW9uIH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgeyBTdWJzY3JpcHRpb25Db21wb25lbnRPcHRpb25zIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBTdWJzY3JpcHRpb248VERhdGEgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICBwcm9wczogU3Vic2NyaXB0aW9uQ29tcG9uZW50T3B0aW9uczxURGF0YSwgVFZhcmlhYmxlcz5cbikge1xuICBjb25zdCByZXN1bHQgPSB1c2VTdWJzY3JpcHRpb24ocHJvcHMuc3Vic2NyaXB0aW9uLCBwcm9wcyk7XG4gIHJldHVybiBwcm9wcy5jaGlsZHJlbiAmJiByZXN1bHQgPyBwcm9wcy5jaGlsZHJlbihyZXN1bHQpIDogbnVsbDtcbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBTdWJzY3JpcHRpb24ge1xuICBleHBvcnQgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIHN1YnNjcmlwdGlvbjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHZhcmlhYmxlczogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgb25TdWJzY3JpcHRpb25EYXRhOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBvblN1YnNjcmlwdGlvbkNvbXBsZXRlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzaG91bGRSZXN1YnNjcmliZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ib29sXSksXG4gIH07XG59XG4iLCJpbXBvcnQgeyB1c2VDb250ZXh0LCB1c2VTdGF0ZSwgdXNlUmVmLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGdldEFwb2xsb0NvbnRleHQsIE9wZXJhdGlvblZhcmlhYmxlcyB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtY29tbW9uJztcblxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uSG9va09wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbkRhdGEgfSBmcm9tICcuL2RhdGEvU3Vic2NyaXB0aW9uRGF0YSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdWJzY3JpcHRpb248VERhdGEgPSBhbnksIFRWYXJpYWJsZXMgPSBPcGVyYXRpb25WYXJpYWJsZXM+KFxuICBzdWJzY3JpcHRpb246IERvY3VtZW50Tm9kZSxcbiAgb3B0aW9ucz86IFN1YnNjcmlwdGlvbkhvb2tPcHRpb25zPFREYXRhLCBUVmFyaWFibGVzPlxuKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KGdldEFwb2xsb0NvbnRleHQoKSk7XG4gIGNvbnN0IHVwZGF0ZWRPcHRpb25zID0gb3B0aW9uc1xuICAgID8geyAuLi5vcHRpb25zLCBzdWJzY3JpcHRpb24gfVxuICAgIDogeyBzdWJzY3JpcHRpb24gfTtcbiAgY29uc3QgW3Jlc3VsdCwgc2V0UmVzdWx0XSA9IHVzZVN0YXRlKHtcbiAgICBsb2FkaW5nOiAhdXBkYXRlZE9wdGlvbnMuc2tpcCxcbiAgICBlcnJvcjogdW5kZWZpbmVkLFxuICAgIGRhdGE6IHVuZGVmaW5lZFxuICB9KTtcblxuICBjb25zdCBzdWJzY3JpcHRpb25EYXRhUmVmID0gdXNlUmVmPFN1YnNjcmlwdGlvbkRhdGE8VERhdGEsIFRWYXJpYWJsZXM+PigpO1xuICBmdW5jdGlvbiBnZXRTdWJzY3JpcHRpb25EYXRhUmVmKCkge1xuICAgIGlmICghc3Vic2NyaXB0aW9uRGF0YVJlZi5jdXJyZW50KSB7XG4gICAgICBzdWJzY3JpcHRpb25EYXRhUmVmLmN1cnJlbnQgPSBuZXcgU3Vic2NyaXB0aW9uRGF0YTxURGF0YSwgVFZhcmlhYmxlcz4oe1xuICAgICAgICBvcHRpb25zOiB1cGRhdGVkT3B0aW9ucyxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgc2V0UmVzdWx0XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbkRhdGFSZWYuY3VycmVudDtcbiAgfVxuXG4gIGNvbnN0IHN1YnNjcmlwdGlvbkRhdGEgPSBnZXRTdWJzY3JpcHRpb25EYXRhUmVmKCk7XG4gIHN1YnNjcmlwdGlvbkRhdGEuc2V0T3B0aW9ucyh1cGRhdGVkT3B0aW9ucywgdHJ1ZSk7XG4gIHN1YnNjcmlwdGlvbkRhdGEuY29udGV4dCA9IGNvbnRleHQ7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHN1YnNjcmlwdGlvbkRhdGEuYWZ0ZXJFeGVjdXRlKCkpO1xuICB1c2VFZmZlY3QoKCkgPT4gc3Vic2NyaXB0aW9uRGF0YS5jbGVhbnVwLmJpbmQoc3Vic2NyaXB0aW9uRGF0YSksIFtdKTtcblxuICByZXR1cm4gc3Vic2NyaXB0aW9uRGF0YS5leGVjdXRlKHJlc3VsdCk7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmludGVyZmFjZSBFcnJvclByb3BzIHtcbiAgZXJyb3I6IHN0cmluZztcbn1cblxuY29uc3QgRXJyb3I6IFJlYWN0LkZDPEVycm9yUHJvcHM+ID0gKHsgZXJyb3IgfSkgPT4gPD57ZXJyb3J9PC8+O1xuZXhwb3J0IGRlZmF1bHQgRXJyb3I7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQgJy4vc2Nzcy9pbmRleC5zY3NzJztcblxuY29uc3QgTG9hZGVyOiBSZWFjdC5GQzx7IGZ1bGw/OiBib29sZWFuIH0+ID0gKHsgZnVsbCB9KSA9PiB7XG4gIGNvbnN0IGdldEhlaWdodCA9ICgpID0+IHtcbiAgICBjb25zdCBoZWFkZXJIZWlnaHQgPVxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2hlYWRlcicpICYmXG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGVhZGVyJykub2Zmc2V0SGVpZ2h0O1xuICAgIGNvbnN0IGZvb3RlckhlaWdodCA9XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZm9vdGVyJykgJiZcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmb290ZXInKS5vZmZzZXRIZWlnaHQ7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lckhlaWdodCAtIGhlYWRlckhlaWdodCAtIGZvb3RlckhlaWdodDtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwibG9hZGVyXCIgc3R5bGU9e2Z1bGwgJiYgeyBoZWlnaHQ6IGdldEhlaWdodCgpIH19PlxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJsb2FkZXJfX2l0ZW1zXCI+XG4gICAgICAgIDxzcGFuIC8+XG4gICAgICAgIDxzcGFuIC8+XG4gICAgICAgIDxzcGFuIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcbiIsIi8qIGVzbGludC1kaXNhYmxlIHJlYWN0L2pzeC1uby11bmRlZiAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFF1ZXJ5UmVzdWx0IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1jb21tb24nO1xuaW1wb3J0IHsgUXVlcnksIFF1ZXJ5Q29tcG9uZW50T3B0aW9ucyB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBGZXRjaFBvbGljeSwgQXBvbGxvUXVlcnlSZXN1bHQsIEVycm9yUG9saWN5IH0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQgeyBEb2N1bWVudE5vZGUgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IFJlcXVpcmVBdExlYXN0T25lIH0gZnJvbSAnLi90c1V0aWxzJztcbmltcG9ydCBFcnJvciBmcm9tICcuLi9jb21wb25lbnRzL2Vycm9yJztcbmltcG9ydCBMb2FkZXIgZnJvbSAnLi4vY29tcG9uZW50cy9sb2FkZXInO1xuXG5cbmZ1bmN0aW9uIG1heWJlPFQ+KGV4cDogKCkgPT4gVCwgZD86IFQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXN1bHQgPSBleHAoKTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkIDogcmVzdWx0O1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gZDtcbiAgfVxufVxuXG5pbnRlcmZhY2UgTG9hZE1vcmU8VERhdGEsIFRWYXJpYWJsZXM+IHtcbiAgbG9hZE1vcmU6IChcbiAgICBtZXJnZUZ1bmM6IChwcmV2OiBURGF0YSwgbmV4dDogVERhdGEpID0+IFREYXRhLFxuICAgIGV4dHJhVmFyaWFibGVzOiBSZXF1aXJlQXRMZWFzdE9uZTxUVmFyaWFibGVzPlxuICApID0+IFByb21pc2U8QXBvbGxvUXVlcnlSZXN1bHQ8VERhdGE+Pjtcbn1cbiAgXG5pbnRlcmZhY2UgVHlwZWRRdWVyeUlubmVyUHJvcHM8VERhdGEsIFRWYXJpYWJsZXM+IHtcbiAgY2hpbGRyZW46IChcbiAgICByZXN1bHQ6IFF1ZXJ5UmVzdWx0PFREYXRhLCBUVmFyaWFibGVzPiAmIExvYWRNb3JlPFREYXRhLCBUVmFyaWFibGVzPlxuICApID0+IFJlYWN0LlJlYWN0RWxlbWVudFxuICBkaXNwbGF5RXJyb3I/OiBib29sZWFuO1xuICBkaXNwbGF5TG9hZGVyPzogYm9vbGVhbjtcbiAgZmV0Y2hQb2xpY3k/OiBGZXRjaFBvbGljeTtcbiAgbG9hZGVyRnVsbD86IGJvb2xlYW47XG4gIHJlbmRlck9uRXJyb3I/OiBib29sZWFuO1xuICBza2lwPzogYm9vbGVhbjtcbiAgdmFyaWFibGVzPzogVFZhcmlhYmxlcztcbiAgZXJyb3JQb2xpY3k/OiBFcnJvclBvbGljeTtcbiAgYWx3YXlzUmVuZGVyPzogYm9vbGVhbjtcbiAgb25Db21wbGV0ZWQ/OiAoZGF0YTogVERhdGEpID0+IHZvaWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIFR5cGVkUXVlcnk8VERhdGEsIFRWYXJpYWJsZXM+KHF1ZXJ5OiBEb2N1bWVudE5vZGUpIHtcbiAgcmV0dXJuIChwcm9wczogVHlwZWRRdWVyeUlubmVyUHJvcHM8VERhdGEsIFRWYXJpYWJsZXM+KSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2hpbGRyZW4sXG4gICAgICBkaXNwbGF5RXJyb3IgPSB0cnVlLFxuICAgICAgZGlzcGxheUxvYWRlciA9IHRydWUsXG4gICAgICByZW5kZXJPbkVycm9yID0gZmFsc2UsXG4gICAgICBhbHdheXNSZW5kZXIgPSBmYWxzZSxcbiAgICAgIGZldGNoUG9saWN5ID0gJ2NhY2hlLWFuZC1uZXR3b3JrJyxcbiAgICAgIGVycm9yUG9saWN5LFxuICAgICAgbG9hZGVyRnVsbCxcbiAgICAgIHNraXAsXG4gICAgICB2YXJpYWJsZXMsXG4gICAgICBvbkNvbXBsZXRlZCxcbiAgICB9ID0gcHJvcHMgYXMgSlNYLkxpYnJhcnlNYW5hZ2VkQXR0cmlidXRlczxcbiAgICBRdWVyeUNvbXBvbmVudE9wdGlvbnM8VERhdGEsIFRWYXJpYWJsZXM+LFxuICAgIFR5cGVkUXVlcnlJbm5lclByb3BzPFREYXRhLCBUVmFyaWFibGVzPlxuICAgID47XG4gICAgcmV0dXJuIChcbiAgICAgIDxRdWVyeVxuICAgICAgICBxdWVyeT17cXVlcnl9XG4gICAgICAgIHZhcmlhYmxlcz17dmFyaWFibGVzfVxuICAgICAgICBza2lwPXtza2lwfVxuICAgICAgICBmZXRjaFBvbGljeT17ZmV0Y2hQb2xpY3l9XG4gICAgICAgIGVycm9yUG9saWN5PXtlcnJvclBvbGljeX1cbiAgICAgICAgb25Db21wbGV0ZWQ9e29uQ29tcGxldGVkfVxuICAgICAgPlxuICAgICAgICB7KFxuICAgICAgICAgIHF1ZXJ5RGF0YTogUXVlcnlSZXN1bHQ8VERhdGEsIFRWYXJpYWJsZXM+ICZcbiAgICAgICAgICBMb2FkTW9yZTxURGF0YSwgVFZhcmlhYmxlcz5cbiAgICAgICAgKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBlcnJvciwgbG9hZGluZywgZGF0YSwgZmV0Y2hNb3JlIH0gPSBxdWVyeURhdGE7XG4gICAgICAgICAgY29uc3QgaGFzRGF0YSA9IG1heWJlKCgpID0+ICEhT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoLCBmYWxzZSk7XG4gICAgICAgICAgY29uc3QgbG9hZE1vcmUgPSAoXG4gICAgICAgICAgICBtZXJnZUZ1bmM6IChcbiAgICAgICAgICAgICAgcHJldmlvdXNSZXN1bHRzOiBURGF0YSxcbiAgICAgICAgICAgICAgZmV0Y2hNb3JlUmVzdWx0OiBURGF0YVxuICAgICAgICAgICAgKSA9PiBURGF0YSxcbiAgICAgICAgICAgIGV4dHJhVmFyaWFibGVzOiBSZXF1aXJlQXRMZWFzdE9uZTxUVmFyaWFibGVzPlxuICAgICAgICAgICkgPT5cbiAgICAgICAgICAgIGZldGNoTW9yZSh7XG4gICAgICAgICAgICAgIHF1ZXJ5LFxuICAgICAgICAgICAgICB1cGRhdGVRdWVyeTogKHByZXZpb3VzUmVzdWx0cywgeyBmZXRjaE1vcmVSZXN1bHQgfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghZmV0Y2hNb3JlUmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcHJldmlvdXNSZXN1bHRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWVyZ2VGdW5jKHByZXZpb3VzUmVzdWx0cywgZmV0Y2hNb3JlUmVzdWx0KTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgdmFyaWFibGVzOiB7IC4uLnZhcmlhYmxlcywgLi4uZXh0cmFWYXJpYWJsZXMgfSxcbiAgICAgICAgICAgIH0pO1xuICBcbiAgICAgICAgICBpZiAoZGlzcGxheUVycm9yICYmIGVycm9yICYmICFoYXNEYXRhKSB7XG4gICAgICAgICAgICByZXR1cm4gPEVycm9yIGVycm9yPXtlcnJvci5tZXNzYWdlfSAvPjtcbiAgICAgICAgICB9XG4gIFxuICAgICAgICAgIGlmIChkaXNwbGF5TG9hZGVyICYmIGxvYWRpbmcgJiYgIWhhc0RhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiA8TG9hZGVyIGZ1bGw9e2xvYWRlckZ1bGx9IC8+O1xuICAgICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgICAgaWYgKGhhc0RhdGEgfHwgKHJlbmRlck9uRXJyb3IgJiYgZXJyb3IpIHx8IGFsd2F5c1JlbmRlcikge1xuICAgICAgICAgICAgLy8gSSB0aGluayB0aGUgY2hpbGRyZW4gaGVyZSBtaWdodCBiZSByZWZlcmluZyB0byBkaWZmZXJlbnQgdGhpbmdzLih3aHkpXG4gICAgICAgICAgICByZXR1cm4gY2hpbGRyZW4oeyAuLi5xdWVyeURhdGEsIGxvYWRNb3JlIH0pO1xuICAgICAgICAgIH1cbiAgXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH19XG4gICAgICA8L1F1ZXJ5PlxuICAgICk7XG4gIH07XG59IiwiaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7XG5pbXBvcnQgKiBhcyBHZXRCbG9nc0ZvckNhdGVnb3J5IGZyb20gJ0dlbmVyYXRlZC9CbG9nc0ZvckNhdGVnb3J5JztcbmltcG9ydCB7IFR5cGVkUXVlcnkgfSBmcm9tICcuLi8uLi9jb3JlL3F1ZXJpZXMnO1xuXG5jb25zdCBHRVRfQkxPR1NfRk9SX0NBVEVHT1JZID0gZ3FsYFxuICBxdWVyeSBCbG9nc0ZvckNhdGVnb3J5KCRjYXRlZ29yeUlkOiBTdHJpbmchKXtcbiAgICBibG9nc0ZvckNhdGVnb3J5KGNhdGVnb3J5SWQ6ICRjYXRlZ29yeUlkKSB7XG4gICAgICAgIGlkXG4gICAgICAgIGNvbnRlbnRcbiAgICB9XG4gIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBCbG9nc0ZvckNhdGVnb3J5UXVlcnkgPSBUeXBlZFF1ZXJ5PEdldEJsb2dzRm9yQ2F0ZWdvcnkuQmxvZ3NGb3JDYXRlZ29yeSwgXG5HZXRCbG9nc0ZvckNhdGVnb3J5LkJsb2dzRm9yQ2F0ZWdvcnlWYXJpYWJsZXM+KEdFVF9CTE9HU19GT1JfQ0FURUdPUlkpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0IHsgQmxvZ0xpc3RfYmxvZ3MgYXMgQmxvZ3MgfSBmcm9tICdHZW5lcmF0ZWQvQmxvZ0xpc3QnO1xuaW1wb3J0ICogYXMgR2xvYmFscyBmcm9tICcuLi8uLi8uLi9jb25zdGFudHMnO1xuXG5pbXBvcnQgeyBDdXJyZW50Q2F0ZWdvcnlDb250ZXh0IH0gZnJvbSAnLi4vY29udGV4dC9DYXRlZ29yeUNvbnRleHQnO1xuaW1wb3J0IHsgQmxvZ3NGb3JDYXRlZ29yeVF1ZXJ5IH0gZnJvbSAnLi4vcXVlcmllcyc7XG5cblxuaW50ZXJmYWNlIEJsb2dDb250ZW50UHJvcHMge1xuICBwYWdlZEJsb2dzOiBCbG9nc1xufVxuXG5leHBvcnQgY29uc3QgQmxvZ0NvbnRlbnQ6UmVhY3QuRkM8QmxvZ0NvbnRlbnRQcm9wcz4gPSAoeyBwYWdlZEJsb2dzIH0pID0+IHtcbiAgcmV0dXJuIChcbiAgICA8Q3VycmVudENhdGVnb3J5Q29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtcbiAgICAgICAgICAoeyBjdXJyZW50Q2F0ZWdvcnkgfSkgPT4ge1xuICAgICAgICAgICAgaWYoY3VycmVudENhdGVnb3J5ID09PSB1bmRlZmluZWQgfHwgY3VycmVudENhdGVnb3J5ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIGlmKHBhZ2VkQmxvZ3MuZWRnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2dzRWxlbWVudCA9ICBwYWdlZEJsb2dzLmVkZ2VzLm1hcCgoYmxvZykgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIDxwIGtleT17YmxvZy5ub2RlLmlkfT57YmxvZy5ub2RlLmNvbnRlbnR9PC9wPjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gPD57YmxvZ3NFbGVtZW50fTwvPjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gPHA+VGhlIGF1dGhvciBpcyB0b28gbGF6eSwgaGUgZG9lcyBub3QgaGF2ZSBhbnkgYmxvZ3MgY3VycnJlbnRseTwvcD47XG4gICAgICAgICAgICB9IFxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPEJsb2dzRm9yQ2F0ZWdvcnlRdWVyeVxuICAgICAgICAgICAgICAgIHZhcmlhYmxlcz17eyBjYXRlZ29yeUlkOiBjdXJyZW50Q2F0ZWdvcnkgfX1cbiAgICAgICAgICAgICAgPiBcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAoeyBkYXRhIH0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YSAmJiBkYXRhLmJsb2dzRm9yQ2F0ZWdvcnkgJiYgZGF0YS5ibG9nc0ZvckNhdGVnb3J5Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBibG9ncyA9ICBkYXRhICYmIGRhdGEuYmxvZ3NGb3JDYXRlZ29yeS5tYXAoKGJsb2cpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA8cCBrZXk9e2Jsb2cuaWR9PntibG9nLmNvbnRlbnR9PC9wPjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPD57YmxvZ3N9PC8+O1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gPHA+VGhlIGF1dGhvciBoYXMgbm90IGNyZWF0ZWQgYW55IGJsb2dzPC9wPjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIDwvQmxvZ3NGb3JDYXRlZ29yeVF1ZXJ5PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgPC9DdXJyZW50Q2F0ZWdvcnlDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5cbmV4cG9ydCBjb25zdCAgQmxvZ0RhdGVTZWxlY3RvcjogUmVhY3QuU0ZDID0gKCkgPT4ge1xuICByZXR1cm4gPHAgY2xhc3NOYW1lPVwiYmxvZ0RhdGVTZWxlY3RvclwiPiBzaG93IGFsbCBibG9ncyBmb3IgbW9udGggPC9wPjtcbn07IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy85NmE4ZDJkNjljZThiMTcwYjQ3MzMyNDFkZDAyYmVhMi5zdmdcIjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFR1eCBmcm9tICdBc3NldHMvdHV4LnN2Zyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBGb290ZXIoKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJmb290ZXJcIj5cbiAgICAgIDxpbWcgY2xhc3NOYW1lPVwiZm9vdGVyX190dXhcIiBzcmM9e1R1eH0gYWx0PVwidHV4XCIgLz5cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiIsImltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnO1xuaW1wb3J0ICogYXMgQmxvZ0xpc3RUeXBlcyBmcm9tICdHZW5lcmF0ZWQvQmxvZ0xpc3QnO1xuaW1wb3J0IHsgVHlwZWRRdWVyeSB9IGZyb20gJy4uL2NvcmUvcXVlcmllcyc7XG5cbmV4cG9ydCBjb25zdCBob21lUGFnZVF1ZXJ5ID0gZ3FsYFxucXVlcnkgQmxvZ0xpc3QoJGN1cnNvcjogU3RyaW5nKSB7XG4gICAgYmxvZ3MoZmlyc3Q6IDEwLCBhZnRlcjogJGN1cnNvcikge1xuICAgICAgZWRnZXMge1xuICAgICAgICBjdXJzb3JcbiAgICAgICAgbm9kZSB7XG4gICAgICAgICAgICBpZFxuICAgICAgICAgICAgc3VtbWFyeVxuICAgICAgICAgICAgY29udGVudFxuICAgICAgICB9XG4gICAgICB9XG4gICAgcGFnZUluZm8ge1xuICAgICAgICBoYXNQcmV2aW91c1BhZ2VcbiAgICAgICAgaGFzTmV4dFBhZ2VcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRlZ29yaWVze1xuICAgICAgICBpZFxuICAgICAgICBuYW1lXG4gICAgICAgIHN1YkNhdGVnb3JpZXMge1xuICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIG5hbWVcbiAgICAgICAgfSBcbiAgICB9XG59XG5gO1xuZXhwb3J0IGNvbnN0IEhvbWVQYWdlUXVlcnkgPSBUeXBlZFF1ZXJ5PEJsb2dMaXN0VHlwZXMuQmxvZ0xpc3QsIHt9Pihob21lUGFnZVF1ZXJ5KTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIEJsb2dDYXRlZ29yeU5hdmlnYXRvcixcbiAgQmxvZ0NvbnRlbnQsXG4gIEJsb2dEYXRlU2VsZWN0b3IsXG4gIEN1cnJlbnRDYXRlZ29yeVByb3ZpZGVyLFxufSBmcm9tICdBcHBDb21wb25lbnRzJztcbmltcG9ydCB7IEhvbWVQYWdlUXVlcnkgfSBmcm9tICcuL3F1ZXJpZXMnO1xuXG5leHBvcnQgY29uc3QgSG9tZVBhZ2U6IFJlYWN0LkZDID0gKCk9PntcbiAgcmV0dXJuIChcbiAgICA8SG9tZVBhZ2VRdWVyeT5cbiAgICAgIHtcbiAgICAgICAgKHsgZGF0YSB9KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicGFnZV9fYmxvZ1wiPlxuICAgICAgICAgICAgICA8Q3VycmVudENhdGVnb3J5UHJvdmlkZXI+XG4gICAgICAgICAgICAgICAgPEJsb2dDYXRlZ29yeU5hdmlnYXRvciBjYXRlZ29yaWVzPXtkYXRhLmNhdGVnb3JpZXN9IC8+XG4gICAgICAgICAgICAgICAgPEJsb2dDb250ZW50IHBhZ2VkQmxvZ3M9e2RhdGEuYmxvZ3N9IC8+XG4gICAgICAgICAgICAgIDwvQ3VycmVudENhdGVnb3J5UHJvdmlkZXI+XG4gICAgICAgICAgICAgIDxCbG9nRGF0ZVNlbGVjdG9yIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9IFxuICAgIH1cbiAgICA8L0hvbWVQYWdlUXVlcnk+XG5cbiAgKTtcbn07XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYXNzZXRzL2ZmZTdhMzI0OThiYTlhM2RiOWMxNTM4YzRhNzIzNzc2LnBuZ1wiOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBwcm9maWxlIGZyb20gJ0Fzc2V0cy9wcm9maWxlLnBuZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBBYm91dE1lKCkge1xuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8aW1nIGNsYXNzTmFtZT1cInByb2ZpbGVcIiBzcmM9e3Byb2ZpbGV9IGFsdD1cIlByb2ZpbGVcIiAvPlxuICAgICAgPHA+XG4gICAgICAgIEhpLDxzcGFuIHJvbGU9XCJpbWdcIiBhcmlhLWxhYmVsPVwiUGFuZGFcIj7wn5isPC9zcGFuPiEgV2VsY29tZSB0byBteSBwZXJzb25hbCBibG9nLiBNeSBuYW1lIFJ5YW4uIEkgbG92ZSBjb2RpbmcuIEkgbGlrZVxuICAgICAgICB0aGUgZmVlbGluZyBvZiBjb252ZXJ0aW5nIHRlY2hub2xvZ3kgaW50byB1c2VmdWwgcHJvZHVjdHMgdG8gaW1wcm92ZVxuICAgICAgICBwZW9wbGUncyBsaWZlcy5cbiAgICAgIDwvcD5cbiAgICAgIDxwPlxuICAgICAgICBNeSBibG9nIHdpbGwgY29udGFpbiBtYWNoaW5lIGxlYXJuaW5nLCBhbmQgZGlmZmVyZW50IGZyYW1ld29ya3Mgb2ZcbiAgICAgICAgZnJvbnRlbmQgYW5kIGJhY2tlbmQuVGhlIGNvbnRlbnQgd2lsbCB3aWxsIGJlIGNvbnRpbnVvdXNseSB1cGRhdGVkLiBTdGF5XG4gICAgICAgIHR1bmVkLlxuICAgICAgPC9wPlxuICAgIDwvPlxuICApO1xufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9BcHAuc2Nzcyc7XG5pbXBvcnQgeyBCcm93c2VyUm91dGVyIGFzIFJvdXRlciwgU3dpdGNoLCBSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuaW1wb3J0IHsgSW5NZW1vcnlDYWNoZSB9IGZyb20gJ2Fwb2xsby1jYWNoZS1pbm1lbW9yeSc7XG5pbXBvcnQgeyBIdHRwTGluayB9IGZyb20gJ2Fwb2xsby1saW5rLWh0dHAnO1xuaW1wb3J0IHsgQXBvbGxvQ2xpZW50IH0gZnJvbSAnYXBvbGxvLWNsaWVudCc7XG5pbXBvcnQgeyBBcG9sbG9Qcm92aWRlciB9IGZyb20gJ0BhcG9sbG8vcmVhY3QtaG9va3MnO1xuaW1wb3J0IHsgYXBpVXJsIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSGVhZGVyLCBGb290ZXIsIFF1aWxsRWRpdG9yIH0gZnJvbSAnLi9jb21wb25lbnRzJztcbmltcG9ydCB7IEhvbWVQYWdlLCBBYm91dE1lIH0gZnJvbSAnLi9wYWdlcyc7XG5cblxuY29uc3QgY2FjaGUgPSBuZXcgSW5NZW1vcnlDYWNoZSgpO1xuY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gIGxpbms6IG5ldyBIdHRwTGluayh7XG4gICAgdXJpOiBgJHthcGlVcmwgIH0vZ3JhcGhxbGBcbiAgfSksXG4gIGNhY2hlLFxufSk7XG5cbmNhY2hlLndyaXRlRGF0YSh7XG4gIGRhdGE6IHtcbiAgICBcbiAgfSxcbn0pO1xuXG5mdW5jdGlvbiBBcHAoKSB7XG4gIHJldHVybiAoXG4gICAgPEFwb2xsb1Byb3ZpZGVyIGNsaWVudD17Y2xpZW50fT5cbiAgICAgIDxSb3V0ZXI+XG4gICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgPFN3aXRjaD5cbiAgICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD1cIi9cIj5cbiAgICAgICAgICAgIDxIb21lUGFnZSAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYWJvdXRcIj5cbiAgICAgICAgICAgIDxBYm91dE1lIC8+XG4gICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIi9jcmVhdGVcIj5cbiAgICAgICAgICAgIDxRdWlsbEVkaXRvciAvPlxuICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgIDwvU3dpdGNoPlxuICAgICAgICA8Rm9vdGVyIC8+XG4gICAgICA8L1JvdXRlcj5cbiAgICA8L0Fwb2xsb1Byb3ZpZGVyPlxuICApO1xufVxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0ICcuL2luZGV4LnNjc3MnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgKiBhcyBzZXJ2aWNlV29ya2VyIGZyb20gJy4vc2VydmljZVdvcmtlcic7XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKTtcblxuLy8gSWYgeW91IHdhbnQgeW91ciBhcHAgdG8gd29yayBvZmZsaW5lIGFuZCBsb2FkIGZhc3RlciwgeW91IGNhbiBjaGFuZ2Vcbi8vIHVucmVnaXN0ZXIoKSB0byByZWdpc3RlcigpIGJlbG93LiBOb3RlIHRoaXMgY29tZXMgd2l0aCBzb21lIHBpdGZhbGxzLlxuLy8gTGVhcm4gbW9yZSBhYm91dCBzZXJ2aWNlIHdvcmtlcnM6IGh0dHBzOi8vYml0Lmx5L0NSQS1QV0FcbnNlcnZpY2VXb3JrZXIudW5yZWdpc3RlcigpO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==